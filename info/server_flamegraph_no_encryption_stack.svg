<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="341.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="341.00"> </text><svg id="frames" x="10" width="1180" total_samples="122"><g><title>[[stack]] (1 samples, 0.82%)</title><rect x="0.0000%" y="277" width="0.8197%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>recvfrom (1 samples, 0.82%)</title><rect x="0.0000%" y="261" width="0.8197%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.82%)</title><rect x="0.0000%" y="245" width="0.8197%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="255.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.82%)</title><rect x="4.0984%" y="261" width="0.8197%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="1"/><text x="4.3484%" y="271.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.82%)</title><rect x="4.0984%" y="245" width="0.8197%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="1"/><text x="4.3484%" y="255.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.82%)</title><rect x="4.0984%" y="229" width="0.8197%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="1"/><text x="4.3484%" y="239.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 4.92%)</title><rect x="0.8197%" y="277" width="4.9180%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="6"/><text x="1.0697%" y="287.50">[ld-li..</text></g><g><title>[unknown] (1 samples, 0.82%)</title><rect x="4.9180%" y="261" width="0.8197%" height="15" fill="rgb(228,23,34)" fg:x="6" fg:w="1"/><text x="5.1680%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 1.64%)</title><rect x="5.7377%" y="245" width="1.6393%" height="15" fill="rgb(218,30,26)" fg:x="7" fg:w="2"/><text x="5.9877%" y="255.50"></text></g><g><title>&lt;heapless::vec::Vec&lt;T,_&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 1.64%)</title><rect x="5.7377%" y="229" width="1.6393%" height="15" fill="rgb(220,122,19)" fg:x="7" fg:w="2"/><text x="5.9877%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::chain::Chain&lt;core::array::iter::IntoIter&lt;u8,2_usize&gt;,heapless::vec::IntoIter&lt;u8,1420_usize&gt;&gt;&gt; (1 samples, 0.82%)</title><rect x="6.5574%" y="213" width="0.8197%" height="15" fill="rgb(250,228,42)" fg:x="8" fg:w="1"/><text x="6.8074%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;heapless::vec::IntoIter&lt;u8,1420_usize&gt;&gt;&gt; (1 samples, 0.82%)</title><rect x="6.5574%" y="197" width="0.8197%" height="15" fill="rgb(240,193,28)" fg:x="8" fg:w="1"/><text x="6.8074%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;heapless::vec::IntoIter&lt;u8,1420_usize&gt;&gt; (1 samples, 0.82%)</title><rect x="6.5574%" y="181" width="0.8197%" height="15" fill="rgb(216,20,37)" fg:x="8" fg:w="1"/><text x="6.8074%" y="191.50"></text></g><g><title>&lt;heapless::vec::IntoIter&lt;T,_&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.82%)</title><rect x="6.5574%" y="165" width="0.8197%" height="15" fill="rgb(206,188,39)" fg:x="8" fg:w="1"/><text x="6.8074%" y="175.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.82%)</title><rect x="6.5574%" y="149" width="0.8197%" height="15" fill="rgb(217,207,13)" fg:x="8" fg:w="1"/><text x="6.8074%" y="159.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.82%)</title><rect x="6.5574%" y="133" width="0.8197%" height="15" fill="rgb(231,73,38)" fg:x="8" fg:w="1"/><text x="6.8074%" y="143.50"></text></g><g><title>&lt;tftp::packet::Packet as tftp::packet::ByteConverter&gt;::to_bytes (3 samples, 2.46%)</title><rect x="5.7377%" y="261" width="2.4590%" height="15" fill="rgb(225,20,46)" fg:x="7" fg:w="3"/><text x="5.9877%" y="271.50">&lt;t..</text></g><g><title>tftp::packet::PacketType::to_bytes (1 samples, 0.82%)</title><rect x="7.3770%" y="245" width="0.8197%" height="15" fill="rgb(210,31,41)" fg:x="9" fg:w="1"/><text x="7.6270%" y="255.50"></text></g><g><title>__rust_probestack (1 samples, 0.82%)</title><rect x="14.7541%" y="229" width="0.8197%" height="15" fill="rgb(221,200,47)" fg:x="18" fg:w="1"/><text x="15.0041%" y="239.50"></text></g><g><title>&lt;tftp::packet::Packet as tftp::packet::ByteConverter&gt;::from_bytes (3 samples, 2.46%)</title><rect x="13.9344%" y="245" width="2.4590%" height="15" fill="rgb(226,26,5)" fg:x="17" fg:w="3"/><text x="14.1844%" y="255.50">&lt;t..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.82%)</title><rect x="15.5738%" y="229" width="0.8197%" height="15" fill="rgb(249,33,26)" fg:x="19" fg:w="1"/><text x="15.8238%" y="239.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.82%)</title><rect x="16.3934%" y="229" width="0.8197%" height="15" fill="rgb(235,183,28)" fg:x="20" fg:w="1"/><text x="16.6434%" y="239.50"></text></g><g><title>&lt;heapless::vec::Vec&lt;T,_&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.82%)</title><rect x="17.2131%" y="229" width="0.8197%" height="15" fill="rgb(221,5,38)" fg:x="21" fg:w="1"/><text x="17.4631%" y="239.50"></text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::as_mut_slice (1 samples, 0.82%)</title><rect x="17.2131%" y="213" width="0.8197%" height="15" fill="rgb(247,18,42)" fg:x="21" fg:w="1"/><text x="17.4631%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 1.64%)</title><rect x="18.8525%" y="181" width="1.6393%" height="15" fill="rgb(241,131,45)" fg:x="23" fg:w="2"/><text x="19.1025%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 1.64%)</title><rect x="18.8525%" y="165" width="1.6393%" height="15" fill="rgb(249,31,29)" fg:x="23" fg:w="2"/><text x="19.1025%" y="175.50"></text></g><g><title>cfree (2 samples, 1.64%)</title><rect x="18.8525%" y="149" width="1.6393%" height="15" fill="rgb(225,111,53)" fg:x="23" fg:w="2"/><text x="19.1025%" y="159.50"></text></g><g><title>[libc.so.6] (2 samples, 1.64%)</title><rect x="18.8525%" y="133" width="1.6393%" height="15" fill="rgb(238,160,17)" fg:x="23" fg:w="2"/><text x="19.1025%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;polling::Event&gt;&gt; (5 samples, 4.10%)</title><rect x="18.0328%" y="229" width="4.0984%" height="15" fill="rgb(214,148,48)" fg:x="22" fg:w="5"/><text x="18.2828%" y="239.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;polling::Event&gt;&gt; (4 samples, 3.28%)</title><rect x="18.8525%" y="213" width="3.2787%" height="15" fill="rgb(232,36,49)" fg:x="23" fg:w="4"/><text x="19.1025%" y="223.50">cor..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 3.28%)</title><rect x="18.8525%" y="197" width="3.2787%" height="15" fill="rgb(209,103,24)" fg:x="23" fg:w="4"/><text x="19.1025%" y="207.50">&lt;al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 1.64%)</title><rect x="20.4918%" y="181" width="1.6393%" height="15" fill="rgb(229,88,8)" fg:x="25" fg:w="2"/><text x="20.7418%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.82%)</title><rect x="21.3115%" y="165" width="0.8197%" height="15" fill="rgb(213,181,19)" fg:x="26" fg:w="1"/><text x="21.5615%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.82%)</title><rect x="21.3115%" y="149" width="0.8197%" height="15" fill="rgb(254,191,54)" fg:x="26" fg:w="1"/><text x="21.5615%" y="159.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.82%)</title><rect x="22.1311%" y="229" width="0.8197%" height="15" fill="rgb(241,83,37)" fg:x="27" fg:w="1"/><text x="22.3811%" y="239.50"></text></g><g><title>memcpy (1 samples, 0.82%)</title><rect x="22.1311%" y="213" width="0.8197%" height="15" fill="rgb(233,36,39)" fg:x="27" fg:w="1"/><text x="22.3811%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::Error&gt; (1 samples, 0.82%)</title><rect x="23.7705%" y="181" width="0.8197%" height="15" fill="rgb(226,3,54)" fg:x="29" fg:w="1"/><text x="24.0205%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::repr_bitpacked::Repr&gt; (1 samples, 0.82%)</title><rect x="23.7705%" y="165" width="0.8197%" height="15" fill="rgb(245,192,40)" fg:x="29" fg:w="1"/><text x="24.0205%" y="175.50"></text></g><g><title>&lt;std::io::error::repr_bitpacked::Repr as core::ops::drop::Drop&gt;::drop (1 samples, 0.82%)</title><rect x="23.7705%" y="149" width="0.8197%" height="15" fill="rgb(238,167,29)" fg:x="29" fg:w="1"/><text x="24.0205%" y="159.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (3 samples, 2.46%)</title><rect x="22.9508%" y="229" width="2.4590%" height="15" fill="rgb(232,182,51)" fg:x="28" fg:w="3"/><text x="23.2008%" y="239.50">co..</text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 1.64%)</title><rect x="23.7705%" y="213" width="1.6393%" height="15" fill="rgb(231,60,39)" fg:x="29" fg:w="2"/><text x="24.0205%" y="223.50"></text></g><g><title>tftp::io::from_io_err (2 samples, 1.64%)</title><rect x="23.7705%" y="197" width="1.6393%" height="15" fill="rgb(208,69,12)" fg:x="29" fg:w="2"/><text x="24.0205%" y="207.50"></text></g><g><title>std::io::error::Error::kind (1 samples, 0.82%)</title><rect x="24.5902%" y="181" width="0.8197%" height="15" fill="rgb(235,93,37)" fg:x="30" fg:w="1"/><text x="24.8402%" y="191.50"></text></g><g><title>log::max_level (1 samples, 0.82%)</title><rect x="25.4098%" y="197" width="0.8197%" height="15" fill="rgb(213,116,39)" fg:x="31" fg:w="1"/><text x="25.6598%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.82%)</title><rect x="25.4098%" y="181" width="0.8197%" height="15" fill="rgb(222,207,29)" fg:x="31" fg:w="1"/><text x="25.6598%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.82%)</title><rect x="25.4098%" y="165" width="0.8197%" height="15" fill="rgb(206,96,30)" fg:x="31" fg:w="1"/><text x="25.6598%" y="175.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.82%)</title><rect x="26.2295%" y="181" width="0.8197%" height="15" fill="rgb(218,138,4)" fg:x="32" fg:w="1"/><text x="26.4795%" y="191.50"></text></g><g><title>polling::Poller::modify (4 samples, 3.28%)</title><rect x="25.4098%" y="229" width="3.2787%" height="15" fill="rgb(250,191,14)" fg:x="31" fg:w="4"/><text x="25.6598%" y="239.50">pol..</text></g><g><title>polling::epoll::Poller::modify (4 samples, 3.28%)</title><rect x="25.4098%" y="213" width="3.2787%" height="15" fill="rgb(239,60,40)" fg:x="31" fg:w="4"/><text x="25.6598%" y="223.50">pol..</text></g><g><title>polling::epoll::Poller::ctl (3 samples, 2.46%)</title><rect x="26.2295%" y="197" width="2.4590%" height="15" fill="rgb(206,27,48)" fg:x="32" fg:w="3"/><text x="26.4795%" y="207.50">po..</text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 1.64%)</title><rect x="27.0492%" y="181" width="1.6393%" height="15" fill="rgb(225,35,8)" fg:x="33" fg:w="2"/><text x="27.2992%" y="191.50"></text></g><g><title>polling::epoll::Poller::ctl::{{closure}} (1 samples, 0.82%)</title><rect x="27.8689%" y="165" width="0.8197%" height="15" fill="rgb(250,213,24)" fg:x="34" fg:w="1"/><text x="28.1189%" y="175.50"></text></g><g><title>polling::epoll::read_flags (1 samples, 0.82%)</title><rect x="27.8689%" y="149" width="0.8197%" height="15" fill="rgb(247,123,22)" fg:x="34" fg:w="1"/><text x="28.1189%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.82%)</title><rect x="30.3279%" y="85" width="0.8197%" height="15" fill="rgb(231,138,38)" fg:x="37" fg:w="1"/><text x="30.5779%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.82%)</title><rect x="30.3279%" y="69" width="0.8197%" height="15" fill="rgb(231,145,46)" fg:x="37" fg:w="1"/><text x="30.5779%" y="79.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.82%)</title><rect x="30.3279%" y="53" width="0.8197%" height="15" fill="rgb(251,118,11)" fg:x="37" fg:w="1"/><text x="30.5779%" y="63.50"></text></g><g><title>__rust_alloc (1 samples, 0.82%)</title><rect x="30.3279%" y="37" width="0.8197%" height="15" fill="rgb(217,147,25)" fg:x="37" fg:w="1"/><text x="30.5779%" y="47.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 1.64%)</title><rect x="30.3279%" y="101" width="1.6393%" height="15" fill="rgb(247,81,37)" fg:x="37" fg:w="2"/><text x="30.5779%" y="111.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.82%)</title><rect x="31.1475%" y="85" width="0.8197%" height="15" fill="rgb(209,12,38)" fg:x="38" fg:w="1"/><text x="31.3975%" y="95.50"></text></g><g><title>core::cmp::max (1 samples, 0.82%)</title><rect x="31.9672%" y="101" width="0.8197%" height="15" fill="rgb(227,1,9)" fg:x="39" fg:w="1"/><text x="32.2172%" y="111.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.82%)</title><rect x="31.9672%" y="85" width="0.8197%" height="15" fill="rgb(248,47,43)" fg:x="39" fg:w="1"/><text x="32.2172%" y="95.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.82%)</title><rect x="31.9672%" y="69" width="0.8197%" height="15" fill="rgb(221,10,30)" fg:x="39" fg:w="1"/><text x="32.2172%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (6 samples, 4.92%)</title><rect x="28.6885%" y="213" width="4.9180%" height="15" fill="rgb(210,229,1)" fg:x="35" fg:w="6"/><text x="28.9385%" y="223.50">&lt;alloc..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (6 samples, 4.92%)</title><rect x="28.6885%" y="197" width="4.9180%" height="15" fill="rgb(222,148,37)" fg:x="35" fg:w="6"/><text x="28.9385%" y="207.50">&lt;alloc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (6 samples, 4.92%)</title><rect x="28.6885%" y="181" width="4.9180%" height="15" fill="rgb(234,67,33)" fg:x="35" fg:w="6"/><text x="28.9385%" y="191.50">alloc:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (5 samples, 4.10%)</title><rect x="29.5082%" y="165" width="4.0984%" height="15" fill="rgb(247,98,35)" fg:x="36" fg:w="5"/><text x="29.7582%" y="175.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 4.10%)</title><rect x="29.5082%" y="149" width="4.0984%" height="15" fill="rgb(247,138,52)" fg:x="36" fg:w="5"/><text x="29.7582%" y="159.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 4.10%)</title><rect x="29.5082%" y="133" width="4.0984%" height="15" fill="rgb(213,79,30)" fg:x="36" fg:w="5"/><text x="29.7582%" y="143.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 4.10%)</title><rect x="29.5082%" y="117" width="4.0984%" height="15" fill="rgb(246,177,23)" fg:x="36" fg:w="5"/><text x="29.7582%" y="127.50">allo..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.82%)</title><rect x="32.7869%" y="101" width="0.8197%" height="15" fill="rgb(230,62,27)" fg:x="40" fg:w="1"/><text x="33.0369%" y="111.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.82%)</title><rect x="32.7869%" y="85" width="0.8197%" height="15" fill="rgb(216,154,8)" fg:x="40" fg:w="1"/><text x="33.0369%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.82%)</title><rect x="33.6066%" y="213" width="0.8197%" height="15" fill="rgb(244,35,45)" fg:x="41" fg:w="1"/><text x="33.8566%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;polling::epoll::Events&gt;&gt; (1 samples, 0.82%)</title><rect x="34.4262%" y="213" width="0.8197%" height="15" fill="rgb(251,115,12)" fg:x="42" fg:w="1"/><text x="34.6762%" y="223.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.82%)</title><rect x="34.4262%" y="197" width="0.8197%" height="15" fill="rgb(240,54,50)" fg:x="42" fg:w="1"/><text x="34.6762%" y="207.50"></text></g><g><title>std::sync::poison::Flag::done (1 samples, 0.82%)</title><rect x="34.4262%" y="181" width="0.8197%" height="15" fill="rgb(233,84,52)" fg:x="42" fg:w="1"/><text x="34.6762%" y="191.50"></text></g><g><title>std::thread::panicking (1 samples, 0.82%)</title><rect x="34.4262%" y="165" width="0.8197%" height="15" fill="rgb(207,117,47)" fg:x="42" fg:w="1"/><text x="34.6762%" y="175.50"></text></g><g><title>std::panicking::panicking (1 samples, 0.82%)</title><rect x="34.4262%" y="149" width="0.8197%" height="15" fill="rgb(249,43,39)" fg:x="42" fg:w="1"/><text x="34.6762%" y="159.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (1 samples, 0.82%)</title><rect x="34.4262%" y="133" width="0.8197%" height="15" fill="rgb(209,38,44)" fg:x="42" fg:w="1"/><text x="34.6762%" y="143.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.82%)</title><rect x="34.4262%" y="117" width="0.8197%" height="15" fill="rgb(236,212,23)" fg:x="42" fg:w="1"/><text x="34.6762%" y="127.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.82%)</title><rect x="34.4262%" y="101" width="0.8197%" height="15" fill="rgb(242,79,21)" fg:x="42" fg:w="1"/><text x="34.6762%" y="111.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (2 samples, 1.64%)</title><rect x="35.2459%" y="213" width="1.6393%" height="15" fill="rgb(211,96,35)" fg:x="43" fg:w="2"/><text x="35.4959%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_swap (2 samples, 1.64%)</title><rect x="35.2459%" y="197" width="1.6393%" height="15" fill="rgb(253,215,40)" fg:x="43" fg:w="2"/><text x="35.4959%" y="207.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.82%)</title><rect x="38.5246%" y="197" width="0.8197%" height="15" fill="rgb(211,81,21)" fg:x="47" fg:w="1"/><text x="38.7746%" y="207.50"></text></g><g><title>[libc.so.6] (1 samples, 0.82%)</title><rect x="39.3443%" y="197" width="0.8197%" height="15" fill="rgb(208,190,38)" fg:x="48" fg:w="1"/><text x="39.5943%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;isize,std::io::error::Error&gt;&gt; (1 samples, 0.82%)</title><rect x="40.1639%" y="197" width="0.8197%" height="15" fill="rgb(235,213,38)" fg:x="49" fg:w="1"/><text x="40.4139%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::Error&gt; (1 samples, 0.82%)</title><rect x="40.1639%" y="181" width="0.8197%" height="15" fill="rgb(237,122,38)" fg:x="49" fg:w="1"/><text x="40.4139%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::repr_bitpacked::Repr&gt; (1 samples, 0.82%)</title><rect x="40.1639%" y="165" width="0.8197%" height="15" fill="rgb(244,218,35)" fg:x="49" fg:w="1"/><text x="40.4139%" y="175.50"></text></g><g><title>&lt;std::io::error::repr_bitpacked::Repr as core::ops::drop::Drop&gt;::drop (1 samples, 0.82%)</title><rect x="40.1639%" y="149" width="0.8197%" height="15" fill="rgb(240,68,47)" fg:x="49" fg:w="1"/><text x="40.4139%" y="159.50"></text></g><g><title>epoll_wait (24 samples, 19.67%)</title><rect x="40.9836%" y="197" width="19.6721%" height="15" fill="rgb(210,16,53)" fg:x="50" fg:w="24"/><text x="41.2336%" y="207.50">epoll_wait</text></g><g><title>log::max_level (2 samples, 1.64%)</title><rect x="60.6557%" y="197" width="1.6393%" height="15" fill="rgb(235,124,12)" fg:x="74" fg:w="2"/><text x="60.9057%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.82%)</title><rect x="61.4754%" y="181" width="0.8197%" height="15" fill="rgb(224,169,11)" fg:x="75" fg:w="1"/><text x="61.7254%" y="191.50"></text></g><g><title>polling::epoll::Poller::modify (2 samples, 1.64%)</title><rect x="62.2951%" y="197" width="1.6393%" height="15" fill="rgb(250,166,2)" fg:x="76" fg:w="2"/><text x="62.5451%" y="207.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::le (1 samples, 0.82%)</title><rect x="63.1148%" y="181" width="0.8197%" height="15" fill="rgb(242,216,29)" fg:x="77" fg:w="1"/><text x="63.3648%" y="191.50"></text></g><g><title>polling::epoll::Poller::wait (35 samples, 28.69%)</title><rect x="36.8852%" y="213" width="28.6885%" height="15" fill="rgb(230,116,27)" fg:x="45" fg:w="35"/><text x="37.1352%" y="223.50">polling::epoll::Poller::wait</text></g><g><title>std::io::error::Error::last_os_error (2 samples, 1.64%)</title><rect x="63.9344%" y="197" width="1.6393%" height="15" fill="rgb(228,99,48)" fg:x="78" fg:w="2"/><text x="64.1844%" y="207.50"></text></g><g><title>std::sys::unix::os::errno (2 samples, 1.64%)</title><rect x="63.9344%" y="181" width="1.6393%" height="15" fill="rgb(253,11,6)" fg:x="78" fg:w="2"/><text x="64.1844%" y="191.50"></text></g><g><title>__errno_location (2 samples, 1.64%)</title><rect x="63.9344%" y="165" width="1.6393%" height="15" fill="rgb(247,143,39)" fg:x="78" fg:w="2"/><text x="64.1844%" y="175.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (1 samples, 0.82%)</title><rect x="65.5738%" y="197" width="0.8197%" height="15" fill="rgb(236,97,10)" fg:x="80" fg:w="1"/><text x="65.8238%" y="207.50"></text></g><g><title>std::sync::poison::Flag::guard (1 samples, 0.82%)</title><rect x="65.5738%" y="181" width="0.8197%" height="15" fill="rgb(233,208,19)" fg:x="80" fg:w="1"/><text x="65.8238%" y="191.50"></text></g><g><title>std::thread::panicking (1 samples, 0.82%)</title><rect x="65.5738%" y="165" width="0.8197%" height="15" fill="rgb(216,164,2)" fg:x="80" fg:w="1"/><text x="65.8238%" y="175.50"></text></g><g><title>std::panicking::panicking (1 samples, 0.82%)</title><rect x="65.5738%" y="149" width="0.8197%" height="15" fill="rgb(220,129,5)" fg:x="80" fg:w="1"/><text x="65.8238%" y="159.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (1 samples, 0.82%)</title><rect x="65.5738%" y="133" width="0.8197%" height="15" fill="rgb(242,17,10)" fg:x="80" fg:w="1"/><text x="65.8238%" y="143.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.82%)</title><rect x="65.5738%" y="117" width="0.8197%" height="15" fill="rgb(242,107,0)" fg:x="80" fg:w="1"/><text x="65.8238%" y="127.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.82%)</title><rect x="65.5738%" y="101" width="0.8197%" height="15" fill="rgb(251,28,31)" fg:x="80" fg:w="1"/><text x="65.8238%" y="111.50"></text></g><g><title>&lt;tftp::socket::StdSocket as tftp::socket::Socket&gt;::recv_from (63 samples, 51.64%)</title><rect x="16.3934%" y="245" width="51.6393%" height="15" fill="rgb(233,223,10)" fg:x="20" fg:w="63"/><text x="16.6434%" y="255.50">&lt;tftp::socket::StdSocket as tftp::socket::Socket&gt;::recv_from</text></g><g><title>polling::Poller::wait (48 samples, 39.34%)</title><rect x="28.6885%" y="229" width="39.3443%" height="15" fill="rgb(215,21,27)" fg:x="35" fg:w="48"/><text x="28.9385%" y="239.50">polling::Poller::wait</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (3 samples, 2.46%)</title><rect x="65.5738%" y="213" width="2.4590%" height="15" fill="rgb(232,23,21)" fg:x="80" fg:w="3"/><text x="65.8238%" y="223.50">st..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::try_lock (2 samples, 1.64%)</title><rect x="66.3934%" y="197" width="1.6393%" height="15" fill="rgb(244,5,23)" fg:x="81" fg:w="2"/><text x="66.6434%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.82%)</title><rect x="67.2131%" y="181" width="0.8197%" height="15" fill="rgb(226,81,46)" fg:x="82" fg:w="1"/><text x="67.4631%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.82%)</title><rect x="67.2131%" y="165" width="0.8197%" height="15" fill="rgb(247,70,30)" fg:x="82" fg:w="1"/><text x="67.4631%" y="175.50"></text></g><g><title>core::time::Duration::from_millis (1 samples, 0.82%)</title><rect x="68.0328%" y="245" width="0.8197%" height="15" fill="rgb(212,68,19)" fg:x="83" fg:w="1"/><text x="68.2828%" y="255.50"></text></g><g><title>core::time::Duration::new (1 samples, 0.82%)</title><rect x="68.0328%" y="229" width="0.8197%" height="15" fill="rgb(240,187,13)" fg:x="83" fg:w="1"/><text x="68.2828%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::checked_add (1 samples, 0.82%)</title><rect x="68.0328%" y="213" width="0.8197%" height="15" fill="rgb(223,113,26)" fg:x="83" fg:w="1"/><text x="68.2828%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (1 samples, 0.82%)</title><rect x="68.0328%" y="197" width="0.8197%" height="15" fill="rgb(206,192,2)" fg:x="83" fg:w="1"/><text x="68.2828%" y="207.50"></text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::truncate (1 samples, 0.82%)</title><rect x="68.8525%" y="245" width="0.8197%" height="15" fill="rgb(241,108,4)" fg:x="84" fg:w="1"/><text x="69.1025%" y="255.50"></text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::as_mut_ptr (1 samples, 0.82%)</title><rect x="68.8525%" y="229" width="0.8197%" height="15" fill="rgb(247,173,49)" fg:x="84" fg:w="1"/><text x="69.1025%" y="239.50"></text></g><g><title>log::__private_api_log (1 samples, 0.82%)</title><rect x="69.6721%" y="245" width="0.8197%" height="15" fill="rgb(224,114,35)" fg:x="85" fg:w="1"/><text x="69.9221%" y="255.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (1 samples, 0.82%)</title><rect x="69.6721%" y="229" width="0.8197%" height="15" fill="rgb(245,159,27)" fg:x="85" fg:w="1"/><text x="69.9221%" y="239.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.82%)</title><rect x="69.6721%" y="213" width="0.8197%" height="15" fill="rgb(245,172,44)" fg:x="85" fg:w="1"/><text x="69.9221%" y="223.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (1 samples, 0.82%)</title><rect x="69.6721%" y="197" width="0.8197%" height="15" fill="rgb(236,23,11)" fg:x="85" fg:w="1"/><text x="69.9221%" y="207.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (1 samples, 0.82%)</title><rect x="69.6721%" y="181" width="0.8197%" height="15" fill="rgb(205,117,38)" fg:x="85" fg:w="1"/><text x="69.9221%" y="191.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (1 samples, 0.82%)</title><rect x="69.6721%" y="165" width="0.8197%" height="15" fill="rgb(237,72,25)" fg:x="85" fg:w="1"/><text x="69.9221%" y="175.50"></text></g><g><title>env_logger::fmt::Builder::build::{{closure}} (1 samples, 0.82%)</title><rect x="69.6721%" y="149" width="0.8197%" height="15" fill="rgb(244,70,9)" fg:x="85" fg:w="1"/><text x="69.9221%" y="159.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (1 samples, 0.82%)</title><rect x="69.6721%" y="133" width="0.8197%" height="15" fill="rgb(217,125,39)" fg:x="85" fg:w="1"/><text x="69.9221%" y="143.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_level (1 samples, 0.82%)</title><rect x="69.6721%" y="117" width="0.8197%" height="15" fill="rgb(235,36,10)" fg:x="85" fg:w="1"/><text x="69.9221%" y="127.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (1 samples, 0.82%)</title><rect x="69.6721%" y="101" width="0.8197%" height="15" fill="rgb(251,123,47)" fg:x="85" fg:w="1"/><text x="69.9221%" y="111.50"></text></g><g><title>log::max_level (2 samples, 1.64%)</title><rect x="70.4918%" y="245" width="1.6393%" height="15" fill="rgb(221,13,13)" fg:x="86" fg:w="2"/><text x="70.7418%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 1.64%)</title><rect x="70.4918%" y="229" width="1.6393%" height="15" fill="rgb(238,131,9)" fg:x="86" fg:w="2"/><text x="70.7418%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.82%)</title><rect x="71.3115%" y="213" width="0.8197%" height="15" fill="rgb(211,50,8)" fg:x="87" fg:w="1"/><text x="71.5615%" y="223.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3 samples, 2.46%)</title><rect x="72.1311%" y="213" width="2.4590%" height="15" fill="rgb(245,182,24)" fg:x="88" fg:w="3"/><text x="72.3811%" y="223.50">co..</text></g><g><title>tftp::instant_callback::{{closure}} (2 samples, 1.64%)</title><rect x="72.9508%" y="197" width="1.6393%" height="15" fill="rgb(242,14,37)" fg:x="89" fg:w="2"/><text x="73.2008%" y="207.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 1.64%)</title><rect x="72.9508%" y="181" width="1.6393%" height="15" fill="rgb(246,228,12)" fg:x="89" fg:w="2"/><text x="73.2008%" y="191.50"></text></g><g><title>clock_gettime (2 samples, 1.64%)</title><rect x="72.9508%" y="165" width="1.6393%" height="15" fill="rgb(213,55,15)" fg:x="89" fg:w="2"/><text x="73.2008%" y="175.50"></text></g><g><title>__vdso_clock_gettime (2 samples, 1.64%)</title><rect x="72.9508%" y="149" width="1.6393%" height="15" fill="rgb(209,9,3)" fg:x="89" fg:w="2"/><text x="73.2008%" y="159.50"></text></g><g><title>[[vdso]] (1 samples, 0.82%)</title><rect x="73.7705%" y="133" width="0.8197%" height="15" fill="rgb(230,59,30)" fg:x="90" fg:w="1"/><text x="74.0205%" y="143.50"></text></g><g><title>tftp::instant_callback (4 samples, 3.28%)</title><rect x="72.1311%" y="245" width="3.2787%" height="15" fill="rgb(209,121,21)" fg:x="88" fg:w="4"/><text x="72.3811%" y="255.50">tft..</text></g><g><title>tftp::std_compat::time::Instant::from_time (4 samples, 3.28%)</title><rect x="72.1311%" y="229" width="3.2787%" height="15" fill="rgb(220,109,13)" fg:x="88" fg:w="4"/><text x="72.3811%" y="239.50">tft..</text></g><g><title>core::time::Duration::from_micros (1 samples, 0.82%)</title><rect x="74.5902%" y="213" width="0.8197%" height="15" fill="rgb(232,18,1)" fg:x="91" fg:w="1"/><text x="74.8402%" y="223.50"></text></g><g><title>core::time::Duration::new (1 samples, 0.82%)</title><rect x="74.5902%" y="197" width="0.8197%" height="15" fill="rgb(215,41,42)" fg:x="91" fg:w="1"/><text x="74.8402%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::checked_add (1 samples, 0.82%)</title><rect x="74.5902%" y="181" width="0.8197%" height="15" fill="rgb(224,123,36)" fg:x="91" fg:w="1"/><text x="74.8402%" y="191.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.82%)</title><rect x="75.4098%" y="229" width="0.8197%" height="15" fill="rgb(240,125,3)" fg:x="92" fg:w="1"/><text x="75.6598%" y="239.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::as_slice (1 samples, 0.82%)</title><rect x="75.4098%" y="213" width="0.8197%" height="15" fill="rgb(205,98,50)" fg:x="92" fg:w="1"/><text x="75.6598%" y="223.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::as_slice (1 samples, 0.82%)</title><rect x="75.4098%" y="197" width="0.8197%" height="15" fill="rgb(205,185,37)" fg:x="92" fg:w="1"/><text x="75.6598%" y="207.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.82%)</title><rect x="75.4098%" y="181" width="0.8197%" height="15" fill="rgb(238,207,15)" fg:x="92" fg:w="1"/><text x="75.6598%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (3 samples, 2.46%)</title><rect x="76.2295%" y="229" width="2.4590%" height="15" fill="rgb(213,199,42)" fg:x="93" fg:w="3"/><text x="76.4795%" y="239.50">&lt;c..</text></g><g><title>tftp::map::Map&lt;K,V,_&gt;::entry::{{closure}} (1 samples, 0.82%)</title><rect x="77.8689%" y="213" width="0.8197%" height="15" fill="rgb(235,201,11)" fg:x="95" fg:w="1"/><text x="78.1189%" y="223.50"></text></g><g><title>tftp::map::Map&lt;K,V,_&gt;::entry (5 samples, 4.10%)</title><rect x="75.4098%" y="245" width="4.0984%" height="15" fill="rgb(207,46,11)" fg:x="92" fg:w="5"/><text x="75.6598%" y="255.50">tftp..</text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (1 samples, 0.82%)</title><rect x="78.6885%" y="229" width="0.8197%" height="15" fill="rgb(241,35,35)" fg:x="96" fg:w="1"/><text x="78.9385%" y="239.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (1 samples, 0.82%)</title><rect x="78.6885%" y="213" width="0.8197%" height="15" fill="rgb(243,32,47)" fg:x="96" fg:w="1"/><text x="78.9385%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (1 samples, 0.82%)</title><rect x="78.6885%" y="197" width="0.8197%" height="15" fill="rgb(247,202,23)" fg:x="96" fg:w="1"/><text x="78.9385%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 1.64%)</title><rect x="79.5082%" y="229" width="1.6393%" height="15" fill="rgb(219,102,11)" fg:x="97" fg:w="2"/><text x="79.7582%" y="239.50"></text></g><g><title>tftp::map::OccupiedEntry&lt;K,V,_&gt;::get_mut::{{closure}} (1 samples, 0.82%)</title><rect x="80.3279%" y="213" width="0.8197%" height="15" fill="rgb(243,110,44)" fg:x="98" fg:w="1"/><text x="80.5779%" y="223.50"></text></g><g><title>tftp::map::OccupiedEntry&lt;K,V,_&gt;::get_mut (3 samples, 2.46%)</title><rect x="79.5082%" y="245" width="2.4590%" height="15" fill="rgb(222,74,54)" fg:x="97" fg:w="3"/><text x="79.7582%" y="255.50">tf..</text></g><g><title>core::slice::&lt;impl [T]&gt;::iter_mut (1 samples, 0.82%)</title><rect x="81.1475%" y="229" width="0.8197%" height="15" fill="rgb(216,99,12)" fg:x="99" fg:w="1"/><text x="81.3975%" y="239.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 1.64%)</title><rect x="81.9672%" y="213" width="1.6393%" height="15" fill="rgb(226,22,26)" fg:x="100" fg:w="2"/><text x="82.2172%" y="223.50"></text></g><g><title>tftp::packet::PacketType::from_bytes (3 samples, 2.46%)</title><rect x="81.9672%" y="245" width="2.4590%" height="15" fill="rgb(217,163,10)" fg:x="100" fg:w="3"/><text x="82.2172%" y="255.50">tf..</text></g><g><title>tftp::packet::try_from (3 samples, 2.46%)</title><rect x="81.9672%" y="229" width="2.4590%" height="15" fill="rgb(213,25,53)" fg:x="100" fg:w="3"/><text x="82.2172%" y="239.50">tf..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.82%)</title><rect x="83.6066%" y="213" width="0.8197%" height="15" fill="rgb(252,105,26)" fg:x="102" fg:w="1"/><text x="83.8566%" y="223.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.82%)</title><rect x="83.6066%" y="197" width="0.8197%" height="15" fill="rgb(220,39,43)" fg:x="102" fg:w="1"/><text x="83.8566%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.82%)</title><rect x="83.6066%" y="181" width="0.8197%" height="15" fill="rgb(229,68,48)" fg:x="102" fg:w="1"/><text x="83.8566%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.82%)</title><rect x="84.4262%" y="181" width="0.8197%" height="15" fill="rgb(252,8,32)" fg:x="103" fg:w="1"/><text x="84.6762%" y="191.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.82%)</title><rect x="85.2459%" y="149" width="0.8197%" height="15" fill="rgb(223,20,43)" fg:x="104" fg:w="1"/><text x="85.4959%" y="159.50"></text></g><g><title>tftp::server::server::send_data_blocks (3 samples, 2.46%)</title><rect x="84.4262%" y="245" width="2.4590%" height="15" fill="rgb(229,81,49)" fg:x="103" fg:w="3"/><text x="84.6762%" y="255.50">tf..</text></g><g><title>tftp::map::Map&lt;K,V,_&gt;::retain (3 samples, 2.46%)</title><rect x="84.4262%" y="229" width="2.4590%" height="15" fill="rgb(236,28,36)" fg:x="103" fg:w="3"/><text x="84.6762%" y="239.50">tf..</text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::retain (3 samples, 2.46%)</title><rect x="84.4262%" y="213" width="2.4590%" height="15" fill="rgb(249,185,26)" fg:x="103" fg:w="3"/><text x="84.6762%" y="223.50">ar..</text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::retain::process_one (3 samples, 2.46%)</title><rect x="84.4262%" y="197" width="2.4590%" height="15" fill="rgb(249,174,33)" fg:x="103" fg:w="3"/><text x="84.6762%" y="207.50">ar..</text></g><g><title>tftp::map::Map&lt;K,V,_&gt;::retain::{{closure}} (2 samples, 1.64%)</title><rect x="85.2459%" y="181" width="1.6393%" height="15" fill="rgb(233,201,37)" fg:x="104" fg:w="2"/><text x="85.4959%" y="191.50"></text></g><g><title>tftp::server::server::send_data_blocks::{{closure}} (2 samples, 1.64%)</title><rect x="85.2459%" y="165" width="1.6393%" height="15" fill="rgb(221,78,26)" fg:x="104" fg:w="2"/><text x="85.4959%" y="175.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.82%)</title><rect x="86.0656%" y="149" width="0.8197%" height="15" fill="rgb(250,127,30)" fg:x="105" fg:w="1"/><text x="86.3156%" y="159.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.82%)</title><rect x="86.0656%" y="133" width="0.8197%" height="15" fill="rgb(230,49,44)" fg:x="105" fg:w="1"/><text x="86.3156%" y="143.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (1 samples, 0.82%)</title><rect x="86.0656%" y="117" width="0.8197%" height="15" fill="rgb(229,67,23)" fg:x="105" fg:w="1"/><text x="86.3156%" y="127.50"></text></g><g><title>tftp::map::Map&lt;K,V,_&gt;::get (1 samples, 0.82%)</title><rect x="87.7049%" y="213" width="0.8197%" height="15" fill="rgb(249,83,47)" fg:x="107" fg:w="1"/><text x="87.9549%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (1 samples, 0.82%)</title><rect x="87.7049%" y="197" width="0.8197%" height="15" fill="rgb(215,43,3)" fg:x="107" fg:w="1"/><text x="87.9549%" y="207.50"></text></g><g><title>tftp::map::Map&lt;K,V,_&gt;::len (3 samples, 2.46%)</title><rect x="88.5246%" y="213" width="2.4590%" height="15" fill="rgb(238,154,13)" fg:x="108" fg:w="3"/><text x="88.7746%" y="223.50">tf..</text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::len (2 samples, 1.64%)</title><rect x="89.3443%" y="197" width="1.6393%" height="15" fill="rgb(219,56,2)" fg:x="109" fg:w="2"/><text x="89.5943%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (1 samples, 0.82%)</title><rect x="90.9836%" y="197" width="0.8197%" height="15" fill="rgb(233,0,4)" fg:x="111" fg:w="1"/><text x="91.2336%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (1 samples, 0.82%)</title><rect x="90.9836%" y="181" width="0.8197%" height="15" fill="rgb(235,30,7)" fg:x="111" fg:w="1"/><text x="91.2336%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (1 samples, 0.82%)</title><rect x="91.8033%" y="197" width="0.8197%" height="15" fill="rgb(250,79,13)" fg:x="112" fg:w="1"/><text x="92.0533%" y="207.50"></text></g><g><title>tftp::map::Map&lt;K,V,_&gt;::remove (5 samples, 4.10%)</title><rect x="90.9836%" y="213" width="4.0984%" height="15" fill="rgb(211,146,34)" fg:x="111" fg:w="5"/><text x="91.2336%" y="223.50">tftp..</text></g><g><title>tftp::map::Map&lt;K,V,_&gt;::iter (3 samples, 2.46%)</title><rect x="92.6230%" y="197" width="2.4590%" height="15" fill="rgb(228,22,38)" fg:x="113" fg:w="3"/><text x="92.8730%" y="207.50">tf..</text></g><g><title>&lt;&amp;tftp::map::Map&lt;K,V,_&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (3 samples, 2.46%)</title><rect x="92.6230%" y="181" width="2.4590%" height="15" fill="rgb(235,168,5)" fg:x="113" fg:w="3"/><text x="92.8730%" y="191.50">&lt;&amp;..</text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 2.46%)</title><rect x="92.6230%" y="165" width="2.4590%" height="15" fill="rgb(221,155,16)" fg:x="113" fg:w="3"/><text x="92.8730%" y="175.50">&lt;a..</text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::as_slice (3 samples, 2.46%)</title><rect x="92.6230%" y="149" width="2.4590%" height="15" fill="rgb(215,215,53)" fg:x="113" fg:w="3"/><text x="92.8730%" y="159.50">ar..</text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::as_slice (3 samples, 2.46%)</title><rect x="92.6230%" y="133" width="2.4590%" height="15" fill="rgb(223,4,10)" fg:x="113" fg:w="3"/><text x="92.8730%" y="143.50">ar..</text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.82%)</title><rect x="94.2623%" y="117" width="0.8197%" height="15" fill="rgb(234,103,6)" fg:x="115" fg:w="1"/><text x="94.5123%" y="127.50"></text></g><g><title>tftp::server::server::write_block (11 samples, 9.02%)</title><rect x="86.8852%" y="245" width="9.0164%" height="15" fill="rgb(227,97,0)" fg:x="106" fg:w="11"/><text x="87.1352%" y="255.50">tftp::server:..</text></g><g><title>&lt;tftp::storage::FileWriter&lt;T&gt; as tftp::storage::BlockWriter&gt;::write_block (10 samples, 8.20%)</title><rect x="87.7049%" y="229" width="8.1967%" height="15" fill="rgb(234,150,53)" fg:x="107" fg:w="10"/><text x="87.9549%" y="239.50">&lt;tftp::stor..</text></g><g><title>tftp::storage::BlockMapper::index (1 samples, 0.82%)</title><rect x="95.0820%" y="213" width="0.8197%" height="15" fill="rgb(228,201,54)" fg:x="116" fg:w="1"/><text x="95.3320%" y="223.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3 samples, 2.46%)</title><rect x="95.9016%" y="229" width="2.4590%" height="15" fill="rgb(222,22,37)" fg:x="117" fg:w="3"/><text x="96.1516%" y="239.50">co..</text></g><g><title>tftp::instant_callback::{{closure}} (3 samples, 2.46%)</title><rect x="95.9016%" y="213" width="2.4590%" height="15" fill="rgb(237,53,32)" fg:x="117" fg:w="3"/><text x="96.1516%" y="223.50">tf..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 1.64%)</title><rect x="96.7213%" y="197" width="1.6393%" height="15" fill="rgb(233,25,53)" fg:x="118" fg:w="2"/><text x="96.9713%" y="207.50"></text></g><g><title>clock_gettime (2 samples, 1.64%)</title><rect x="96.7213%" y="181" width="1.6393%" height="15" fill="rgb(210,40,34)" fg:x="118" fg:w="2"/><text x="96.9713%" y="191.50"></text></g><g><title>__vdso_clock_gettime (2 samples, 1.64%)</title><rect x="96.7213%" y="165" width="1.6393%" height="15" fill="rgb(241,220,44)" fg:x="118" fg:w="2"/><text x="96.9713%" y="175.50"></text></g><g><title>[[vdso]] (1 samples, 0.82%)</title><rect x="97.5410%" y="149" width="0.8197%" height="15" fill="rgb(235,28,35)" fg:x="119" fg:w="1"/><text x="97.7910%" y="159.50"></text></g><g><title>[unknown] (114 samples, 93.44%)</title><rect x="5.7377%" y="277" width="93.4426%" height="15" fill="rgb(210,56,17)" fg:x="7" fg:w="114"/><text x="5.9877%" y="287.50">[unknown]</text></g><g><title>tftp::server::server::server (111 samples, 90.98%)</title><rect x="8.1967%" y="261" width="90.9836%" height="15" fill="rgb(224,130,29)" fg:x="10" fg:w="111"/><text x="8.4467%" y="271.50">tftp::server::server::server</text></g><g><title>tftp::std_compat::time::Instant::elapsed (4 samples, 3.28%)</title><rect x="95.9016%" y="245" width="3.2787%" height="15" fill="rgb(235,212,8)" fg:x="117" fg:w="4"/><text x="96.1516%" y="255.50">tft..</text></g><g><title>core::time::Duration::from_micros (1 samples, 0.82%)</title><rect x="98.3607%" y="229" width="0.8197%" height="15" fill="rgb(223,33,50)" fg:x="120" fg:w="1"/><text x="98.6107%" y="239.50"></text></g><g><title>core::time::Duration::new (1 samples, 0.82%)</title><rect x="98.3607%" y="213" width="0.8197%" height="15" fill="rgb(219,149,13)" fg:x="120" fg:w="1"/><text x="98.6107%" y="223.50"></text></g><g><title>all (122 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(250,156,29)" fg:x="0" fg:w="122"/><text x="0.2500%" y="319.50"></text></g><g><title>tftp (122 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(216,193,19)" fg:x="0" fg:w="122"/><text x="0.2500%" y="303.50">tftp</text></g><g><title>_start (1 samples, 0.82%)</title><rect x="99.1803%" y="277" width="0.8197%" height="15" fill="rgb(216,135,14)" fg:x="121" fg:w="1"/><text x="99.4303%" y="287.50"></text></g><g><title>__libc_start_main (1 samples, 0.82%)</title><rect x="99.1803%" y="261" width="0.8197%" height="15" fill="rgb(241,47,5)" fg:x="121" fg:w="1"/><text x="99.4303%" y="271.50"></text></g><g><title>[libc.so.6] (1 samples, 0.82%)</title><rect x="99.1803%" y="245" width="0.8197%" height="15" fill="rgb(233,42,35)" fg:x="121" fg:w="1"/><text x="99.4303%" y="255.50"></text></g><g><title>main (1 samples, 0.82%)</title><rect x="99.1803%" y="229" width="0.8197%" height="15" fill="rgb(231,13,6)" fg:x="121" fg:w="1"/><text x="99.4303%" y="239.50"></text></g><g><title>std::rt::lang_start (1 samples, 0.82%)</title><rect x="99.1803%" y="213" width="0.8197%" height="15" fill="rgb(207,181,40)" fg:x="121" fg:w="1"/><text x="99.4303%" y="223.50"></text></g><g><title>std::rt::lang_start_internal (1 samples, 0.82%)</title><rect x="99.1803%" y="197" width="0.8197%" height="15" fill="rgb(254,173,49)" fg:x="121" fg:w="1"/><text x="99.4303%" y="207.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.82%)</title><rect x="99.1803%" y="181" width="0.8197%" height="15" fill="rgb(221,1,38)" fg:x="121" fg:w="1"/><text x="99.4303%" y="191.50"></text></g><g><title>std::panicking::try (1 samples, 0.82%)</title><rect x="99.1803%" y="165" width="0.8197%" height="15" fill="rgb(206,124,46)" fg:x="121" fg:w="1"/><text x="99.4303%" y="175.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.82%)</title><rect x="99.1803%" y="149" width="0.8197%" height="15" fill="rgb(249,21,11)" fg:x="121" fg:w="1"/><text x="99.4303%" y="159.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (1 samples, 0.82%)</title><rect x="99.1803%" y="133" width="0.8197%" height="15" fill="rgb(222,201,40)" fg:x="121" fg:w="1"/><text x="99.4303%" y="143.50"></text></g><g><title>std::rt::init (1 samples, 0.82%)</title><rect x="99.1803%" y="117" width="0.8197%" height="15" fill="rgb(235,61,29)" fg:x="121" fg:w="1"/><text x="99.4303%" y="127.50"></text></g><g><title>alloc::ffi::c_str::CString::new (1 samples, 0.82%)</title><rect x="99.1803%" y="101" width="0.8197%" height="15" fill="rgb(219,207,3)" fg:x="121" fg:w="1"/><text x="99.4303%" y="111.50"></text></g><g><title>&lt;&amp;str as alloc::ffi::c_str::CString::new::SpecNewImpl&gt;::spec_new_impl (1 samples, 0.82%)</title><rect x="99.1803%" y="85" width="0.8197%" height="15" fill="rgb(222,56,46)" fg:x="121" fg:w="1"/><text x="99.4303%" y="95.50"></text></g><g><title>alloc::ffi::c_str::CString::new::spec_new_impl_bytes (1 samples, 0.82%)</title><rect x="99.1803%" y="69" width="0.8197%" height="15" fill="rgb(239,76,54)" fg:x="121" fg:w="1"/><text x="99.4303%" y="79.50"></text></g><g><title>alloc::ffi::c_str::CString::_from_vec_unchecked (1 samples, 0.82%)</title><rect x="99.1803%" y="53" width="0.8197%" height="15" fill="rgb(231,124,27)" fg:x="121" fg:w="1"/><text x="99.4303%" y="63.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.82%)</title><rect x="99.1803%" y="37" width="0.8197%" height="15" fill="rgb(249,195,6)" fg:x="121" fg:w="1"/><text x="99.4303%" y="47.50"></text></g></svg></svg>