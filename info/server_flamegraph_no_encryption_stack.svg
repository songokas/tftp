<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="662" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="645.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="645.00"> </text><svg id="frames" x="10" width="1180" total_samples="131"><g><title>__set_task_comm (1 samples, 0.76%)</title><rect x="0.0000%" y="469" width="0.7634%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="479.50"></text></g><g><title>perf-exec (4 samples, 3.05%)</title><rect x="0.0000%" y="597" width="3.0534%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="4"/><text x="0.2500%" y="607.50">per..</text></g><g><title>entry_SYSCALL_64_after_hwframe (4 samples, 3.05%)</title><rect x="0.0000%" y="581" width="3.0534%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="4"/><text x="0.2500%" y="591.50">ent..</text></g><g><title>do_syscall_64 (4 samples, 3.05%)</title><rect x="0.0000%" y="565" width="3.0534%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="4"/><text x="0.2500%" y="575.50">do_..</text></g><g><title>__x64_sys_execve (4 samples, 3.05%)</title><rect x="0.0000%" y="549" width="3.0534%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="4"/><text x="0.2500%" y="559.50">__x..</text></g><g><title>do_execveat_common.isra.0 (4 samples, 3.05%)</title><rect x="0.0000%" y="533" width="3.0534%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="4"/><text x="0.2500%" y="543.50">do_..</text></g><g><title>bprm_execve (4 samples, 3.05%)</title><rect x="0.0000%" y="517" width="3.0534%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="4"/><text x="0.2500%" y="527.50">bpr..</text></g><g><title>load_elf_binary (4 samples, 3.05%)</title><rect x="0.0000%" y="501" width="3.0534%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="4"/><text x="0.2500%" y="511.50">loa..</text></g><g><title>begin_new_exec (4 samples, 3.05%)</title><rect x="0.0000%" y="485" width="3.0534%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="4"/><text x="0.2500%" y="495.50">beg..</text></g><g><title>perf_event_exec (3 samples, 2.29%)</title><rect x="0.7634%" y="469" width="2.2901%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="3"/><text x="1.0134%" y="479.50">p..</text></g><g><title>ctx_resched (2 samples, 1.53%)</title><rect x="1.5267%" y="453" width="1.5267%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="2"/><text x="1.7767%" y="463.50"></text></g><g><title>perf_ctx_enable (2 samples, 1.53%)</title><rect x="1.5267%" y="437" width="1.5267%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="2"/><text x="1.7767%" y="447.50"></text></g><g><title>x86_pmu_enable (2 samples, 1.53%)</title><rect x="1.5267%" y="421" width="1.5267%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="2"/><text x="1.7767%" y="431.50"></text></g><g><title>[[heap]] (1 samples, 0.76%)</title><rect x="3.0534%" y="581" width="0.7634%" height="15" fill="rgb(206,188,39)" fg:x="4" fg:w="1"/><text x="3.3034%" y="591.50"></text></g><g><title>polling::epoll::Poller::modify (1 samples, 0.76%)</title><rect x="3.0534%" y="565" width="0.7634%" height="15" fill="rgb(217,207,13)" fg:x="4" fg:w="1"/><text x="3.3034%" y="575.50"></text></g><g><title>__libc_recv (1 samples, 0.76%)</title><rect x="3.8168%" y="565" width="0.7634%" height="15" fill="rgb(231,73,38)" fg:x="5" fg:w="1"/><text x="4.0668%" y="575.50"></text></g><g><title>__entry_text_start (1 samples, 0.76%)</title><rect x="3.8168%" y="549" width="0.7634%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="1"/><text x="4.0668%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.76%)</title><rect x="4.5802%" y="565" width="0.7634%" height="15" fill="rgb(210,31,41)" fg:x="6" fg:w="1"/><text x="4.8302%" y="575.50"></text></g><g><title>polling::epoll::Poller::modify (1 samples, 0.76%)</title><rect x="5.3435%" y="565" width="0.7634%" height="15" fill="rgb(221,200,47)" fg:x="7" fg:w="1"/><text x="5.5935%" y="575.50"></text></g><g><title>polling::epoll::Poller::wait (1 samples, 0.76%)</title><rect x="6.1069%" y="565" width="0.7634%" height="15" fill="rgb(226,26,5)" fg:x="8" fg:w="1"/><text x="6.3569%" y="575.50"></text></g><g><title>polling::epoll::epoll_flags (1 samples, 0.76%)</title><rect x="6.8702%" y="565" width="0.7634%" height="15" fill="rgb(249,33,26)" fg:x="9" fg:w="1"/><text x="7.1202%" y="575.50"></text></g><g><title>rustix::backend::arch::asm::syscall4_readonly (1 samples, 0.76%)</title><rect x="7.6336%" y="565" width="0.7634%" height="15" fill="rgb(235,183,28)" fg:x="10" fg:w="1"/><text x="7.8836%" y="575.50"></text></g><g><title>rustix::backend::event::epoll::_::InternalBitFlags::union (1 samples, 0.76%)</title><rect x="8.3969%" y="565" width="0.7634%" height="15" fill="rgb(221,5,38)" fg:x="11" fg:w="1"/><text x="8.6469%" y="575.50"></text></g><g><title>[[stack]] (8 samples, 6.11%)</title><rect x="3.8168%" y="581" width="6.1069%" height="15" fill="rgb(247,18,42)" fg:x="5" fg:w="8"/><text x="4.0668%" y="591.50">[[stack]]</text></g><g><title>tftp::server::single_thread::send_data_blocks (1 samples, 0.76%)</title><rect x="9.1603%" y="565" width="0.7634%" height="15" fill="rgb(241,131,45)" fg:x="12" fg:w="1"/><text x="9.4103%" y="575.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.76%)</title><rect x="9.9237%" y="565" width="0.7634%" height="15" fill="rgb(249,31,29)" fg:x="13" fg:w="1"/><text x="10.1737%" y="575.50"></text></g><g><title>&lt;core::core_arch::x86::__m128i as core::core_arch::x86::m128iExt&gt;::as_m128i (1 samples, 0.76%)</title><rect x="10.6870%" y="565" width="0.7634%" height="15" fill="rgb(225,111,53)" fg:x="14" fg:w="1"/><text x="10.9370%" y="575.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::convert::From&lt;T&gt;&gt;::from (1 samples, 0.76%)</title><rect x="11.4504%" y="565" width="0.7634%" height="15" fill="rgb(238,160,17)" fg:x="15" fg:w="1"/><text x="11.7004%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::enumerate (1 samples, 0.76%)</title><rect x="12.2137%" y="565" width="0.7634%" height="15" fill="rgb(214,148,48)" fg:x="16" fg:w="1"/><text x="12.4637%" y="575.50"></text></g><g><title>core::iter::adapters::enumerate::Enumerate&lt;I&gt;::new (1 samples, 0.76%)</title><rect x="12.2137%" y="549" width="0.7634%" height="15" fill="rgb(232,36,49)" fg:x="16" fg:w="1"/><text x="12.4637%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::Error&gt; (1 samples, 0.76%)</title><rect x="12.9771%" y="565" width="0.7634%" height="15" fill="rgb(209,103,24)" fg:x="17" fg:w="1"/><text x="13.2271%" y="575.50"></text></g><g><title>core::time::Duration::from_micros (1 samples, 0.76%)</title><rect x="13.7405%" y="565" width="0.7634%" height="15" fill="rgb(229,88,8)" fg:x="18" fg:w="1"/><text x="13.9905%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.76%)</title><rect x="14.5038%" y="565" width="0.7634%" height="15" fill="rgb(213,181,19)" fg:x="19" fg:w="1"/><text x="14.7538%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.76%)</title><rect x="14.5038%" y="549" width="0.7634%" height="15" fill="rgb(254,191,54)" fg:x="19" fg:w="1"/><text x="14.7538%" y="559.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.76%)</title><rect x="14.5038%" y="533" width="0.7634%" height="15" fill="rgb(241,83,37)" fg:x="19" fg:w="1"/><text x="14.7538%" y="543.50"></text></g><g><title>heapless::indexmap::IndexMap&lt;K,V,S,_&gt;::iter_mut (1 samples, 0.76%)</title><rect x="15.2672%" y="565" width="0.7634%" height="15" fill="rgb(233,36,39)" fg:x="20" fg:w="1"/><text x="15.5172%" y="575.50"></text></g><g><title>polling::Events::len (1 samples, 0.76%)</title><rect x="16.0305%" y="565" width="0.7634%" height="15" fill="rgb(226,3,54)" fg:x="21" fg:w="1"/><text x="16.2805%" y="575.50"></text></g><g><title>rustix::backend::arch::asm::syscall4 (1 samples, 0.76%)</title><rect x="16.7939%" y="565" width="0.7634%" height="15" fill="rgb(245,192,40)" fg:x="22" fg:w="1"/><text x="17.0439%" y="575.50"></text></g><g><title>__entry_text_start (1 samples, 0.76%)</title><rect x="16.7939%" y="549" width="0.7634%" height="15" fill="rgb(238,167,29)" fg:x="22" fg:w="1"/><text x="17.0439%" y="559.50"></text></g><g><title>rustix::backend::arch::asm::syscall4_readonly (1 samples, 0.76%)</title><rect x="17.5573%" y="565" width="0.7634%" height="15" fill="rgb(232,182,51)" fg:x="23" fg:w="1"/><text x="17.8073%" y="575.50"></text></g><g><title>rustix::backend::event::epoll::modify (1 samples, 0.76%)</title><rect x="18.3206%" y="565" width="0.7634%" height="15" fill="rgb(231,60,39)" fg:x="24" fg:w="1"/><text x="18.5706%" y="575.50"></text></g><g><title>rustix::backend::event::syscalls::epoll_wait (1 samples, 0.76%)</title><rect x="19.0840%" y="565" width="0.7634%" height="15" fill="rgb(208,69,12)" fg:x="25" fg:w="1"/><text x="19.3340%" y="575.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (1 samples, 0.76%)</title><rect x="19.8473%" y="565" width="0.7634%" height="15" fill="rgb(235,93,37)" fg:x="26" fg:w="1"/><text x="20.0973%" y="575.50"></text></g><g><title>tftp::server::helpers::write::handle_write (2 samples, 1.53%)</title><rect x="20.6107%" y="565" width="1.5267%" height="15" fill="rgb(213,116,39)" fg:x="27" fg:w="2"/><text x="20.8607%" y="575.50"></text></g><g><title>&lt;tftp::packet::Packet as tftp::packet::ByteConverter&gt;::from_bytes (1 samples, 0.76%)</title><rect x="21.3740%" y="549" width="0.7634%" height="15" fill="rgb(222,207,29)" fg:x="28" fg:w="1"/><text x="21.6240%" y="559.50"></text></g><g><title>&lt;tftp::packet::DataPacket as tftp::packet::ByteConverter&gt;::from_bytes (1 samples, 0.76%)</title><rect x="21.3740%" y="533" width="0.7634%" height="15" fill="rgb(206,96,30)" fg:x="28" fg:w="1"/><text x="21.6240%" y="543.50"></text></g><g><title>tftp::packet::try_from (1 samples, 0.76%)</title><rect x="21.3740%" y="517" width="0.7634%" height="15" fill="rgb(218,138,4)" fg:x="28" fg:w="1"/><text x="21.6240%" y="527.50"></text></g><g><title>heapless::indexmap::CoreMap&lt;K,V,_&gt;::mask (1 samples, 0.76%)</title><rect x="21.3740%" y="501" width="0.7634%" height="15" fill="rgb(250,191,14)" fg:x="28" fg:w="1"/><text x="21.6240%" y="511.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.76%)</title><rect x="22.9008%" y="277" width="0.7634%" height="15" fill="rgb(239,60,40)" fg:x="30" fg:w="1"/><text x="23.1508%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.76%)</title><rect x="22.9008%" y="261" width="0.7634%" height="15" fill="rgb(206,27,48)" fg:x="30" fg:w="1"/><text x="23.1508%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.76%)</title><rect x="22.9008%" y="245" width="0.7634%" height="15" fill="rgb(225,35,8)" fg:x="30" fg:w="1"/><text x="23.1508%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.76%)</title><rect x="22.9008%" y="229" width="0.7634%" height="15" fill="rgb(250,213,24)" fg:x="30" fg:w="1"/><text x="23.1508%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.76%)</title><rect x="22.9008%" y="213" width="0.7634%" height="15" fill="rgb(247,123,22)" fg:x="30" fg:w="1"/><text x="23.1508%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.76%)</title><rect x="22.9008%" y="197" width="0.7634%" height="15" fill="rgb(231,138,38)" fg:x="30" fg:w="1"/><text x="23.1508%" y="207.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2 samples, 1.53%)</title><rect x="22.9008%" y="533" width="1.5267%" height="15" fill="rgb(231,145,46)" fg:x="30" fg:w="2"/><text x="23.1508%" y="543.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2 samples, 1.53%)</title><rect x="22.9008%" y="517" width="1.5267%" height="15" fill="rgb(251,118,11)" fg:x="30" fg:w="2"/><text x="23.1508%" y="527.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (2 samples, 1.53%)</title><rect x="22.9008%" y="501" width="1.5267%" height="15" fill="rgb(217,147,25)" fg:x="30" fg:w="2"/><text x="23.1508%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 1.53%)</title><rect x="22.9008%" y="485" width="1.5267%" height="15" fill="rgb(247,81,37)" fg:x="30" fg:w="2"/><text x="23.1508%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 1.53%)</title><rect x="22.9008%" y="469" width="1.5267%" height="15" fill="rgb(209,12,38)" fg:x="30" fg:w="2"/><text x="23.1508%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 1.53%)</title><rect x="22.9008%" y="453" width="1.5267%" height="15" fill="rgb(227,1,9)" fg:x="30" fg:w="2"/><text x="23.1508%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 1.53%)</title><rect x="22.9008%" y="437" width="1.5267%" height="15" fill="rgb(248,47,43)" fg:x="30" fg:w="2"/><text x="23.1508%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 1.53%)</title><rect x="22.9008%" y="421" width="1.5267%" height="15" fill="rgb(221,10,30)" fg:x="30" fg:w="2"/><text x="23.1508%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 1.53%)</title><rect x="22.9008%" y="405" width="1.5267%" height="15" fill="rgb(210,229,1)" fg:x="30" fg:w="2"/><text x="23.1508%" y="415.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (2 samples, 1.53%)</title><rect x="22.9008%" y="389" width="1.5267%" height="15" fill="rgb(222,148,37)" fg:x="30" fg:w="2"/><text x="23.1508%" y="399.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::{{closure}} (2 samples, 1.53%)</title><rect x="22.9008%" y="373" width="1.5267%" height="15" fill="rgb(234,67,33)" fg:x="30" fg:w="2"/><text x="23.1508%" y="383.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (2 samples, 1.53%)</title><rect x="22.9008%" y="357" width="1.5267%" height="15" fill="rgb(247,98,35)" fg:x="30" fg:w="2"/><text x="23.1508%" y="367.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (2 samples, 1.53%)</title><rect x="22.9008%" y="341" width="1.5267%" height="15" fill="rgb(247,138,52)" fg:x="30" fg:w="2"/><text x="23.1508%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (2 samples, 1.53%)</title><rect x="22.9008%" y="325" width="1.5267%" height="15" fill="rgb(213,79,30)" fg:x="30" fg:w="2"/><text x="23.1508%" y="335.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (2 samples, 1.53%)</title><rect x="22.9008%" y="309" width="1.5267%" height="15" fill="rgb(246,177,23)" fg:x="30" fg:w="2"/><text x="23.1508%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 1.53%)</title><rect x="22.9008%" y="293" width="1.5267%" height="15" fill="rgb(230,62,27)" fg:x="30" fg:w="2"/><text x="23.1508%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 0.76%)</title><rect x="23.6641%" y="277" width="0.7634%" height="15" fill="rgb(216,154,8)" fg:x="31" fg:w="1"/><text x="23.9141%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (1 samples, 0.76%)</title><rect x="23.6641%" y="261" width="0.7634%" height="15" fill="rgb(244,35,45)" fg:x="31" fg:w="1"/><text x="23.9141%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.76%)</title><rect x="23.6641%" y="245" width="0.7634%" height="15" fill="rgb(251,115,12)" fg:x="31" fg:w="1"/><text x="23.9141%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (1 samples, 0.76%)</title><rect x="23.6641%" y="229" width="0.7634%" height="15" fill="rgb(240,54,50)" fg:x="31" fg:w="1"/><text x="23.9141%" y="239.50"></text></g><g><title>polling::Poller::modify (1 samples, 0.76%)</title><rect x="24.4275%" y="517" width="0.7634%" height="15" fill="rgb(233,84,52)" fg:x="32" fg:w="1"/><text x="24.6775%" y="527.50"></text></g><g><title>polling::Poller::modify_with_mode (1 samples, 0.76%)</title><rect x="24.4275%" y="501" width="0.7634%" height="15" fill="rgb(207,117,47)" fg:x="32" fg:w="1"/><text x="24.6775%" y="511.50"></text></g><g><title>polling::epoll::Poller::modify (1 samples, 0.76%)</title><rect x="24.4275%" y="485" width="0.7634%" height="15" fill="rgb(249,43,39)" fg:x="32" fg:w="1"/><text x="24.6775%" y="495.50"></text></g><g><title>rustix::backend::event::epoll::modify (1 samples, 0.76%)</title><rect x="24.4275%" y="469" width="0.7634%" height="15" fill="rgb(209,38,44)" fg:x="32" fg:w="1"/><text x="24.6775%" y="479.50"></text></g><g><title>rustix::backend::event::syscalls::epoll_mod (1 samples, 0.76%)</title><rect x="24.4275%" y="453" width="0.7634%" height="15" fill="rgb(236,212,23)" fg:x="32" fg:w="1"/><text x="24.6775%" y="463.50"></text></g><g><title>rustix::backend::conv::c_uint (1 samples, 0.76%)</title><rect x="24.4275%" y="437" width="0.7634%" height="15" fill="rgb(242,79,21)" fg:x="32" fg:w="1"/><text x="24.6775%" y="447.50"></text></g><g><title>rustix::backend::conv::pass_usize (1 samples, 0.76%)</title><rect x="24.4275%" y="421" width="0.7634%" height="15" fill="rgb(211,96,35)" fg:x="32" fg:w="1"/><text x="24.6775%" y="431.50"></text></g><g><title>tftp::server::wait_control::WaitControl::sending (1 samples, 0.76%)</title><rect x="24.4275%" y="405" width="0.7634%" height="15" fill="rgb(253,215,40)" fg:x="32" fg:w="1"/><text x="24.6775%" y="415.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.76%)</title><rect x="25.1908%" y="453" width="0.7634%" height="15" fill="rgb(211,81,21)" fg:x="33" fg:w="1"/><text x="25.4408%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.76%)</title><rect x="25.1908%" y="437" width="0.7634%" height="15" fill="rgb(208,190,38)" fg:x="33" fg:w="1"/><text x="25.4408%" y="447.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.76%)</title><rect x="25.1908%" y="421" width="0.7634%" height="15" fill="rgb(235,213,38)" fg:x="33" fg:w="1"/><text x="25.4408%" y="431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.76%)</title><rect x="25.1908%" y="405" width="0.7634%" height="15" fill="rgb(237,122,38)" fg:x="33" fg:w="1"/><text x="25.4408%" y="415.50"></text></g><g><title>[[vdso]] (1 samples, 0.76%)</title><rect x="25.1908%" y="389" width="0.7634%" height="15" fill="rgb(244,218,35)" fg:x="33" fg:w="1"/><text x="25.4408%" y="399.50"></text></g><g><title>&lt;tftp::socket::UdpUnboundSocket as tftp::socket::Socket&gt;::modify_interest (3 samples, 2.29%)</title><rect x="24.4275%" y="533" width="2.2901%" height="15" fill="rgb(240,68,47)" fg:x="32" fg:w="3"/><text x="24.6775%" y="543.50">&lt;..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (2 samples, 1.53%)</title><rect x="25.1908%" y="517" width="1.5267%" height="15" fill="rgb(210,16,53)" fg:x="33" fg:w="2"/><text x="25.4408%" y="527.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (2 samples, 1.53%)</title><rect x="25.1908%" y="501" width="1.5267%" height="15" fill="rgb(235,124,12)" fg:x="33" fg:w="2"/><text x="25.4408%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (2 samples, 1.53%)</title><rect x="25.1908%" y="485" width="1.5267%" height="15" fill="rgb(224,169,11)" fg:x="33" fg:w="2"/><text x="25.4408%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (2 samples, 1.53%)</title><rect x="25.1908%" y="469" width="1.5267%" height="15" fill="rgb(250,166,2)" fg:x="33" fg:w="2"/><text x="25.4408%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.76%)</title><rect x="25.9542%" y="453" width="0.7634%" height="15" fill="rgb(242,216,29)" fg:x="34" fg:w="1"/><text x="26.2042%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.76%)</title><rect x="25.9542%" y="437" width="0.7634%" height="15" fill="rgb(230,116,27)" fg:x="34" fg:w="1"/><text x="26.2042%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.76%)</title><rect x="25.9542%" y="421" width="0.7634%" height="15" fill="rgb(228,99,48)" fg:x="34" fg:w="1"/><text x="26.2042%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.76%)</title><rect x="25.9542%" y="405" width="0.7634%" height="15" fill="rgb(253,11,6)" fg:x="34" fg:w="1"/><text x="26.2042%" y="415.50"></text></g><g><title>[[vdso]] (1 samples, 0.76%)</title><rect x="25.9542%" y="389" width="0.7634%" height="15" fill="rgb(247,143,39)" fg:x="34" fg:w="1"/><text x="26.2042%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (1 samples, 0.76%)</title><rect x="26.7176%" y="517" width="0.7634%" height="15" fill="rgb(236,97,10)" fg:x="35" fg:w="1"/><text x="26.9676%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (1 samples, 0.76%)</title><rect x="27.4809%" y="501" width="0.7634%" height="15" fill="rgb(233,208,19)" fg:x="36" fg:w="1"/><text x="27.7309%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.76%)</title><rect x="27.4809%" y="485" width="0.7634%" height="15" fill="rgb(216,164,2)" fg:x="36" fg:w="1"/><text x="27.7309%" y="495.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.76%)</title><rect x="27.4809%" y="469" width="0.7634%" height="15" fill="rgb(220,129,5)" fg:x="36" fg:w="1"/><text x="27.7309%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.76%)</title><rect x="27.4809%" y="453" width="0.7634%" height="15" fill="rgb(242,17,10)" fg:x="36" fg:w="1"/><text x="27.7309%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.76%)</title><rect x="27.4809%" y="437" width="0.7634%" height="15" fill="rgb(242,107,0)" fg:x="36" fg:w="1"/><text x="27.7309%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.76%)</title><rect x="27.4809%" y="421" width="0.7634%" height="15" fill="rgb(251,28,31)" fg:x="36" fg:w="1"/><text x="27.7309%" y="431.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.76%)</title><rect x="27.4809%" y="405" width="0.7634%" height="15" fill="rgb(233,223,10)" fg:x="36" fg:w="1"/><text x="27.7309%" y="415.50"></text></g><g><title>polling::epoll::Events::iter::{{closure}} (1 samples, 0.76%)</title><rect x="27.4809%" y="389" width="0.7634%" height="15" fill="rgb(215,21,27)" fg:x="36" fg:w="1"/><text x="27.7309%" y="399.50"></text></g><g><title>rustix::backend::event::epoll::_::&lt;impl rustix::backend::event::epoll::EventFlags&gt;::intersects (1 samples, 0.76%)</title><rect x="27.4809%" y="373" width="0.7634%" height="15" fill="rgb(232,23,21)" fg:x="36" fg:w="1"/><text x="27.7309%" y="383.50"></text></g><g><title>rustix::backend::event::epoll::_::InternalBitFlags::intersects (1 samples, 0.76%)</title><rect x="27.4809%" y="357" width="0.7634%" height="15" fill="rgb(244,5,23)" fg:x="36" fg:w="1"/><text x="27.7309%" y="367.50"></text></g><g><title>polling::Events::len (2 samples, 1.53%)</title><rect x="27.4809%" y="517" width="1.5267%" height="15" fill="rgb(226,81,46)" fg:x="36" fg:w="2"/><text x="27.7309%" y="527.50"></text></g><g><title>polling::Events::iter (1 samples, 0.76%)</title><rect x="28.2443%" y="501" width="0.7634%" height="15" fill="rgb(247,70,30)" fg:x="37" fg:w="1"/><text x="28.4943%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::filter (1 samples, 0.76%)</title><rect x="28.2443%" y="485" width="0.7634%" height="15" fill="rgb(212,68,19)" fg:x="37" fg:w="1"/><text x="28.4943%" y="495.50"></text></g><g><title>polling::epoll::epoll_flags (1 samples, 0.76%)</title><rect x="29.0076%" y="485" width="0.7634%" height="15" fill="rgb(240,187,13)" fg:x="38" fg:w="1"/><text x="29.2576%" y="495.50"></text></g><g><title>polling::epoll::read_flags (1 samples, 0.76%)</title><rect x="29.0076%" y="469" width="0.7634%" height="15" fill="rgb(223,113,26)" fg:x="38" fg:w="1"/><text x="29.2576%" y="479.50"></text></g><g><title>std::sys::unix::time::Timespec::now (1 samples, 0.76%)</title><rect x="29.0076%" y="453" width="0.7634%" height="15" fill="rgb(206,192,2)" fg:x="38" fg:w="1"/><text x="29.2576%" y="463.50"></text></g><g><title>polling::epoll::Poller::modify (2 samples, 1.53%)</title><rect x="29.0076%" y="501" width="1.5267%" height="15" fill="rgb(241,108,4)" fg:x="38" fg:w="2"/><text x="29.2576%" y="511.50"></text></g><g><title>tracing::__macro_support::__disabled_span (1 samples, 0.76%)</title><rect x="29.7710%" y="485" width="0.7634%" height="15" fill="rgb(247,173,49)" fg:x="39" fg:w="1"/><text x="30.0210%" y="495.50"></text></g><g><title>tracing::span::Span::none (1 samples, 0.76%)</title><rect x="29.7710%" y="469" width="0.7634%" height="15" fill="rgb(224,114,35)" fg:x="39" fg:w="1"/><text x="30.0210%" y="479.50"></text></g><g><title>__perf_event_task_sched_out (1 samples, 0.76%)</title><rect x="31.2977%" y="341" width="0.7634%" height="15" fill="rgb(245,159,27)" fg:x="41" fg:w="1"/><text x="31.5477%" y="351.50"></text></g><g><title>ctx_sched_out (1 samples, 0.76%)</title><rect x="31.2977%" y="325" width="0.7634%" height="15" fill="rgb(245,172,44)" fg:x="41" fg:w="1"/><text x="31.5477%" y="335.50"></text></g><g><title>__pmu_ctx_sched_out (1 samples, 0.76%)</title><rect x="31.2977%" y="309" width="0.7634%" height="15" fill="rgb(236,23,11)" fg:x="41" fg:w="1"/><text x="31.5477%" y="319.50"></text></g><g><title>group_sched_out (1 samples, 0.76%)</title><rect x="31.2977%" y="293" width="0.7634%" height="15" fill="rgb(205,117,38)" fg:x="41" fg:w="1"/><text x="31.5477%" y="303.50"></text></g><g><title>event_sched_out (1 samples, 0.76%)</title><rect x="31.2977%" y="277" width="0.7634%" height="15" fill="rgb(237,72,25)" fg:x="41" fg:w="1"/><text x="31.5477%" y="287.50"></text></g><g><title>perf_ibs_del (1 samples, 0.76%)</title><rect x="31.2977%" y="261" width="0.7634%" height="15" fill="rgb(244,70,9)" fg:x="41" fg:w="1"/><text x="31.5477%" y="271.50"></text></g><g><title>perf_ibs_stop (1 samples, 0.76%)</title><rect x="31.2977%" y="245" width="0.7634%" height="15" fill="rgb(217,125,39)" fg:x="41" fg:w="1"/><text x="31.5477%" y="255.50"></text></g><g><title>rustix::backend::event::syscalls::epoll_wait (2 samples, 1.53%)</title><rect x="31.2977%" y="485" width="1.5267%" height="15" fill="rgb(235,36,10)" fg:x="41" fg:w="2"/><text x="31.5477%" y="495.50"></text></g><g><title>rustix::backend::arch::asm::syscall4 (2 samples, 1.53%)</title><rect x="31.2977%" y="469" width="1.5267%" height="15" fill="rgb(251,123,47)" fg:x="41" fg:w="2"/><text x="31.5477%" y="479.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 1.53%)</title><rect x="31.2977%" y="453" width="1.5267%" height="15" fill="rgb(221,13,13)" fg:x="41" fg:w="2"/><text x="31.5477%" y="463.50"></text></g><g><title>do_syscall_64 (2 samples, 1.53%)</title><rect x="31.2977%" y="437" width="1.5267%" height="15" fill="rgb(238,131,9)" fg:x="41" fg:w="2"/><text x="31.5477%" y="447.50"></text></g><g><title>__x64_sys_epoll_wait (2 samples, 1.53%)</title><rect x="31.2977%" y="421" width="1.5267%" height="15" fill="rgb(211,50,8)" fg:x="41" fg:w="2"/><text x="31.5477%" y="431.50"></text></g><g><title>do_epoll_wait (2 samples, 1.53%)</title><rect x="31.2977%" y="405" width="1.5267%" height="15" fill="rgb(245,182,24)" fg:x="41" fg:w="2"/><text x="31.5477%" y="415.50"></text></g><g><title>schedule_hrtimeout_range_clock (2 samples, 1.53%)</title><rect x="31.2977%" y="389" width="1.5267%" height="15" fill="rgb(242,14,37)" fg:x="41" fg:w="2"/><text x="31.5477%" y="399.50"></text></g><g><title>schedule (2 samples, 1.53%)</title><rect x="31.2977%" y="373" width="1.5267%" height="15" fill="rgb(246,228,12)" fg:x="41" fg:w="2"/><text x="31.5477%" y="383.50"></text></g><g><title>__schedule (2 samples, 1.53%)</title><rect x="31.2977%" y="357" width="1.5267%" height="15" fill="rgb(213,55,15)" fg:x="41" fg:w="2"/><text x="31.5477%" y="367.50"></text></g><g><title>dequeue_task_fair (1 samples, 0.76%)</title><rect x="32.0611%" y="341" width="0.7634%" height="15" fill="rgb(209,9,3)" fg:x="42" fg:w="1"/><text x="32.3111%" y="351.50"></text></g><g><title>dequeue_entity (1 samples, 0.76%)</title><rect x="32.0611%" y="325" width="0.7634%" height="15" fill="rgb(230,59,30)" fg:x="42" fg:w="1"/><text x="32.3111%" y="335.50"></text></g><g><title>update_curr (1 samples, 0.76%)</title><rect x="32.0611%" y="309" width="0.7634%" height="15" fill="rgb(209,121,21)" fg:x="42" fg:w="1"/><text x="32.3111%" y="319.50"></text></g><g><title>cpuacct_charge (1 samples, 0.76%)</title><rect x="32.0611%" y="293" width="0.7634%" height="15" fill="rgb(220,109,13)" fg:x="42" fg:w="1"/><text x="32.3111%" y="303.50"></text></g><g><title>&lt;tftp::socket::UdpUnboundSocket as tftp::socket::Socket&gt;::recv_from (14 samples, 10.69%)</title><rect x="22.9008%" y="549" width="10.6870%" height="15" fill="rgb(232,18,1)" fg:x="30" fg:w="14"/><text x="23.1508%" y="559.50">&lt;tftp::socket::U..</text></g><g><title>polling::Poller::wait (9 samples, 6.87%)</title><rect x="26.7176%" y="533" width="6.8702%" height="15" fill="rgb(215,41,42)" fg:x="35" fg:w="9"/><text x="26.9676%" y="543.50">polling::..</text></g><g><title>polling::epoll::Poller::wait (6 samples, 4.58%)</title><rect x="29.0076%" y="517" width="4.5802%" height="15" fill="rgb(224,123,36)" fg:x="38" fg:w="6"/><text x="29.2576%" y="527.50">polli..</text></g><g><title>rustix::backend::event::epoll::wait (4 samples, 3.05%)</title><rect x="30.5344%" y="501" width="3.0534%" height="15" fill="rgb(240,125,3)" fg:x="40" fg:w="4"/><text x="30.7844%" y="511.50">rus..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (1 samples, 0.76%)</title><rect x="32.8244%" y="485" width="0.7634%" height="15" fill="rgb(205,98,50)" fg:x="43" fg:w="1"/><text x="33.0744%" y="495.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::try_lock (1 samples, 0.76%)</title><rect x="32.8244%" y="469" width="0.7634%" height="15" fill="rgb(205,185,37)" fg:x="43" fg:w="1"/><text x="33.0744%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.76%)</title><rect x="32.8244%" y="453" width="0.7634%" height="15" fill="rgb(238,207,15)" fg:x="43" fg:w="1"/><text x="33.0744%" y="463.50"></text></g><g><title>polling::AsSource::source (1 samples, 0.76%)</title><rect x="33.5878%" y="421" width="0.7634%" height="15" fill="rgb(213,199,42)" fg:x="44" fg:w="1"/><text x="33.8378%" y="431.50"></text></g><g><title>&lt;std::os::fd::owned::BorrowedFd as std::os::fd::owned::AsFd&gt;::as_fd (1 samples, 0.76%)</title><rect x="33.5878%" y="405" width="0.7634%" height="15" fill="rgb(235,201,11)" fg:x="44" fg:w="1"/><text x="33.8378%" y="415.50"></text></g><g><title>polling::epoll::epoll_flags (1 samples, 0.76%)</title><rect x="34.3511%" y="405" width="0.7634%" height="15" fill="rgb(207,46,11)" fg:x="45" fg:w="1"/><text x="34.6011%" y="415.50"></text></g><g><title>rustix::backend::event::epoll::_::&lt;impl core::ops::bit::BitOrAssign for rustix::backend::event::epoll::EventFlags&gt;::bitor_assign (1 samples, 0.76%)</title><rect x="34.3511%" y="389" width="0.7634%" height="15" fill="rgb(241,35,35)" fg:x="45" fg:w="1"/><text x="34.6011%" y="399.50"></text></g><g><title>rustix::backend::event::epoll::_::&lt;impl rustix::backend::event::epoll::EventFlags&gt;::insert (1 samples, 0.76%)</title><rect x="34.3511%" y="373" width="0.7634%" height="15" fill="rgb(243,32,47)" fg:x="45" fg:w="1"/><text x="34.6011%" y="383.50"></text></g><g><title>rustix::backend::event::epoll::_::InternalBitFlags::insert (1 samples, 0.76%)</title><rect x="34.3511%" y="357" width="0.7634%" height="15" fill="rgb(247,202,23)" fg:x="45" fg:w="1"/><text x="34.6011%" y="367.50"></text></g><g><title>polling::Poller::modify (4 samples, 3.05%)</title><rect x="33.5878%" y="453" width="3.0534%" height="15" fill="rgb(219,102,11)" fg:x="44" fg:w="4"/><text x="33.8378%" y="463.50">pol..</text></g><g><title>polling::Poller::modify_with_mode (4 samples, 3.05%)</title><rect x="33.5878%" y="437" width="3.0534%" height="15" fill="rgb(243,110,44)" fg:x="44" fg:w="4"/><text x="33.8378%" y="447.50">pol..</text></g><g><title>polling::epoll::Poller::modify (3 samples, 2.29%)</title><rect x="34.3511%" y="421" width="2.2901%" height="15" fill="rgb(222,74,54)" fg:x="45" fg:w="3"/><text x="34.6011%" y="431.50">p..</text></g><g><title>rustix::backend::event::epoll::modify (2 samples, 1.53%)</title><rect x="35.1145%" y="405" width="1.5267%" height="15" fill="rgb(216,99,12)" fg:x="46" fg:w="2"/><text x="35.3645%" y="415.50"></text></g><g><title>rustix::backend::event::syscalls::epoll_mod (2 samples, 1.53%)</title><rect x="35.1145%" y="389" width="1.5267%" height="15" fill="rgb(226,22,26)" fg:x="46" fg:w="2"/><text x="35.3645%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (1 samples, 0.76%)</title><rect x="36.6412%" y="325" width="0.7634%" height="15" fill="rgb(217,163,10)" fg:x="48" fg:w="1"/><text x="36.8912%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (1 samples, 0.76%)</title><rect x="36.6412%" y="309" width="0.7634%" height="15" fill="rgb(213,25,53)" fg:x="48" fg:w="1"/><text x="36.8912%" y="319.50"></text></g><g><title>&lt;core::core_arch::x86::__m128i as core::core_arch::x86::m128iExt&gt;::as_m128i (1 samples, 0.76%)</title><rect x="36.6412%" y="293" width="0.7634%" height="15" fill="rgb(252,105,26)" fg:x="48" fg:w="1"/><text x="36.8912%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (6 samples, 4.58%)</title><rect x="33.5878%" y="549" width="4.5802%" height="15" fill="rgb(220,39,43)" fg:x="44" fg:w="6"/><text x="33.8378%" y="559.50">core:..</text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (6 samples, 4.58%)</title><rect x="33.5878%" y="533" width="4.5802%" height="15" fill="rgb(229,68,48)" fg:x="44" fg:w="6"/><text x="33.8378%" y="543.50">&lt;core..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (6 samples, 4.58%)</title><rect x="33.5878%" y="517" width="4.5802%" height="15" fill="rgb(252,8,32)" fg:x="44" fg:w="6"/><text x="33.8378%" y="527.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (6 samples, 4.58%)</title><rect x="33.5878%" y="501" width="4.5802%" height="15" fill="rgb(223,20,43)" fg:x="44" fg:w="6"/><text x="33.8378%" y="511.50">core:..</text></g><g><title>tftp::server::single_thread::server::{{closure}} (6 samples, 4.58%)</title><rect x="33.5878%" y="485" width="4.5802%" height="15" fill="rgb(229,81,49)" fg:x="44" fg:w="6"/><text x="33.8378%" y="495.50">tftp:..</text></g><g><title>&lt;tftp::socket::UdpUnboundSocket as tftp::socket::Socket&gt;::modify_interest (6 samples, 4.58%)</title><rect x="33.5878%" y="469" width="4.5802%" height="15" fill="rgb(236,28,36)" fg:x="44" fg:w="6"/><text x="33.8378%" y="479.50">&lt;tftp..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (2 samples, 1.53%)</title><rect x="36.6412%" y="453" width="1.5267%" height="15" fill="rgb(249,185,26)" fg:x="48" fg:w="2"/><text x="36.8912%" y="463.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (2 samples, 1.53%)</title><rect x="36.6412%" y="437" width="1.5267%" height="15" fill="rgb(249,174,33)" fg:x="48" fg:w="2"/><text x="36.8912%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (2 samples, 1.53%)</title><rect x="36.6412%" y="421" width="1.5267%" height="15" fill="rgb(233,201,37)" fg:x="48" fg:w="2"/><text x="36.8912%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (2 samples, 1.53%)</title><rect x="36.6412%" y="405" width="1.5267%" height="15" fill="rgb(221,78,26)" fg:x="48" fg:w="2"/><text x="36.8912%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (2 samples, 1.53%)</title><rect x="36.6412%" y="389" width="1.5267%" height="15" fill="rgb(250,127,30)" fg:x="48" fg:w="2"/><text x="36.8912%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 1.53%)</title><rect x="36.6412%" y="373" width="1.5267%" height="15" fill="rgb(230,49,44)" fg:x="48" fg:w="2"/><text x="36.8912%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2 samples, 1.53%)</title><rect x="36.6412%" y="357" width="1.5267%" height="15" fill="rgb(229,67,23)" fg:x="48" fg:w="2"/><text x="36.8912%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 1.53%)</title><rect x="36.6412%" y="341" width="1.5267%" height="15" fill="rgb(249,83,47)" fg:x="48" fg:w="2"/><text x="36.8912%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 0.76%)</title><rect x="37.4046%" y="325" width="0.7634%" height="15" fill="rgb(215,43,3)" fg:x="49" fg:w="1"/><text x="37.6546%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (1 samples, 0.76%)</title><rect x="37.4046%" y="309" width="0.7634%" height="15" fill="rgb(238,154,13)" fg:x="49" fg:w="1"/><text x="37.6546%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.76%)</title><rect x="38.1679%" y="517" width="0.7634%" height="15" fill="rgb(219,56,2)" fg:x="50" fg:w="1"/><text x="38.4179%" y="527.50"></text></g><g><title>&lt;tftp::std_compat::net::SocketAddr as core::cmp::PartialEq&gt;::eq (1 samples, 0.76%)</title><rect x="38.1679%" y="501" width="0.7634%" height="15" fill="rgb(233,0,4)" fg:x="50" fg:w="1"/><text x="38.4179%" y="511.50"></text></g><g><title>&lt;tftp::std_compat::net::IpVersion as core::cmp::PartialEq&gt;::eq (1 samples, 0.76%)</title><rect x="38.1679%" y="485" width="0.7634%" height="15" fill="rgb(235,30,7)" fg:x="50" fg:w="1"/><text x="38.4179%" y="495.50"></text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (1 samples, 0.76%)</title><rect x="38.1679%" y="469" width="0.7634%" height="15" fill="rgb(250,79,13)" fg:x="50" fg:w="1"/><text x="38.4179%" y="479.50"></text></g><g><title>heapless::indexmap::CoreMap&lt;K,V,_&gt;::find (2 samples, 1.53%)</title><rect x="38.1679%" y="533" width="1.5267%" height="15" fill="rgb(211,146,34)" fg:x="50" fg:w="2"/><text x="38.4179%" y="543.50"></text></g><g><title>heapless::indexmap::CoreMap&lt;K,V,_&gt;::mask (1 samples, 0.76%)</title><rect x="38.9313%" y="517" width="0.7634%" height="15" fill="rgb(228,22,38)" fg:x="51" fg:w="1"/><text x="39.1813%" y="527.50"></text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::FromResidual&gt;::from_residual (1 samples, 0.76%)</title><rect x="38.9313%" y="501" width="0.7634%" height="15" fill="rgb(235,168,5)" fg:x="51" fg:w="1"/><text x="39.1813%" y="511.50"></text></g><g><title>heapless::indexmap::IndexMap&lt;K,V,S,_&gt;::entry (4 samples, 3.05%)</title><rect x="38.1679%" y="549" width="3.0534%" height="15" fill="rgb(221,155,16)" fg:x="50" fg:w="4"/><text x="38.4179%" y="559.50">hea..</text></g><g><title>heapless::indexmap::hash_with (2 samples, 1.53%)</title><rect x="39.6947%" y="533" width="1.5267%" height="15" fill="rgb(215,215,53)" fg:x="52" fg:w="2"/><text x="39.9447%" y="543.50"></text></g><g><title>&lt;tftp::std_compat::net::SocketAddr as core::hash::Hash&gt;::hash (2 samples, 1.53%)</title><rect x="39.6947%" y="517" width="1.5267%" height="15" fill="rgb(223,4,10)" fg:x="52" fg:w="2"/><text x="39.9447%" y="527.50"></text></g><g><title>&lt;tftp::std_compat::net::IpVersion as core::hash::Hash&gt;::hash (2 samples, 1.53%)</title><rect x="39.6947%" y="501" width="1.5267%" height="15" fill="rgb(234,103,6)" fg:x="52" fg:w="2"/><text x="39.9447%" y="511.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (2 samples, 1.53%)</title><rect x="39.6947%" y="485" width="1.5267%" height="15" fill="rgb(227,97,0)" fg:x="52" fg:w="2"/><text x="39.9447%" y="495.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 1.53%)</title><rect x="39.6947%" y="469" width="1.5267%" height="15" fill="rgb(234,150,53)" fg:x="52" fg:w="2"/><text x="39.9447%" y="479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (2 samples, 1.53%)</title><rect x="39.6947%" y="453" width="1.5267%" height="15" fill="rgb(228,201,54)" fg:x="52" fg:w="2"/><text x="39.9447%" y="463.50"></text></g><g><title>&lt;hash32::fnv::Hasher as core::hash::Hasher&gt;::write (2 samples, 1.53%)</title><rect x="39.6947%" y="437" width="1.5267%" height="15" fill="rgb(222,22,37)" fg:x="52" fg:w="2"/><text x="39.9447%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 1.53%)</title><rect x="39.6947%" y="421" width="1.5267%" height="15" fill="rgb(237,53,32)" fg:x="52" fg:w="2"/><text x="39.9447%" y="431.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 1.53%)</title><rect x="39.6947%" y="405" width="1.5267%" height="15" fill="rgb(233,25,53)" fg:x="52" fg:w="2"/><text x="39.9447%" y="415.50"></text></g><g><title>log::max_level (1 samples, 0.76%)</title><rect x="41.2214%" y="549" width="0.7634%" height="15" fill="rgb(210,40,34)" fg:x="54" fg:w="1"/><text x="41.4714%" y="559.50"></text></g><g><title>tftp::io::instant_callback (1 samples, 0.76%)</title><rect x="41.9847%" y="549" width="0.7634%" height="15" fill="rgb(241,220,44)" fg:x="55" fg:w="1"/><text x="42.2347%" y="559.50"></text></g><g><title>tftp::std_compat::time::Instant::from_time (1 samples, 0.76%)</title><rect x="41.9847%" y="533" width="0.7634%" height="15" fill="rgb(235,28,35)" fg:x="55" fg:w="1"/><text x="42.2347%" y="543.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.76%)</title><rect x="41.9847%" y="517" width="0.7634%" height="15" fill="rgb(210,56,17)" fg:x="55" fg:w="1"/><text x="42.2347%" y="527.50"></text></g><g><title>tftp::io::instant_callback::{{closure}} (1 samples, 0.76%)</title><rect x="41.9847%" y="501" width="0.7634%" height="15" fill="rgb(224,130,29)" fg:x="55" fg:w="1"/><text x="42.2347%" y="511.50"></text></g><g><title>std::sys::unix::time::Timespec::now (1 samples, 0.76%)</title><rect x="41.9847%" y="485" width="0.7634%" height="15" fill="rgb(235,212,8)" fg:x="55" fg:w="1"/><text x="42.2347%" y="495.50"></text></g><g><title>__GI___clock_gettime (1 samples, 0.76%)</title><rect x="41.9847%" y="469" width="0.7634%" height="15" fill="rgb(223,33,50)" fg:x="55" fg:w="1"/><text x="42.2347%" y="479.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.76%)</title><rect x="41.9847%" y="453" width="0.7634%" height="15" fill="rgb(219,149,13)" fg:x="55" fg:w="1"/><text x="42.2347%" y="463.50"></text></g><g><title>[[vdso]] (1 samples, 0.76%)</title><rect x="41.9847%" y="437" width="0.7634%" height="15" fill="rgb(250,156,29)" fg:x="55" fg:w="1"/><text x="42.2347%" y="447.50"></text></g><g><title>tftp::server::connection_builder::ConnectionBuilder&lt;Rng&gt;::build_writer (1 samples, 0.76%)</title><rect x="42.7481%" y="549" width="0.7634%" height="15" fill="rgb(216,193,19)" fg:x="56" fg:w="1"/><text x="42.9981%" y="559.50"></text></g><g><title>core::ops::function::Fn::call (1 samples, 0.76%)</title><rect x="42.7481%" y="533" width="0.7634%" height="15" fill="rgb(216,135,14)" fg:x="56" fg:w="1"/><text x="42.9981%" y="543.50"></text></g><g><title>tftp::io::create_server_writer (1 samples, 0.76%)</title><rect x="42.7481%" y="517" width="0.7634%" height="15" fill="rgb(241,47,5)" fg:x="56" fg:w="1"/><text x="42.9981%" y="527.50"></text></g><g><title>std::fs::OpenOptions::open (1 samples, 0.76%)</title><rect x="42.7481%" y="501" width="0.7634%" height="15" fill="rgb(233,42,35)" fg:x="56" fg:w="1"/><text x="42.9981%" y="511.50"></text></g><g><title>std::fs::OpenOptions::_open (1 samples, 0.76%)</title><rect x="42.7481%" y="485" width="0.7634%" height="15" fill="rgb(231,13,6)" fg:x="56" fg:w="1"/><text x="42.9981%" y="495.50"></text></g><g><title>std::sys::unix::fs::File::open (1 samples, 0.76%)</title><rect x="42.7481%" y="469" width="0.7634%" height="15" fill="rgb(207,181,40)" fg:x="56" fg:w="1"/><text x="42.9981%" y="479.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.76%)</title><rect x="42.7481%" y="453" width="0.7634%" height="15" fill="rgb(254,173,49)" fg:x="56" fg:w="1"/><text x="42.9981%" y="463.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.76%)</title><rect x="42.7481%" y="437" width="0.7634%" height="15" fill="rgb(221,1,38)" fg:x="56" fg:w="1"/><text x="42.9981%" y="447.50"></text></g><g><title>std::sys::unix::fs::File::open::{{closure}} (1 samples, 0.76%)</title><rect x="42.7481%" y="421" width="0.7634%" height="15" fill="rgb(206,124,46)" fg:x="56" fg:w="1"/><text x="42.9981%" y="431.50"></text></g><g><title>std::sys::unix::fs::File::open_c (1 samples, 0.76%)</title><rect x="42.7481%" y="405" width="0.7634%" height="15" fill="rgb(249,21,11)" fg:x="56" fg:w="1"/><text x="42.9981%" y="415.50"></text></g><g><title>std::sys::unix::cvt_r (1 samples, 0.76%)</title><rect x="42.7481%" y="389" width="0.7634%" height="15" fill="rgb(222,201,40)" fg:x="56" fg:w="1"/><text x="42.9981%" y="399.50"></text></g><g><title>std::sys::unix::fs::File::open_c::{{closure}} (1 samples, 0.76%)</title><rect x="42.7481%" y="373" width="0.7634%" height="15" fill="rgb(235,61,29)" fg:x="56" fg:w="1"/><text x="42.9981%" y="383.50"></text></g><g><title>__libc_open64 (1 samples, 0.76%)</title><rect x="42.7481%" y="357" width="0.7634%" height="15" fill="rgb(219,207,3)" fg:x="56" fg:w="1"/><text x="42.9981%" y="367.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.76%)</title><rect x="42.7481%" y="341" width="0.7634%" height="15" fill="rgb(222,56,46)" fg:x="56" fg:w="1"/><text x="42.9981%" y="351.50"></text></g><g><title>do_syscall_64 (1 samples, 0.76%)</title><rect x="42.7481%" y="325" width="0.7634%" height="15" fill="rgb(239,76,54)" fg:x="56" fg:w="1"/><text x="42.9981%" y="335.50"></text></g><g><title>__x64_sys_openat (1 samples, 0.76%)</title><rect x="42.7481%" y="309" width="0.7634%" height="15" fill="rgb(231,124,27)" fg:x="56" fg:w="1"/><text x="42.9981%" y="319.50"></text></g><g><title>do_sys_openat2 (1 samples, 0.76%)</title><rect x="42.7481%" y="293" width="0.7634%" height="15" fill="rgb(249,195,6)" fg:x="56" fg:w="1"/><text x="42.9981%" y="303.50"></text></g><g><title>alloc_fd (1 samples, 0.76%)</title><rect x="42.7481%" y="277" width="0.7634%" height="15" fill="rgb(237,174,47)" fg:x="56" fg:w="1"/><text x="42.9981%" y="287.50"></text></g><g><title>expand_files (1 samples, 0.76%)</title><rect x="42.7481%" y="261" width="0.7634%" height="15" fill="rgb(206,201,31)" fg:x="56" fg:w="1"/><text x="42.9981%" y="271.50"></text></g><g><title>tftp::io::instant_callback (2 samples, 1.53%)</title><rect x="44.2748%" y="533" width="1.5267%" height="15" fill="rgb(231,57,52)" fg:x="58" fg:w="2"/><text x="44.5248%" y="543.50"></text></g><g><title>tftp::std_compat::time::Instant::from_time (2 samples, 1.53%)</title><rect x="44.2748%" y="517" width="1.5267%" height="15" fill="rgb(248,177,22)" fg:x="58" fg:w="2"/><text x="44.5248%" y="527.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 1.53%)</title><rect x="44.2748%" y="501" width="1.5267%" height="15" fill="rgb(215,211,37)" fg:x="58" fg:w="2"/><text x="44.5248%" y="511.50"></text></g><g><title>tftp::io::instant_callback::{{closure}} (2 samples, 1.53%)</title><rect x="44.2748%" y="485" width="1.5267%" height="15" fill="rgb(241,128,51)" fg:x="58" fg:w="2"/><text x="44.5248%" y="495.50"></text></g><g><title>std::sys::unix::time::Timespec::now (2 samples, 1.53%)</title><rect x="44.2748%" y="469" width="1.5267%" height="15" fill="rgb(227,165,31)" fg:x="58" fg:w="2"/><text x="44.5248%" y="479.50"></text></g><g><title>__GI___clock_gettime (2 samples, 1.53%)</title><rect x="44.2748%" y="453" width="1.5267%" height="15" fill="rgb(228,167,24)" fg:x="58" fg:w="2"/><text x="44.5248%" y="463.50"></text></g><g><title>__vdso_clock_gettime (2 samples, 1.53%)</title><rect x="44.2748%" y="437" width="1.5267%" height="15" fill="rgb(228,143,12)" fg:x="58" fg:w="2"/><text x="44.5248%" y="447.50"></text></g><g><title>[[vdso]] (2 samples, 1.53%)</title><rect x="44.2748%" y="421" width="1.5267%" height="15" fill="rgb(249,149,8)" fg:x="58" fg:w="2"/><text x="44.5248%" y="431.50"></text></g><g><title>&lt;heapless::vec::Vec&lt;T,_&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.76%)</title><rect x="45.8015%" y="517" width="0.7634%" height="15" fill="rgb(243,35,44)" fg:x="60" fg:w="1"/><text x="46.0515%" y="527.50"></text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::as_slice (1 samples, 0.76%)</title><rect x="45.8015%" y="501" width="0.7634%" height="15" fill="rgb(246,89,9)" fg:x="60" fg:w="1"/><text x="46.0515%" y="511.50"></text></g><g><title>ip_make_skb (1 samples, 0.76%)</title><rect x="47.3282%" y="341" width="0.7634%" height="15" fill="rgb(233,213,13)" fg:x="62" fg:w="1"/><text x="47.5782%" y="351.50"></text></g><g><title>__ip_append_data (1 samples, 0.76%)</title><rect x="47.3282%" y="325" width="0.7634%" height="15" fill="rgb(233,141,41)" fg:x="62" fg:w="1"/><text x="47.5782%" y="335.50"></text></g><g><title>__ip_local_out (1 samples, 0.76%)</title><rect x="48.0916%" y="309" width="0.7634%" height="15" fill="rgb(239,167,4)" fg:x="63" fg:w="1"/><text x="48.3416%" y="319.50"></text></g><g><title>nf_hook_slow (1 samples, 0.76%)</title><rect x="48.0916%" y="293" width="0.7634%" height="15" fill="rgb(209,217,16)" fg:x="63" fg:w="1"/><text x="48.3416%" y="303.50"></text></g><g><title>ip_local_deliver (1 samples, 0.76%)</title><rect x="49.6183%" y="181" width="0.7634%" height="15" fill="rgb(219,88,35)" fg:x="65" fg:w="1"/><text x="49.8683%" y="191.50"></text></g><g><title>nf_hook_slow (1 samples, 0.76%)</title><rect x="49.6183%" y="165" width="0.7634%" height="15" fill="rgb(220,193,23)" fg:x="65" fg:w="1"/><text x="49.8683%" y="175.50"></text></g><g><title>nf_confirm (1 samples, 0.76%)</title><rect x="49.6183%" y="149" width="0.7634%" height="15" fill="rgb(230,90,52)" fg:x="65" fg:w="1"/><text x="49.8683%" y="159.50"></text></g><g><title>__udp_enqueue_schedule_skb (1 samples, 0.76%)</title><rect x="50.3817%" y="101" width="0.7634%" height="15" fill="rgb(252,106,19)" fg:x="66" fg:w="1"/><text x="50.6317%" y="111.50"></text></g><g><title>sock_def_readable (1 samples, 0.76%)</title><rect x="50.3817%" y="85" width="0.7634%" height="15" fill="rgb(206,74,20)" fg:x="66" fg:w="1"/><text x="50.6317%" y="95.50"></text></g><g><title>__wake_up_common_lock (1 samples, 0.76%)</title><rect x="50.3817%" y="69" width="0.7634%" height="15" fill="rgb(230,138,44)" fg:x="66" fg:w="1"/><text x="50.6317%" y="79.50"></text></g><g><title>__wake_up_common (1 samples, 0.76%)</title><rect x="50.3817%" y="53" width="0.7634%" height="15" fill="rgb(235,182,43)" fg:x="66" fg:w="1"/><text x="50.6317%" y="63.50"></text></g><g><title>ep_poll_callback (1 samples, 0.76%)</title><rect x="50.3817%" y="37" width="0.7634%" height="15" fill="rgb(242,16,51)" fg:x="66" fg:w="1"/><text x="50.6317%" y="47.50"></text></g><g><title>ip_local_deliver_finish (2 samples, 1.53%)</title><rect x="50.3817%" y="181" width="1.5267%" height="15" fill="rgb(248,9,4)" fg:x="66" fg:w="2"/><text x="50.6317%" y="191.50"></text></g><g><title>ip_protocol_deliver_rcu (2 samples, 1.53%)</title><rect x="50.3817%" y="165" width="1.5267%" height="15" fill="rgb(210,31,22)" fg:x="66" fg:w="2"/><text x="50.6317%" y="175.50"></text></g><g><title>__udp4_lib_rcv (2 samples, 1.53%)</title><rect x="50.3817%" y="149" width="1.5267%" height="15" fill="rgb(239,54,39)" fg:x="66" fg:w="2"/><text x="50.6317%" y="159.50"></text></g><g><title>udp_unicast_rcv_skb (2 samples, 1.53%)</title><rect x="50.3817%" y="133" width="1.5267%" height="15" fill="rgb(230,99,41)" fg:x="66" fg:w="2"/><text x="50.6317%" y="143.50"></text></g><g><title>udp_queue_rcv_one_skb (2 samples, 1.53%)</title><rect x="50.3817%" y="117" width="1.5267%" height="15" fill="rgb(253,106,12)" fg:x="66" fg:w="2"/><text x="50.6317%" y="127.50"></text></g><g><title>ipv4_pktinfo_prepare (1 samples, 0.76%)</title><rect x="51.1450%" y="101" width="0.7634%" height="15" fill="rgb(213,46,41)" fg:x="67" fg:w="1"/><text x="51.3950%" y="111.50"></text></g><g><title>__x64_sys_sendto (7 samples, 5.34%)</title><rect x="47.3282%" y="405" width="5.3435%" height="15" fill="rgb(215,133,35)" fg:x="62" fg:w="7"/><text x="47.5782%" y="415.50">__x64_s..</text></g><g><title>__sys_sendto (7 samples, 5.34%)</title><rect x="47.3282%" y="389" width="5.3435%" height="15" fill="rgb(213,28,5)" fg:x="62" fg:w="7"/><text x="47.5782%" y="399.50">__sys_s..</text></g><g><title>sock_sendmsg (7 samples, 5.34%)</title><rect x="47.3282%" y="373" width="5.3435%" height="15" fill="rgb(215,77,49)" fg:x="62" fg:w="7"/><text x="47.5782%" y="383.50">sock_se..</text></g><g><title>udp_sendmsg (7 samples, 5.34%)</title><rect x="47.3282%" y="357" width="5.3435%" height="15" fill="rgb(248,100,22)" fg:x="62" fg:w="7"/><text x="47.5782%" y="367.50">udp_sen..</text></g><g><title>udp_send_skb (6 samples, 4.58%)</title><rect x="48.0916%" y="341" width="4.5802%" height="15" fill="rgb(208,67,9)" fg:x="63" fg:w="6"/><text x="48.3416%" y="351.50">udp_s..</text></g><g><title>ip_send_skb (6 samples, 4.58%)</title><rect x="48.0916%" y="325" width="4.5802%" height="15" fill="rgb(219,133,21)" fg:x="63" fg:w="6"/><text x="48.3416%" y="335.50">ip_se..</text></g><g><title>ip_finish_output2 (5 samples, 3.82%)</title><rect x="48.8550%" y="309" width="3.8168%" height="15" fill="rgb(246,46,29)" fg:x="64" fg:w="5"/><text x="49.1050%" y="319.50">ip_f..</text></g><g><title>__local_bh_enable_ip (5 samples, 3.82%)</title><rect x="48.8550%" y="293" width="3.8168%" height="15" fill="rgb(246,185,52)" fg:x="64" fg:w="5"/><text x="49.1050%" y="303.50">__lo..</text></g><g><title>do_softirq.part.0 (5 samples, 3.82%)</title><rect x="48.8550%" y="277" width="3.8168%" height="15" fill="rgb(252,136,11)" fg:x="64" fg:w="5"/><text x="49.1050%" y="287.50">do_s..</text></g><g><title>__do_softirq (4 samples, 3.05%)</title><rect x="49.6183%" y="261" width="3.0534%" height="15" fill="rgb(219,138,53)" fg:x="65" fg:w="4"/><text x="49.8683%" y="271.50">__d..</text></g><g><title>net_rx_action (4 samples, 3.05%)</title><rect x="49.6183%" y="245" width="3.0534%" height="15" fill="rgb(211,51,23)" fg:x="65" fg:w="4"/><text x="49.8683%" y="255.50">net..</text></g><g><title>__napi_poll (4 samples, 3.05%)</title><rect x="49.6183%" y="229" width="3.0534%" height="15" fill="rgb(247,221,28)" fg:x="65" fg:w="4"/><text x="49.8683%" y="239.50">__n..</text></g><g><title>process_backlog (4 samples, 3.05%)</title><rect x="49.6183%" y="213" width="3.0534%" height="15" fill="rgb(251,222,45)" fg:x="65" fg:w="4"/><text x="49.8683%" y="223.50">pro..</text></g><g><title>__netif_receive_skb_one_core (4 samples, 3.05%)</title><rect x="49.6183%" y="197" width="3.0534%" height="15" fill="rgb(217,162,53)" fg:x="65" fg:w="4"/><text x="49.8683%" y="207.50">__n..</text></g><g><title>ip_rcv (1 samples, 0.76%)</title><rect x="51.9084%" y="181" width="0.7634%" height="15" fill="rgb(229,93,14)" fg:x="68" fg:w="1"/><text x="52.1584%" y="191.50"></text></g><g><title>ip_rcv_finish_core.constprop.0 (1 samples, 0.76%)</title><rect x="51.9084%" y="165" width="0.7634%" height="15" fill="rgb(209,67,49)" fg:x="68" fg:w="1"/><text x="52.1584%" y="175.50"></text></g><g><title>tftp::server::connection::Connection&lt;B,Rng&gt;::send_packet (10 samples, 7.63%)</title><rect x="45.8015%" y="533" width="7.6336%" height="15" fill="rgb(213,87,29)" fg:x="60" fg:w="10"/><text x="46.0515%" y="543.50">tftp::serv..</text></g><g><title>tftp::server::connection::Connection&lt;B,Rng&gt;::send_bytes (9 samples, 6.87%)</title><rect x="46.5649%" y="517" width="6.8702%" height="15" fill="rgb(205,151,52)" fg:x="61" fg:w="9"/><text x="46.8149%" y="527.50">tftp::ser..</text></g><g><title>&lt;tftp::socket::UdpBoundSocket as tftp::socket::BoundSocket&gt;::send (9 samples, 6.87%)</title><rect x="46.5649%" y="501" width="6.8702%" height="15" fill="rgb(253,215,39)" fg:x="61" fg:w="9"/><text x="46.8149%" y="511.50">&lt;tftp::so..</text></g><g><title>std::net::udp::UdpSocket::send (9 samples, 6.87%)</title><rect x="46.5649%" y="485" width="6.8702%" height="15" fill="rgb(221,220,41)" fg:x="61" fg:w="9"/><text x="46.8149%" y="495.50">std::net:..</text></g><g><title>std::sys_common::net::UdpSocket::send (9 samples, 6.87%)</title><rect x="46.5649%" y="469" width="6.8702%" height="15" fill="rgb(218,133,21)" fg:x="61" fg:w="9"/><text x="46.8149%" y="479.50">std::sys_..</text></g><g><title>__libc_send (9 samples, 6.87%)</title><rect x="46.5649%" y="453" width="6.8702%" height="15" fill="rgb(221,193,43)" fg:x="61" fg:w="9"/><text x="46.8149%" y="463.50">__libc_se..</text></g><g><title>entry_SYSCALL_64_after_hwframe (8 samples, 6.11%)</title><rect x="47.3282%" y="437" width="6.1069%" height="15" fill="rgb(240,128,52)" fg:x="62" fg:w="8"/><text x="47.5782%" y="447.50">entry_SY..</text></g><g><title>do_syscall_64 (8 samples, 6.11%)</title><rect x="47.3282%" y="421" width="6.1069%" height="15" fill="rgb(253,114,12)" fg:x="62" fg:w="8"/><text x="47.5782%" y="431.50">do_sysca..</text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.76%)</title><rect x="52.6718%" y="405" width="0.7634%" height="15" fill="rgb(215,223,47)" fg:x="69" fg:w="1"/><text x="52.9218%" y="415.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.76%)</title><rect x="52.6718%" y="389" width="0.7634%" height="15" fill="rgb(248,225,23)" fg:x="69" fg:w="1"/><text x="52.9218%" y="399.50"></text></g><g><title>dput (1 samples, 0.76%)</title><rect x="53.4351%" y="325" width="0.7634%" height="15" fill="rgb(250,108,0)" fg:x="70" fg:w="1"/><text x="53.6851%" y="335.50"></text></g><g><title>lockref_put_return (1 samples, 0.76%)</title><rect x="53.4351%" y="309" width="0.7634%" height="15" fill="rgb(228,208,7)" fg:x="70" fg:w="1"/><text x="53.6851%" y="319.50"></text></g><g><title>__memcpy (1 samples, 0.76%)</title><rect x="54.1985%" y="293" width="0.7634%" height="15" fill="rgb(244,45,10)" fg:x="71" fg:w="1"/><text x="54.4485%" y="303.50"></text></g><g><title>fsnotify (2 samples, 1.53%)</title><rect x="54.1985%" y="325" width="1.5267%" height="15" fill="rgb(207,125,25)" fg:x="71" fg:w="2"/><text x="54.4485%" y="335.50"></text></g><g><title>inotify_handle_inode_event (2 samples, 1.53%)</title><rect x="54.1985%" y="309" width="1.5267%" height="15" fill="rgb(210,195,18)" fg:x="71" fg:w="2"/><text x="54.4485%" y="319.50"></text></g><g><title>fsnotify_insert_event (1 samples, 0.76%)</title><rect x="54.9618%" y="293" width="0.7634%" height="15" fill="rgb(249,80,12)" fg:x="72" fg:w="1"/><text x="55.2118%" y="303.50"></text></g><g><title>__wake_up_common_lock (1 samples, 0.76%)</title><rect x="54.9618%" y="277" width="0.7634%" height="15" fill="rgb(221,65,9)" fg:x="72" fg:w="1"/><text x="55.2118%" y="287.50"></text></g><g><title>__wake_up_common (1 samples, 0.76%)</title><rect x="54.9618%" y="261" width="0.7634%" height="15" fill="rgb(235,49,36)" fg:x="72" fg:w="1"/><text x="55.2118%" y="271.50"></text></g><g><title>pollwake (1 samples, 0.76%)</title><rect x="54.9618%" y="245" width="0.7634%" height="15" fill="rgb(225,32,20)" fg:x="72" fg:w="1"/><text x="55.2118%" y="255.50"></text></g><g><title>try_to_wake_up (1 samples, 0.76%)</title><rect x="54.9618%" y="229" width="0.7634%" height="15" fill="rgb(215,141,46)" fg:x="72" fg:w="1"/><text x="55.2118%" y="239.50"></text></g><g><title>select_task_rq_fair (1 samples, 0.76%)</title><rect x="54.9618%" y="213" width="0.7634%" height="15" fill="rgb(250,160,47)" fg:x="72" fg:w="1"/><text x="55.2118%" y="223.50"></text></g><g><title>__fsnotify_parent (4 samples, 3.05%)</title><rect x="53.4351%" y="341" width="3.0534%" height="15" fill="rgb(216,222,40)" fg:x="70" fg:w="4"/><text x="53.6851%" y="351.50">__f..</text></g><g><title>take_dentry_name_snapshot (1 samples, 0.76%)</title><rect x="55.7252%" y="325" width="0.7634%" height="15" fill="rgb(234,217,39)" fg:x="73" fg:w="1"/><text x="55.9752%" y="335.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.76%)</title><rect x="55.7252%" y="309" width="0.7634%" height="15" fill="rgb(207,178,40)" fg:x="73" fg:w="1"/><text x="55.9752%" y="319.50"></text></g><g><title>copy_page_from_iter_atomic (1 samples, 0.76%)</title><rect x="56.4885%" y="309" width="0.7634%" height="15" fill="rgb(221,136,13)" fg:x="74" fg:w="1"/><text x="56.7385%" y="319.50"></text></g><g><title>copy_user_generic_string (1 samples, 0.76%)</title><rect x="56.4885%" y="293" width="0.7634%" height="15" fill="rgb(249,199,10)" fg:x="74" fg:w="1"/><text x="56.7385%" y="303.50"></text></g><g><title>create_empty_buffers (2 samples, 1.53%)</title><rect x="57.2519%" y="277" width="1.5267%" height="15" fill="rgb(249,222,13)" fg:x="75" fg:w="2"/><text x="57.5019%" y="287.50"></text></g><g><title>alloc_page_buffers (2 samples, 1.53%)</title><rect x="57.2519%" y="261" width="1.5267%" height="15" fill="rgb(244,185,38)" fg:x="75" fg:w="2"/><text x="57.5019%" y="271.50"></text></g><g><title>alloc_buffer_head (2 samples, 1.53%)</title><rect x="57.2519%" y="245" width="1.5267%" height="15" fill="rgb(236,202,9)" fg:x="75" fg:w="2"/><text x="57.5019%" y="255.50"></text></g><g><title>kmem_cache_alloc (2 samples, 1.53%)</title><rect x="57.2519%" y="229" width="1.5267%" height="15" fill="rgb(250,229,37)" fg:x="75" fg:w="2"/><text x="57.5019%" y="239.50"></text></g><g><title>memcg_slab_post_alloc_hook (1 samples, 0.76%)</title><rect x="58.0153%" y="213" width="0.7634%" height="15" fill="rgb(206,174,23)" fg:x="76" fg:w="1"/><text x="58.2653%" y="223.50"></text></g><g><title>memcg_alloc_slab_cgroups (1 samples, 0.76%)</title><rect x="58.0153%" y="197" width="0.7634%" height="15" fill="rgb(211,33,43)" fg:x="76" fg:w="1"/><text x="58.2653%" y="207.50"></text></g><g><title>__kmalloc_node (1 samples, 0.76%)</title><rect x="58.0153%" y="181" width="0.7634%" height="15" fill="rgb(245,58,50)" fg:x="76" fg:w="1"/><text x="58.2653%" y="191.50"></text></g><g><title>__kmem_cache_alloc_node (1 samples, 0.76%)</title><rect x="58.0153%" y="165" width="0.7634%" height="15" fill="rgb(244,68,36)" fg:x="76" fg:w="1"/><text x="58.2653%" y="175.50"></text></g><g><title>__memset (1 samples, 0.76%)</title><rect x="58.0153%" y="149" width="0.7634%" height="15" fill="rgb(232,229,15)" fg:x="76" fg:w="1"/><text x="58.2653%" y="159.50"></text></g><g><title>ext4_block_write_begin (4 samples, 3.05%)</title><rect x="57.2519%" y="293" width="3.0534%" height="15" fill="rgb(254,30,23)" fg:x="75" fg:w="4"/><text x="57.5019%" y="303.50">ext..</text></g><g><title>ext4_da_get_block_prep (2 samples, 1.53%)</title><rect x="58.7786%" y="277" width="1.5267%" height="15" fill="rgb(235,160,14)" fg:x="77" fg:w="2"/><text x="59.0286%" y="287.50"></text></g><g><title>ext4_es_lookup_extent (2 samples, 1.53%)</title><rect x="58.7786%" y="261" width="1.5267%" height="15" fill="rgb(212,155,44)" fg:x="77" fg:w="2"/><text x="59.0286%" y="271.50"></text></g><g><title>percpu_counter_add_batch (1 samples, 0.76%)</title><rect x="59.5420%" y="245" width="0.7634%" height="15" fill="rgb(226,2,50)" fg:x="78" fg:w="1"/><text x="59.7920%" y="255.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.76%)</title><rect x="60.3053%" y="229" width="0.7634%" height="15" fill="rgb(234,177,6)" fg:x="79" fg:w="1"/><text x="60.5553%" y="239.50"></text></g><g><title>get_mem_cgroup_from_mm (1 samples, 0.76%)</title><rect x="60.3053%" y="213" width="0.7634%" height="15" fill="rgb(217,24,9)" fg:x="79" fg:w="1"/><text x="60.5553%" y="223.50"></text></g><g><title>filemap_add_folio (2 samples, 1.53%)</title><rect x="60.3053%" y="261" width="1.5267%" height="15" fill="rgb(220,13,46)" fg:x="79" fg:w="2"/><text x="60.5553%" y="271.50"></text></g><g><title>__filemap_add_folio (2 samples, 1.53%)</title><rect x="60.3053%" y="245" width="1.5267%" height="15" fill="rgb(239,221,27)" fg:x="79" fg:w="2"/><text x="60.5553%" y="255.50"></text></g><g><title>__mod_lruvec_page_state (1 samples, 0.76%)</title><rect x="61.0687%" y="229" width="0.7634%" height="15" fill="rgb(222,198,25)" fg:x="80" fg:w="1"/><text x="61.3187%" y="239.50"></text></g><g><title>clear_page_rep (3 samples, 2.29%)</title><rect x="62.5954%" y="213" width="2.2901%" height="15" fill="rgb(211,99,13)" fg:x="82" fg:w="3"/><text x="62.8454%" y="223.50">c..</text></g><g><title>ext4_da_write_begin (11 samples, 8.40%)</title><rect x="57.2519%" y="309" width="8.3969%" height="15" fill="rgb(232,111,31)" fg:x="75" fg:w="11"/><text x="57.5019%" y="319.50">ext4_da_writ..</text></g><g><title>pagecache_get_page (7 samples, 5.34%)</title><rect x="60.3053%" y="293" width="5.3435%" height="15" fill="rgb(245,82,37)" fg:x="79" fg:w="7"/><text x="60.5553%" y="303.50">pagecac..</text></g><g><title>__filemap_get_folio (7 samples, 5.34%)</title><rect x="60.3053%" y="277" width="5.3435%" height="15" fill="rgb(227,149,46)" fg:x="79" fg:w="7"/><text x="60.5553%" y="287.50">__filem..</text></g><g><title>folio_alloc (5 samples, 3.82%)</title><rect x="61.8321%" y="261" width="3.8168%" height="15" fill="rgb(218,36,50)" fg:x="81" fg:w="5"/><text x="62.0821%" y="271.50">foli..</text></g><g><title>__alloc_pages (5 samples, 3.82%)</title><rect x="61.8321%" y="245" width="3.8168%" height="15" fill="rgb(226,80,48)" fg:x="81" fg:w="5"/><text x="62.0821%" y="255.50">__al..</text></g><g><title>get_page_from_freelist (5 samples, 3.82%)</title><rect x="61.8321%" y="229" width="3.8168%" height="15" fill="rgb(238,224,15)" fg:x="81" fg:w="5"/><text x="62.0821%" y="239.50">get_..</text></g><g><title>rmqueue_bulk (1 samples, 0.76%)</title><rect x="64.8855%" y="213" width="0.7634%" height="15" fill="rgb(241,136,10)" fg:x="85" fg:w="1"/><text x="65.1355%" y="223.50"></text></g><g><title>__list_del_entry_valid (1 samples, 0.76%)</title><rect x="64.8855%" y="197" width="0.7634%" height="15" fill="rgb(208,32,45)" fg:x="85" fg:w="1"/><text x="65.1355%" y="207.50"></text></g><g><title>__block_commit_write.constprop.0.isra.0 (1 samples, 0.76%)</title><rect x="65.6489%" y="293" width="0.7634%" height="15" fill="rgb(207,135,9)" fg:x="86" fg:w="1"/><text x="65.8989%" y="303.50"></text></g><g><title>mark_buffer_dirty (1 samples, 0.76%)</title><rect x="65.6489%" y="277" width="0.7634%" height="15" fill="rgb(206,86,44)" fg:x="86" fg:w="1"/><text x="65.8989%" y="287.50"></text></g><g><title>__folio_mark_dirty (1 samples, 0.76%)</title><rect x="65.6489%" y="261" width="0.7634%" height="15" fill="rgb(245,177,15)" fg:x="86" fg:w="1"/><text x="65.8989%" y="271.50"></text></g><g><title>__xa_set_mark (1 samples, 0.76%)</title><rect x="65.6489%" y="245" width="0.7634%" height="15" fill="rgb(206,64,50)" fg:x="86" fg:w="1"/><text x="65.8989%" y="255.50"></text></g><g><title>xas_load (1 samples, 0.76%)</title><rect x="65.6489%" y="229" width="0.7634%" height="15" fill="rgb(234,36,40)" fg:x="86" fg:w="1"/><text x="65.8989%" y="239.50"></text></g><g><title>xas_start (1 samples, 0.76%)</title><rect x="65.6489%" y="213" width="0.7634%" height="15" fill="rgb(213,64,8)" fg:x="86" fg:w="1"/><text x="65.8989%" y="223.50"></text></g><g><title>__ext4_journal_start_sb (1 samples, 0.76%)</title><rect x="66.4122%" y="261" width="0.7634%" height="15" fill="rgb(210,75,36)" fg:x="87" fg:w="1"/><text x="66.6622%" y="271.50"></text></g><g><title>ext4_journal_check_start (1 samples, 0.76%)</title><rect x="66.4122%" y="245" width="0.7634%" height="15" fill="rgb(229,88,21)" fg:x="87" fg:w="1"/><text x="66.6622%" y="255.50"></text></g><g><title>tftp::server::helpers::write::handle_write (32 samples, 24.43%)</title><rect x="43.5115%" y="549" width="24.4275%" height="15" fill="rgb(252,204,47)" fg:x="57" fg:w="32"/><text x="43.7615%" y="559.50">tftp::server::helpers::write::handle_wr..</text></g><g><title>tftp::server::helpers::write::write_block (19 samples, 14.50%)</title><rect x="53.4351%" y="533" width="14.5038%" height="15" fill="rgb(208,77,27)" fg:x="70" fg:w="19"/><text x="53.6851%" y="543.50">tftp::server::helpers:..</text></g><g><title>&lt;tftp::writers::single_block_writer::SingleBlockWriter&lt;W&gt; as tftp::writers::block_writer::BlockWriter&gt;::write_block (19 samples, 14.50%)</title><rect x="53.4351%" y="517" width="14.5038%" height="15" fill="rgb(221,76,26)" fg:x="70" fg:w="19"/><text x="53.6851%" y="527.50">&lt;tftp::writers::single..</text></g><g><title>&lt;tftp::std_compat::fs::File as tftp::std_compat::io::Write&gt;::write (19 samples, 14.50%)</title><rect x="53.4351%" y="501" width="14.5038%" height="15" fill="rgb(225,139,18)" fg:x="70" fg:w="19"/><text x="53.6851%" y="511.50">&lt;tftp::std_compat::fs:..</text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (19 samples, 14.50%)</title><rect x="53.4351%" y="485" width="14.5038%" height="15" fill="rgb(230,137,11)" fg:x="70" fg:w="19"/><text x="53.6851%" y="495.50">&lt;std::fs::File as std:..</text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (19 samples, 14.50%)</title><rect x="53.4351%" y="469" width="14.5038%" height="15" fill="rgb(212,28,1)" fg:x="70" fg:w="19"/><text x="53.6851%" y="479.50">&lt;&amp;std::fs::File as std..</text></g><g><title>std::sys::unix::fs::File::write (19 samples, 14.50%)</title><rect x="53.4351%" y="453" width="14.5038%" height="15" fill="rgb(248,164,17)" fg:x="70" fg:w="19"/><text x="53.6851%" y="463.50">std::sys::unix::fs::Fi..</text></g><g><title>std::sys::unix::fd::FileDesc::write (19 samples, 14.50%)</title><rect x="53.4351%" y="437" width="14.5038%" height="15" fill="rgb(222,171,42)" fg:x="70" fg:w="19"/><text x="53.6851%" y="447.50">std::sys::unix::fd::Fi..</text></g><g><title>__GI___libc_write (19 samples, 14.50%)</title><rect x="53.4351%" y="421" width="14.5038%" height="15" fill="rgb(243,84,45)" fg:x="70" fg:w="19"/><text x="53.6851%" y="431.50">__GI___libc_write</text></g><g><title>entry_SYSCALL_64_after_hwframe (19 samples, 14.50%)</title><rect x="53.4351%" y="405" width="14.5038%" height="15" fill="rgb(252,49,23)" fg:x="70" fg:w="19"/><text x="53.6851%" y="415.50">entry_SYSCALL_64_after..</text></g><g><title>do_syscall_64 (19 samples, 14.50%)</title><rect x="53.4351%" y="389" width="14.5038%" height="15" fill="rgb(215,19,7)" fg:x="70" fg:w="19"/><text x="53.6851%" y="399.50">do_syscall_64</text></g><g><title>ksys_write (19 samples, 14.50%)</title><rect x="53.4351%" y="373" width="14.5038%" height="15" fill="rgb(238,81,41)" fg:x="70" fg:w="19"/><text x="53.6851%" y="383.50">ksys_write</text></g><g><title>vfs_write (19 samples, 14.50%)</title><rect x="53.4351%" y="357" width="14.5038%" height="15" fill="rgb(210,199,37)" fg:x="70" fg:w="19"/><text x="53.6851%" y="367.50">vfs_write</text></g><g><title>ext4_buffered_write_iter (15 samples, 11.45%)</title><rect x="56.4885%" y="341" width="11.4504%" height="15" fill="rgb(244,192,49)" fg:x="74" fg:w="15"/><text x="56.7385%" y="351.50">ext4_buffered_wri..</text></g><g><title>generic_perform_write (15 samples, 11.45%)</title><rect x="56.4885%" y="325" width="11.4504%" height="15" fill="rgb(226,211,11)" fg:x="74" fg:w="15"/><text x="56.7385%" y="335.50">generic_perform_w..</text></g><g><title>generic_write_end (3 samples, 2.29%)</title><rect x="65.6489%" y="309" width="2.2901%" height="15" fill="rgb(236,162,54)" fg:x="86" fg:w="3"/><text x="65.8989%" y="319.50">g..</text></g><g><title>__mark_inode_dirty (2 samples, 1.53%)</title><rect x="66.4122%" y="293" width="1.5267%" height="15" fill="rgb(220,229,9)" fg:x="87" fg:w="2"/><text x="66.6622%" y="303.50"></text></g><g><title>ext4_dirty_inode (2 samples, 1.53%)</title><rect x="66.4122%" y="277" width="1.5267%" height="15" fill="rgb(250,87,22)" fg:x="87" fg:w="2"/><text x="66.6622%" y="287.50"></text></g><g><title>__ext4_mark_inode_dirty (1 samples, 0.76%)</title><rect x="67.1756%" y="261" width="0.7634%" height="15" fill="rgb(239,43,17)" fg:x="88" fg:w="1"/><text x="67.4256%" y="271.50"></text></g><g><title>ext4_reserve_inode_write (1 samples, 0.76%)</title><rect x="67.1756%" y="245" width="0.7634%" height="15" fill="rgb(231,177,25)" fg:x="88" fg:w="1"/><text x="67.4256%" y="255.50"></text></g><g><title>__ext4_journal_get_write_access (1 samples, 0.76%)</title><rect x="67.1756%" y="229" width="0.7634%" height="15" fill="rgb(219,179,1)" fg:x="88" fg:w="1"/><text x="67.4256%" y="239.50"></text></g><g><title>jbd2_journal_get_write_access (1 samples, 0.76%)</title><rect x="67.1756%" y="213" width="0.7634%" height="15" fill="rgb(238,219,53)" fg:x="88" fg:w="1"/><text x="67.4256%" y="223.50"></text></g><g><title>jbd2_write_access_granted (1 samples, 0.76%)</title><rect x="67.1756%" y="197" width="0.7634%" height="15" fill="rgb(232,167,36)" fg:x="88" fg:w="1"/><text x="67.4256%" y="207.50"></text></g><g><title>[unknown] (77 samples, 58.78%)</title><rect x="9.9237%" y="581" width="58.7786%" height="15" fill="rgb(244,19,51)" fg:x="13" fg:w="77"/><text x="10.1737%" y="591.50">[unknown]</text></g><g><title>tftp::server::single_thread::server (61 samples, 46.56%)</title><rect x="22.1374%" y="565" width="46.5649%" height="15" fill="rgb(224,6,22)" fg:x="29" fg:w="61"/><text x="22.3874%" y="575.50">tftp::server::single_thread::server</text></g><g><title>tftp::std_compat::time::Instant::elapsed (1 samples, 0.76%)</title><rect x="67.9389%" y="549" width="0.7634%" height="15" fill="rgb(224,145,5)" fg:x="89" fg:w="1"/><text x="68.1889%" y="559.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.76%)</title><rect x="67.9389%" y="533" width="0.7634%" height="15" fill="rgb(234,130,49)" fg:x="89" fg:w="1"/><text x="68.1889%" y="543.50"></text></g><g><title>tftp::io::instant_callback::{{closure}} (1 samples, 0.76%)</title><rect x="67.9389%" y="517" width="0.7634%" height="15" fill="rgb(254,6,2)" fg:x="89" fg:w="1"/><text x="68.1889%" y="527.50"></text></g><g><title>std::sys::unix::time::Timespec::now (1 samples, 0.76%)</title><rect x="67.9389%" y="501" width="0.7634%" height="15" fill="rgb(208,96,46)" fg:x="89" fg:w="1"/><text x="68.1889%" y="511.50"></text></g><g><title>__GI___clock_gettime (1 samples, 0.76%)</title><rect x="67.9389%" y="485" width="0.7634%" height="15" fill="rgb(239,3,39)" fg:x="89" fg:w="1"/><text x="68.1889%" y="495.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.76%)</title><rect x="67.9389%" y="469" width="0.7634%" height="15" fill="rgb(233,210,1)" fg:x="89" fg:w="1"/><text x="68.1889%" y="479.50"></text></g><g><title>[[vdso]] (1 samples, 0.76%)</title><rect x="67.9389%" y="453" width="0.7634%" height="15" fill="rgb(244,137,37)" fg:x="89" fg:w="1"/><text x="68.1889%" y="463.50"></text></g><g><title>_start (1 samples, 0.76%)</title><rect x="68.7023%" y="581" width="0.7634%" height="15" fill="rgb(240,136,2)" fg:x="90" fg:w="1"/><text x="68.9523%" y="591.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.76%)</title><rect x="68.7023%" y="565" width="0.7634%" height="15" fill="rgb(239,18,37)" fg:x="90" fg:w="1"/><text x="68.9523%" y="575.50"></text></g><g><title>do_syscall_64 (1 samples, 0.76%)</title><rect x="68.7023%" y="549" width="0.7634%" height="15" fill="rgb(218,185,22)" fg:x="90" fg:w="1"/><text x="68.9523%" y="559.50"></text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.76%)</title><rect x="68.7023%" y="533" width="0.7634%" height="15" fill="rgb(225,218,4)" fg:x="90" fg:w="1"/><text x="68.9523%" y="543.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.76%)</title><rect x="68.7023%" y="517" width="0.7634%" height="15" fill="rgb(230,182,32)" fg:x="90" fg:w="1"/><text x="68.9523%" y="527.50"></text></g><g><title>task_work_run (1 samples, 0.76%)</title><rect x="68.7023%" y="501" width="0.7634%" height="15" fill="rgb(242,56,43)" fg:x="90" fg:w="1"/><text x="68.9523%" y="511.50"></text></g><g><title>__fput (1 samples, 0.76%)</title><rect x="68.7023%" y="485" width="0.7634%" height="15" fill="rgb(233,99,24)" fg:x="90" fg:w="1"/><text x="68.9523%" y="495.50"></text></g><g><title>__dentry_kill (1 samples, 0.76%)</title><rect x="68.7023%" y="469" width="0.7634%" height="15" fill="rgb(234,209,42)" fg:x="90" fg:w="1"/><text x="68.9523%" y="479.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.76%)</title><rect x="68.7023%" y="453" width="0.7634%" height="15" fill="rgb(227,7,12)" fg:x="90" fg:w="1"/><text x="68.9523%" y="463.50"></text></g><g><title>asm_exc_page_fault (2 samples, 1.53%)</title><rect x="69.4656%" y="581" width="1.5267%" height="15" fill="rgb(245,203,43)" fg:x="91" fg:w="2"/><text x="69.7156%" y="591.50"></text></g><g><title>exc_page_fault (2 samples, 1.53%)</title><rect x="69.4656%" y="565" width="1.5267%" height="15" fill="rgb(238,205,33)" fg:x="91" fg:w="2"/><text x="69.7156%" y="575.50"></text></g><g><title>do_user_addr_fault (2 samples, 1.53%)</title><rect x="69.4656%" y="549" width="1.5267%" height="15" fill="rgb(231,56,7)" fg:x="91" fg:w="2"/><text x="69.7156%" y="559.50"></text></g><g><title>expand_downwards (2 samples, 1.53%)</title><rect x="69.4656%" y="533" width="1.5267%" height="15" fill="rgb(244,186,29)" fg:x="91" fg:w="2"/><text x="69.7156%" y="543.50"></text></g><g><title>mas_preallocate (1 samples, 0.76%)</title><rect x="70.2290%" y="517" width="0.7634%" height="15" fill="rgb(234,111,31)" fg:x="92" fg:w="1"/><text x="70.4790%" y="527.50"></text></g><g><title>mas_alloc_nodes (1 samples, 0.76%)</title><rect x="70.2290%" y="501" width="0.7634%" height="15" fill="rgb(241,149,10)" fg:x="92" fg:w="1"/><text x="70.4790%" y="511.50"></text></g><g><title>kmem_cache_alloc_bulk (1 samples, 0.76%)</title><rect x="70.2290%" y="485" width="0.7634%" height="15" fill="rgb(249,206,44)" fg:x="92" fg:w="1"/><text x="70.4790%" y="495.50"></text></g><g><title>check_preemption_disabled (1 samples, 0.76%)</title><rect x="70.2290%" y="469" width="0.7634%" height="15" fill="rgb(251,153,30)" fg:x="92" fg:w="1"/><text x="70.4790%" y="479.50"></text></g><g><title>__fget_light (1 samples, 0.76%)</title><rect x="71.7557%" y="517" width="0.7634%" height="15" fill="rgb(239,152,38)" fg:x="94" fg:w="1"/><text x="72.0057%" y="527.50"></text></g><g><title>__x64_sys_epoll_ctl (2 samples, 1.53%)</title><rect x="71.7557%" y="549" width="1.5267%" height="15" fill="rgb(249,139,47)" fg:x="94" fg:w="2"/><text x="72.0057%" y="559.50"></text></g><g><title>do_epoll_ctl (2 samples, 1.53%)</title><rect x="71.7557%" y="533" width="1.5267%" height="15" fill="rgb(244,64,35)" fg:x="94" fg:w="2"/><text x="72.0057%" y="543.50"></text></g><g><title>ep_item_poll.isra.0 (1 samples, 0.76%)</title><rect x="72.5191%" y="517" width="0.7634%" height="15" fill="rgb(216,46,15)" fg:x="95" fg:w="1"/><text x="72.7691%" y="527.50"></text></g><g><title>sock_poll (1 samples, 0.76%)</title><rect x="72.5191%" y="501" width="0.7634%" height="15" fill="rgb(250,74,19)" fg:x="95" fg:w="1"/><text x="72.7691%" y="511.50"></text></g><g><title>udp_poll (1 samples, 0.76%)</title><rect x="72.5191%" y="485" width="0.7634%" height="15" fill="rgb(249,42,33)" fg:x="95" fg:w="1"/><text x="72.7691%" y="495.50"></text></g><g><title>__fget_light (1 samples, 0.76%)</title><rect x="75.5725%" y="517" width="0.7634%" height="15" fill="rgb(242,149,17)" fg:x="99" fg:w="1"/><text x="75.8225%" y="527.50"></text></g><g><title>ep_item_poll.isra.0 (1 samples, 0.76%)</title><rect x="76.3359%" y="517" width="0.7634%" height="15" fill="rgb(244,29,21)" fg:x="100" fg:w="1"/><text x="76.5859%" y="527.50"></text></g><g><title>sock_poll (1 samples, 0.76%)</title><rect x="76.3359%" y="501" width="0.7634%" height="15" fill="rgb(220,130,37)" fg:x="100" fg:w="1"/><text x="76.5859%" y="511.50"></text></g><g><title>__x64_sys_epoll_wait (6 samples, 4.58%)</title><rect x="73.2824%" y="549" width="4.5802%" height="15" fill="rgb(211,67,2)" fg:x="96" fg:w="6"/><text x="73.5324%" y="559.50">__x64..</text></g><g><title>do_epoll_wait (6 samples, 4.58%)</title><rect x="73.2824%" y="533" width="4.5802%" height="15" fill="rgb(235,68,52)" fg:x="96" fg:w="6"/><text x="73.5324%" y="543.50">do_ep..</text></g><g><title>schedule_hrtimeout_range_clock (1 samples, 0.76%)</title><rect x="77.0992%" y="517" width="0.7634%" height="15" fill="rgb(246,142,3)" fg:x="101" fg:w="1"/><text x="77.3492%" y="527.50"></text></g><g><title>schedule (1 samples, 0.76%)</title><rect x="77.0992%" y="501" width="0.7634%" height="15" fill="rgb(241,25,7)" fg:x="101" fg:w="1"/><text x="77.3492%" y="511.50"></text></g><g><title>__schedule (1 samples, 0.76%)</title><rect x="77.0992%" y="485" width="0.7634%" height="15" fill="rgb(242,119,39)" fg:x="101" fg:w="1"/><text x="77.3492%" y="495.50"></text></g><g><title>rcu_note_context_switch (1 samples, 0.76%)</title><rect x="77.0992%" y="469" width="0.7634%" height="15" fill="rgb(241,98,45)" fg:x="101" fg:w="1"/><text x="77.3492%" y="479.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.76%)</title><rect x="77.8626%" y="549" width="0.7634%" height="15" fill="rgb(254,28,30)" fg:x="102" fg:w="1"/><text x="78.1126%" y="559.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 0.76%)</title><rect x="77.8626%" y="533" width="0.7634%" height="15" fill="rgb(241,142,54)" fg:x="102" fg:w="1"/><text x="78.1126%" y="543.50"></text></g><g><title>bprm_execve (1 samples, 0.76%)</title><rect x="77.8626%" y="517" width="0.7634%" height="15" fill="rgb(222,85,15)" fg:x="102" fg:w="1"/><text x="78.1126%" y="527.50"></text></g><g><title>load_elf_binary (1 samples, 0.76%)</title><rect x="77.8626%" y="501" width="0.7634%" height="15" fill="rgb(210,85,47)" fg:x="102" fg:w="1"/><text x="78.1126%" y="511.50"></text></g><g><title>setup_new_exec (1 samples, 0.76%)</title><rect x="77.8626%" y="485" width="0.7634%" height="15" fill="rgb(224,206,25)" fg:x="102" fg:w="1"/><text x="78.1126%" y="495.50"></text></g><g><title>arch_pick_mmap_layout (1 samples, 0.76%)</title><rect x="77.8626%" y="469" width="0.7634%" height="15" fill="rgb(243,201,19)" fg:x="102" fg:w="1"/><text x="78.1126%" y="479.50"></text></g><g><title>get_random_u64 (1 samples, 0.76%)</title><rect x="77.8626%" y="453" width="0.7634%" height="15" fill="rgb(236,59,4)" fg:x="102" fg:w="1"/><text x="78.1126%" y="463.50"></text></g><g><title>_get_random_bytes (1 samples, 0.76%)</title><rect x="77.8626%" y="437" width="0.7634%" height="15" fill="rgb(254,179,45)" fg:x="102" fg:w="1"/><text x="78.1126%" y="447.50"></text></g><g><title>crng_make_state (1 samples, 0.76%)</title><rect x="77.8626%" y="421" width="0.7634%" height="15" fill="rgb(226,14,10)" fg:x="102" fg:w="1"/><text x="78.1126%" y="431.50"></text></g><g><title>crng_fast_key_erasure (1 samples, 0.76%)</title><rect x="77.8626%" y="405" width="0.7634%" height="15" fill="rgb(244,27,41)" fg:x="102" fg:w="1"/><text x="78.1126%" y="415.50"></text></g><g><title>chacha_block_generic (1 samples, 0.76%)</title><rect x="77.8626%" y="389" width="0.7634%" height="15" fill="rgb(235,35,32)" fg:x="102" fg:w="1"/><text x="78.1126%" y="399.50"></text></g><g><title>chacha_permute (1 samples, 0.76%)</title><rect x="77.8626%" y="373" width="0.7634%" height="15" fill="rgb(218,68,31)" fg:x="102" fg:w="1"/><text x="78.1126%" y="383.50"></text></g><g><title>__check_object_size (1 samples, 0.76%)</title><rect x="79.3893%" y="469" width="0.7634%" height="15" fill="rgb(207,120,37)" fg:x="104" fg:w="1"/><text x="79.6393%" y="479.50"></text></g><g><title>__consume_stateless_skb (1 samples, 0.76%)</title><rect x="80.1527%" y="469" width="0.7634%" height="15" fill="rgb(227,98,0)" fg:x="105" fg:w="1"/><text x="80.4027%" y="479.50"></text></g><g><title>skb_release_data (1 samples, 0.76%)</title><rect x="80.1527%" y="453" width="0.7634%" height="15" fill="rgb(207,7,3)" fg:x="105" fg:w="1"/><text x="80.4027%" y="463.50"></text></g><g><title>__kmem_cache_free (1 samples, 0.76%)</title><rect x="80.1527%" y="437" width="0.7634%" height="15" fill="rgb(206,98,19)" fg:x="105" fg:w="1"/><text x="80.4027%" y="447.50"></text></g><g><title>__x64_sys_recvfrom (7 samples, 5.34%)</title><rect x="78.6260%" y="549" width="5.3435%" height="15" fill="rgb(217,5,26)" fg:x="103" fg:w="7"/><text x="78.8760%" y="559.50">__x64_s..</text></g><g><title>__sys_recvfrom (7 samples, 5.34%)</title><rect x="78.6260%" y="533" width="5.3435%" height="15" fill="rgb(235,190,38)" fg:x="103" fg:w="7"/><text x="78.8760%" y="543.50">__sys_r..</text></g><g><title>sock_recvmsg (7 samples, 5.34%)</title><rect x="78.6260%" y="517" width="5.3435%" height="15" fill="rgb(247,86,24)" fg:x="103" fg:w="7"/><text x="78.8760%" y="527.50">sock_re..</text></g><g><title>inet_recvmsg (7 samples, 5.34%)</title><rect x="78.6260%" y="501" width="5.3435%" height="15" fill="rgb(205,101,16)" fg:x="103" fg:w="7"/><text x="78.8760%" y="511.50">inet_re..</text></g><g><title>udp_recvmsg (7 samples, 5.34%)</title><rect x="78.6260%" y="485" width="5.3435%" height="15" fill="rgb(246,168,33)" fg:x="103" fg:w="7"/><text x="78.8760%" y="495.50">udp_rec..</text></g><g><title>_copy_to_iter (4 samples, 3.05%)</title><rect x="80.9160%" y="469" width="3.0534%" height="15" fill="rgb(231,114,1)" fg:x="106" fg:w="4"/><text x="81.1660%" y="479.50">_co..</text></g><g><title>copy_user_generic_string (3 samples, 2.29%)</title><rect x="81.6794%" y="453" width="2.2901%" height="15" fill="rgb(207,184,53)" fg:x="107" fg:w="3"/><text x="81.9294%" y="463.50">c..</text></g><g><title>kmalloc_reserve (2 samples, 1.53%)</title><rect x="83.9695%" y="405" width="1.5267%" height="15" fill="rgb(224,95,51)" fg:x="110" fg:w="2"/><text x="84.2195%" y="415.50"></text></g><g><title>kmem_cache_alloc_node (2 samples, 1.53%)</title><rect x="83.9695%" y="389" width="1.5267%" height="15" fill="rgb(212,188,45)" fg:x="110" fg:w="2"/><text x="84.2195%" y="399.50"></text></g><g><title>__x64_sys_sendto (3 samples, 2.29%)</title><rect x="83.9695%" y="549" width="2.2901%" height="15" fill="rgb(223,154,38)" fg:x="110" fg:w="3"/><text x="84.2195%" y="559.50">_..</text></g><g><title>__sys_sendto (3 samples, 2.29%)</title><rect x="83.9695%" y="533" width="2.2901%" height="15" fill="rgb(251,22,52)" fg:x="110" fg:w="3"/><text x="84.2195%" y="543.50">_..</text></g><g><title>sock_sendmsg (3 samples, 2.29%)</title><rect x="83.9695%" y="517" width="2.2901%" height="15" fill="rgb(229,209,22)" fg:x="110" fg:w="3"/><text x="84.2195%" y="527.50">s..</text></g><g><title>udp_sendmsg (3 samples, 2.29%)</title><rect x="83.9695%" y="501" width="2.2901%" height="15" fill="rgb(234,138,34)" fg:x="110" fg:w="3"/><text x="84.2195%" y="511.50">u..</text></g><g><title>ip_make_skb (3 samples, 2.29%)</title><rect x="83.9695%" y="485" width="2.2901%" height="15" fill="rgb(212,95,11)" fg:x="110" fg:w="3"/><text x="84.2195%" y="495.50">i..</text></g><g><title>__ip_append_data (3 samples, 2.29%)</title><rect x="83.9695%" y="469" width="2.2901%" height="15" fill="rgb(240,179,47)" fg:x="110" fg:w="3"/><text x="84.2195%" y="479.50">_..</text></g><g><title>sock_alloc_send_pskb (3 samples, 2.29%)</title><rect x="83.9695%" y="453" width="2.2901%" height="15" fill="rgb(240,163,11)" fg:x="110" fg:w="3"/><text x="84.2195%" y="463.50">s..</text></g><g><title>alloc_skb_with_frags (3 samples, 2.29%)</title><rect x="83.9695%" y="437" width="2.2901%" height="15" fill="rgb(236,37,12)" fg:x="110" fg:w="3"/><text x="84.2195%" y="447.50">a..</text></g><g><title>__alloc_skb (3 samples, 2.29%)</title><rect x="83.9695%" y="421" width="2.2901%" height="15" fill="rgb(232,164,16)" fg:x="110" fg:w="3"/><text x="84.2195%" y="431.50">_..</text></g><g><title>kmem_cache_alloc_node (1 samples, 0.76%)</title><rect x="85.4962%" y="405" width="0.7634%" height="15" fill="rgb(244,205,15)" fg:x="112" fg:w="1"/><text x="85.7462%" y="415.50"></text></g><g><title>__memset (1 samples, 0.76%)</title><rect x="85.4962%" y="389" width="0.7634%" height="15" fill="rgb(223,117,47)" fg:x="112" fg:w="1"/><text x="85.7462%" y="399.50"></text></g><g><title>__x64_sys_timerfd_settime (1 samples, 0.76%)</title><rect x="86.2595%" y="549" width="0.7634%" height="15" fill="rgb(244,107,35)" fg:x="113" fg:w="1"/><text x="86.5095%" y="559.50"></text></g><g><title>put_itimerspec64 (1 samples, 0.76%)</title><rect x="86.2595%" y="533" width="0.7634%" height="15" fill="rgb(205,140,8)" fg:x="113" fg:w="1"/><text x="86.5095%" y="543.50"></text></g><g><title>_copy_to_user (1 samples, 0.76%)</title><rect x="86.2595%" y="517" width="0.7634%" height="15" fill="rgb(228,84,46)" fg:x="113" fg:w="1"/><text x="86.5095%" y="527.50"></text></g><g><title>copy_user_generic_string (1 samples, 0.76%)</title><rect x="86.2595%" y="501" width="0.7634%" height="15" fill="rgb(254,188,9)" fg:x="113" fg:w="1"/><text x="86.5095%" y="511.50"></text></g><g><title>ksys_read (1 samples, 0.76%)</title><rect x="87.0229%" y="549" width="0.7634%" height="15" fill="rgb(206,112,54)" fg:x="114" fg:w="1"/><text x="87.2729%" y="559.50"></text></g><g><title>vfs_read (1 samples, 0.76%)</title><rect x="87.0229%" y="533" width="0.7634%" height="15" fill="rgb(216,84,49)" fg:x="114" fg:w="1"/><text x="87.2729%" y="543.50"></text></g><g><title>security_file_permission (1 samples, 0.76%)</title><rect x="87.0229%" y="517" width="0.7634%" height="15" fill="rgb(214,194,35)" fg:x="114" fg:w="1"/><text x="87.2729%" y="527.50"></text></g><g><title>apparmor_file_permission (1 samples, 0.76%)</title><rect x="87.0229%" y="501" width="0.7634%" height="15" fill="rgb(249,28,3)" fg:x="114" fg:w="1"/><text x="87.2729%" y="511.50"></text></g><g><title>down_write (2 samples, 1.53%)</title><rect x="89.3130%" y="501" width="1.5267%" height="15" fill="rgb(222,56,52)" fg:x="117" fg:w="2"/><text x="89.5630%" y="511.50"></text></g><g><title>copy_page_from_iter_atomic (1 samples, 0.76%)</title><rect x="91.6031%" y="485" width="0.7634%" height="15" fill="rgb(245,217,50)" fg:x="120" fg:w="1"/><text x="91.8531%" y="495.50"></text></g><g><title>copy_user_generic_string (1 samples, 0.76%)</title><rect x="91.6031%" y="469" width="0.7634%" height="15" fill="rgb(213,201,24)" fg:x="120" fg:w="1"/><text x="91.8531%" y="479.50"></text></g><g><title>ext4_block_write_begin (1 samples, 0.76%)</title><rect x="92.3664%" y="469" width="0.7634%" height="15" fill="rgb(248,116,28)" fg:x="121" fg:w="1"/><text x="92.6164%" y="479.50"></text></g><g><title>ext4_da_write_begin (4 samples, 3.05%)</title><rect x="92.3664%" y="485" width="3.0534%" height="15" fill="rgb(219,72,43)" fg:x="121" fg:w="4"/><text x="92.6164%" y="495.50">ext..</text></g><g><title>pagecache_get_page (3 samples, 2.29%)</title><rect x="93.1298%" y="469" width="2.2901%" height="15" fill="rgb(209,138,14)" fg:x="122" fg:w="3"/><text x="93.3798%" y="479.50">p..</text></g><g><title>__filemap_get_folio (3 samples, 2.29%)</title><rect x="93.1298%" y="453" width="2.2901%" height="15" fill="rgb(222,18,33)" fg:x="122" fg:w="3"/><text x="93.3798%" y="463.50">_..</text></g><g><title>xas_load (1 samples, 0.76%)</title><rect x="94.6565%" y="437" width="0.7634%" height="15" fill="rgb(213,199,7)" fg:x="124" fg:w="1"/><text x="94.9065%" y="447.50"></text></g><g><title>ksys_write (11 samples, 8.40%)</title><rect x="87.7863%" y="549" width="8.3969%" height="15" fill="rgb(250,110,10)" fg:x="115" fg:w="11"/><text x="88.0363%" y="559.50">ksys_write</text></g><g><title>vfs_write (11 samples, 8.40%)</title><rect x="87.7863%" y="533" width="8.3969%" height="15" fill="rgb(248,123,6)" fg:x="115" fg:w="11"/><text x="88.0363%" y="543.50">vfs_write</text></g><g><title>ext4_buffered_write_iter (9 samples, 6.87%)</title><rect x="89.3130%" y="517" width="6.8702%" height="15" fill="rgb(206,91,31)" fg:x="117" fg:w="9"/><text x="89.5630%" y="527.50">ext4_buff..</text></g><g><title>generic_perform_write (7 samples, 5.34%)</title><rect x="90.8397%" y="501" width="5.3435%" height="15" fill="rgb(211,154,13)" fg:x="119" fg:w="7"/><text x="91.0897%" y="511.50">generic..</text></g><g><title>generic_write_end (1 samples, 0.76%)</title><rect x="95.4198%" y="485" width="0.7634%" height="15" fill="rgb(225,148,7)" fg:x="125" fg:w="1"/><text x="95.6698%" y="495.50"></text></g><g><title>folio_unlock (1 samples, 0.76%)</title><rect x="95.4198%" y="469" width="0.7634%" height="15" fill="rgb(220,160,43)" fg:x="125" fg:w="1"/><text x="95.6698%" y="479.50"></text></g><g><title>arch_do_signal_or_restart (1 samples, 0.76%)</title><rect x="98.4733%" y="517" width="0.7634%" height="15" fill="rgb(213,52,39)" fg:x="129" fg:w="1"/><text x="98.7233%" y="527.50"></text></g><g><title>get_signal (1 samples, 0.76%)</title><rect x="98.4733%" y="501" width="0.7634%" height="15" fill="rgb(243,137,7)" fg:x="129" fg:w="1"/><text x="98.7233%" y="511.50"></text></g><g><title>do_group_exit (1 samples, 0.76%)</title><rect x="98.4733%" y="485" width="0.7634%" height="15" fill="rgb(230,79,13)" fg:x="129" fg:w="1"/><text x="98.7233%" y="495.50"></text></g><g><title>do_exit (1 samples, 0.76%)</title><rect x="98.4733%" y="469" width="0.7634%" height="15" fill="rgb(247,105,23)" fg:x="129" fg:w="1"/><text x="98.7233%" y="479.50"></text></g><g><title>__mmput (1 samples, 0.76%)</title><rect x="98.4733%" y="453" width="0.7634%" height="15" fill="rgb(223,179,41)" fg:x="129" fg:w="1"/><text x="98.7233%" y="463.50"></text></g><g><title>exit_mmap (1 samples, 0.76%)</title><rect x="98.4733%" y="437" width="0.7634%" height="15" fill="rgb(218,9,34)" fg:x="129" fg:w="1"/><text x="98.7233%" y="447.50"></text></g><g><title>unmap_vmas (1 samples, 0.76%)</title><rect x="98.4733%" y="421" width="0.7634%" height="15" fill="rgb(222,106,8)" fg:x="129" fg:w="1"/><text x="98.7233%" y="431.50"></text></g><g><title>unmap_page_range (1 samples, 0.76%)</title><rect x="98.4733%" y="405" width="0.7634%" height="15" fill="rgb(211,220,0)" fg:x="129" fg:w="1"/><text x="98.7233%" y="415.50"></text></g><g><title>all (131 samples, 100%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(229,52,16)" fg:x="0" fg:w="131"/><text x="0.2500%" y="623.50"></text></g><g><title>tftp (127 samples, 96.95%)</title><rect x="3.0534%" y="597" width="96.9466%" height="15" fill="rgb(212,155,18)" fg:x="4" fg:w="127"/><text x="3.3034%" y="607.50">tftp</text></g><g><title>entry_SYSCALL_64_after_hwframe (38 samples, 29.01%)</title><rect x="70.9924%" y="581" width="29.0076%" height="15" fill="rgb(242,21,14)" fg:x="93" fg:w="38"/><text x="71.2424%" y="591.50">entry_SYSCALL_64_after_hwframe</text></g><g><title>do_syscall_64 (38 samples, 29.01%)</title><rect x="70.9924%" y="565" width="29.0076%" height="15" fill="rgb(222,19,48)" fg:x="93" fg:w="38"/><text x="71.2424%" y="575.50">do_syscall_64</text></g><g><title>syscall_exit_to_user_mode (5 samples, 3.82%)</title><rect x="96.1832%" y="549" width="3.8168%" height="15" fill="rgb(232,45,27)" fg:x="126" fg:w="5"/><text x="96.4332%" y="559.50">sysc..</text></g><g><title>exit_to_user_mode_prepare (3 samples, 2.29%)</title><rect x="97.7099%" y="533" width="2.2901%" height="15" fill="rgb(249,103,42)" fg:x="128" fg:w="3"/><text x="97.9599%" y="543.50">e..</text></g><g><title>fpregs_assert_state_consistent (1 samples, 0.76%)</title><rect x="99.2366%" y="517" width="0.7634%" height="15" fill="rgb(246,81,33)" fg:x="130" fg:w="1"/><text x="99.4866%" y="527.50"></text></g><g><title>check_preemption_disabled (1 samples, 0.76%)</title><rect x="99.2366%" y="501" width="0.7634%" height="15" fill="rgb(252,33,42)" fg:x="130" fg:w="1"/><text x="99.4866%" y="511.50"></text></g></svg></svg>