<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="998" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="981.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="981.00"> </text><svg id="frames" x="10" width="1180" total_samples="89"><g><title>perf_event_comm (1 samples, 1.12%)</title><rect x="0.0000%" y="805" width="1.1236%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="815.50"></text></g><g><title>perf_iterate_sb (1 samples, 1.12%)</title><rect x="0.0000%" y="789" width="1.1236%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="799.50"></text></g><g><title>perf_iterate_ctx (1 samples, 1.12%)</title><rect x="0.0000%" y="773" width="1.1236%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="783.50"></text></g><g><title>perf_event_comm_output (1 samples, 1.12%)</title><rect x="0.0000%" y="757" width="1.1236%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="767.50"></text></g><g><title>__perf_event_header__init_id (1 samples, 1.12%)</title><rect x="0.0000%" y="741" width="1.1236%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="751.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 1.12%)</title><rect x="1.1236%" y="789" width="1.1236%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="1.3736%" y="799.50"></text></g><g><title>ctx_resched (1 samples, 1.12%)</title><rect x="2.2472%" y="789" width="1.1236%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="1"/><text x="2.4972%" y="799.50"></text></g><g><title>perf_ctx_enable (1 samples, 1.12%)</title><rect x="2.2472%" y="773" width="1.1236%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="1"/><text x="2.4972%" y="783.50"></text></g><g><title>amd_pmu_enable_all (1 samples, 1.12%)</title><rect x="2.2472%" y="757" width="1.1236%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="1"/><text x="2.4972%" y="767.50"></text></g><g><title>x86_pmu_enable_event (1 samples, 1.12%)</title><rect x="2.2472%" y="741" width="1.1236%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="1"/><text x="2.4972%" y="751.50"></text></g><g><title>native_write_msr (1 samples, 1.12%)</title><rect x="2.2472%" y="725" width="1.1236%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="1"/><text x="2.4972%" y="735.50"></text></g><g><title>perf-exec (4 samples, 4.49%)</title><rect x="0.0000%" y="933" width="4.4944%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="4"/><text x="0.2500%" y="943.50">perf-..</text></g><g><title>entry_SYSCALL_64_after_hwframe (4 samples, 4.49%)</title><rect x="0.0000%" y="917" width="4.4944%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="4"/><text x="0.2500%" y="927.50">entry..</text></g><g><title>do_syscall_64 (4 samples, 4.49%)</title><rect x="0.0000%" y="901" width="4.4944%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="4"/><text x="0.2500%" y="911.50">do_sy..</text></g><g><title>__x64_sys_execve (4 samples, 4.49%)</title><rect x="0.0000%" y="885" width="4.4944%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="4"/><text x="0.2500%" y="895.50">__x64..</text></g><g><title>do_execveat_common.isra.0 (4 samples, 4.49%)</title><rect x="0.0000%" y="869" width="4.4944%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="4"/><text x="0.2500%" y="879.50">do_ex..</text></g><g><title>bprm_execve (4 samples, 4.49%)</title><rect x="0.0000%" y="853" width="4.4944%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="4"/><text x="0.2500%" y="863.50">bprm_..</text></g><g><title>load_elf_binary (4 samples, 4.49%)</title><rect x="0.0000%" y="837" width="4.4944%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="4"/><text x="0.2500%" y="847.50">load_..</text></g><g><title>begin_new_exec (4 samples, 4.49%)</title><rect x="0.0000%" y="821" width="4.4944%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="4"/><text x="0.2500%" y="831.50">begin..</text></g><g><title>perf_event_exec (3 samples, 3.37%)</title><rect x="1.1236%" y="805" width="3.3708%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="3"/><text x="1.3736%" y="815.50">per..</text></g><g><title>mutex_lock (1 samples, 1.12%)</title><rect x="3.3708%" y="789" width="1.1236%" height="15" fill="rgb(249,33,26)" fg:x="3" fg:w="1"/><text x="3.6208%" y="799.50"></text></g><g><title>[[vdso]] (1 samples, 1.12%)</title><rect x="4.4944%" y="901" width="1.1236%" height="15" fill="rgb(235,183,28)" fg:x="4" fg:w="1"/><text x="4.7444%" y="911.50"></text></g><g><title>__GI___libc_realloc (1 samples, 1.12%)</title><rect x="5.6180%" y="901" width="1.1236%" height="15" fill="rgb(221,5,38)" fg:x="5" fg:w="1"/><text x="5.8680%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 1.12%)</title><rect x="6.7416%" y="901" width="1.1236%" height="15" fill="rgb(247,18,42)" fg:x="6" fg:w="1"/><text x="6.9916%" y="911.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 1.12%)</title><rect x="6.7416%" y="885" width="1.1236%" height="15" fill="rgb(241,131,45)" fg:x="6" fg:w="1"/><text x="6.9916%" y="895.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 1.12%)</title><rect x="6.7416%" y="869" width="1.1236%" height="15" fill="rgb(249,31,29)" fg:x="6" fg:w="1"/><text x="6.9916%" y="879.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (1 samples, 1.12%)</title><rect x="6.7416%" y="853" width="1.1236%" height="15" fill="rgb(225,111,53)" fg:x="6" fg:w="1"/><text x="6.9916%" y="863.50"></text></g><g><title>polling::epoll::Poller::wait (1 samples, 1.12%)</title><rect x="7.8652%" y="901" width="1.1236%" height="15" fill="rgb(238,160,17)" fg:x="7" fg:w="1"/><text x="8.1152%" y="911.50"></text></g><g><title>rustix::backend::arch::asm::syscall4 (1 samples, 1.12%)</title><rect x="8.9888%" y="901" width="1.1236%" height="15" fill="rgb(214,148,48)" fg:x="8" fg:w="1"/><text x="9.2388%" y="911.50"></text></g><g><title>[[stack]] (6 samples, 6.74%)</title><rect x="4.4944%" y="917" width="6.7416%" height="15" fill="rgb(232,36,49)" fg:x="4" fg:w="6"/><text x="4.7444%" y="927.50">[[stack]]</text></g><g><title>rustix::backend::arch::asm::syscall4_readonly (1 samples, 1.12%)</title><rect x="10.1124%" y="901" width="1.1236%" height="15" fill="rgb(209,103,24)" fg:x="9" fg:w="1"/><text x="10.3624%" y="911.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 1.12%)</title><rect x="11.2360%" y="901" width="1.1236%" height="15" fill="rgb(229,88,8)" fg:x="10" fg:w="1"/><text x="11.4860%" y="911.50"></text></g><g><title>ep_item_poll.isra.0 (1 samples, 1.12%)</title><rect x="13.4831%" y="437" width="1.1236%" height="15" fill="rgb(213,181,19)" fg:x="12" fg:w="1"/><text x="13.7331%" y="447.50"></text></g><g><title>sock_poll (1 samples, 1.12%)</title><rect x="13.4831%" y="421" width="1.1236%" height="15" fill="rgb(254,191,54)" fg:x="12" fg:w="1"/><text x="13.7331%" y="431.50"></text></g><g><title>rustix::backend::event::epoll::wait (3 samples, 3.37%)</title><rect x="12.3596%" y="549" width="3.3708%" height="15" fill="rgb(241,83,37)" fg:x="11" fg:w="3"/><text x="12.6096%" y="559.50">rus..</text></g><g><title>rustix::backend::event::syscalls::epoll_wait (3 samples, 3.37%)</title><rect x="12.3596%" y="533" width="3.3708%" height="15" fill="rgb(233,36,39)" fg:x="11" fg:w="3"/><text x="12.6096%" y="543.50">rus..</text></g><g><title>rustix::backend::arch::asm::syscall4 (3 samples, 3.37%)</title><rect x="12.3596%" y="517" width="3.3708%" height="15" fill="rgb(226,3,54)" fg:x="11" fg:w="3"/><text x="12.6096%" y="527.50">rus..</text></g><g><title>entry_SYSCALL_64_after_hwframe (3 samples, 3.37%)</title><rect x="12.3596%" y="501" width="3.3708%" height="15" fill="rgb(245,192,40)" fg:x="11" fg:w="3"/><text x="12.6096%" y="511.50">ent..</text></g><g><title>do_syscall_64 (3 samples, 3.37%)</title><rect x="12.3596%" y="485" width="3.3708%" height="15" fill="rgb(238,167,29)" fg:x="11" fg:w="3"/><text x="12.6096%" y="495.50">do_..</text></g><g><title>__x64_sys_epoll_wait (3 samples, 3.37%)</title><rect x="12.3596%" y="469" width="3.3708%" height="15" fill="rgb(232,182,51)" fg:x="11" fg:w="3"/><text x="12.6096%" y="479.50">__x..</text></g><g><title>do_epoll_wait (2 samples, 2.25%)</title><rect x="13.4831%" y="453" width="2.2472%" height="15" fill="rgb(231,60,39)" fg:x="12" fg:w="2"/><text x="13.7331%" y="463.50">d..</text></g><g><title>schedule_hrtimeout_range_clock (1 samples, 1.12%)</title><rect x="14.6067%" y="437" width="1.1236%" height="15" fill="rgb(208,69,12)" fg:x="13" fg:w="1"/><text x="14.8567%" y="447.50"></text></g><g><title>schedule (1 samples, 1.12%)</title><rect x="14.6067%" y="421" width="1.1236%" height="15" fill="rgb(235,93,37)" fg:x="13" fg:w="1"/><text x="14.8567%" y="431.50"></text></g><g><title>__schedule (1 samples, 1.12%)</title><rect x="14.6067%" y="405" width="1.1236%" height="15" fill="rgb(213,116,39)" fg:x="13" fg:w="1"/><text x="14.8567%" y="415.50"></text></g><g><title>pick_next_task_fair (1 samples, 1.12%)</title><rect x="14.6067%" y="389" width="1.1236%" height="15" fill="rgb(222,207,29)" fg:x="13" fg:w="1"/><text x="14.8567%" y="399.50"></text></g><g><title>newidle_balance (1 samples, 1.12%)</title><rect x="14.6067%" y="373" width="1.1236%" height="15" fill="rgb(206,96,30)" fg:x="13" fg:w="1"/><text x="14.8567%" y="383.50"></text></g><g><title>__libc_start_main_impl (5 samples, 5.62%)</title><rect x="12.3596%" y="901" width="5.6180%" height="15" fill="rgb(218,138,4)" fg:x="11" fg:w="5"/><text x="12.6096%" y="911.50">__libc_..</text></g><g><title>__libc_start_call_main (5 samples, 5.62%)</title><rect x="12.3596%" y="885" width="5.6180%" height="15" fill="rgb(250,191,14)" fg:x="11" fg:w="5"/><text x="12.6096%" y="895.50">__libc_..</text></g><g><title>main (5 samples, 5.62%)</title><rect x="12.3596%" y="869" width="5.6180%" height="15" fill="rgb(239,60,40)" fg:x="11" fg:w="5"/><text x="12.6096%" y="879.50">main</text></g><g><title>std::rt::lang_start (5 samples, 5.62%)</title><rect x="12.3596%" y="853" width="5.6180%" height="15" fill="rgb(206,27,48)" fg:x="11" fg:w="5"/><text x="12.6096%" y="863.50">std::rt..</text></g><g><title>std::rt::lang_start_internal (5 samples, 5.62%)</title><rect x="12.3596%" y="837" width="5.6180%" height="15" fill="rgb(225,35,8)" fg:x="11" fg:w="5"/><text x="12.6096%" y="847.50">std::rt..</text></g><g><title>std::panic::catch_unwind (5 samples, 5.62%)</title><rect x="12.3596%" y="821" width="5.6180%" height="15" fill="rgb(250,213,24)" fg:x="11" fg:w="5"/><text x="12.6096%" y="831.50">std::pa..</text></g><g><title>std::panicking::try (5 samples, 5.62%)</title><rect x="12.3596%" y="805" width="5.6180%" height="15" fill="rgb(247,123,22)" fg:x="11" fg:w="5"/><text x="12.6096%" y="815.50">std::pa..</text></g><g><title>std::panicking::try::do_call (5 samples, 5.62%)</title><rect x="12.3596%" y="789" width="5.6180%" height="15" fill="rgb(231,138,38)" fg:x="11" fg:w="5"/><text x="12.6096%" y="799.50">std::pa..</text></g><g><title>std::rt::lang_start_internal::{{closure}} (5 samples, 5.62%)</title><rect x="12.3596%" y="773" width="5.6180%" height="15" fill="rgb(231,145,46)" fg:x="11" fg:w="5"/><text x="12.6096%" y="783.50">std::rt..</text></g><g><title>std::panic::catch_unwind (5 samples, 5.62%)</title><rect x="12.3596%" y="757" width="5.6180%" height="15" fill="rgb(251,118,11)" fg:x="11" fg:w="5"/><text x="12.6096%" y="767.50">std::pa..</text></g><g><title>std::panicking::try (5 samples, 5.62%)</title><rect x="12.3596%" y="741" width="5.6180%" height="15" fill="rgb(217,147,25)" fg:x="11" fg:w="5"/><text x="12.6096%" y="751.50">std::pa..</text></g><g><title>std::panicking::try::do_call (5 samples, 5.62%)</title><rect x="12.3596%" y="725" width="5.6180%" height="15" fill="rgb(247,81,37)" fg:x="11" fg:w="5"/><text x="12.6096%" y="735.50">std::pa..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (5 samples, 5.62%)</title><rect x="12.3596%" y="709" width="5.6180%" height="15" fill="rgb(209,12,38)" fg:x="11" fg:w="5"/><text x="12.6096%" y="719.50">core::o..</text></g><g><title>std::rt::lang_start::{{closure}} (5 samples, 5.62%)</title><rect x="12.3596%" y="693" width="5.6180%" height="15" fill="rgb(227,1,9)" fg:x="11" fg:w="5"/><text x="12.6096%" y="703.50">std::rt..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (5 samples, 5.62%)</title><rect x="12.3596%" y="677" width="5.6180%" height="15" fill="rgb(248,47,43)" fg:x="11" fg:w="5"/><text x="12.6096%" y="687.50">std::sy..</text></g><g><title>core::ops::function::FnOnce::call_once (5 samples, 5.62%)</title><rect x="12.3596%" y="661" width="5.6180%" height="15" fill="rgb(221,10,30)" fg:x="11" fg:w="5"/><text x="12.6096%" y="671.50">core::o..</text></g><g><title>tftp::main (5 samples, 5.62%)</title><rect x="12.3596%" y="645" width="5.6180%" height="15" fill="rgb(210,229,1)" fg:x="11" fg:w="5"/><text x="12.6096%" y="655.50">tftp::m..</text></g><g><title>tftp::receiver::start_receive (5 samples, 5.62%)</title><rect x="12.3596%" y="629" width="5.6180%" height="15" fill="rgb(222,148,37)" fg:x="11" fg:w="5"/><text x="12.6096%" y="639.50">tftp::r..</text></g><g><title>tftp::client::receiver::receive_file (5 samples, 5.62%)</title><rect x="12.3596%" y="613" width="5.6180%" height="15" fill="rgb(234,67,33)" fg:x="11" fg:w="5"/><text x="12.6096%" y="623.50">tftp::c..</text></g><g><title>&lt;tftp::socket::UdpUnboundSocket as tftp::socket::Socket&gt;::recv_from (5 samples, 5.62%)</title><rect x="12.3596%" y="597" width="5.6180%" height="15" fill="rgb(247,98,35)" fg:x="11" fg:w="5"/><text x="12.6096%" y="607.50">&lt;tftp::..</text></g><g><title>polling::Poller::wait (5 samples, 5.62%)</title><rect x="12.3596%" y="581" width="5.6180%" height="15" fill="rgb(247,138,52)" fg:x="11" fg:w="5"/><text x="12.6096%" y="591.50">polling..</text></g><g><title>polling::epoll::Poller::wait (5 samples, 5.62%)</title><rect x="12.3596%" y="565" width="5.6180%" height="15" fill="rgb(213,79,30)" fg:x="11" fg:w="5"/><text x="12.6096%" y="575.50">polling..</text></g><g><title>rustix::time::timerfd::timerfd_settime (2 samples, 2.25%)</title><rect x="15.7303%" y="549" width="2.2472%" height="15" fill="rgb(246,177,23)" fg:x="14" fg:w="2"/><text x="15.9803%" y="559.50">r..</text></g><g><title>rustix::backend::time::syscalls::timerfd_settime (2 samples, 2.25%)</title><rect x="15.7303%" y="533" width="2.2472%" height="15" fill="rgb(230,62,27)" fg:x="14" fg:w="2"/><text x="15.9803%" y="543.50">r..</text></g><g><title>rustix::backend::arch::asm::syscall4 (2 samples, 2.25%)</title><rect x="15.7303%" y="517" width="2.2472%" height="15" fill="rgb(216,154,8)" fg:x="14" fg:w="2"/><text x="15.9803%" y="527.50">r..</text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 2.25%)</title><rect x="15.7303%" y="501" width="2.2472%" height="15" fill="rgb(244,35,45)" fg:x="14" fg:w="2"/><text x="15.9803%" y="511.50">e..</text></g><g><title>do_syscall_64 (2 samples, 2.25%)</title><rect x="15.7303%" y="485" width="2.2472%" height="15" fill="rgb(251,115,12)" fg:x="14" fg:w="2"/><text x="15.9803%" y="495.50">d..</text></g><g><title>__x64_sys_timerfd_settime (2 samples, 2.25%)</title><rect x="15.7303%" y="469" width="2.2472%" height="15" fill="rgb(240,54,50)" fg:x="14" fg:w="2"/><text x="15.9803%" y="479.50">_..</text></g><g><title>do_timerfd_settime (2 samples, 2.25%)</title><rect x="15.7303%" y="453" width="2.2472%" height="15" fill="rgb(233,84,52)" fg:x="14" fg:w="2"/><text x="15.9803%" y="463.50">d..</text></g><g><title>ktime_get (2 samples, 2.25%)</title><rect x="15.7303%" y="437" width="2.2472%" height="15" fill="rgb(207,117,47)" fg:x="14" fg:w="2"/><text x="15.9803%" y="447.50">k..</text></g><g><title>read_tsc (2 samples, 2.25%)</title><rect x="15.7303%" y="421" width="2.2472%" height="15" fill="rgb(249,43,39)" fg:x="14" fg:w="2"/><text x="15.9803%" y="431.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (1 samples, 1.12%)</title><rect x="17.9775%" y="901" width="1.1236%" height="15" fill="rgb(209,38,44)" fg:x="16" fg:w="1"/><text x="18.2275%" y="911.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (1 samples, 1.12%)</title><rect x="19.1011%" y="901" width="1.1236%" height="15" fill="rgb(236,212,23)" fg:x="17" fg:w="1"/><text x="19.3511%" y="911.50"></text></g><g><title>rustix::backend::conv::raw_fd (1 samples, 1.12%)</title><rect x="20.2247%" y="901" width="1.1236%" height="15" fill="rgb(242,79,21)" fg:x="18" fg:w="1"/><text x="20.4747%" y="911.50"></text></g><g><title>rustix::backend::event::epoll::EventVec::iter (1 samples, 1.12%)</title><rect x="21.3483%" y="901" width="1.1236%" height="15" fill="rgb(211,96,35)" fg:x="19" fg:w="1"/><text x="21.5983%" y="911.50"></text></g><g><title>rustix::backend::time::types::_::&lt;impl rustix::backend::time::types::TimerfdTimerFlags&gt;::empty (1 samples, 1.12%)</title><rect x="22.4719%" y="901" width="1.1236%" height="15" fill="rgb(253,215,40)" fg:x="20" fg:w="1"/><text x="22.7219%" y="911.50"></text></g><g><title>tftp::config::ConnectionOptions::block_size_with_encryption (1 samples, 1.12%)</title><rect x="23.5955%" y="901" width="1.1236%" height="15" fill="rgb(211,81,21)" fg:x="21" fg:w="1"/><text x="23.8455%" y="911.50"></text></g><g><title>polling::epoll::Notifier::clear (1 samples, 1.12%)</title><rect x="24.7191%" y="805" width="1.1236%" height="15" fill="rgb(208,190,38)" fg:x="22" fg:w="1"/><text x="24.9691%" y="815.50"></text></g><g><title>rustix::io::read_write::read (1 samples, 1.12%)</title><rect x="24.7191%" y="789" width="1.1236%" height="15" fill="rgb(235,213,38)" fg:x="22" fg:w="1"/><text x="24.9691%" y="799.50"></text></g><g><title>rustix::backend::io::syscalls::read (1 samples, 1.12%)</title><rect x="24.7191%" y="773" width="1.1236%" height="15" fill="rgb(237,122,38)" fg:x="22" fg:w="1"/><text x="24.9691%" y="783.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 1.12%)</title><rect x="24.7191%" y="757" width="1.1236%" height="15" fill="rgb(244,218,35)" fg:x="22" fg:w="1"/><text x="24.9691%" y="767.50"></text></g><g><title>rustix::backend::conv::&lt;impl core::convert::From&lt;std::os::fd::owned::BorrowedFd&gt; for rustix::backend::reg::ArgReg&lt;Num&gt;&gt;::from (1 samples, 1.12%)</title><rect x="24.7191%" y="741" width="1.1236%" height="15" fill="rgb(240,68,47)" fg:x="22" fg:w="1"/><text x="24.9691%" y="751.50"></text></g><g><title>rustix::backend::conv::raw_fd (1 samples, 1.12%)</title><rect x="24.7191%" y="725" width="1.1236%" height="15" fill="rgb(210,16,53)" fg:x="22" fg:w="1"/><text x="24.9691%" y="735.50"></text></g><g><title>&lt;rustix::backend::reg::RetReg&lt;Num&gt; as rustix::backend::reg::FromAsm&gt;::from_asm (1 samples, 1.12%)</title><rect x="26.9663%" y="741" width="1.1236%" height="15" fill="rgb(235,124,12)" fg:x="24" fg:w="1"/><text x="27.2163%" y="751.50"></text></g><g><title>__x86_return_thunk (1 samples, 1.12%)</title><rect x="28.0899%" y="725" width="1.1236%" height="15" fill="rgb(224,169,11)" fg:x="25" fg:w="1"/><text x="28.3399%" y="735.50"></text></g><g><title>[unknown] (18 samples, 20.22%)</title><rect x="11.2360%" y="917" width="20.2247%" height="15" fill="rgb(250,166,2)" fg:x="10" fg:w="18"/><text x="11.4860%" y="927.50">[unknown]</text></g><g><title>tftp::main (6 samples, 6.74%)</title><rect x="24.7191%" y="901" width="6.7416%" height="15" fill="rgb(242,216,29)" fg:x="22" fg:w="6"/><text x="24.9691%" y="911.50">tftp::main</text></g><g><title>tftp::receiver::start_receive (6 samples, 6.74%)</title><rect x="24.7191%" y="885" width="6.7416%" height="15" fill="rgb(230,116,27)" fg:x="22" fg:w="6"/><text x="24.9691%" y="895.50">tftp::rec..</text></g><g><title>tftp::client::receiver::receive_file (6 samples, 6.74%)</title><rect x="24.7191%" y="869" width="6.7416%" height="15" fill="rgb(228,99,48)" fg:x="22" fg:w="6"/><text x="24.9691%" y="879.50">tftp::cli..</text></g><g><title>&lt;tftp::socket::UdpUnboundSocket as tftp::socket::Socket&gt;::recv_from (6 samples, 6.74%)</title><rect x="24.7191%" y="853" width="6.7416%" height="15" fill="rgb(253,11,6)" fg:x="22" fg:w="6"/><text x="24.9691%" y="863.50">&lt;tftp::so..</text></g><g><title>polling::Poller::wait (6 samples, 6.74%)</title><rect x="24.7191%" y="837" width="6.7416%" height="15" fill="rgb(247,143,39)" fg:x="22" fg:w="6"/><text x="24.9691%" y="847.50">polling::..</text></g><g><title>polling::epoll::Poller::wait (6 samples, 6.74%)</title><rect x="24.7191%" y="821" width="6.7416%" height="15" fill="rgb(236,97,10)" fg:x="22" fg:w="6"/><text x="24.9691%" y="831.50">polling::..</text></g><g><title>polling::epoll::Poller::modify (5 samples, 5.62%)</title><rect x="25.8427%" y="805" width="5.6180%" height="15" fill="rgb(233,208,19)" fg:x="23" fg:w="5"/><text x="26.0927%" y="815.50">polling..</text></g><g><title>rustix::backend::event::epoll::modify (5 samples, 5.62%)</title><rect x="25.8427%" y="789" width="5.6180%" height="15" fill="rgb(216,164,2)" fg:x="23" fg:w="5"/><text x="26.0927%" y="799.50">rustix:..</text></g><g><title>rustix::backend::event::syscalls::epoll_mod (5 samples, 5.62%)</title><rect x="25.8427%" y="773" width="5.6180%" height="15" fill="rgb(220,129,5)" fg:x="23" fg:w="5"/><text x="26.0927%" y="783.50">rustix:..</text></g><g><title>rustix::backend::arch::asm::syscall4_readonly (5 samples, 5.62%)</title><rect x="25.8427%" y="757" width="5.6180%" height="15" fill="rgb(242,17,10)" fg:x="23" fg:w="5"/><text x="26.0927%" y="767.50">rustix:..</text></g><g><title>entry_SYSCALL_64_after_hwframe (3 samples, 3.37%)</title><rect x="28.0899%" y="741" width="3.3708%" height="15" fill="rgb(242,107,0)" fg:x="25" fg:w="3"/><text x="28.3399%" y="751.50">ent..</text></g><g><title>do_syscall_64 (2 samples, 2.25%)</title><rect x="29.2135%" y="725" width="2.2472%" height="15" fill="rgb(251,28,31)" fg:x="26" fg:w="2"/><text x="29.4635%" y="735.50">d..</text></g><g><title>__x64_sys_epoll_ctl (1 samples, 1.12%)</title><rect x="30.3371%" y="709" width="1.1236%" height="15" fill="rgb(233,223,10)" fg:x="27" fg:w="1"/><text x="30.5871%" y="719.50"></text></g><g><title>do_epoll_ctl (1 samples, 1.12%)</title><rect x="30.3371%" y="693" width="1.1236%" height="15" fill="rgb(215,21,27)" fg:x="27" fg:w="1"/><text x="30.5871%" y="703.50"></text></g><g><title>mutex_lock (1 samples, 1.12%)</title><rect x="30.3371%" y="677" width="1.1236%" height="15" fill="rgb(232,23,21)" fg:x="27" fg:w="1"/><text x="30.5871%" y="687.50"></text></g><g><title>core::mem::size_of_val (1 samples, 1.12%)</title><rect x="31.4607%" y="565" width="1.1236%" height="15" fill="rgb(244,5,23)" fg:x="28" fg:w="1"/><text x="31.7107%" y="575.50"></text></g><g><title>&lt;tftp::packet::Packet as tftp::packet::ByteConverter&gt;::from_bytes (2 samples, 2.25%)</title><rect x="31.4607%" y="597" width="2.2472%" height="15" fill="rgb(226,81,46)" fg:x="28" fg:w="2"/><text x="31.7107%" y="607.50">&lt;..</text></g><g><title>&lt;tftp::packet::DataPacket as tftp::packet::ByteConverter&gt;::from_bytes (2 samples, 2.25%)</title><rect x="31.4607%" y="581" width="2.2472%" height="15" fill="rgb(247,70,30)" fg:x="28" fg:w="2"/><text x="31.7107%" y="591.50">&lt;..</text></g><g><title>tftp::packet::try_from (1 samples, 1.12%)</title><rect x="32.5843%" y="565" width="1.1236%" height="15" fill="rgb(212,68,19)" fg:x="29" fg:w="1"/><text x="32.8343%" y="575.50"></text></g><g><title>&lt;tftp::packet::Packet as tftp::packet::ByteConverter&gt;::to_buffer (1 samples, 1.12%)</title><rect x="33.7079%" y="597" width="1.1236%" height="15" fill="rgb(240,187,13)" fg:x="30" fg:w="1"/><text x="33.9579%" y="607.50"></text></g><g><title>&lt;tftp::packet::AckPacket as tftp::packet::ByteConverter&gt;::to_buffer (1 samples, 1.12%)</title><rect x="33.7079%" y="581" width="1.1236%" height="15" fill="rgb(223,113,26)" fg:x="30" fg:w="1"/><text x="33.9579%" y="591.50"></text></g><g><title>&lt;&amp;mut [u8] as tftp::buffer::SliceMutExt&gt;::write_bytes (1 samples, 1.12%)</title><rect x="33.7079%" y="565" width="1.1236%" height="15" fill="rgb(206,192,2)" fg:x="30" fg:w="1"/><text x="33.9579%" y="575.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 1.12%)</title><rect x="33.7079%" y="549" width="1.1236%" height="15" fill="rgb(241,108,4)" fg:x="30" fg:w="1"/><text x="33.9579%" y="559.50"></text></g><g><title>&lt;rustix::backend::event::epoll::Iter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 1.12%)</title><rect x="34.8315%" y="293" width="1.1236%" height="15" fill="rgb(247,173,49)" fg:x="31" fg:w="1"/><text x="35.0815%" y="303.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2 samples, 2.25%)</title><rect x="34.8315%" y="581" width="2.2472%" height="15" fill="rgb(224,114,35)" fg:x="31" fg:w="2"/><text x="35.0815%" y="591.50">&lt;..</text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2 samples, 2.25%)</title><rect x="34.8315%" y="565" width="2.2472%" height="15" fill="rgb(245,159,27)" fg:x="31" fg:w="2"/><text x="35.0815%" y="575.50">&lt;..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (2 samples, 2.25%)</title><rect x="34.8315%" y="549" width="2.2472%" height="15" fill="rgb(245,172,44)" fg:x="31" fg:w="2"/><text x="35.0815%" y="559.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 2.25%)</title><rect x="34.8315%" y="533" width="2.2472%" height="15" fill="rgb(236,23,11)" fg:x="31" fg:w="2"/><text x="35.0815%" y="543.50">c..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 2.25%)</title><rect x="34.8315%" y="517" width="2.2472%" height="15" fill="rgb(205,117,38)" fg:x="31" fg:w="2"/><text x="35.0815%" y="527.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 2.25%)</title><rect x="34.8315%" y="501" width="2.2472%" height="15" fill="rgb(237,72,25)" fg:x="31" fg:w="2"/><text x="35.0815%" y="511.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 2.25%)</title><rect x="34.8315%" y="485" width="2.2472%" height="15" fill="rgb(244,70,9)" fg:x="31" fg:w="2"/><text x="35.0815%" y="495.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 2.25%)</title><rect x="34.8315%" y="469" width="2.2472%" height="15" fill="rgb(217,125,39)" fg:x="31" fg:w="2"/><text x="35.0815%" y="479.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 2.25%)</title><rect x="34.8315%" y="453" width="2.2472%" height="15" fill="rgb(235,36,10)" fg:x="31" fg:w="2"/><text x="35.0815%" y="463.50">c..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (2 samples, 2.25%)</title><rect x="34.8315%" y="437" width="2.2472%" height="15" fill="rgb(251,123,47)" fg:x="31" fg:w="2"/><text x="35.0815%" y="447.50">c..</text></g><g><title>core::iter::adapters::filter::filter_fold::{{closure}} (2 samples, 2.25%)</title><rect x="34.8315%" y="421" width="2.2472%" height="15" fill="rgb(221,13,13)" fg:x="31" fg:w="2"/><text x="35.0815%" y="431.50">c..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (2 samples, 2.25%)</title><rect x="34.8315%" y="405" width="2.2472%" height="15" fill="rgb(238,131,9)" fg:x="31" fg:w="2"/><text x="35.0815%" y="415.50">c..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (2 samples, 2.25%)</title><rect x="34.8315%" y="389" width="2.2472%" height="15" fill="rgb(211,50,8)" fg:x="31" fg:w="2"/><text x="35.0815%" y="399.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (2 samples, 2.25%)</title><rect x="34.8315%" y="373" width="2.2472%" height="15" fill="rgb(245,182,24)" fg:x="31" fg:w="2"/><text x="35.0815%" y="383.50">c..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (2 samples, 2.25%)</title><rect x="34.8315%" y="357" width="2.2472%" height="15" fill="rgb(242,14,37)" fg:x="31" fg:w="2"/><text x="35.0815%" y="367.50">&lt;..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 2.25%)</title><rect x="34.8315%" y="341" width="2.2472%" height="15" fill="rgb(246,228,12)" fg:x="31" fg:w="2"/><text x="35.0815%" y="351.50">h..</text></g><g><title>hashbrown::map::make_hash (2 samples, 2.25%)</title><rect x="34.8315%" y="325" width="2.2472%" height="15" fill="rgb(213,55,15)" fg:x="31" fg:w="2"/><text x="35.0815%" y="335.50">h..</text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 2.25%)</title><rect x="34.8315%" y="309" width="2.2472%" height="15" fill="rgb(209,9,3)" fg:x="31" fg:w="2"/><text x="35.0815%" y="319.50">c..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 1.12%)</title><rect x="35.9551%" y="293" width="1.1236%" height="15" fill="rgb(230,59,30)" fg:x="32" fg:w="1"/><text x="36.2051%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 1.12%)</title><rect x="35.9551%" y="277" width="1.1236%" height="15" fill="rgb(209,121,21)" fg:x="32" fg:w="1"/><text x="36.2051%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 1.12%)</title><rect x="35.9551%" y="261" width="1.1236%" height="15" fill="rgb(220,109,13)" fg:x="32" fg:w="1"/><text x="36.2051%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 1.12%)</title><rect x="35.9551%" y="245" width="1.1236%" height="15" fill="rgb(232,18,1)" fg:x="32" fg:w="1"/><text x="36.2051%" y="255.50"></text></g><g><title>polling::Event::readable (1 samples, 1.12%)</title><rect x="37.0787%" y="565" width="1.1236%" height="15" fill="rgb(215,41,42)" fg:x="33" fg:w="1"/><text x="37.3287%" y="575.50"></text></g><g><title>polling::Event::new (1 samples, 1.12%)</title><rect x="37.0787%" y="549" width="1.1236%" height="15" fill="rgb(224,123,36)" fg:x="33" fg:w="1"/><text x="37.3287%" y="559.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 1.12%)</title><rect x="38.2022%" y="501" width="1.1236%" height="15" fill="rgb(240,125,3)" fg:x="34" fg:w="1"/><text x="38.4522%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 1.12%)</title><rect x="38.2022%" y="485" width="1.1236%" height="15" fill="rgb(205,98,50)" fg:x="34" fg:w="1"/><text x="38.4522%" y="495.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 1.12%)</title><rect x="38.2022%" y="469" width="1.1236%" height="15" fill="rgb(205,185,37)" fg:x="34" fg:w="1"/><text x="38.4522%" y="479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (1 samples, 1.12%)</title><rect x="38.2022%" y="453" width="1.1236%" height="15" fill="rgb(238,207,15)" fg:x="34" fg:w="1"/><text x="38.4522%" y="463.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 1.12%)</title><rect x="38.2022%" y="437" width="1.1236%" height="15" fill="rgb(213,199,42)" fg:x="34" fg:w="1"/><text x="38.4522%" y="447.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 1.12%)</title><rect x="38.2022%" y="421" width="1.1236%" height="15" fill="rgb(235,201,11)" fg:x="34" fg:w="1"/><text x="38.4522%" y="431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 1.12%)</title><rect x="38.2022%" y="405" width="1.1236%" height="15" fill="rgb(207,46,11)" fg:x="34" fg:w="1"/><text x="38.4522%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 1.12%)</title><rect x="38.2022%" y="389" width="1.1236%" height="15" fill="rgb(241,35,35)" fg:x="34" fg:w="1"/><text x="38.4522%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 1.12%)</title><rect x="38.2022%" y="373" width="1.1236%" height="15" fill="rgb(243,32,47)" fg:x="34" fg:w="1"/><text x="38.4522%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 1.12%)</title><rect x="39.3258%" y="453" width="1.1236%" height="15" fill="rgb(247,202,23)" fg:x="35" fg:w="1"/><text x="39.5758%" y="463.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 1.12%)</title><rect x="39.3258%" y="437" width="1.1236%" height="15" fill="rgb(219,102,11)" fg:x="35" fg:w="1"/><text x="39.5758%" y="447.50"></text></g><g><title>&lt;tftp::socket::UdpUnboundSocket as tftp::socket::Socket&gt;::modify_interest (4 samples, 4.49%)</title><rect x="37.0787%" y="581" width="4.4944%" height="15" fill="rgb(243,110,44)" fg:x="33" fg:w="4"/><text x="37.3287%" y="591.50">&lt;tftp..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (3 samples, 3.37%)</title><rect x="38.2022%" y="565" width="3.3708%" height="15" fill="rgb(222,74,54)" fg:x="34" fg:w="3"/><text x="38.4522%" y="575.50">std..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (3 samples, 3.37%)</title><rect x="38.2022%" y="549" width="3.3708%" height="15" fill="rgb(216,99,12)" fg:x="34" fg:w="3"/><text x="38.4522%" y="559.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (3 samples, 3.37%)</title><rect x="38.2022%" y="533" width="3.3708%" height="15" fill="rgb(226,22,26)" fg:x="34" fg:w="3"/><text x="38.4522%" y="543.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (3 samples, 3.37%)</title><rect x="38.2022%" y="517" width="3.3708%" height="15" fill="rgb(217,163,10)" fg:x="34" fg:w="3"/><text x="38.4522%" y="527.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (2 samples, 2.25%)</title><rect x="39.3258%" y="501" width="2.2472%" height="15" fill="rgb(213,25,53)" fg:x="35" fg:w="2"/><text x="39.5758%" y="511.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 2.25%)</title><rect x="39.3258%" y="485" width="2.2472%" height="15" fill="rgb(252,105,26)" fg:x="35" fg:w="2"/><text x="39.5758%" y="495.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2 samples, 2.25%)</title><rect x="39.3258%" y="469" width="2.2472%" height="15" fill="rgb(220,39,43)" fg:x="35" fg:w="2"/><text x="39.5758%" y="479.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 1.12%)</title><rect x="40.4494%" y="453" width="1.1236%" height="15" fill="rgb(229,68,48)" fg:x="36" fg:w="1"/><text x="40.6994%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 1.12%)</title><rect x="40.4494%" y="437" width="1.1236%" height="15" fill="rgb(252,8,32)" fg:x="36" fg:w="1"/><text x="40.6994%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (1 samples, 1.12%)</title><rect x="40.4494%" y="421" width="1.1236%" height="15" fill="rgb(223,20,43)" fg:x="36" fg:w="1"/><text x="40.6994%" y="431.50"></text></g><g><title>&lt;tftp::socket::UdpUnboundSocket as tftp::socket::Socket&gt;::recv_from::{{closure}} (1 samples, 1.12%)</title><rect x="41.5730%" y="565" width="1.1236%" height="15" fill="rgb(229,81,49)" fg:x="37" fg:w="1"/><text x="41.8230%" y="575.50"></text></g><g><title>tftp::socket::std_to_socket_addr (1 samples, 1.12%)</title><rect x="41.5730%" y="549" width="1.1236%" height="15" fill="rgb(236,28,36)" fg:x="37" fg:w="1"/><text x="41.8230%" y="559.50"></text></g><g><title>core::net::socket_addr::SocketAddrV4::port (1 samples, 1.12%)</title><rect x="41.5730%" y="533" width="1.1236%" height="15" fill="rgb(249,185,26)" fg:x="37" fg:w="1"/><text x="41.8230%" y="543.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (2 samples, 2.25%)</title><rect x="41.5730%" y="581" width="2.2472%" height="15" fill="rgb(249,174,33)" fg:x="37" fg:w="2"/><text x="41.8230%" y="591.50">c..</text></g><g><title>__memcpy_avx_unaligned (1 samples, 1.12%)</title><rect x="42.6966%" y="565" width="1.1236%" height="15" fill="rgb(233,201,37)" fg:x="38" fg:w="1"/><text x="42.9466%" y="575.50"></text></g><g><title>log::max_level (1 samples, 1.12%)</title><rect x="43.8202%" y="581" width="1.1236%" height="15" fill="rgb(221,78,26)" fg:x="39" fg:w="1"/><text x="44.0702%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 1.12%)</title><rect x="43.8202%" y="565" width="1.1236%" height="15" fill="rgb(250,127,30)" fg:x="39" fg:w="1"/><text x="44.0702%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 1.12%)</title><rect x="44.9438%" y="565" width="1.1236%" height="15" fill="rgb(230,49,44)" fg:x="40" fg:w="1"/><text x="45.1938%" y="575.50"></text></g><g><title>polling::Poller::wait::{{closure}} (1 samples, 1.12%)</title><rect x="44.9438%" y="549" width="1.1236%" height="15" fill="rgb(229,67,23)" fg:x="40" fg:w="1"/><text x="45.1938%" y="559.50"></text></g><g><title>std::time::Instant::duration_since (1 samples, 1.12%)</title><rect x="44.9438%" y="533" width="1.1236%" height="15" fill="rgb(249,83,47)" fg:x="40" fg:w="1"/><text x="45.1938%" y="543.50"></text></g><g><title>std::time::Instant::checked_duration_since (1 samples, 1.12%)</title><rect x="44.9438%" y="517" width="1.1236%" height="15" fill="rgb(215,43,3)" fg:x="40" fg:w="1"/><text x="45.1938%" y="527.50"></text></g><g><title>std::sys::unix::time::Instant::checked_sub_instant (1 samples, 1.12%)</title><rect x="44.9438%" y="501" width="1.1236%" height="15" fill="rgb(238,154,13)" fg:x="40" fg:w="1"/><text x="45.1938%" y="511.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1 samples, 1.12%)</title><rect x="44.9438%" y="485" width="1.1236%" height="15" fill="rgb(219,56,2)" fg:x="40" fg:w="1"/><text x="45.1938%" y="495.50"></text></g><g><title>core::time::Duration::new (1 samples, 1.12%)</title><rect x="44.9438%" y="469" width="1.1236%" height="15" fill="rgb(233,0,4)" fg:x="40" fg:w="1"/><text x="45.1938%" y="479.50"></text></g><g><title>polling::Events::len (3 samples, 3.37%)</title><rect x="46.0674%" y="565" width="3.3708%" height="15" fill="rgb(235,30,7)" fg:x="41" fg:w="3"/><text x="46.3174%" y="575.50">pol..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (3 samples, 3.37%)</title><rect x="46.0674%" y="549" width="3.3708%" height="15" fill="rgb(250,79,13)" fg:x="41" fg:w="3"/><text x="46.3174%" y="559.50">&lt;co..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (3 samples, 3.37%)</title><rect x="46.0674%" y="533" width="3.3708%" height="15" fill="rgb(211,146,34)" fg:x="41" fg:w="3"/><text x="46.3174%" y="543.50">cor..</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (3 samples, 3.37%)</title><rect x="46.0674%" y="517" width="3.3708%" height="15" fill="rgb(228,22,38)" fg:x="41" fg:w="3"/><text x="46.3174%" y="527.50">&lt;us..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 3.37%)</title><rect x="46.0674%" y="501" width="3.3708%" height="15" fill="rgb(235,168,5)" fg:x="41" fg:w="3"/><text x="46.3174%" y="511.50">&lt;co..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 3.37%)</title><rect x="46.0674%" y="485" width="3.3708%" height="15" fill="rgb(221,155,16)" fg:x="41" fg:w="3"/><text x="46.3174%" y="495.50">&lt;co..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (3 samples, 3.37%)</title><rect x="46.0674%" y="469" width="3.3708%" height="15" fill="rgb(215,215,53)" fg:x="41" fg:w="3"/><text x="46.3174%" y="479.50">cor..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (3 samples, 3.37%)</title><rect x="46.0674%" y="453" width="3.3708%" height="15" fill="rgb(223,4,10)" fg:x="41" fg:w="3"/><text x="46.3174%" y="463.50">cor..</text></g><g><title>polling::epoll::Events::iter::{{closure}} (3 samples, 3.37%)</title><rect x="46.0674%" y="437" width="3.3708%" height="15" fill="rgb(234,103,6)" fg:x="41" fg:w="3"/><text x="46.3174%" y="447.50">pol..</text></g><g><title>polling::epoll::read_flags (3 samples, 3.37%)</title><rect x="46.0674%" y="421" width="3.3708%" height="15" fill="rgb(227,97,0)" fg:x="41" fg:w="3"/><text x="46.3174%" y="431.50">pol..</text></g><g><title>rustix::backend::event::epoll::_::&lt;impl core::ops::bit::BitOr for rustix::backend::event::epoll::EventFlags&gt;::bitor (3 samples, 3.37%)</title><rect x="46.0674%" y="405" width="3.3708%" height="15" fill="rgb(234,150,53)" fg:x="41" fg:w="3"/><text x="46.3174%" y="415.50">rus..</text></g><g><title>rustix::backend::event::epoll::_::&lt;impl rustix::backend::event::epoll::EventFlags&gt;::union (2 samples, 2.25%)</title><rect x="47.1910%" y="389" width="2.2472%" height="15" fill="rgb(228,201,54)" fg:x="42" fg:w="2"/><text x="47.4410%" y="399.50">r..</text></g><g><title>polling::Poller::wait (5 samples, 5.62%)</title><rect x="44.9438%" y="581" width="5.6180%" height="15" fill="rgb(222,22,37)" fg:x="40" fg:w="5"/><text x="45.1938%" y="591.50">polling..</text></g><g><title>polling::epoll::Poller::wait (1 samples, 1.12%)</title><rect x="49.4382%" y="565" width="1.1236%" height="15" fill="rgb(237,53,32)" fg:x="44" fg:w="1"/><text x="49.6882%" y="575.50"></text></g><g><title>rustix::time::timerfd::timerfd_settime (1 samples, 1.12%)</title><rect x="49.4382%" y="549" width="1.1236%" height="15" fill="rgb(233,25,53)" fg:x="44" fg:w="1"/><text x="49.6882%" y="559.50"></text></g><g><title>rustix::backend::time::syscalls::timerfd_settime (1 samples, 1.12%)</title><rect x="49.4382%" y="533" width="1.1236%" height="15" fill="rgb(210,40,34)" fg:x="44" fg:w="1"/><text x="49.6882%" y="543.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 1.12%)</title><rect x="49.4382%" y="517" width="1.1236%" height="15" fill="rgb(241,220,44)" fg:x="44" fg:w="1"/><text x="49.6882%" y="527.50"></text></g><g><title>rustix::backend::conv::&lt;impl core::convert::From&lt;rustix::backend::time::types::TimerfdTimerFlags&gt; for rustix::backend::reg::ArgReg&lt;Num&gt;&gt;::from (1 samples, 1.12%)</title><rect x="49.4382%" y="501" width="1.1236%" height="15" fill="rgb(235,28,35)" fg:x="44" fg:w="1"/><text x="49.6882%" y="511.50"></text></g><g><title>rustix::backend::conv::c_uint (1 samples, 1.12%)</title><rect x="49.4382%" y="485" width="1.1236%" height="15" fill="rgb(210,56,17)" fg:x="44" fg:w="1"/><text x="49.6882%" y="495.50"></text></g><g><title>&lt;tftp::socket::UdpUnboundSocket as tftp::socket::Socket&gt;::recv_from (15 samples, 16.85%)</title><rect x="34.8315%" y="597" width="16.8539%" height="15" fill="rgb(224,130,29)" fg:x="31" fg:w="15"/><text x="35.0815%" y="607.50">&lt;tftp::socket::UdpUnboundS..</text></g><g><title>std::net::udp::UdpSocket::recv_from (1 samples, 1.12%)</title><rect x="50.5618%" y="581" width="1.1236%" height="15" fill="rgb(235,212,8)" fg:x="45" fg:w="1"/><text x="50.8118%" y="591.50"></text></g><g><title>std::sys_common::net::UdpSocket::recv_from (1 samples, 1.12%)</title><rect x="50.5618%" y="565" width="1.1236%" height="15" fill="rgb(223,33,50)" fg:x="45" fg:w="1"/><text x="50.8118%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::recv_from (1 samples, 1.12%)</title><rect x="50.5618%" y="549" width="1.1236%" height="15" fill="rgb(219,149,13)" fg:x="45" fg:w="1"/><text x="50.8118%" y="559.50"></text></g><g><title>std::sys::unix::net::Socket::recv_from_with_flags (1 samples, 1.12%)</title><rect x="50.5618%" y="533" width="1.1236%" height="15" fill="rgb(250,156,29)" fg:x="45" fg:w="1"/><text x="50.8118%" y="543.50"></text></g><g><title>__libc_recvfrom (1 samples, 1.12%)</title><rect x="50.5618%" y="517" width="1.1236%" height="15" fill="rgb(216,193,19)" fg:x="45" fg:w="1"/><text x="50.8118%" y="527.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 1.12%)</title><rect x="50.5618%" y="501" width="1.1236%" height="15" fill="rgb(216,135,14)" fg:x="45" fg:w="1"/><text x="50.8118%" y="511.50"></text></g><g><title>do_syscall_64 (1 samples, 1.12%)</title><rect x="50.5618%" y="485" width="1.1236%" height="15" fill="rgb(241,47,5)" fg:x="45" fg:w="1"/><text x="50.8118%" y="495.50"></text></g><g><title>__x64_sys_recvfrom (1 samples, 1.12%)</title><rect x="50.5618%" y="469" width="1.1236%" height="15" fill="rgb(233,42,35)" fg:x="45" fg:w="1"/><text x="50.8118%" y="479.50"></text></g><g><title>__sys_recvfrom (1 samples, 1.12%)</title><rect x="50.5618%" y="453" width="1.1236%" height="15" fill="rgb(231,13,6)" fg:x="45" fg:w="1"/><text x="50.8118%" y="463.50"></text></g><g><title>sock_recvmsg (1 samples, 1.12%)</title><rect x="50.5618%" y="437" width="1.1236%" height="15" fill="rgb(207,181,40)" fg:x="45" fg:w="1"/><text x="50.8118%" y="447.50"></text></g><g><title>inet_recvmsg (1 samples, 1.12%)</title><rect x="50.5618%" y="421" width="1.1236%" height="15" fill="rgb(254,173,49)" fg:x="45" fg:w="1"/><text x="50.8118%" y="431.50"></text></g><g><title>udp_recvmsg (1 samples, 1.12%)</title><rect x="50.5618%" y="405" width="1.1236%" height="15" fill="rgb(221,1,38)" fg:x="45" fg:w="1"/><text x="50.8118%" y="415.50"></text></g><g><title>__consume_stateless_skb (1 samples, 1.12%)</title><rect x="50.5618%" y="389" width="1.1236%" height="15" fill="rgb(206,124,46)" fg:x="45" fg:w="1"/><text x="50.8118%" y="399.50"></text></g><g><title>skb_release_data (1 samples, 1.12%)</title><rect x="50.5618%" y="373" width="1.1236%" height="15" fill="rgb(249,21,11)" fg:x="45" fg:w="1"/><text x="50.8118%" y="383.50"></text></g><g><title>__slab_free (1 samples, 1.12%)</title><rect x="50.5618%" y="357" width="1.1236%" height="15" fill="rgb(222,201,40)" fg:x="45" fg:w="1"/><text x="50.8118%" y="367.50"></text></g><g><title>cmpxchg_double_slab.constprop.0.isra.0 (1 samples, 1.12%)</title><rect x="50.5618%" y="341" width="1.1236%" height="15" fill="rgb(235,61,29)" fg:x="45" fg:w="1"/><text x="50.8118%" y="351.50"></text></g><g><title>ip_make_skb (1 samples, 1.12%)</title><rect x="51.6854%" y="437" width="1.1236%" height="15" fill="rgb(219,207,3)" fg:x="46" fg:w="1"/><text x="51.9354%" y="447.50"></text></g><g><title>__ip_make_skb (1 samples, 1.12%)</title><rect x="51.6854%" y="421" width="1.1236%" height="15" fill="rgb(222,56,46)" fg:x="46" fg:w="1"/><text x="51.9354%" y="431.50"></text></g><g><title>__udp_enqueue_schedule_skb (1 samples, 1.12%)</title><rect x="52.8090%" y="197" width="1.1236%" height="15" fill="rgb(239,76,54)" fg:x="47" fg:w="1"/><text x="53.0590%" y="207.50"></text></g><g><title>sock_def_readable (1 samples, 1.12%)</title><rect x="52.8090%" y="181" width="1.1236%" height="15" fill="rgb(231,124,27)" fg:x="47" fg:w="1"/><text x="53.0590%" y="191.50"></text></g><g><title>__wake_up_common_lock (1 samples, 1.12%)</title><rect x="52.8090%" y="165" width="1.1236%" height="15" fill="rgb(249,195,6)" fg:x="47" fg:w="1"/><text x="53.0590%" y="175.50"></text></g><g><title>__wake_up_common (1 samples, 1.12%)</title><rect x="52.8090%" y="149" width="1.1236%" height="15" fill="rgb(237,174,47)" fg:x="47" fg:w="1"/><text x="53.0590%" y="159.50"></text></g><g><title>ep_poll_callback (1 samples, 1.12%)</title><rect x="52.8090%" y="133" width="1.1236%" height="15" fill="rgb(206,201,31)" fg:x="47" fg:w="1"/><text x="53.0590%" y="143.50"></text></g><g><title>__wake_up_common_lock (1 samples, 1.12%)</title><rect x="52.8090%" y="117" width="1.1236%" height="15" fill="rgb(231,57,52)" fg:x="47" fg:w="1"/><text x="53.0590%" y="127.50"></text></g><g><title>__wake_up_common (1 samples, 1.12%)</title><rect x="52.8090%" y="101" width="1.1236%" height="15" fill="rgb(248,177,22)" fg:x="47" fg:w="1"/><text x="53.0590%" y="111.50"></text></g><g><title>ep_autoremove_wake_function (1 samples, 1.12%)</title><rect x="52.8090%" y="85" width="1.1236%" height="15" fill="rgb(215,211,37)" fg:x="47" fg:w="1"/><text x="53.0590%" y="95.50"></text></g><g><title>try_to_wake_up (1 samples, 1.12%)</title><rect x="52.8090%" y="69" width="1.1236%" height="15" fill="rgb(241,128,51)" fg:x="47" fg:w="1"/><text x="53.0590%" y="79.50"></text></g><g><title>select_task_rq_fair (1 samples, 1.12%)</title><rect x="52.8090%" y="53" width="1.1236%" height="15" fill="rgb(227,165,31)" fg:x="47" fg:w="1"/><text x="53.0590%" y="63.50"></text></g><g><title>available_idle_cpu (1 samples, 1.12%)</title><rect x="52.8090%" y="37" width="1.1236%" height="15" fill="rgb(228,167,24)" fg:x="47" fg:w="1"/><text x="53.0590%" y="47.50"></text></g><g><title>&lt;tftp::socket::UdpUnboundSocket as tftp::socket::Socket&gt;::send_to (3 samples, 3.37%)</title><rect x="51.6854%" y="597" width="3.3708%" height="15" fill="rgb(228,143,12)" fg:x="46" fg:w="3"/><text x="51.9354%" y="607.50">&lt;tf..</text></g><g><title>std::net::udp::UdpSocket::send_to (3 samples, 3.37%)</title><rect x="51.6854%" y="581" width="3.3708%" height="15" fill="rgb(249,149,8)" fg:x="46" fg:w="3"/><text x="51.9354%" y="591.50">std..</text></g><g><title>std::sys_common::net::UdpSocket::send_to (3 samples, 3.37%)</title><rect x="51.6854%" y="565" width="3.3708%" height="15" fill="rgb(243,35,44)" fg:x="46" fg:w="3"/><text x="51.9354%" y="575.50">std..</text></g><g><title>__libc_sendto (3 samples, 3.37%)</title><rect x="51.6854%" y="549" width="3.3708%" height="15" fill="rgb(246,89,9)" fg:x="46" fg:w="3"/><text x="51.9354%" y="559.50">__l..</text></g><g><title>entry_SYSCALL_64_after_hwframe (3 samples, 3.37%)</title><rect x="51.6854%" y="533" width="3.3708%" height="15" fill="rgb(233,213,13)" fg:x="46" fg:w="3"/><text x="51.9354%" y="543.50">ent..</text></g><g><title>do_syscall_64 (3 samples, 3.37%)</title><rect x="51.6854%" y="517" width="3.3708%" height="15" fill="rgb(233,141,41)" fg:x="46" fg:w="3"/><text x="51.9354%" y="527.50">do_..</text></g><g><title>__x64_sys_sendto (3 samples, 3.37%)</title><rect x="51.6854%" y="501" width="3.3708%" height="15" fill="rgb(239,167,4)" fg:x="46" fg:w="3"/><text x="51.9354%" y="511.50">__x..</text></g><g><title>__sys_sendto (3 samples, 3.37%)</title><rect x="51.6854%" y="485" width="3.3708%" height="15" fill="rgb(209,217,16)" fg:x="46" fg:w="3"/><text x="51.9354%" y="495.50">__s..</text></g><g><title>sock_sendmsg (3 samples, 3.37%)</title><rect x="51.6854%" y="469" width="3.3708%" height="15" fill="rgb(219,88,35)" fg:x="46" fg:w="3"/><text x="51.9354%" y="479.50">soc..</text></g><g><title>udp_sendmsg (3 samples, 3.37%)</title><rect x="51.6854%" y="453" width="3.3708%" height="15" fill="rgb(220,193,23)" fg:x="46" fg:w="3"/><text x="51.9354%" y="463.50">udp..</text></g><g><title>udp_send_skb (2 samples, 2.25%)</title><rect x="52.8090%" y="437" width="2.2472%" height="15" fill="rgb(230,90,52)" fg:x="47" fg:w="2"/><text x="53.0590%" y="447.50">u..</text></g><g><title>ip_send_skb (2 samples, 2.25%)</title><rect x="52.8090%" y="421" width="2.2472%" height="15" fill="rgb(252,106,19)" fg:x="47" fg:w="2"/><text x="53.0590%" y="431.50">i..</text></g><g><title>ip_finish_output2 (2 samples, 2.25%)</title><rect x="52.8090%" y="405" width="2.2472%" height="15" fill="rgb(206,74,20)" fg:x="47" fg:w="2"/><text x="53.0590%" y="415.50">i..</text></g><g><title>__local_bh_enable_ip (2 samples, 2.25%)</title><rect x="52.8090%" y="389" width="2.2472%" height="15" fill="rgb(230,138,44)" fg:x="47" fg:w="2"/><text x="53.0590%" y="399.50">_..</text></g><g><title>do_softirq.part.0 (2 samples, 2.25%)</title><rect x="52.8090%" y="373" width="2.2472%" height="15" fill="rgb(235,182,43)" fg:x="47" fg:w="2"/><text x="53.0590%" y="383.50">d..</text></g><g><title>__do_softirq (2 samples, 2.25%)</title><rect x="52.8090%" y="357" width="2.2472%" height="15" fill="rgb(242,16,51)" fg:x="47" fg:w="2"/><text x="53.0590%" y="367.50">_..</text></g><g><title>net_rx_action (2 samples, 2.25%)</title><rect x="52.8090%" y="341" width="2.2472%" height="15" fill="rgb(248,9,4)" fg:x="47" fg:w="2"/><text x="53.0590%" y="351.50">n..</text></g><g><title>__napi_poll (2 samples, 2.25%)</title><rect x="52.8090%" y="325" width="2.2472%" height="15" fill="rgb(210,31,22)" fg:x="47" fg:w="2"/><text x="53.0590%" y="335.50">_..</text></g><g><title>process_backlog (2 samples, 2.25%)</title><rect x="52.8090%" y="309" width="2.2472%" height="15" fill="rgb(239,54,39)" fg:x="47" fg:w="2"/><text x="53.0590%" y="319.50">p..</text></g><g><title>__netif_receive_skb_one_core (2 samples, 2.25%)</title><rect x="52.8090%" y="293" width="2.2472%" height="15" fill="rgb(230,99,41)" fg:x="47" fg:w="2"/><text x="53.0590%" y="303.50">_..</text></g><g><title>ip_local_deliver_finish (2 samples, 2.25%)</title><rect x="52.8090%" y="277" width="2.2472%" height="15" fill="rgb(253,106,12)" fg:x="47" fg:w="2"/><text x="53.0590%" y="287.50">i..</text></g><g><title>ip_protocol_deliver_rcu (2 samples, 2.25%)</title><rect x="52.8090%" y="261" width="2.2472%" height="15" fill="rgb(213,46,41)" fg:x="47" fg:w="2"/><text x="53.0590%" y="271.50">i..</text></g><g><title>__udp4_lib_rcv (2 samples, 2.25%)</title><rect x="52.8090%" y="245" width="2.2472%" height="15" fill="rgb(215,133,35)" fg:x="47" fg:w="2"/><text x="53.0590%" y="255.50">_..</text></g><g><title>udp_unicast_rcv_skb (2 samples, 2.25%)</title><rect x="52.8090%" y="229" width="2.2472%" height="15" fill="rgb(213,28,5)" fg:x="47" fg:w="2"/><text x="53.0590%" y="239.50">u..</text></g><g><title>udp_queue_rcv_one_skb (2 samples, 2.25%)</title><rect x="52.8090%" y="213" width="2.2472%" height="15" fill="rgb(215,77,49)" fg:x="47" fg:w="2"/><text x="53.0590%" y="223.50">u..</text></g><g><title>__xfrm_policy_check2.constprop.0 (1 samples, 1.12%)</title><rect x="53.9326%" y="197" width="1.1236%" height="15" fill="rgb(248,100,22)" fg:x="48" fg:w="1"/><text x="54.1826%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;tftp::writers::single_block_writer::SingleBlockWriter&lt;tftp::std_compat::fs::File&gt;&gt; (1 samples, 1.12%)</title><rect x="55.0562%" y="597" width="1.1236%" height="15" fill="rgb(208,67,9)" fg:x="49" fg:w="1"/><text x="55.3062%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;tftp::std_compat::fs::File&gt; (1 samples, 1.12%)</title><rect x="55.0562%" y="581" width="1.1236%" height="15" fill="rgb(219,133,21)" fg:x="49" fg:w="1"/><text x="55.3062%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::fs::File&gt; (1 samples, 1.12%)</title><rect x="55.0562%" y="565" width="1.1236%" height="15" fill="rgb(246,46,29)" fg:x="49" fg:w="1"/><text x="55.3062%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::fs::File&gt; (1 samples, 1.12%)</title><rect x="55.0562%" y="549" width="1.1236%" height="15" fill="rgb(246,185,52)" fg:x="49" fg:w="1"/><text x="55.3062%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::fd::FileDesc&gt; (1 samples, 1.12%)</title><rect x="55.0562%" y="533" width="1.1236%" height="15" fill="rgb(252,136,11)" fg:x="49" fg:w="1"/><text x="55.3062%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::os::fd::owned::OwnedFd&gt; (1 samples, 1.12%)</title><rect x="55.0562%" y="517" width="1.1236%" height="15" fill="rgb(219,138,53)" fg:x="49" fg:w="1"/><text x="55.3062%" y="527.50"></text></g><g><title>&lt;std::os::fd::owned::OwnedFd as core::ops::drop::Drop&gt;::drop (1 samples, 1.12%)</title><rect x="55.0562%" y="501" width="1.1236%" height="15" fill="rgb(211,51,23)" fg:x="49" fg:w="1"/><text x="55.3062%" y="511.50"></text></g><g><title>__GI___close (1 samples, 1.12%)</title><rect x="55.0562%" y="485" width="1.1236%" height="15" fill="rgb(247,221,28)" fg:x="49" fg:w="1"/><text x="55.3062%" y="495.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 1.12%)</title><rect x="55.0562%" y="469" width="1.1236%" height="15" fill="rgb(251,222,45)" fg:x="49" fg:w="1"/><text x="55.3062%" y="479.50"></text></g><g><title>do_syscall_64 (1 samples, 1.12%)</title><rect x="55.0562%" y="453" width="1.1236%" height="15" fill="rgb(217,162,53)" fg:x="49" fg:w="1"/><text x="55.3062%" y="463.50"></text></g><g><title>syscall_exit_to_user_mode (1 samples, 1.12%)</title><rect x="55.0562%" y="437" width="1.1236%" height="15" fill="rgb(229,93,14)" fg:x="49" fg:w="1"/><text x="55.3062%" y="447.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 1.12%)</title><rect x="55.0562%" y="421" width="1.1236%" height="15" fill="rgb(209,67,49)" fg:x="49" fg:w="1"/><text x="55.3062%" y="431.50"></text></g><g><title>task_work_run (1 samples, 1.12%)</title><rect x="55.0562%" y="405" width="1.1236%" height="15" fill="rgb(213,87,29)" fg:x="49" fg:w="1"/><text x="55.3062%" y="415.50"></text></g><g><title>__fput (1 samples, 1.12%)</title><rect x="55.0562%" y="389" width="1.1236%" height="15" fill="rgb(205,151,52)" fg:x="49" fg:w="1"/><text x="55.3062%" y="399.50"></text></g><g><title>ext4_release_file (1 samples, 1.12%)</title><rect x="55.0562%" y="373" width="1.1236%" height="15" fill="rgb(253,215,39)" fg:x="49" fg:w="1"/><text x="55.3062%" y="383.50"></text></g><g><title>__filemap_fdatawrite_range (1 samples, 1.12%)</title><rect x="55.0562%" y="357" width="1.1236%" height="15" fill="rgb(221,220,41)" fg:x="49" fg:w="1"/><text x="55.3062%" y="367.50"></text></g><g><title>filemap_fdatawrite_wbc (1 samples, 1.12%)</title><rect x="55.0562%" y="341" width="1.1236%" height="15" fill="rgb(218,133,21)" fg:x="49" fg:w="1"/><text x="55.3062%" y="351.50"></text></g><g><title>do_writepages (1 samples, 1.12%)</title><rect x="55.0562%" y="325" width="1.1236%" height="15" fill="rgb(221,193,43)" fg:x="49" fg:w="1"/><text x="55.3062%" y="335.50"></text></g><g><title>ext4_writepages (1 samples, 1.12%)</title><rect x="55.0562%" y="309" width="1.1236%" height="15" fill="rgb(240,128,52)" fg:x="49" fg:w="1"/><text x="55.3062%" y="319.50"></text></g><g><title>ext4_do_writepages (1 samples, 1.12%)</title><rect x="55.0562%" y="293" width="1.1236%" height="15" fill="rgb(253,114,12)" fg:x="49" fg:w="1"/><text x="55.3062%" y="303.50"></text></g><g><title>mpage_map_and_submit_buffers (1 samples, 1.12%)</title><rect x="55.0562%" y="277" width="1.1236%" height="15" fill="rgb(215,223,47)" fg:x="49" fg:w="1"/><text x="55.3062%" y="287.50"></text></g><g><title>__pagevec_release (1 samples, 1.12%)</title><rect x="55.0562%" y="261" width="1.1236%" height="15" fill="rgb(248,225,23)" fg:x="49" fg:w="1"/><text x="55.3062%" y="271.50"></text></g><g><title>release_pages (1 samples, 1.12%)</title><rect x="55.0562%" y="245" width="1.1236%" height="15" fill="rgb(250,108,0)" fg:x="49" fg:w="1"/><text x="55.3062%" y="255.50"></text></g><g><title>core::time::Duration::from_secs (1 samples, 1.12%)</title><rect x="56.1798%" y="597" width="1.1236%" height="15" fill="rgb(228,208,7)" fg:x="50" fg:w="1"/><text x="56.4298%" y="607.50"></text></g><g><title>core::time::Duration::new (1 samples, 1.12%)</title><rect x="56.1798%" y="581" width="1.1236%" height="15" fill="rgb(244,45,10)" fg:x="50" fg:w="1"/><text x="56.4298%" y="591.50"></text></g><g><title>dget_parent (1 samples, 1.12%)</title><rect x="59.5506%" y="389" width="1.1236%" height="15" fill="rgb(207,125,25)" fg:x="53" fg:w="1"/><text x="59.8006%" y="399.50"></text></g><g><title>lockref_get_not_zero (1 samples, 1.12%)</title><rect x="59.5506%" y="373" width="1.1236%" height="15" fill="rgb(210,195,18)" fg:x="53" fg:w="1"/><text x="59.8006%" y="383.50"></text></g><g><title>__fsnotify_parent (3 samples, 3.37%)</title><rect x="59.5506%" y="405" width="3.3708%" height="15" fill="rgb(249,80,12)" fg:x="53" fg:w="3"/><text x="59.8006%" y="415.50">__f..</text></g><g><title>fsnotify (2 samples, 2.25%)</title><rect x="60.6742%" y="389" width="2.2472%" height="15" fill="rgb(221,65,9)" fg:x="54" fg:w="2"/><text x="60.9242%" y="399.50">f..</text></g><g><title>inotify_handle_inode_event (1 samples, 1.12%)</title><rect x="61.7978%" y="373" width="1.1236%" height="15" fill="rgb(235,49,36)" fg:x="55" fg:w="1"/><text x="62.0478%" y="383.50"></text></g><g><title>fsnotify_insert_event (1 samples, 1.12%)</title><rect x="61.7978%" y="357" width="1.1236%" height="15" fill="rgb(225,32,20)" fg:x="55" fg:w="1"/><text x="62.0478%" y="367.50"></text></g><g><title>__wake_up_common_lock (1 samples, 1.12%)</title><rect x="61.7978%" y="341" width="1.1236%" height="15" fill="rgb(215,141,46)" fg:x="55" fg:w="1"/><text x="62.0478%" y="351.50"></text></g><g><title>__wake_up_common (1 samples, 1.12%)</title><rect x="61.7978%" y="325" width="1.1236%" height="15" fill="rgb(250,160,47)" fg:x="55" fg:w="1"/><text x="62.0478%" y="335.50"></text></g><g><title>pollwake (1 samples, 1.12%)</title><rect x="61.7978%" y="309" width="1.1236%" height="15" fill="rgb(216,222,40)" fg:x="55" fg:w="1"/><text x="62.0478%" y="319.50"></text></g><g><title>try_to_wake_up (1 samples, 1.12%)</title><rect x="61.7978%" y="293" width="1.1236%" height="15" fill="rgb(234,217,39)" fg:x="55" fg:w="1"/><text x="62.0478%" y="303.50"></text></g><g><title>select_task_rq_fair (1 samples, 1.12%)</title><rect x="61.7978%" y="277" width="1.1236%" height="15" fill="rgb(207,178,40)" fg:x="55" fg:w="1"/><text x="62.0478%" y="287.50"></text></g><g><title>balance_dirty_pages_ratelimited_flags (1 samples, 1.12%)</title><rect x="62.9213%" y="373" width="1.1236%" height="15" fill="rgb(221,136,13)" fg:x="56" fg:w="1"/><text x="63.1713%" y="383.50"></text></g><g><title>ext4_da_reserve_space (1 samples, 1.12%)</title><rect x="64.0449%" y="325" width="1.1236%" height="15" fill="rgb(249,199,10)" fg:x="57" fg:w="1"/><text x="64.2949%" y="335.50"></text></g><g><title>ext4_block_write_begin (2 samples, 2.25%)</title><rect x="64.0449%" y="357" width="2.2472%" height="15" fill="rgb(249,222,13)" fg:x="57" fg:w="2"/><text x="64.2949%" y="367.50">e..</text></g><g><title>ext4_da_get_block_prep (2 samples, 2.25%)</title><rect x="64.0449%" y="341" width="2.2472%" height="15" fill="rgb(244,185,38)" fg:x="57" fg:w="2"/><text x="64.2949%" y="351.50">e..</text></g><g><title>ext4_es_insert_delayed_block (1 samples, 1.12%)</title><rect x="65.1685%" y="325" width="1.1236%" height="15" fill="rgb(236,202,9)" fg:x="58" fg:w="1"/><text x="65.4185%" y="335.50"></text></g><g><title>__es_remove_extent (1 samples, 1.12%)</title><rect x="65.1685%" y="309" width="1.1236%" height="15" fill="rgb(250,229,37)" fg:x="58" fg:w="1"/><text x="65.4185%" y="319.50"></text></g><g><title>__filemap_add_folio (1 samples, 1.12%)</title><rect x="66.2921%" y="309" width="1.1236%" height="15" fill="rgb(206,174,23)" fg:x="59" fg:w="1"/><text x="66.5421%" y="319.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 1.12%)</title><rect x="66.2921%" y="293" width="1.1236%" height="15" fill="rgb(211,33,43)" fg:x="59" fg:w="1"/><text x="66.5421%" y="303.50"></text></g><g><title>charge_memcg (1 samples, 1.12%)</title><rect x="66.2921%" y="277" width="1.1236%" height="15" fill="rgb(245,58,50)" fg:x="59" fg:w="1"/><text x="66.5421%" y="287.50"></text></g><g><title>mem_cgroup_charge_statistics (1 samples, 1.12%)</title><rect x="66.2921%" y="261" width="1.1236%" height="15" fill="rgb(244,68,36)" fg:x="59" fg:w="1"/><text x="66.5421%" y="271.50"></text></g><g><title>__count_memcg_events (1 samples, 1.12%)</title><rect x="66.2921%" y="245" width="1.1236%" height="15" fill="rgb(232,229,15)" fg:x="59" fg:w="1"/><text x="66.5421%" y="255.50"></text></g><g><title>filemap_add_folio (2 samples, 2.25%)</title><rect x="66.2921%" y="325" width="2.2472%" height="15" fill="rgb(254,30,23)" fg:x="59" fg:w="2"/><text x="66.5421%" y="335.50">f..</text></g><g><title>folio_add_lru (1 samples, 1.12%)</title><rect x="67.4157%" y="309" width="1.1236%" height="15" fill="rgb(235,160,14)" fg:x="60" fg:w="1"/><text x="67.6657%" y="319.50"></text></g><g><title>folio_batch_move_lru (1 samples, 1.12%)</title><rect x="67.4157%" y="293" width="1.1236%" height="15" fill="rgb(212,155,44)" fg:x="60" fg:w="1"/><text x="67.6657%" y="303.50"></text></g><g><title>lru_add_fn (1 samples, 1.12%)</title><rect x="67.4157%" y="277" width="1.1236%" height="15" fill="rgb(226,2,50)" fg:x="60" fg:w="1"/><text x="67.6657%" y="287.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 1.12%)</title><rect x="67.4157%" y="261" width="1.1236%" height="15" fill="rgb(234,177,6)" fg:x="60" fg:w="1"/><text x="67.6657%" y="271.50"></text></g><g><title>ext4_da_write_begin (6 samples, 6.74%)</title><rect x="64.0449%" y="373" width="6.7416%" height="15" fill="rgb(217,24,9)" fg:x="57" fg:w="6"/><text x="64.2949%" y="383.50">ext4_da_w..</text></g><g><title>pagecache_get_page (4 samples, 4.49%)</title><rect x="66.2921%" y="357" width="4.4944%" height="15" fill="rgb(220,13,46)" fg:x="59" fg:w="4"/><text x="66.5421%" y="367.50">pagec..</text></g><g><title>__filemap_get_folio (4 samples, 4.49%)</title><rect x="66.2921%" y="341" width="4.4944%" height="15" fill="rgb(239,221,27)" fg:x="59" fg:w="4"/><text x="66.5421%" y="351.50">__fil..</text></g><g><title>folio_alloc (2 samples, 2.25%)</title><rect x="68.5393%" y="325" width="2.2472%" height="15" fill="rgb(222,198,25)" fg:x="61" fg:w="2"/><text x="68.7893%" y="335.50">f..</text></g><g><title>__alloc_pages (2 samples, 2.25%)</title><rect x="68.5393%" y="309" width="2.2472%" height="15" fill="rgb(211,99,13)" fg:x="61" fg:w="2"/><text x="68.7893%" y="319.50">_..</text></g><g><title>get_page_from_freelist (1 samples, 1.12%)</title><rect x="69.6629%" y="293" width="1.1236%" height="15" fill="rgb(232,111,31)" fg:x="62" fg:w="1"/><text x="69.9129%" y="303.50"></text></g><g><title>__block_commit_write.constprop.0.isra.0 (1 samples, 1.12%)</title><rect x="70.7865%" y="357" width="1.1236%" height="15" fill="rgb(245,82,37)" fg:x="63" fg:w="1"/><text x="71.0365%" y="367.50"></text></g><g><title>mark_buffer_dirty (1 samples, 1.12%)</title><rect x="70.7865%" y="341" width="1.1236%" height="15" fill="rgb(227,149,46)" fg:x="63" fg:w="1"/><text x="71.0365%" y="351.50"></text></g><g><title>__folio_mark_dirty (1 samples, 1.12%)</title><rect x="70.7865%" y="325" width="1.1236%" height="15" fill="rgb(218,36,50)" fg:x="63" fg:w="1"/><text x="71.0365%" y="335.50"></text></g><g><title>__mod_node_page_state (1 samples, 1.12%)</title><rect x="70.7865%" y="309" width="1.1236%" height="15" fill="rgb(226,80,48)" fg:x="63" fg:w="1"/><text x="71.0365%" y="319.50"></text></g><g><title>check_preemption_disabled (1 samples, 1.12%)</title><rect x="70.7865%" y="293" width="1.1236%" height="15" fill="rgb(238,224,15)" fg:x="63" fg:w="1"/><text x="71.0365%" y="303.50"></text></g><g><title>__ext4_journal_stop (2 samples, 2.25%)</title><rect x="71.9101%" y="341" width="2.2472%" height="15" fill="rgb(241,136,10)" fg:x="64" fg:w="2"/><text x="72.1601%" y="351.50">_..</text></g><g><title>jbd2_journal_stop (2 samples, 2.25%)</title><rect x="71.9101%" y="325" width="2.2472%" height="15" fill="rgb(208,32,45)" fg:x="64" fg:w="2"/><text x="72.1601%" y="335.50">j..</text></g><g><title>stop_this_handle (2 samples, 2.25%)</title><rect x="71.9101%" y="309" width="2.2472%" height="15" fill="rgb(207,135,9)" fg:x="64" fg:w="2"/><text x="72.1601%" y="319.50">s..</text></g><g><title>__wake_up_common_lock (1 samples, 1.12%)</title><rect x="73.0337%" y="293" width="1.1236%" height="15" fill="rgb(206,86,44)" fg:x="65" fg:w="1"/><text x="73.2837%" y="303.50"></text></g><g><title>__wake_up_common (1 samples, 1.12%)</title><rect x="73.0337%" y="277" width="1.1236%" height="15" fill="rgb(245,177,15)" fg:x="65" fg:w="1"/><text x="73.2837%" y="287.50"></text></g><g><title>__ext4_mark_inode_dirty (1 samples, 1.12%)</title><rect x="74.1573%" y="325" width="1.1236%" height="15" fill="rgb(206,64,50)" fg:x="66" fg:w="1"/><text x="74.4073%" y="335.50"></text></g><g><title>ext4_mark_iloc_dirty (1 samples, 1.12%)</title><rect x="74.1573%" y="309" width="1.1236%" height="15" fill="rgb(234,36,40)" fg:x="66" fg:w="1"/><text x="74.4073%" y="319.50"></text></g><g><title>ext4_fill_raw_inode (1 samples, 1.12%)</title><rect x="74.1573%" y="293" width="1.1236%" height="15" fill="rgb(213,64,8)" fg:x="66" fg:w="1"/><text x="74.4073%" y="303.50"></text></g><g><title>ext4_buffered_write_iter (12 samples, 13.48%)</title><rect x="62.9213%" y="405" width="13.4831%" height="15" fill="rgb(210,75,36)" fg:x="56" fg:w="12"/><text x="63.1713%" y="415.50">ext4_buffered_write_..</text></g><g><title>generic_perform_write (12 samples, 13.48%)</title><rect x="62.9213%" y="389" width="13.4831%" height="15" fill="rgb(229,88,21)" fg:x="56" fg:w="12"/><text x="63.1713%" y="399.50">generic_perform_write</text></g><g><title>generic_write_end (5 samples, 5.62%)</title><rect x="70.7865%" y="373" width="5.6180%" height="15" fill="rgb(252,204,47)" fg:x="63" fg:w="5"/><text x="71.0365%" y="383.50">generic..</text></g><g><title>__mark_inode_dirty (4 samples, 4.49%)</title><rect x="71.9101%" y="357" width="4.4944%" height="15" fill="rgb(208,77,27)" fg:x="64" fg:w="4"/><text x="72.1601%" y="367.50">__mar..</text></g><g><title>ext4_dirty_inode (2 samples, 2.25%)</title><rect x="74.1573%" y="341" width="2.2472%" height="15" fill="rgb(221,76,26)" fg:x="66" fg:w="2"/><text x="74.4073%" y="351.50">e..</text></g><g><title>jbd2__journal_start (1 samples, 1.12%)</title><rect x="75.2809%" y="325" width="1.1236%" height="15" fill="rgb(225,139,18)" fg:x="67" fg:w="1"/><text x="75.5309%" y="335.50"></text></g><g><title>&lt;tftp::std_compat::fs::File as tftp::std_compat::io::Write&gt;::write (17 samples, 19.10%)</title><rect x="58.4270%" y="565" width="19.1011%" height="15" fill="rgb(230,137,11)" fg:x="52" fg:w="17"/><text x="58.6770%" y="575.50">&lt;tftp::std_compat::fs::File as..</text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (17 samples, 19.10%)</title><rect x="58.4270%" y="549" width="19.1011%" height="15" fill="rgb(212,28,1)" fg:x="52" fg:w="17"/><text x="58.6770%" y="559.50">&lt;std::fs::File as std::io::Wri..</text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (17 samples, 19.10%)</title><rect x="58.4270%" y="533" width="19.1011%" height="15" fill="rgb(248,164,17)" fg:x="52" fg:w="17"/><text x="58.6770%" y="543.50">&lt;&amp;std::fs::File as std::io::Wr..</text></g><g><title>std::sys::unix::fs::File::write (17 samples, 19.10%)</title><rect x="58.4270%" y="517" width="19.1011%" height="15" fill="rgb(222,171,42)" fg:x="52" fg:w="17"/><text x="58.6770%" y="527.50">std::sys::unix::fs::File::write</text></g><g><title>std::sys::unix::fd::FileDesc::write (17 samples, 19.10%)</title><rect x="58.4270%" y="501" width="19.1011%" height="15" fill="rgb(243,84,45)" fg:x="52" fg:w="17"/><text x="58.6770%" y="511.50">std::sys::unix::fd::FileDesc::..</text></g><g><title>__GI___libc_write (17 samples, 19.10%)</title><rect x="58.4270%" y="485" width="19.1011%" height="15" fill="rgb(252,49,23)" fg:x="52" fg:w="17"/><text x="58.6770%" y="495.50">__GI___libc_write</text></g><g><title>entry_SYSCALL_64_after_hwframe (17 samples, 19.10%)</title><rect x="58.4270%" y="469" width="19.1011%" height="15" fill="rgb(215,19,7)" fg:x="52" fg:w="17"/><text x="58.6770%" y="479.50">entry_SYSCALL_64_after_hwframe</text></g><g><title>do_syscall_64 (16 samples, 17.98%)</title><rect x="59.5506%" y="453" width="17.9775%" height="15" fill="rgb(238,81,41)" fg:x="53" fg:w="16"/><text x="59.8006%" y="463.50">do_syscall_64</text></g><g><title>ksys_write (16 samples, 17.98%)</title><rect x="59.5506%" y="437" width="17.9775%" height="15" fill="rgb(210,199,37)" fg:x="53" fg:w="16"/><text x="59.8006%" y="447.50">ksys_write</text></g><g><title>vfs_write (16 samples, 17.98%)</title><rect x="59.5506%" y="421" width="17.9775%" height="15" fill="rgb(244,192,49)" fg:x="53" fg:w="16"/><text x="59.8006%" y="431.50">vfs_write</text></g><g><title>security_file_permission (1 samples, 1.12%)</title><rect x="76.4045%" y="405" width="1.1236%" height="15" fill="rgb(226,211,11)" fg:x="68" fg:w="1"/><text x="76.6545%" y="415.50"></text></g><g><title>apparmor_file_permission (1 samples, 1.12%)</title><rect x="76.4045%" y="389" width="1.1236%" height="15" fill="rgb(236,162,54)" fg:x="68" fg:w="1"/><text x="76.6545%" y="399.50"></text></g><g><title>tftp::client::receiver::write_block (19 samples, 21.35%)</title><rect x="57.3034%" y="597" width="21.3483%" height="15" fill="rgb(220,229,9)" fg:x="51" fg:w="19"/><text x="57.5534%" y="607.50">tftp::client::receiver::write_block</text></g><g><title>&lt;tftp::writers::single_block_writer::SingleBlockWriter&lt;W&gt; as tftp::writers::block_writer::BlockWriter&gt;::write_block (19 samples, 21.35%)</title><rect x="57.3034%" y="581" width="21.3483%" height="15" fill="rgb(250,87,22)" fg:x="51" fg:w="19"/><text x="57.5534%" y="591.50">&lt;tftp::writers::single_block_write..</text></g><g><title>tftp::block_mapper::BlockMapper::index (1 samples, 1.12%)</title><rect x="77.5281%" y="565" width="1.1236%" height="15" fill="rgb(239,43,17)" fg:x="69" fg:w="1"/><text x="77.7781%" y="575.50"></text></g><g><title>__libc_start_main_impl (44 samples, 49.44%)</title><rect x="31.4607%" y="901" width="49.4382%" height="15" fill="rgb(231,177,25)" fg:x="28" fg:w="44"/><text x="31.7107%" y="911.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (44 samples, 49.44%)</title><rect x="31.4607%" y="885" width="49.4382%" height="15" fill="rgb(219,179,1)" fg:x="28" fg:w="44"/><text x="31.7107%" y="895.50">__libc_start_call_main</text></g><g><title>main (44 samples, 49.44%)</title><rect x="31.4607%" y="869" width="49.4382%" height="15" fill="rgb(238,219,53)" fg:x="28" fg:w="44"/><text x="31.7107%" y="879.50">main</text></g><g><title>std::rt::lang_start (44 samples, 49.44%)</title><rect x="31.4607%" y="853" width="49.4382%" height="15" fill="rgb(232,167,36)" fg:x="28" fg:w="44"/><text x="31.7107%" y="863.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (44 samples, 49.44%)</title><rect x="31.4607%" y="837" width="49.4382%" height="15" fill="rgb(244,19,51)" fg:x="28" fg:w="44"/><text x="31.7107%" y="847.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (44 samples, 49.44%)</title><rect x="31.4607%" y="821" width="49.4382%" height="15" fill="rgb(224,6,22)" fg:x="28" fg:w="44"/><text x="31.7107%" y="831.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (44 samples, 49.44%)</title><rect x="31.4607%" y="805" width="49.4382%" height="15" fill="rgb(224,145,5)" fg:x="28" fg:w="44"/><text x="31.7107%" y="815.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (44 samples, 49.44%)</title><rect x="31.4607%" y="789" width="49.4382%" height="15" fill="rgb(234,130,49)" fg:x="28" fg:w="44"/><text x="31.7107%" y="799.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (44 samples, 49.44%)</title><rect x="31.4607%" y="773" width="49.4382%" height="15" fill="rgb(254,6,2)" fg:x="28" fg:w="44"/><text x="31.7107%" y="783.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (44 samples, 49.44%)</title><rect x="31.4607%" y="757" width="49.4382%" height="15" fill="rgb(208,96,46)" fg:x="28" fg:w="44"/><text x="31.7107%" y="767.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (44 samples, 49.44%)</title><rect x="31.4607%" y="741" width="49.4382%" height="15" fill="rgb(239,3,39)" fg:x="28" fg:w="44"/><text x="31.7107%" y="751.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (44 samples, 49.44%)</title><rect x="31.4607%" y="725" width="49.4382%" height="15" fill="rgb(233,210,1)" fg:x="28" fg:w="44"/><text x="31.7107%" y="735.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (44 samples, 49.44%)</title><rect x="31.4607%" y="709" width="49.4382%" height="15" fill="rgb(244,137,37)" fg:x="28" fg:w="44"/><text x="31.7107%" y="719.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_on..</text></g><g><title>std::rt::lang_start::{{closure}} (44 samples, 49.44%)</title><rect x="31.4607%" y="693" width="49.4382%" height="15" fill="rgb(240,136,2)" fg:x="28" fg:w="44"/><text x="31.7107%" y="703.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (44 samples, 49.44%)</title><rect x="31.4607%" y="677" width="49.4382%" height="15" fill="rgb(239,18,37)" fg:x="28" fg:w="44"/><text x="31.7107%" y="687.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (44 samples, 49.44%)</title><rect x="31.4607%" y="661" width="49.4382%" height="15" fill="rgb(218,185,22)" fg:x="28" fg:w="44"/><text x="31.7107%" y="671.50">core::ops::function::FnOnce::call_once</text></g><g><title>tftp::main (44 samples, 49.44%)</title><rect x="31.4607%" y="645" width="49.4382%" height="15" fill="rgb(225,218,4)" fg:x="28" fg:w="44"/><text x="31.7107%" y="655.50">tftp::main</text></g><g><title>tftp::receiver::start_receive (44 samples, 49.44%)</title><rect x="31.4607%" y="629" width="49.4382%" height="15" fill="rgb(230,182,32)" fg:x="28" fg:w="44"/><text x="31.7107%" y="639.50">tftp::receiver::start_receive</text></g><g><title>tftp::client::receiver::receive_file (44 samples, 49.44%)</title><rect x="31.4607%" y="613" width="49.4382%" height="15" fill="rgb(242,56,43)" fg:x="28" fg:w="44"/><text x="31.7107%" y="623.50">tftp::client::receiver::receive_file</text></g><g><title>tftp::io::instant_callback (2 samples, 2.25%)</title><rect x="78.6517%" y="597" width="2.2472%" height="15" fill="rgb(233,99,24)" fg:x="70" fg:w="2"/><text x="78.9017%" y="607.50">t..</text></g><g><title>tftp::std_compat::time::Instant::from_time (2 samples, 2.25%)</title><rect x="78.6517%" y="581" width="2.2472%" height="15" fill="rgb(234,209,42)" fg:x="70" fg:w="2"/><text x="78.9017%" y="591.50">t..</text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 2.25%)</title><rect x="78.6517%" y="565" width="2.2472%" height="15" fill="rgb(227,7,12)" fg:x="70" fg:w="2"/><text x="78.9017%" y="575.50">c..</text></g><g><title>tftp::io::instant_callback::{{closure}} (2 samples, 2.25%)</title><rect x="78.6517%" y="549" width="2.2472%" height="15" fill="rgb(245,203,43)" fg:x="70" fg:w="2"/><text x="78.9017%" y="559.50">t..</text></g><g><title>std::sys::unix::time::Timespec::now (2 samples, 2.25%)</title><rect x="78.6517%" y="533" width="2.2472%" height="15" fill="rgb(238,205,33)" fg:x="70" fg:w="2"/><text x="78.9017%" y="543.50">s..</text></g><g><title>__GI___clock_gettime (2 samples, 2.25%)</title><rect x="78.6517%" y="517" width="2.2472%" height="15" fill="rgb(231,56,7)" fg:x="70" fg:w="2"/><text x="78.9017%" y="527.50">_..</text></g><g><title>__vdso_clock_gettime (1 samples, 1.12%)</title><rect x="79.7753%" y="501" width="1.1236%" height="15" fill="rgb(244,186,29)" fg:x="71" fg:w="1"/><text x="80.0253%" y="511.50"></text></g><g><title>[[vdso]] (1 samples, 1.12%)</title><rect x="79.7753%" y="485" width="1.1236%" height="15" fill="rgb(234,111,31)" fg:x="71" fg:w="1"/><text x="80.0253%" y="495.50"></text></g><g><title>_start (45 samples, 50.56%)</title><rect x="31.4607%" y="917" width="50.5618%" height="15" fill="rgb(241,149,10)" fg:x="28" fg:w="45"/><text x="31.7107%" y="927.50">_start</text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 1.12%)</title><rect x="80.8989%" y="901" width="1.1236%" height="15" fill="rgb(249,206,44)" fg:x="72" fg:w="1"/><text x="81.1489%" y="911.50"></text></g><g><title>do_syscall_64 (1 samples, 1.12%)</title><rect x="80.8989%" y="885" width="1.1236%" height="15" fill="rgb(251,153,30)" fg:x="72" fg:w="1"/><text x="81.1489%" y="895.50"></text></g><g><title>__x64_sys_execve (1 samples, 1.12%)</title><rect x="80.8989%" y="869" width="1.1236%" height="15" fill="rgb(239,152,38)" fg:x="72" fg:w="1"/><text x="81.1489%" y="879.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 1.12%)</title><rect x="80.8989%" y="853" width="1.1236%" height="15" fill="rgb(249,139,47)" fg:x="72" fg:w="1"/><text x="81.1489%" y="863.50"></text></g><g><title>bprm_execve (1 samples, 1.12%)</title><rect x="80.8989%" y="837" width="1.1236%" height="15" fill="rgb(244,64,35)" fg:x="72" fg:w="1"/><text x="81.1489%" y="847.50"></text></g><g><title>proc_exec_connector (1 samples, 1.12%)</title><rect x="80.8989%" y="821" width="1.1236%" height="15" fill="rgb(216,46,15)" fg:x="72" fg:w="1"/><text x="81.1489%" y="831.50"></text></g><g><title>ep_item_poll.isra.0 (1 samples, 1.12%)</title><rect x="84.2697%" y="853" width="1.1236%" height="15" fill="rgb(250,74,19)" fg:x="75" fg:w="1"/><text x="84.5197%" y="863.50"></text></g><g><title>__x64_sys_epoll_ctl (4 samples, 4.49%)</title><rect x="82.0225%" y="885" width="4.4944%" height="15" fill="rgb(249,42,33)" fg:x="73" fg:w="4"/><text x="82.2725%" y="895.50">__x64..</text></g><g><title>do_epoll_ctl (4 samples, 4.49%)</title><rect x="82.0225%" y="869" width="4.4944%" height="15" fill="rgb(242,149,17)" fg:x="73" fg:w="4"/><text x="82.2725%" y="879.50">do_ep..</text></g><g><title>mutex_unlock (1 samples, 1.12%)</title><rect x="85.3933%" y="853" width="1.1236%" height="15" fill="rgb(244,29,21)" fg:x="76" fg:w="1"/><text x="85.6433%" y="863.50"></text></g><g><title>__x64_sys_epoll_wait (1 samples, 1.12%)</title><rect x="86.5169%" y="885" width="1.1236%" height="15" fill="rgb(220,130,37)" fg:x="77" fg:w="1"/><text x="86.7669%" y="895.50"></text></g><g><title>do_epoll_wait (1 samples, 1.12%)</title><rect x="86.5169%" y="869" width="1.1236%" height="15" fill="rgb(211,67,2)" fg:x="77" fg:w="1"/><text x="86.7669%" y="879.50"></text></g><g><title>ep_item_poll.isra.0 (1 samples, 1.12%)</title><rect x="86.5169%" y="853" width="1.1236%" height="15" fill="rgb(235,68,52)" fg:x="77" fg:w="1"/><text x="86.7669%" y="863.50"></text></g><g><title>sock_poll (1 samples, 1.12%)</title><rect x="86.5169%" y="837" width="1.1236%" height="15" fill="rgb(246,142,3)" fg:x="77" fg:w="1"/><text x="86.7669%" y="847.50"></text></g><g><title>__x64_sys_execve (1 samples, 1.12%)</title><rect x="87.6404%" y="885" width="1.1236%" height="15" fill="rgb(241,25,7)" fg:x="78" fg:w="1"/><text x="87.8904%" y="895.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 1.12%)</title><rect x="87.6404%" y="869" width="1.1236%" height="15" fill="rgb(242,119,39)" fg:x="78" fg:w="1"/><text x="87.8904%" y="879.50"></text></g><g><title>bprm_execve (1 samples, 1.12%)</title><rect x="87.6404%" y="853" width="1.1236%" height="15" fill="rgb(241,98,45)" fg:x="78" fg:w="1"/><text x="87.8904%" y="863.50"></text></g><g><title>load_elf_binary (1 samples, 1.12%)</title><rect x="87.6404%" y="837" width="1.1236%" height="15" fill="rgb(254,28,30)" fg:x="78" fg:w="1"/><text x="87.8904%" y="847.50"></text></g><g><title>setup_new_exec (1 samples, 1.12%)</title><rect x="87.6404%" y="821" width="1.1236%" height="15" fill="rgb(241,142,54)" fg:x="78" fg:w="1"/><text x="87.8904%" y="831.50"></text></g><g><title>arch_pick_mmap_layout (1 samples, 1.12%)</title><rect x="87.6404%" y="805" width="1.1236%" height="15" fill="rgb(222,85,15)" fg:x="78" fg:w="1"/><text x="87.8904%" y="815.50"></text></g><g><title>get_random_u64 (1 samples, 1.12%)</title><rect x="87.6404%" y="789" width="1.1236%" height="15" fill="rgb(210,85,47)" fg:x="78" fg:w="1"/><text x="87.8904%" y="799.50"></text></g><g><title>check_preemption_disabled (1 samples, 1.12%)</title><rect x="87.6404%" y="773" width="1.1236%" height="15" fill="rgb(224,206,25)" fg:x="78" fg:w="1"/><text x="87.8904%" y="783.50"></text></g><g><title>__check_object_size (1 samples, 1.12%)</title><rect x="88.7640%" y="805" width="1.1236%" height="15" fill="rgb(243,201,19)" fg:x="79" fg:w="1"/><text x="89.0140%" y="815.50"></text></g><g><title>__skb_recv_udp (1 samples, 1.12%)</title><rect x="89.8876%" y="805" width="1.1236%" height="15" fill="rgb(236,59,4)" fg:x="80" fg:w="1"/><text x="90.1376%" y="815.50"></text></g><g><title>udp_rmem_release (1 samples, 1.12%)</title><rect x="89.8876%" y="789" width="1.1236%" height="15" fill="rgb(254,179,45)" fg:x="80" fg:w="1"/><text x="90.1376%" y="799.50"></text></g><g><title>_raw_spin_lock (1 samples, 1.12%)</title><rect x="89.8876%" y="773" width="1.1236%" height="15" fill="rgb(226,14,10)" fg:x="80" fg:w="1"/><text x="90.1376%" y="783.50"></text></g><g><title>__x64_sys_recvfrom (3 samples, 3.37%)</title><rect x="88.7640%" y="885" width="3.3708%" height="15" fill="rgb(244,27,41)" fg:x="79" fg:w="3"/><text x="89.0140%" y="895.50">__x..</text></g><g><title>__sys_recvfrom (3 samples, 3.37%)</title><rect x="88.7640%" y="869" width="3.3708%" height="15" fill="rgb(235,35,32)" fg:x="79" fg:w="3"/><text x="89.0140%" y="879.50">__s..</text></g><g><title>sock_recvmsg (3 samples, 3.37%)</title><rect x="88.7640%" y="853" width="3.3708%" height="15" fill="rgb(218,68,31)" fg:x="79" fg:w="3"/><text x="89.0140%" y="863.50">soc..</text></g><g><title>inet_recvmsg (3 samples, 3.37%)</title><rect x="88.7640%" y="837" width="3.3708%" height="15" fill="rgb(207,120,37)" fg:x="79" fg:w="3"/><text x="89.0140%" y="847.50">ine..</text></g><g><title>udp_recvmsg (3 samples, 3.37%)</title><rect x="88.7640%" y="821" width="3.3708%" height="15" fill="rgb(227,98,0)" fg:x="79" fg:w="3"/><text x="89.0140%" y="831.50">udp..</text></g><g><title>_copy_to_iter (1 samples, 1.12%)</title><rect x="91.0112%" y="805" width="1.1236%" height="15" fill="rgb(207,7,3)" fg:x="81" fg:w="1"/><text x="91.2612%" y="815.50"></text></g><g><title>copy_user_generic_string (1 samples, 1.12%)</title><rect x="91.0112%" y="789" width="1.1236%" height="15" fill="rgb(206,98,19)" fg:x="81" fg:w="1"/><text x="91.2612%" y="799.50"></text></g><g><title>__x64_sys_timerfd_settime (1 samples, 1.12%)</title><rect x="92.1348%" y="885" width="1.1236%" height="15" fill="rgb(217,5,26)" fg:x="82" fg:w="1"/><text x="92.3848%" y="895.50"></text></g><g><title>do_timerfd_settime (1 samples, 1.12%)</title><rect x="92.1348%" y="869" width="1.1236%" height="15" fill="rgb(235,190,38)" fg:x="82" fg:w="1"/><text x="92.3848%" y="879.50"></text></g><g><title>hrtimer_start_range_ns (1 samples, 1.12%)</title><rect x="92.1348%" y="853" width="1.1236%" height="15" fill="rgb(247,86,24)" fg:x="82" fg:w="1"/><text x="92.3848%" y="863.50"></text></g><g><title>enqueue_hrtimer (1 samples, 1.12%)</title><rect x="92.1348%" y="837" width="1.1236%" height="15" fill="rgb(205,101,16)" fg:x="82" fg:w="1"/><text x="92.3848%" y="847.50"></text></g><g><title>timerqueue_add (1 samples, 1.12%)</title><rect x="92.1348%" y="821" width="1.1236%" height="15" fill="rgb(246,168,33)" fg:x="82" fg:w="1"/><text x="92.3848%" y="831.50"></text></g><g><title>ext4_da_write_begin (1 samples, 1.12%)</title><rect x="93.2584%" y="821" width="1.1236%" height="15" fill="rgb(231,114,1)" fg:x="83" fg:w="1"/><text x="93.5084%" y="831.50"></text></g><g><title>pagecache_get_page (1 samples, 1.12%)</title><rect x="93.2584%" y="805" width="1.1236%" height="15" fill="rgb(207,184,53)" fg:x="83" fg:w="1"/><text x="93.5084%" y="815.50"></text></g><g><title>__filemap_get_folio (1 samples, 1.12%)</title><rect x="93.2584%" y="789" width="1.1236%" height="15" fill="rgb(224,95,51)" fg:x="83" fg:w="1"/><text x="93.5084%" y="799.50"></text></g><g><title>fault_in_iov_iter_readable (1 samples, 1.12%)</title><rect x="94.3820%" y="821" width="1.1236%" height="15" fill="rgb(212,188,45)" fg:x="84" fg:w="1"/><text x="94.6320%" y="831.50"></text></g><g><title>fault_in_readable (1 samples, 1.12%)</title><rect x="94.3820%" y="805" width="1.1236%" height="15" fill="rgb(223,154,38)" fg:x="84" fg:w="1"/><text x="94.6320%" y="815.50"></text></g><g><title>__block_commit_write.constprop.0.isra.0 (1 samples, 1.12%)</title><rect x="95.5056%" y="805" width="1.1236%" height="15" fill="rgb(251,22,52)" fg:x="85" fg:w="1"/><text x="95.7556%" y="815.50"></text></g><g><title>mark_buffer_dirty (1 samples, 1.12%)</title><rect x="95.5056%" y="789" width="1.1236%" height="15" fill="rgb(229,209,22)" fg:x="85" fg:w="1"/><text x="95.7556%" y="799.50"></text></g><g><title>__ext4_mark_inode_dirty (1 samples, 1.12%)</title><rect x="96.6292%" y="773" width="1.1236%" height="15" fill="rgb(234,138,34)" fg:x="86" fg:w="1"/><text x="96.8792%" y="783.50"></text></g><g><title>ext4_mark_iloc_dirty (1 samples, 1.12%)</title><rect x="96.6292%" y="757" width="1.1236%" height="15" fill="rgb(212,95,11)" fg:x="86" fg:w="1"/><text x="96.8792%" y="767.50"></text></g><g><title>ext4_fill_raw_inode (1 samples, 1.12%)</title><rect x="96.6292%" y="741" width="1.1236%" height="15" fill="rgb(240,179,47)" fg:x="86" fg:w="1"/><text x="96.8792%" y="751.50"></text></g><g><title>all (89 samples, 100%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(240,163,11)" fg:x="0" fg:w="89"/><text x="0.2500%" y="959.50"></text></g><g><title>tftp (85 samples, 95.51%)</title><rect x="4.4944%" y="933" width="95.5056%" height="15" fill="rgb(236,37,12)" fg:x="4" fg:w="85"/><text x="4.7444%" y="943.50">tftp</text></g><g><title>entry_SYSCALL_64_after_hwframe (16 samples, 17.98%)</title><rect x="82.0225%" y="917" width="17.9775%" height="15" fill="rgb(232,164,16)" fg:x="73" fg:w="16"/><text x="82.2725%" y="927.50">entry_SYSCALL_64_after_hwfra..</text></g><g><title>do_syscall_64 (16 samples, 17.98%)</title><rect x="82.0225%" y="901" width="17.9775%" height="15" fill="rgb(244,205,15)" fg:x="73" fg:w="16"/><text x="82.2725%" y="911.50">do_syscall_64</text></g><g><title>ksys_write (6 samples, 6.74%)</title><rect x="93.2584%" y="885" width="6.7416%" height="15" fill="rgb(223,117,47)" fg:x="83" fg:w="6"/><text x="93.5084%" y="895.50">ksys_write</text></g><g><title>vfs_write (6 samples, 6.74%)</title><rect x="93.2584%" y="869" width="6.7416%" height="15" fill="rgb(244,107,35)" fg:x="83" fg:w="6"/><text x="93.5084%" y="879.50">vfs_write</text></g><g><title>ext4_buffered_write_iter (6 samples, 6.74%)</title><rect x="93.2584%" y="853" width="6.7416%" height="15" fill="rgb(205,140,8)" fg:x="83" fg:w="6"/><text x="93.5084%" y="863.50">ext4_buff..</text></g><g><title>generic_perform_write (6 samples, 6.74%)</title><rect x="93.2584%" y="837" width="6.7416%" height="15" fill="rgb(228,84,46)" fg:x="83" fg:w="6"/><text x="93.5084%" y="847.50">generic_p..</text></g><g><title>generic_write_end (4 samples, 4.49%)</title><rect x="95.5056%" y="821" width="4.4944%" height="15" fill="rgb(254,188,9)" fg:x="85" fg:w="4"/><text x="95.7556%" y="831.50">gener..</text></g><g><title>__mark_inode_dirty (3 samples, 3.37%)</title><rect x="96.6292%" y="805" width="3.3708%" height="15" fill="rgb(206,112,54)" fg:x="86" fg:w="3"/><text x="96.8792%" y="815.50">__m..</text></g><g><title>ext4_dirty_inode (3 samples, 3.37%)</title><rect x="96.6292%" y="789" width="3.3708%" height="15" fill="rgb(216,84,49)" fg:x="86" fg:w="3"/><text x="96.8792%" y="799.50">ext..</text></g><g><title>jbd2__journal_start (2 samples, 2.25%)</title><rect x="97.7528%" y="773" width="2.2472%" height="15" fill="rgb(214,194,35)" fg:x="87" fg:w="2"/><text x="98.0028%" y="783.50">j..</text></g><g><title>kmem_cache_alloc (2 samples, 2.25%)</title><rect x="97.7528%" y="757" width="2.2472%" height="15" fill="rgb(249,28,3)" fg:x="87" fg:w="2"/><text x="98.0028%" y="767.50">k..</text></g></svg></svg>