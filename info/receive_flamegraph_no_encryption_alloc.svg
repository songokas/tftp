<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="758" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="741.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="741.00"> </text><svg id="frames" x="10" width="1180" total_samples="126"><g><title>[[stack]] (2 samples, 1.59%)</title><rect x="0.0000%" y="677" width="1.5873%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="687.50"></text></g><g><title>write (2 samples, 1.59%)</title><rect x="0.0000%" y="661" width="1.5873%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="671.50"></text></g><g><title>[unknown] (2 samples, 1.59%)</title><rect x="0.0000%" y="645" width="1.5873%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="2"/><text x="0.2500%" y="655.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.79%)</title><rect x="4.7619%" y="661" width="0.7937%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="1"/><text x="5.0119%" y="671.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.79%)</title><rect x="4.7619%" y="645" width="0.7937%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="1"/><text x="5.0119%" y="655.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.79%)</title><rect x="4.7619%" y="629" width="0.7937%" height="15" fill="rgb(232,128,0)" fg:x="6" fg:w="1"/><text x="5.0119%" y="639.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 4.76%)</title><rect x="1.5873%" y="677" width="4.7619%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="6"/><text x="1.8373%" y="687.50">[ld-li..</text></g><g><title>[unknown] (1 samples, 0.79%)</title><rect x="5.5556%" y="661" width="0.7937%" height="15" fill="rgb(228,23,34)" fg:x="7" fg:w="1"/><text x="5.8056%" y="671.50"></text></g><g><title>exit (1 samples, 0.79%)</title><rect x="6.3492%" y="629" width="0.7937%" height="15" fill="rgb(218,30,26)" fg:x="8" fg:w="1"/><text x="6.5992%" y="639.50"></text></g><g><title>[libc.so.6] (1 samples, 0.79%)</title><rect x="6.3492%" y="613" width="0.7937%" height="15" fill="rgb(220,122,19)" fg:x="8" fg:w="1"/><text x="6.5992%" y="623.50"></text></g><g><title>__call_tls_dtors (1 samples, 0.79%)</title><rect x="6.3492%" y="597" width="0.7937%" height="15" fill="rgb(250,228,42)" fg:x="8" fg:w="1"/><text x="6.5992%" y="607.50"></text></g><g><title>std::thread::local::fast::destroy_value (1 samples, 0.79%)</title><rect x="6.3492%" y="581" width="0.7937%" height="15" fill="rgb(240,193,28)" fg:x="8" fg:w="1"/><text x="6.5992%" y="591.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.79%)</title><rect x="6.3492%" y="565" width="0.7937%" height="15" fill="rgb(216,20,37)" fg:x="8" fg:w="1"/><text x="6.5992%" y="575.50"></text></g><g><title>std::panicking::try (1 samples, 0.79%)</title><rect x="6.3492%" y="549" width="0.7937%" height="15" fill="rgb(206,188,39)" fg:x="8" fg:w="1"/><text x="6.5992%" y="559.50"></text></g><g><title>__rust_try (1 samples, 0.79%)</title><rect x="6.3492%" y="533" width="0.7937%" height="15" fill="rgb(217,207,13)" fg:x="8" fg:w="1"/><text x="6.5992%" y="543.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.79%)</title><rect x="6.3492%" y="517" width="0.7937%" height="15" fill="rgb(231,73,38)" fg:x="8" fg:w="1"/><text x="6.5992%" y="527.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.79%)</title><rect x="6.3492%" y="501" width="0.7937%" height="15" fill="rgb(225,20,46)" fg:x="8" fg:w="1"/><text x="6.5992%" y="511.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.79%)</title><rect x="6.3492%" y="485" width="0.7937%" height="15" fill="rgb(210,31,41)" fg:x="8" fg:w="1"/><text x="6.5992%" y="495.50"></text></g><g><title>std::thread::local::fast::destroy_value::{{closure}} (1 samples, 0.79%)</title><rect x="6.3492%" y="469" width="0.7937%" height="15" fill="rgb(221,200,47)" fg:x="8" fg:w="1"/><text x="6.5992%" y="479.50"></text></g><g><title>core::mem::drop (1 samples, 0.79%)</title><rect x="6.3492%" y="453" width="0.7937%" height="15" fill="rgb(226,26,5)" fg:x="8" fg:w="1"/><text x="6.5992%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::cell::RefCell&lt;core::option::Option&lt;env_logger::fmt::Formatter&gt;&gt;&gt;&gt; (1 samples, 0.79%)</title><rect x="6.3492%" y="437" width="0.7937%" height="15" fill="rgb(249,33,26)" fg:x="8" fg:w="1"/><text x="6.5992%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;core::option::Option&lt;env_logger::fmt::Formatter&gt;&gt;&gt; (1 samples, 0.79%)</title><rect x="6.3492%" y="421" width="0.7937%" height="15" fill="rgb(235,183,28)" fg:x="8" fg:w="1"/><text x="6.5992%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;core::option::Option&lt;env_logger::fmt::Formatter&gt;&gt;&gt; (1 samples, 0.79%)</title><rect x="6.3492%" y="405" width="0.7937%" height="15" fill="rgb(221,5,38)" fg:x="8" fg:w="1"/><text x="6.5992%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;env_logger::fmt::Formatter&gt;&gt; (1 samples, 0.79%)</title><rect x="6.3492%" y="389" width="0.7937%" height="15" fill="rgb(247,18,42)" fg:x="8" fg:w="1"/><text x="6.5992%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;env_logger::fmt::Formatter&gt; (1 samples, 0.79%)</title><rect x="6.3492%" y="373" width="0.7937%" height="15" fill="rgb(241,131,45)" fg:x="8" fg:w="1"/><text x="6.5992%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;env_logger::fmt::writer::termcolor::imp::Buffer&gt;&gt;&gt; (1 samples, 0.79%)</title><rect x="6.3492%" y="357" width="0.7937%" height="15" fill="rgb(249,31,29)" fg:x="8" fg:w="1"/><text x="6.5992%" y="367.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.79%)</title><rect x="6.3492%" y="341" width="0.7937%" height="15" fill="rgb(225,111,53)" fg:x="8" fg:w="1"/><text x="6.5992%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;env_logger::fmt::writer::termcolor::imp::Buffer&gt;&gt; (1 samples, 0.79%)</title><rect x="6.3492%" y="325" width="0.7937%" height="15" fill="rgb(238,160,17)" fg:x="8" fg:w="1"/><text x="6.5992%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;env_logger::fmt::writer::termcolor::imp::Buffer&gt;&gt; (1 samples, 0.79%)</title><rect x="6.3492%" y="309" width="0.7937%" height="15" fill="rgb(214,148,48)" fg:x="8" fg:w="1"/><text x="6.5992%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;env_logger::fmt::writer::termcolor::imp::Buffer&gt; (1 samples, 0.79%)</title><rect x="6.3492%" y="293" width="0.7937%" height="15" fill="rgb(232,36,49)" fg:x="8" fg:w="1"/><text x="6.5992%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 1.59%)</title><rect x="7.9365%" y="357" width="1.5873%" height="15" fill="rgb(209,103,24)" fg:x="10" fg:w="2"/><text x="8.1865%" y="367.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.79%)</title><rect x="8.7302%" y="341" width="0.7937%" height="15" fill="rgb(229,88,8)" fg:x="11" fg:w="1"/><text x="8.9802%" y="351.50"></text></g><g><title>core::ptr::slice_from_raw_parts (1 samples, 0.79%)</title><rect x="8.7302%" y="325" width="0.7937%" height="15" fill="rgb(213,181,19)" fg:x="11" fg:w="1"/><text x="8.9802%" y="335.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (1 samples, 0.79%)</title><rect x="8.7302%" y="309" width="0.7937%" height="15" fill="rgb(254,191,54)" fg:x="11" fg:w="1"/><text x="8.9802%" y="319.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.79%)</title><rect x="9.5238%" y="357" width="0.7937%" height="15" fill="rgb(241,83,37)" fg:x="12" fg:w="1"/><text x="9.7738%" y="367.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::le (2 samples, 1.59%)</title><rect x="10.3175%" y="357" width="1.5873%" height="15" fill="rgb(233,36,39)" fg:x="13" fg:w="2"/><text x="10.5675%" y="367.50"></text></g><g><title>core::mem::size_of_val (2 samples, 1.59%)</title><rect x="11.9048%" y="341" width="1.5873%" height="15" fill="rgb(226,3,54)" fg:x="15" fg:w="2"/><text x="12.1548%" y="351.50"></text></g><g><title>&lt;tftp::packet::Packet as tftp::packet::ByteConverter&gt;::from_bytes (4 samples, 3.17%)</title><rect x="11.9048%" y="357" width="3.1746%" height="15" fill="rgb(245,192,40)" fg:x="15" fg:w="4"/><text x="12.1548%" y="367.50">&lt;tf..</text></g><g><title>tftp::packet::PacketType::from_bytes (2 samples, 1.59%)</title><rect x="13.4921%" y="341" width="1.5873%" height="15" fill="rgb(238,167,29)" fg:x="17" fg:w="2"/><text x="13.7421%" y="351.50"></text></g><g><title>tftp::packet::try_from (2 samples, 1.59%)</title><rect x="13.4921%" y="325" width="1.5873%" height="15" fill="rgb(232,182,51)" fg:x="17" fg:w="2"/><text x="13.7421%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.79%)</title><rect x="14.2857%" y="309" width="0.7937%" height="15" fill="rgb(231,60,39)" fg:x="18" fg:w="1"/><text x="14.5357%" y="319.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.79%)</title><rect x="14.2857%" y="293" width="0.7937%" height="15" fill="rgb(208,69,12)" fg:x="18" fg:w="1"/><text x="14.5357%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.79%)</title><rect x="17.4603%" y="341" width="0.7937%" height="15" fill="rgb(235,93,37)" fg:x="22" fg:w="1"/><text x="17.7103%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;polling::Event&gt;&gt; (1 samples, 0.79%)</title><rect x="18.2540%" y="341" width="0.7937%" height="15" fill="rgb(213,116,39)" fg:x="23" fg:w="1"/><text x="18.5040%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;polling::Event&gt;&gt; (1 samples, 0.79%)</title><rect x="18.2540%" y="325" width="0.7937%" height="15" fill="rgb(222,207,29)" fg:x="23" fg:w="1"/><text x="18.5040%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.79%)</title><rect x="18.2540%" y="309" width="0.7937%" height="15" fill="rgb(206,96,30)" fg:x="23" fg:w="1"/><text x="18.5040%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.79%)</title><rect x="18.2540%" y="293" width="0.7937%" height="15" fill="rgb(218,138,4)" fg:x="23" fg:w="1"/><text x="18.5040%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.79%)</title><rect x="18.2540%" y="277" width="0.7937%" height="15" fill="rgb(250,191,14)" fg:x="23" fg:w="1"/><text x="18.5040%" y="287.50"></text></g><g><title>__rust_dealloc (1 samples, 0.79%)</title><rect x="18.2540%" y="261" width="0.7937%" height="15" fill="rgb(239,60,40)" fg:x="23" fg:w="1"/><text x="18.5040%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::Error&gt; (1 samples, 0.79%)</title><rect x="19.8413%" y="293" width="0.7937%" height="15" fill="rgb(206,27,48)" fg:x="25" fg:w="1"/><text x="20.0913%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::repr_bitpacked::Repr&gt; (1 samples, 0.79%)</title><rect x="19.8413%" y="277" width="0.7937%" height="15" fill="rgb(225,35,8)" fg:x="25" fg:w="1"/><text x="20.0913%" y="287.50"></text></g><g><title>&lt;std::io::error::repr_bitpacked::Repr as core::ops::drop::Drop&gt;::drop (1 samples, 0.79%)</title><rect x="19.8413%" y="261" width="0.7937%" height="15" fill="rgb(250,213,24)" fg:x="25" fg:w="1"/><text x="20.0913%" y="271.50"></text></g><g><title>std::io::error::repr_bitpacked::decode_repr (1 samples, 0.79%)</title><rect x="19.8413%" y="245" width="0.7937%" height="15" fill="rgb(247,123,22)" fg:x="25" fg:w="1"/><text x="20.0913%" y="255.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (4 samples, 3.17%)</title><rect x="19.0476%" y="341" width="3.1746%" height="15" fill="rgb(231,138,38)" fg:x="24" fg:w="4"/><text x="19.2976%" y="351.50">cor..</text></g><g><title>core::ops::function::FnOnce::call_once (3 samples, 2.38%)</title><rect x="19.8413%" y="325" width="2.3810%" height="15" fill="rgb(231,145,46)" fg:x="25" fg:w="3"/><text x="20.0913%" y="335.50">co..</text></g><g><title>tftp::io::from_io_err (3 samples, 2.38%)</title><rect x="19.8413%" y="309" width="2.3810%" height="15" fill="rgb(251,118,11)" fg:x="25" fg:w="3"/><text x="20.0913%" y="319.50">tf..</text></g><g><title>std::io::error::Error::kind (2 samples, 1.59%)</title><rect x="20.6349%" y="293" width="1.5873%" height="15" fill="rgb(217,147,25)" fg:x="26" fg:w="2"/><text x="20.8849%" y="303.50"></text></g><g><title>std::sys::unix::decode_error_kind (1 samples, 0.79%)</title><rect x="21.4286%" y="277" width="0.7937%" height="15" fill="rgb(247,81,37)" fg:x="27" fg:w="1"/><text x="21.6786%" y="287.50"></text></g><g><title>&lt;&amp;T as polling::Source&gt;::raw (1 samples, 0.79%)</title><rect x="22.2222%" y="325" width="0.7937%" height="15" fill="rgb(209,12,38)" fg:x="28" fg:w="1"/><text x="22.4722%" y="335.50"></text></g><g><title>std::os::fd::net::&lt;impl std::os::fd::raw::AsRawFd for std::net::udp::UdpSocket&gt;::as_raw_fd (1 samples, 0.79%)</title><rect x="22.2222%" y="309" width="0.7937%" height="15" fill="rgb(227,1,9)" fg:x="28" fg:w="1"/><text x="22.4722%" y="319.50"></text></g><g><title>&lt;std::sys::unix::fs::File as std::os::fd::raw::AsRawFd&gt;::as_raw_fd (1 samples, 0.79%)</title><rect x="22.2222%" y="293" width="0.7937%" height="15" fill="rgb(248,47,43)" fg:x="28" fg:w="1"/><text x="22.4722%" y="303.50"></text></g><g><title>&lt;std::sys::unix::fd::FileDesc as std::os::fd::raw::AsRawFd&gt;::as_raw_fd (1 samples, 0.79%)</title><rect x="22.2222%" y="277" width="0.7937%" height="15" fill="rgb(221,10,30)" fg:x="28" fg:w="1"/><text x="22.4722%" y="287.50"></text></g><g><title>&lt;std::os::fd::owned::OwnedFd as std::os::fd::raw::AsRawFd&gt;::as_raw_fd (1 samples, 0.79%)</title><rect x="22.2222%" y="261" width="0.7937%" height="15" fill="rgb(210,229,1)" fg:x="28" fg:w="1"/><text x="22.4722%" y="271.50"></text></g><g><title>polling::Poller::modify (3 samples, 2.38%)</title><rect x="22.2222%" y="341" width="2.3810%" height="15" fill="rgb(222,148,37)" fg:x="28" fg:w="3"/><text x="22.4722%" y="351.50">po..</text></g><g><title>polling::epoll::Poller::modify (2 samples, 1.59%)</title><rect x="23.0159%" y="325" width="1.5873%" height="15" fill="rgb(234,67,33)" fg:x="29" fg:w="2"/><text x="23.2659%" y="335.50"></text></g><g><title>polling::epoll::Poller::ctl (1 samples, 0.79%)</title><rect x="23.8095%" y="309" width="0.7937%" height="15" fill="rgb(247,98,35)" fg:x="30" fg:w="1"/><text x="24.0595%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.79%)</title><rect x="25.3968%" y="277" width="0.7937%" height="15" fill="rgb(247,138,52)" fg:x="32" fg:w="1"/><text x="25.6468%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (1 samples, 0.79%)</title><rect x="25.3968%" y="261" width="0.7937%" height="15" fill="rgb(213,79,30)" fg:x="32" fg:w="1"/><text x="25.6468%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.79%)</title><rect x="25.3968%" y="245" width="0.7937%" height="15" fill="rgb(246,177,23)" fg:x="32" fg:w="1"/><text x="25.6468%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.79%)</title><rect x="25.3968%" y="229" width="0.7937%" height="15" fill="rgb(230,62,27)" fg:x="32" fg:w="1"/><text x="25.6468%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.79%)</title><rect x="26.1905%" y="245" width="0.7937%" height="15" fill="rgb(216,154,8)" fg:x="33" fg:w="1"/><text x="26.4405%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.79%)</title><rect x="26.9841%" y="213" width="0.7937%" height="15" fill="rgb(244,35,45)" fg:x="34" fg:w="1"/><text x="27.2341%" y="223.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 1.59%)</title><rect x="27.7778%" y="165" width="1.5873%" height="15" fill="rgb(251,115,12)" fg:x="35" fg:w="2"/><text x="28.0278%" y="175.50"></text></g><g><title>malloc (2 samples, 1.59%)</title><rect x="27.7778%" y="149" width="1.5873%" height="15" fill="rgb(240,54,50)" fg:x="35" fg:w="2"/><text x="28.0278%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 2.38%)</title><rect x="27.7778%" y="197" width="2.3810%" height="15" fill="rgb(233,84,52)" fg:x="35" fg:w="3"/><text x="28.0278%" y="207.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 2.38%)</title><rect x="27.7778%" y="181" width="2.3810%" height="15" fill="rgb(207,117,47)" fg:x="35" fg:w="3"/><text x="28.0278%" y="191.50">al..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (1 samples, 0.79%)</title><rect x="29.3651%" y="165" width="0.7937%" height="15" fill="rgb(249,43,39)" fg:x="37" fg:w="1"/><text x="29.6151%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 3.17%)</title><rect x="27.7778%" y="213" width="3.1746%" height="15" fill="rgb(209,38,44)" fg:x="35" fg:w="4"/><text x="28.0278%" y="223.50">all..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.79%)</title><rect x="30.1587%" y="197" width="0.7937%" height="15" fill="rgb(236,212,23)" fg:x="38" fg:w="1"/><text x="30.4087%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (8 samples, 6.35%)</title><rect x="25.3968%" y="325" width="6.3492%" height="15" fill="rgb(242,79,21)" fg:x="32" fg:w="8"/><text x="25.6468%" y="335.50">&lt;alloc::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (8 samples, 6.35%)</title><rect x="25.3968%" y="309" width="6.3492%" height="15" fill="rgb(211,96,35)" fg:x="32" fg:w="8"/><text x="25.6468%" y="319.50">&lt;alloc::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (8 samples, 6.35%)</title><rect x="25.3968%" y="293" width="6.3492%" height="15" fill="rgb(253,215,40)" fg:x="32" fg:w="8"/><text x="25.6468%" y="303.50">alloc::v..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (7 samples, 5.56%)</title><rect x="26.1905%" y="277" width="5.5556%" height="15" fill="rgb(211,81,21)" fg:x="33" fg:w="7"/><text x="26.4405%" y="287.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 5.56%)</title><rect x="26.1905%" y="261" width="5.5556%" height="15" fill="rgb(208,190,38)" fg:x="33" fg:w="7"/><text x="26.4405%" y="271.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 4.76%)</title><rect x="26.9841%" y="245" width="4.7619%" height="15" fill="rgb(235,213,38)" fg:x="34" fg:w="6"/><text x="27.2341%" y="255.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (6 samples, 4.76%)</title><rect x="26.9841%" y="229" width="4.7619%" height="15" fill="rgb(237,122,38)" fg:x="34" fg:w="6"/><text x="27.2341%" y="239.50">alloc:..</text></g><g><title>core::cmp::max (1 samples, 0.79%)</title><rect x="30.9524%" y="213" width="0.7937%" height="15" fill="rgb(244,218,35)" fg:x="39" fg:w="1"/><text x="31.2024%" y="223.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.79%)</title><rect x="30.9524%" y="197" width="0.7937%" height="15" fill="rgb(240,68,47)" fg:x="39" fg:w="1"/><text x="31.2024%" y="207.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.79%)</title><rect x="30.9524%" y="181" width="0.7937%" height="15" fill="rgb(210,16,53)" fg:x="39" fg:w="1"/><text x="31.2024%" y="191.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.79%)</title><rect x="31.7460%" y="325" width="0.7937%" height="15" fill="rgb(235,124,12)" fg:x="40" fg:w="1"/><text x="31.9960%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;polling::epoll::Events&gt;&gt; (1 samples, 0.79%)</title><rect x="32.5397%" y="325" width="0.7937%" height="15" fill="rgb(224,169,11)" fg:x="41" fg:w="1"/><text x="32.7897%" y="335.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.79%)</title><rect x="32.5397%" y="309" width="0.7937%" height="15" fill="rgb(250,166,2)" fg:x="41" fg:w="1"/><text x="32.7897%" y="319.50"></text></g><g><title>polling::epoll::Events::iter (2 samples, 1.59%)</title><rect x="33.3333%" y="325" width="1.5873%" height="15" fill="rgb(242,216,29)" fg:x="42" fg:w="2"/><text x="33.5833%" y="335.50"></text></g><g><title>core::array::&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (1 samples, 0.79%)</title><rect x="34.1270%" y="309" width="0.7937%" height="15" fill="rgb(230,116,27)" fg:x="43" fg:w="1"/><text x="34.3770%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.79%)</title><rect x="34.1270%" y="293" width="0.7937%" height="15" fill="rgb(228,99,48)" fg:x="43" fg:w="1"/><text x="34.3770%" y="303.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.79%)</title><rect x="34.1270%" y="277" width="0.7937%" height="15" fill="rgb(253,11,6)" fg:x="43" fg:w="1"/><text x="34.3770%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.79%)</title><rect x="34.1270%" y="261" width="0.7937%" height="15" fill="rgb(247,143,39)" fg:x="43" fg:w="1"/><text x="34.3770%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.79%)</title><rect x="34.1270%" y="245" width="0.7937%" height="15" fill="rgb(236,97,10)" fg:x="43" fg:w="1"/><text x="34.3770%" y="255.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.79%)</title><rect x="38.8889%" y="309" width="0.7937%" height="15" fill="rgb(233,208,19)" fg:x="49" fg:w="1"/><text x="39.1389%" y="319.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 2.38%)</title><rect x="39.6825%" y="309" width="2.3810%" height="15" fill="rgb(216,164,2)" fg:x="50" fg:w="3"/><text x="39.9325%" y="319.50">&lt;c..</text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::le (2 samples, 1.59%)</title><rect x="42.0635%" y="309" width="1.5873%" height="15" fill="rgb(220,129,5)" fg:x="53" fg:w="2"/><text x="42.3135%" y="319.50"></text></g><g><title>[libc.so.6] (1 samples, 0.79%)</title><rect x="43.6508%" y="309" width="0.7937%" height="15" fill="rgb(242,17,10)" fg:x="55" fg:w="1"/><text x="43.9008%" y="319.50"></text></g><g><title>epoll_wait (26 samples, 20.63%)</title><rect x="44.4444%" y="309" width="20.6349%" height="15" fill="rgb(242,107,0)" fg:x="56" fg:w="26"/><text x="44.6944%" y="319.50">epoll_wait</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.79%)</title><rect x="65.0794%" y="277" width="0.7937%" height="15" fill="rgb(251,28,31)" fg:x="82" fg:w="1"/><text x="65.3294%" y="287.50"></text></g><g><title>polling::epoll::Poller::wait (41 samples, 32.54%)</title><rect x="34.9206%" y="325" width="32.5397%" height="15" fill="rgb(233,223,10)" fg:x="44" fg:w="41"/><text x="35.1706%" y="335.50">polling::epoll::Poller::wait</text></g><g><title>polling::epoll::Poller::modify (3 samples, 2.38%)</title><rect x="65.0794%" y="309" width="2.3810%" height="15" fill="rgb(215,21,27)" fg:x="82" fg:w="3"/><text x="65.3294%" y="319.50">po..</text></g><g><title>polling::epoll::Poller::ctl (3 samples, 2.38%)</title><rect x="65.0794%" y="293" width="2.3810%" height="15" fill="rgb(232,23,21)" fg:x="82" fg:w="3"/><text x="65.3294%" y="303.50">po..</text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 1.59%)</title><rect x="65.8730%" y="277" width="1.5873%" height="15" fill="rgb(244,5,23)" fg:x="83" fg:w="2"/><text x="66.1230%" y="287.50"></text></g><g><title>polling::Poller::wait (57 samples, 45.24%)</title><rect x="24.6032%" y="341" width="45.2381%" height="15" fill="rgb(226,81,46)" fg:x="31" fg:w="57"/><text x="24.8532%" y="351.50">polling::Poller::wait</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (3 samples, 2.38%)</title><rect x="67.4603%" y="325" width="2.3810%" height="15" fill="rgb(247,70,30)" fg:x="85" fg:w="3"/><text x="67.7103%" y="335.50">st..</text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (1 samples, 0.79%)</title><rect x="69.0476%" y="309" width="0.7937%" height="15" fill="rgb(212,68,19)" fg:x="87" fg:w="1"/><text x="69.2976%" y="319.50"></text></g><g><title>std::sync::poison::Flag::guard (1 samples, 0.79%)</title><rect x="69.0476%" y="293" width="0.7937%" height="15" fill="rgb(240,187,13)" fg:x="87" fg:w="1"/><text x="69.2976%" y="303.50"></text></g><g><title>std::sync::poison::Flag::get (1 samples, 0.79%)</title><rect x="69.0476%" y="277" width="0.7937%" height="15" fill="rgb(223,113,26)" fg:x="87" fg:w="1"/><text x="69.2976%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (1 samples, 0.79%)</title><rect x="69.0476%" y="261" width="0.7937%" height="15" fill="rgb(206,192,2)" fg:x="87" fg:w="1"/><text x="69.2976%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.79%)</title><rect x="69.0476%" y="245" width="0.7937%" height="15" fill="rgb(241,108,4)" fg:x="87" fg:w="1"/><text x="69.2976%" y="255.50"></text></g><g><title>&lt;tftp::socket::StdSocket as tftp::socket::Socket&gt;::recv_from (71 samples, 56.35%)</title><rect x="15.0794%" y="357" width="56.3492%" height="15" fill="rgb(247,173,49)" fg:x="19" fg:w="71"/><text x="15.3294%" y="367.50">&lt;tftp::socket::StdSocket as tftp::socket::Socket&gt;::recv_from</text></g><g><title>std::net::udp::UdpSocket::recv_from (2 samples, 1.59%)</title><rect x="69.8413%" y="341" width="1.5873%" height="15" fill="rgb(224,114,35)" fg:x="88" fg:w="2"/><text x="70.0913%" y="351.50"></text></g><g><title>std::sys_common::net::UdpSocket::recv_from (1 samples, 0.79%)</title><rect x="70.6349%" y="325" width="0.7937%" height="15" fill="rgb(245,159,27)" fg:x="89" fg:w="1"/><text x="70.8849%" y="335.50"></text></g><g><title>std::sys::unix::net::Socket::recv_from (1 samples, 0.79%)</title><rect x="70.6349%" y="309" width="0.7937%" height="15" fill="rgb(245,172,44)" fg:x="89" fg:w="1"/><text x="70.8849%" y="319.50"></text></g><g><title>std::sys::unix::net::Socket::recv_from_with_flags (1 samples, 0.79%)</title><rect x="70.6349%" y="293" width="0.7937%" height="15" fill="rgb(236,23,11)" fg:x="89" fg:w="1"/><text x="70.8849%" y="303.50"></text></g><g><title>std::sys::unix::cvt (1 samples, 0.79%)</title><rect x="70.6349%" y="277" width="0.7937%" height="15" fill="rgb(205,117,38)" fg:x="89" fg:w="1"/><text x="70.8849%" y="287.50"></text></g><g><title>std::io::error::Error::last_os_error (1 samples, 0.79%)</title><rect x="70.6349%" y="261" width="0.7937%" height="15" fill="rgb(237,72,25)" fg:x="89" fg:w="1"/><text x="70.8849%" y="271.50"></text></g><g><title>std::sys::unix::os::errno (1 samples, 0.79%)</title><rect x="70.6349%" y="245" width="0.7937%" height="15" fill="rgb(244,70,9)" fg:x="89" fg:w="1"/><text x="70.8849%" y="255.50"></text></g><g><title>__errno_location (1 samples, 0.79%)</title><rect x="70.6349%" y="229" width="0.7937%" height="15" fill="rgb(217,125,39)" fg:x="89" fg:w="1"/><text x="70.8849%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (1 samples, 0.79%)</title><rect x="71.4286%" y="357" width="0.7937%" height="15" fill="rgb(235,36,10)" fg:x="90" fg:w="1"/><text x="71.6786%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (1 samples, 0.79%)</title><rect x="72.2222%" y="357" width="0.7937%" height="15" fill="rgb(251,123,47)" fg:x="91" fg:w="1"/><text x="72.4722%" y="367.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (1 samples, 0.79%)</title><rect x="72.2222%" y="341" width="0.7937%" height="15" fill="rgb(221,13,13)" fg:x="91" fg:w="1"/><text x="72.4722%" y="351.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (1 samples, 0.79%)</title><rect x="72.2222%" y="325" width="0.7937%" height="15" fill="rgb(238,131,9)" fg:x="91" fg:w="1"/><text x="72.4722%" y="335.50"></text></g><g><title>core::cmp::PartialOrd::gt (2 samples, 1.59%)</title><rect x="73.0159%" y="357" width="1.5873%" height="15" fill="rgb(211,50,8)" fg:x="92" fg:w="2"/><text x="73.2659%" y="367.50"></text></g><g><title>&lt;core::time::Duration as core::cmp::PartialOrd&gt;::partial_cmp (1 samples, 0.79%)</title><rect x="73.8095%" y="341" width="0.7937%" height="15" fill="rgb(245,182,24)" fg:x="93" fg:w="1"/><text x="74.0595%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u64&gt;::partial_cmp (1 samples, 0.79%)</title><rect x="73.8095%" y="325" width="0.7937%" height="15" fill="rgb(242,14,37)" fg:x="93" fg:w="1"/><text x="74.0595%" y="335.50"></text></g><g><title>tftp::client::client::query_server (1 samples, 0.79%)</title><rect x="74.6032%" y="357" width="0.7937%" height="15" fill="rgb(246,228,12)" fg:x="94" fg:w="1"/><text x="74.8532%" y="367.50"></text></g><g><title>&lt;tftp::packet::Packet as tftp::packet::ByteConverter&gt;::from_bytes (1 samples, 0.79%)</title><rect x="74.6032%" y="341" width="0.7937%" height="15" fill="rgb(213,55,15)" fg:x="94" fg:w="1"/><text x="74.8532%" y="351.50"></text></g><g><title>&lt;tftp::packet::OptionalAck as tftp::packet::ByteConverter&gt;::from_bytes (1 samples, 0.79%)</title><rect x="74.6032%" y="325" width="0.7937%" height="15" fill="rgb(209,9,3)" fg:x="94" fg:w="1"/><text x="74.8532%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.79%)</title><rect x="74.6032%" y="309" width="0.7937%" height="15" fill="rgb(230,59,30)" fg:x="94" fg:w="1"/><text x="74.8532%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.79%)</title><rect x="74.6032%" y="293" width="0.7937%" height="15" fill="rgb(209,121,21)" fg:x="94" fg:w="1"/><text x="74.8532%" y="303.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (1 samples, 0.79%)</title><rect x="74.6032%" y="277" width="0.7937%" height="15" fill="rgb(220,109,13)" fg:x="94" fg:w="1"/><text x="74.8532%" y="287.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (1 samples, 0.79%)</title><rect x="74.6032%" y="261" width="0.7937%" height="15" fill="rgb(232,18,1)" fg:x="94" fg:w="1"/><text x="74.8532%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.79%)</title><rect x="76.9841%" y="325" width="0.7937%" height="15" fill="rgb(215,41,42)" fg:x="97" fg:w="1"/><text x="77.2341%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::allocator (1 samples, 0.79%)</title><rect x="76.9841%" y="309" width="0.7937%" height="15" fill="rgb(224,123,36)" fg:x="97" fg:w="1"/><text x="77.2341%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocator (1 samples, 0.79%)</title><rect x="76.9841%" y="293" width="0.7937%" height="15" fill="rgb(240,125,3)" fg:x="97" fg:w="1"/><text x="77.2341%" y="303.50"></text></g><g><title>&lt;tftp::packet::AckPacket as tftp::packet::ByteConverter&gt;::to_bytes (2 samples, 1.59%)</title><rect x="77.7778%" y="325" width="1.5873%" height="15" fill="rgb(205,98,50)" fg:x="98" fg:w="2"/><text x="78.0278%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 1.59%)</title><rect x="77.7778%" y="309" width="1.5873%" height="15" fill="rgb(205,185,37)" fg:x="98" fg:w="2"/><text x="78.0278%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 1.59%)</title><rect x="77.7778%" y="293" width="1.5873%" height="15" fill="rgb(238,207,15)" fg:x="98" fg:w="2"/><text x="78.0278%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 1.59%)</title><rect x="77.7778%" y="277" width="1.5873%" height="15" fill="rgb(213,199,42)" fg:x="98" fg:w="2"/><text x="78.0278%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2 samples, 1.59%)</title><rect x="77.7778%" y="261" width="1.5873%" height="15" fill="rgb(235,201,11)" fg:x="98" fg:w="2"/><text x="78.0278%" y="271.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (2 samples, 1.59%)</title><rect x="77.7778%" y="245" width="1.5873%" height="15" fill="rgb(207,46,11)" fg:x="98" fg:w="2"/><text x="78.0278%" y="255.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (2 samples, 1.59%)</title><rect x="77.7778%" y="229" width="1.5873%" height="15" fill="rgb(241,35,35)" fg:x="98" fg:w="2"/><text x="78.0278%" y="239.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (1 samples, 0.79%)</title><rect x="79.3651%" y="85" width="0.7937%" height="15" fill="rgb(243,32,47)" fg:x="100" fg:w="1"/><text x="79.6151%" y="95.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (1 samples, 0.79%)</title><rect x="79.3651%" y="69" width="0.7937%" height="15" fill="rgb(247,202,23)" fg:x="100" fg:w="1"/><text x="79.6151%" y="79.50"></text></g><g><title>core::ptr::read (1 samples, 0.79%)</title><rect x="79.3651%" y="53" width="0.7937%" height="15" fill="rgb(219,102,11)" fg:x="100" fg:w="1"/><text x="79.6151%" y="63.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (1 samples, 0.79%)</title><rect x="79.3651%" y="37" width="0.7937%" height="15" fill="rgb(243,110,44)" fg:x="100" fg:w="1"/><text x="79.6151%" y="47.50"></text></g><g><title>&lt;tftp::packet::Packet as tftp::packet::ByteConverter&gt;::to_bytes (6 samples, 4.76%)</title><rect x="76.1905%" y="341" width="4.7619%" height="15" fill="rgb(222,74,54)" fg:x="96" fg:w="6"/><text x="76.4405%" y="351.50">&lt;tftp:..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 1.59%)</title><rect x="79.3651%" y="325" width="1.5873%" height="15" fill="rgb(216,99,12)" fg:x="100" fg:w="2"/><text x="79.6151%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 1.59%)</title><rect x="79.3651%" y="309" width="1.5873%" height="15" fill="rgb(226,22,26)" fg:x="100" fg:w="2"/><text x="79.6151%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 1.59%)</title><rect x="79.3651%" y="293" width="1.5873%" height="15" fill="rgb(217,163,10)" fg:x="100" fg:w="2"/><text x="79.6151%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2 samples, 1.59%)</title><rect x="79.3651%" y="277" width="1.5873%" height="15" fill="rgb(213,25,53)" fg:x="100" fg:w="2"/><text x="79.6151%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 1.59%)</title><rect x="79.3651%" y="261" width="1.5873%" height="15" fill="rgb(252,105,26)" fg:x="100" fg:w="2"/><text x="79.6151%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2 samples, 1.59%)</title><rect x="79.3651%" y="245" width="1.5873%" height="15" fill="rgb(220,39,43)" fg:x="100" fg:w="2"/><text x="79.6151%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 1.59%)</title><rect x="79.3651%" y="229" width="1.5873%" height="15" fill="rgb(229,68,48)" fg:x="100" fg:w="2"/><text x="79.6151%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 1.59%)</title><rect x="79.3651%" y="213" width="1.5873%" height="15" fill="rgb(252,8,32)" fg:x="100" fg:w="2"/><text x="79.6151%" y="223.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 1.59%)</title><rect x="79.3651%" y="197" width="1.5873%" height="15" fill="rgb(223,20,43)" fg:x="100" fg:w="2"/><text x="79.6151%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::by_ref_sized::ByRefSized&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 1.59%)</title><rect x="79.3651%" y="181" width="1.5873%" height="15" fill="rgb(229,81,49)" fg:x="100" fg:w="2"/><text x="79.6151%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 1.59%)</title><rect x="79.3651%" y="165" width="1.5873%" height="15" fill="rgb(236,28,36)" fg:x="100" fg:w="2"/><text x="79.6151%" y="175.50"></text></g><g><title>&lt;core::const_closure::ConstFnMutClosure&lt;&amp;mut A,Function&gt; as core::ops::function::FnMut&lt;ClosureArguments&gt;&gt;::call_mut (2 samples, 1.59%)</title><rect x="79.3651%" y="149" width="1.5873%" height="15" fill="rgb(249,185,26)" fg:x="100" fg:w="2"/><text x="79.6151%" y="159.50"></text></g><g><title>core::ops::function::Fn::call (2 samples, 1.59%)</title><rect x="79.3651%" y="133" width="1.5873%" height="15" fill="rgb(249,174,33)" fg:x="100" fg:w="2"/><text x="79.6151%" y="143.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2_imp (2 samples, 1.59%)</title><rect x="79.3651%" y="117" width="1.5873%" height="15" fill="rgb(233,201,37)" fg:x="100" fg:w="2"/><text x="79.6151%" y="127.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold::{{closure}} (2 samples, 1.59%)</title><rect x="79.3651%" y="101" width="1.5873%" height="15" fill="rgb(221,78,26)" fg:x="100" fg:w="2"/><text x="79.6151%" y="111.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.79%)</title><rect x="80.1587%" y="85" width="0.7937%" height="15" fill="rgb(250,127,30)" fg:x="101" fg:w="1"/><text x="80.4087%" y="95.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::len (1 samples, 0.79%)</title><rect x="84.9206%" y="325" width="0.7937%" height="15" fill="rgb(230,49,44)" fg:x="107" fg:w="1"/><text x="85.1706%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (2 samples, 1.59%)</title><rect x="85.7143%" y="325" width="1.5873%" height="15" fill="rgb(229,67,23)" fg:x="108" fg:w="2"/><text x="85.9643%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.79%)</title><rect x="86.5079%" y="309" width="0.7937%" height="15" fill="rgb(249,83,47)" fg:x="109" fg:w="1"/><text x="86.7579%" y="319.50"></text></g><g><title>tftp::client::client::write_block (17 samples, 13.49%)</title><rect x="75.3968%" y="357" width="13.4921%" height="15" fill="rgb(215,43,3)" fg:x="95" fg:w="17"/><text x="75.6468%" y="367.50">tftp::client::client..</text></g><g><title>&lt;tftp::storage::FileWriter&lt;T&gt; as tftp::storage::BlockWriter&gt;::write_block (10 samples, 7.94%)</title><rect x="80.9524%" y="341" width="7.9365%" height="15" fill="rgb(238,154,13)" fg:x="102" fg:w="10"/><text x="81.2024%" y="351.50">&lt;tftp::stor..</text></g><g><title>tftp::storage::BlockMapper::index (2 samples, 1.59%)</title><rect x="87.3016%" y="325" width="1.5873%" height="15" fill="rgb(219,56,2)" fg:x="110" fg:w="2"/><text x="87.5516%" y="335.50"></text></g><g><title>core::time::Duration::as_micros (1 samples, 0.79%)</title><rect x="91.2698%" y="293" width="0.7937%" height="15" fill="rgb(233,0,4)" fg:x="115" fg:w="1"/><text x="91.5198%" y="303.50"></text></g><g><title>tftp::instant_callback (7 samples, 5.56%)</title><rect x="88.8889%" y="357" width="5.5556%" height="15" fill="rgb(235,30,7)" fg:x="112" fg:w="7"/><text x="89.1389%" y="367.50">tftp::i..</text></g><g><title>tftp::std_compat::time::Instant::from_time (6 samples, 4.76%)</title><rect x="89.6825%" y="341" width="4.7619%" height="15" fill="rgb(250,79,13)" fg:x="113" fg:w="6"/><text x="89.9325%" y="351.50">tftp::..</text></g><g><title>core::ops::function::FnOnce::call_once (4 samples, 3.17%)</title><rect x="91.2698%" y="325" width="3.1746%" height="15" fill="rgb(211,146,34)" fg:x="115" fg:w="4"/><text x="91.5198%" y="335.50">cor..</text></g><g><title>tftp::instant_callback::{{closure}} (4 samples, 3.17%)</title><rect x="91.2698%" y="309" width="3.1746%" height="15" fill="rgb(228,22,38)" fg:x="115" fg:w="4"/><text x="91.5198%" y="319.50">tft..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (3 samples, 2.38%)</title><rect x="92.0635%" y="293" width="2.3810%" height="15" fill="rgb(235,168,5)" fg:x="116" fg:w="3"/><text x="92.3135%" y="303.50">st..</text></g><g><title>clock_gettime (2 samples, 1.59%)</title><rect x="92.8571%" y="277" width="1.5873%" height="15" fill="rgb(221,155,16)" fg:x="117" fg:w="2"/><text x="93.1071%" y="287.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.79%)</title><rect x="93.6508%" y="261" width="0.7937%" height="15" fill="rgb(215,215,53)" fg:x="118" fg:w="1"/><text x="93.9008%" y="271.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (2 samples, 1.59%)</title><rect x="94.4444%" y="325" width="1.5873%" height="15" fill="rgb(223,4,10)" fg:x="119" fg:w="2"/><text x="94.6944%" y="335.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (2 samples, 1.59%)</title><rect x="94.4444%" y="309" width="1.5873%" height="15" fill="rgb(234,103,6)" fg:x="119" fg:w="2"/><text x="94.6944%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (2 samples, 1.59%)</title><rect x="94.4444%" y="293" width="1.5873%" height="15" fill="rgb(227,97,0)" fg:x="119" fg:w="2"/><text x="94.6944%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.79%)</title><rect x="96.0317%" y="325" width="0.7937%" height="15" fill="rgb(234,150,53)" fg:x="121" fg:w="1"/><text x="96.2817%" y="335.50"></text></g><g><title>tftp::packet::PacketType::from_bytes (5 samples, 3.97%)</title><rect x="94.4444%" y="357" width="3.9683%" height="15" fill="rgb(228,201,54)" fg:x="119" fg:w="5"/><text x="94.6944%" y="367.50">tftp..</text></g><g><title>tftp::packet::try_from (5 samples, 3.97%)</title><rect x="94.4444%" y="341" width="3.9683%" height="15" fill="rgb(222,22,37)" fg:x="119" fg:w="5"/><text x="94.6944%" y="351.50">tftp..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (2 samples, 1.59%)</title><rect x="96.8254%" y="325" width="1.5873%" height="15" fill="rgb(237,53,32)" fg:x="122" fg:w="2"/><text x="97.0754%" y="335.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (2 samples, 1.59%)</title><rect x="96.8254%" y="309" width="1.5873%" height="15" fill="rgb(233,25,53)" fg:x="122" fg:w="2"/><text x="97.0754%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.79%)</title><rect x="97.6190%" y="293" width="0.7937%" height="15" fill="rgb(210,40,34)" fg:x="123" fg:w="1"/><text x="97.8690%" y="303.50"></text></g><g><title>std::panic::catch_unwind (116 samples, 92.06%)</title><rect x="7.1429%" y="517" width="92.0635%" height="15" fill="rgb(241,220,44)" fg:x="9" fg:w="116"/><text x="7.3929%" y="527.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (116 samples, 92.06%)</title><rect x="7.1429%" y="501" width="92.0635%" height="15" fill="rgb(235,28,35)" fg:x="9" fg:w="116"/><text x="7.3929%" y="511.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (116 samples, 92.06%)</title><rect x="7.1429%" y="485" width="92.0635%" height="15" fill="rgb(210,56,17)" fg:x="9" fg:w="116"/><text x="7.3929%" y="495.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (116 samples, 92.06%)</title><rect x="7.1429%" y="469" width="92.0635%" height="15" fill="rgb(224,130,29)" fg:x="9" fg:w="116"/><text x="7.3929%" y="479.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (116 samples, 92.06%)</title><rect x="7.1429%" y="453" width="92.0635%" height="15" fill="rgb(235,212,8)" fg:x="9" fg:w="116"/><text x="7.3929%" y="463.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (116 samples, 92.06%)</title><rect x="7.1429%" y="437" width="92.0635%" height="15" fill="rgb(223,33,50)" fg:x="9" fg:w="116"/><text x="7.3929%" y="447.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (116 samples, 92.06%)</title><rect x="7.1429%" y="421" width="92.0635%" height="15" fill="rgb(219,149,13)" fg:x="9" fg:w="116"/><text x="7.3929%" y="431.50">core::ops::function::FnOnce::call_once</text></g><g><title>tftp::main (116 samples, 92.06%)</title><rect x="7.1429%" y="405" width="92.0635%" height="15" fill="rgb(250,156,29)" fg:x="9" fg:w="116"/><text x="7.3929%" y="415.50">tftp::main</text></g><g><title>tftp::start_receive (116 samples, 92.06%)</title><rect x="7.1429%" y="389" width="92.0635%" height="15" fill="rgb(216,193,19)" fg:x="9" fg:w="116"/><text x="7.3929%" y="399.50">tftp::start_receive</text></g><g><title>tftp::client::client::receive_file (116 samples, 92.06%)</title><rect x="7.1429%" y="373" width="92.0635%" height="15" fill="rgb(216,135,14)" fg:x="9" fg:w="116"/><text x="7.3929%" y="383.50">tftp::client::client::receive_file</text></g><g><title>tftp::std_compat::time::Instant::elapsed (1 samples, 0.79%)</title><rect x="98.4127%" y="357" width="0.7937%" height="15" fill="rgb(241,47,5)" fg:x="124" fg:w="1"/><text x="98.6627%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.79%)</title><rect x="98.4127%" y="341" width="0.7937%" height="15" fill="rgb(233,42,35)" fg:x="124" fg:w="1"/><text x="98.6627%" y="351.50"></text></g><g><title>tftp::instant_callback::{{closure}} (1 samples, 0.79%)</title><rect x="98.4127%" y="325" width="0.7937%" height="15" fill="rgb(231,13,6)" fg:x="124" fg:w="1"/><text x="98.6627%" y="335.50"></text></g><g><title>all (126 samples, 100%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(207,181,40)" fg:x="0" fg:w="126"/><text x="0.2500%" y="719.50"></text></g><g><title>tftp (126 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(254,173,49)" fg:x="0" fg:w="126"/><text x="0.2500%" y="703.50">tftp</text></g><g><title>_start (118 samples, 93.65%)</title><rect x="6.3492%" y="677" width="93.6508%" height="15" fill="rgb(221,1,38)" fg:x="8" fg:w="118"/><text x="6.5992%" y="687.50">_start</text></g><g><title>__libc_start_main (118 samples, 93.65%)</title><rect x="6.3492%" y="661" width="93.6508%" height="15" fill="rgb(206,124,46)" fg:x="8" fg:w="118"/><text x="6.5992%" y="671.50">__libc_start_main</text></g><g><title>[libc.so.6] (118 samples, 93.65%)</title><rect x="6.3492%" y="645" width="93.6508%" height="15" fill="rgb(249,21,11)" fg:x="8" fg:w="118"/><text x="6.5992%" y="655.50">[libc.so.6]</text></g><g><title>main (117 samples, 92.86%)</title><rect x="7.1429%" y="629" width="92.8571%" height="15" fill="rgb(222,201,40)" fg:x="9" fg:w="117"/><text x="7.3929%" y="639.50">main</text></g><g><title>std::rt::lang_start (117 samples, 92.86%)</title><rect x="7.1429%" y="613" width="92.8571%" height="15" fill="rgb(235,61,29)" fg:x="9" fg:w="117"/><text x="7.3929%" y="623.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (117 samples, 92.86%)</title><rect x="7.1429%" y="597" width="92.8571%" height="15" fill="rgb(219,207,3)" fg:x="9" fg:w="117"/><text x="7.3929%" y="607.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (117 samples, 92.86%)</title><rect x="7.1429%" y="581" width="92.8571%" height="15" fill="rgb(222,56,46)" fg:x="9" fg:w="117"/><text x="7.3929%" y="591.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (117 samples, 92.86%)</title><rect x="7.1429%" y="565" width="92.8571%" height="15" fill="rgb(239,76,54)" fg:x="9" fg:w="117"/><text x="7.3929%" y="575.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (117 samples, 92.86%)</title><rect x="7.1429%" y="549" width="92.8571%" height="15" fill="rgb(231,124,27)" fg:x="9" fg:w="117"/><text x="7.3929%" y="559.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (117 samples, 92.86%)</title><rect x="7.1429%" y="533" width="92.8571%" height="15" fill="rgb(249,195,6)" fg:x="9" fg:w="117"/><text x="7.3929%" y="543.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::rt::init (1 samples, 0.79%)</title><rect x="99.2063%" y="517" width="0.7937%" height="15" fill="rgb(237,174,47)" fg:x="125" fg:w="1"/><text x="99.4563%" y="527.50"></text></g><g><title>std::sys::unix::thread::guard::init (1 samples, 0.79%)</title><rect x="99.2063%" y="501" width="0.7937%" height="15" fill="rgb(206,201,31)" fg:x="125" fg:w="1"/><text x="99.4563%" y="511.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start_aligned (1 samples, 0.79%)</title><rect x="99.2063%" y="485" width="0.7937%" height="15" fill="rgb(231,57,52)" fg:x="125" fg:w="1"/><text x="99.4563%" y="495.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start (1 samples, 0.79%)</title><rect x="99.2063%" y="469" width="0.7937%" height="15" fill="rgb(248,177,22)" fg:x="125" fg:w="1"/><text x="99.4563%" y="479.50"></text></g><g><title>pthread_getattr_np (1 samples, 0.79%)</title><rect x="99.2063%" y="453" width="0.7937%" height="15" fill="rgb(215,211,37)" fg:x="125" fg:w="1"/><text x="99.4563%" y="463.50"></text></g><g><title>__getdelim (1 samples, 0.79%)</title><rect x="99.2063%" y="437" width="0.7937%" height="15" fill="rgb(241,128,51)" fg:x="125" fg:w="1"/><text x="99.4563%" y="447.50"></text></g></svg></svg>