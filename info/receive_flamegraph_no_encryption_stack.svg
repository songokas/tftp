<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="329"><g><title>[[heap]] (1 samples, 0.30%)</title><rect x="0.0000%" y="405" width="0.3040%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50"></text></g><g><title>epoll_ctl (1 samples, 0.30%)</title><rect x="0.0000%" y="389" width="0.3040%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="0.0000%" y="373" width="0.3040%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="383.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.30%)</title><rect x="1.5198%" y="389" width="0.3040%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="1"/><text x="1.7698%" y="399.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.30%)</title><rect x="1.5198%" y="373" width="0.3040%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="1"/><text x="1.7698%" y="383.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.30%)</title><rect x="1.5198%" y="357" width="0.3040%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="1"/><text x="1.7698%" y="367.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 1.82%)</title><rect x="0.3040%" y="405" width="1.8237%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="6"/><text x="0.5540%" y="415.50">[..</text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="1.8237%" y="389" width="0.3040%" height="15" fill="rgb(228,23,34)" fg:x="6" fg:w="1"/><text x="2.0737%" y="399.50"></text></g><g><title>&lt;tftp::cli::ClientCliConfig as clap::derive::Args&gt;::augment_args (1 samples, 0.30%)</title><rect x="2.1277%" y="389" width="0.3040%" height="15" fill="rgb(218,30,26)" fg:x="7" fg:w="1"/><text x="2.3777%" y="399.50"></text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.30%)</title><rect x="2.1277%" y="373" width="0.3040%" height="15" fill="rgb(220,122,19)" fg:x="7" fg:w="1"/><text x="2.3777%" y="383.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (1 samples, 0.30%)</title><rect x="2.1277%" y="357" width="0.3040%" height="15" fill="rgb(250,228,42)" fg:x="7" fg:w="1"/><text x="2.3777%" y="367.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (1 samples, 0.30%)</title><rect x="2.1277%" y="341" width="0.3040%" height="15" fill="rgb(240,193,28)" fg:x="7" fg:w="1"/><text x="2.3777%" y="351.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1 samples, 0.30%)</title><rect x="2.1277%" y="325" width="0.3040%" height="15" fill="rgb(216,20,37)" fg:x="7" fg:w="1"/><text x="2.3777%" y="335.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.30%)</title><rect x="2.1277%" y="309" width="0.3040%" height="15" fill="rgb(206,188,39)" fg:x="7" fg:w="1"/><text x="2.3777%" y="319.50"></text></g><g><title>once_cell::imp::initialize_or_wait (1 samples, 0.30%)</title><rect x="2.1277%" y="293" width="0.3040%" height="15" fill="rgb(217,207,13)" fg:x="7" fg:w="1"/><text x="2.3777%" y="303.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.30%)</title><rect x="2.1277%" y="277" width="0.3040%" height="15" fill="rgb(231,73,38)" fg:x="7" fg:w="1"/><text x="2.3777%" y="287.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (1 samples, 0.30%)</title><rect x="2.1277%" y="261" width="0.3040%" height="15" fill="rgb(225,20,46)" fg:x="7" fg:w="1"/><text x="2.3777%" y="271.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (1 samples, 0.30%)</title><rect x="2.1277%" y="245" width="0.3040%" height="15" fill="rgb(210,31,41)" fg:x="7" fg:w="1"/><text x="2.3777%" y="255.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force::{{closure}} (1 samples, 0.30%)</title><rect x="2.1277%" y="229" width="0.3040%" height="15" fill="rgb(221,200,47)" fg:x="7" fg:w="1"/><text x="2.3777%" y="239.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.30%)</title><rect x="2.1277%" y="213" width="0.3040%" height="15" fill="rgb(226,26,5)" fg:x="7" fg:w="1"/><text x="2.3777%" y="223.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.30%)</title><rect x="2.1277%" y="197" width="0.3040%" height="15" fill="rgb(249,33,26)" fg:x="7" fg:w="1"/><text x="2.3777%" y="207.50"></text></g><g><title>&lt;tftp::cli::ClientCliConfig as clap::derive::Args&gt;::augment_args::DEFAULT_VALUE::{{closure}} (1 samples, 0.30%)</title><rect x="2.1277%" y="181" width="0.3040%" height="15" fill="rgb(235,183,28)" fg:x="7" fg:w="1"/><text x="2.3777%" y="191.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (1 samples, 0.30%)</title><rect x="2.1277%" y="165" width="0.3040%" height="15" fill="rgb(221,5,38)" fg:x="7" fg:w="1"/><text x="2.3777%" y="175.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.30%)</title><rect x="2.1277%" y="149" width="0.3040%" height="15" fill="rgb(247,18,42)" fg:x="7" fg:w="1"/><text x="2.3777%" y="159.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.30%)</title><rect x="2.1277%" y="133" width="0.3040%" height="15" fill="rgb(241,131,45)" fg:x="7" fg:w="1"/><text x="2.3777%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.30%)</title><rect x="2.1277%" y="117" width="0.3040%" height="15" fill="rgb(249,31,29)" fg:x="7" fg:w="1"/><text x="2.3777%" y="127.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.30%)</title><rect x="2.1277%" y="101" width="0.3040%" height="15" fill="rgb(225,111,53)" fg:x="7" fg:w="1"/><text x="2.3777%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.30%)</title><rect x="2.1277%" y="85" width="0.3040%" height="15" fill="rgb(238,160,17)" fg:x="7" fg:w="1"/><text x="2.3777%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.30%)</title><rect x="2.1277%" y="69" width="0.3040%" height="15" fill="rgb(214,148,48)" fg:x="7" fg:w="1"/><text x="2.3777%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.30%)</title><rect x="2.1277%" y="53" width="0.3040%" height="15" fill="rgb(232,36,49)" fg:x="7" fg:w="1"/><text x="2.3777%" y="63.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.30%)</title><rect x="2.1277%" y="37" width="0.3040%" height="15" fill="rgb(209,103,24)" fg:x="7" fg:w="1"/><text x="2.3777%" y="47.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.30%)</title><rect x="2.4316%" y="325" width="0.3040%" height="15" fill="rgb(229,88,8)" fg:x="8" fg:w="1"/><text x="2.6816%" y="335.50"></text></g><g><title>&lt;core::ops::index_range::IndexRange as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.30%)</title><rect x="2.4316%" y="309" width="0.3040%" height="15" fill="rgb(213,181,19)" fg:x="8" fg:w="1"/><text x="2.6816%" y="319.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (1 samples, 0.30%)</title><rect x="2.4316%" y="293" width="0.3040%" height="15" fill="rgb(254,191,54)" fg:x="8" fg:w="1"/><text x="2.6816%" y="303.50"></text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::new (1 samples, 0.30%)</title><rect x="2.7356%" y="325" width="0.3040%" height="15" fill="rgb(241,83,37)" fg:x="9" fg:w="1"/><text x="2.9856%" y="335.50"></text></g><g><title>[libc.so.6] (1 samples, 0.30%)</title><rect x="2.7356%" y="309" width="0.3040%" height="15" fill="rgb(233,36,39)" fg:x="9" fg:w="1"/><text x="2.9856%" y="319.50"></text></g><g><title>&lt;tftp::packet::AckPacket as tftp::packet::ByteConverter&gt;::to_bytes (3 samples, 0.91%)</title><rect x="2.4316%" y="373" width="0.9119%" height="15" fill="rgb(226,3,54)" fg:x="8" fg:w="3"/><text x="2.6816%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.91%)</title><rect x="2.4316%" y="357" width="0.9119%" height="15" fill="rgb(245,192,40)" fg:x="8" fg:w="3"/><text x="2.6816%" y="367.50"></text></g><g><title>&lt;heapless::vec::Vec&lt;T,_&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.91%)</title><rect x="2.4316%" y="341" width="0.9119%" height="15" fill="rgb(238,167,29)" fg:x="8" fg:w="3"/><text x="2.6816%" y="351.50"></text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::push (1 samples, 0.30%)</title><rect x="3.0395%" y="325" width="0.3040%" height="15" fill="rgb(232,182,51)" fg:x="10" fg:w="1"/><text x="3.2895%" y="335.50"></text></g><g><title>core::array::iter::&lt;impl core::iter::traits::collect::IntoIterator for [T: N]&gt;::into_iter (1 samples, 0.30%)</title><rect x="3.3435%" y="373" width="0.3040%" height="15" fill="rgb(231,60,39)" fg:x="11" fg:w="1"/><text x="3.5935%" y="383.50"></text></g><g><title>core::mem::transmute_copy (1 samples, 0.30%)</title><rect x="3.3435%" y="357" width="0.3040%" height="15" fill="rgb(208,69,12)" fg:x="11" fg:w="1"/><text x="3.5935%" y="367.50"></text></g><g><title>core::ptr::read (1 samples, 0.30%)</title><rect x="3.3435%" y="341" width="0.3040%" height="15" fill="rgb(235,93,37)" fg:x="11" fg:w="1"/><text x="3.5935%" y="351.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (1 samples, 0.30%)</title><rect x="3.3435%" y="325" width="0.3040%" height="15" fill="rgb(213,116,39)" fg:x="11" fg:w="1"/><text x="3.5935%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::chain (2 samples, 0.61%)</title><rect x="3.6474%" y="373" width="0.6079%" height="15" fill="rgb(222,207,29)" fg:x="12" fg:w="2"/><text x="3.8974%" y="383.50"></text></g><g><title>core::iter::adapters::chain::Chain&lt;A,B&gt;::new (2 samples, 0.61%)</title><rect x="3.6474%" y="357" width="0.6079%" height="15" fill="rgb(206,96,30)" fg:x="12" fg:w="2"/><text x="3.8974%" y="367.50"></text></g><g><title>[libc.so.6] (2 samples, 0.61%)</title><rect x="3.6474%" y="341" width="0.6079%" height="15" fill="rgb(218,138,4)" fg:x="12" fg:w="2"/><text x="3.8974%" y="351.50"></text></g><g><title>&lt;tftp::packet::Packet as tftp::packet::ByteConverter&gt;::to_bytes (8 samples, 2.43%)</title><rect x="2.4316%" y="389" width="2.4316%" height="15" fill="rgb(250,191,14)" fg:x="8" fg:w="8"/><text x="2.6816%" y="399.50">&lt;t..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.61%)</title><rect x="4.2553%" y="373" width="0.6079%" height="15" fill="rgb(239,60,40)" fg:x="14" fg:w="2"/><text x="4.5053%" y="383.50"></text></g><g><title>&lt;heapless::vec::Vec&lt;T,_&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.30%)</title><rect x="4.5593%" y="357" width="0.3040%" height="15" fill="rgb(206,27,48)" fg:x="15" fg:w="1"/><text x="4.8093%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.30%)</title><rect x="4.5593%" y="341" width="0.3040%" height="15" fill="rgb(225,35,8)" fg:x="15" fg:w="1"/><text x="4.8093%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (1 samples, 0.30%)</title><rect x="4.5593%" y="325" width="0.3040%" height="15" fill="rgb(250,213,24)" fg:x="15" fg:w="1"/><text x="4.8093%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (1 samples, 0.30%)</title><rect x="4.5593%" y="309" width="0.3040%" height="15" fill="rgb(247,123,22)" fg:x="15" fg:w="1"/><text x="4.8093%" y="319.50"></text></g><g><title>&lt;heapless::vec::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.30%)</title><rect x="4.5593%" y="293" width="0.3040%" height="15" fill="rgb(231,138,38)" fg:x="15" fg:w="1"/><text x="4.8093%" y="303.50"></text></g><g><title>recvfrom (1 samples, 0.30%)</title><rect x="4.8632%" y="389" width="0.3040%" height="15" fill="rgb(231,145,46)" fg:x="16" fg:w="1"/><text x="5.1132%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.30%)</title><rect x="4.8632%" y="373" width="0.3040%" height="15" fill="rgb(251,118,11)" fg:x="16" fg:w="1"/><text x="5.1132%" y="383.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.61%)</title><rect x="9.4225%" y="373" width="0.6079%" height="15" fill="rgb(217,147,25)" fg:x="31" fg:w="2"/><text x="9.6725%" y="383.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::convert::From&lt;T&gt;&gt;::from (2 samples, 0.61%)</title><rect x="9.4225%" y="357" width="0.6079%" height="15" fill="rgb(247,81,37)" fg:x="31" fg:w="2"/><text x="9.6725%" y="367.50"></text></g><g><title>&lt;heapless::vec::Vec&lt;T,_&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.30%)</title><rect x="10.0304%" y="373" width="0.3040%" height="15" fill="rgb(209,12,38)" fg:x="33" fg:w="1"/><text x="10.2804%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (2 samples, 0.61%)</title><rect x="11.2462%" y="341" width="0.6079%" height="15" fill="rgb(227,1,9)" fg:x="37" fg:w="2"/><text x="11.4962%" y="351.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (2 samples, 0.61%)</title><rect x="12.1581%" y="325" width="0.6079%" height="15" fill="rgb(248,47,43)" fg:x="40" fg:w="2"/><text x="12.4081%" y="335.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (2 samples, 0.61%)</title><rect x="12.1581%" y="309" width="0.6079%" height="15" fill="rgb(221,10,30)" fg:x="40" fg:w="2"/><text x="12.4081%" y="319.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for &amp;[T: N]&gt;::try_from (1 samples, 0.30%)</title><rect x="12.4620%" y="293" width="0.3040%" height="15" fill="rgb(210,229,1)" fg:x="41" fg:w="1"/><text x="12.7120%" y="303.50"></text></g><g><title>&lt;tftp::packet::DataPacket as tftp::packet::ByteConverter&gt;::from_bytes (9 samples, 2.74%)</title><rect x="10.3343%" y="357" width="2.7356%" height="15" fill="rgb(222,148,37)" fg:x="34" fg:w="9"/><text x="10.5843%" y="367.50">&lt;t..</text></g><g><title>tftp::packet::try_from (4 samples, 1.22%)</title><rect x="11.8541%" y="341" width="1.2158%" height="15" fill="rgb(234,67,33)" fg:x="39" fg:w="4"/><text x="12.1041%" y="351.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.30%)</title><rect x="12.7660%" y="325" width="0.3040%" height="15" fill="rgb(247,98,35)" fg:x="42" fg:w="1"/><text x="13.0160%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.30%)</title><rect x="13.0699%" y="357" width="0.3040%" height="15" fill="rgb(247,138,52)" fg:x="43" fg:w="1"/><text x="13.3199%" y="367.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.30%)</title><rect x="13.0699%" y="341" width="0.3040%" height="15" fill="rgb(213,79,30)" fg:x="43" fg:w="1"/><text x="13.3199%" y="351.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for &amp;[T: N]&gt;::try_from (1 samples, 0.30%)</title><rect x="13.3739%" y="293" width="0.3040%" height="15" fill="rgb(246,177,23)" fg:x="44" fg:w="1"/><text x="13.6239%" y="303.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (3 samples, 0.91%)</title><rect x="13.3739%" y="325" width="0.9119%" height="15" fill="rgb(230,62,27)" fg:x="44" fg:w="3"/><text x="13.6239%" y="335.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (3 samples, 0.91%)</title><rect x="13.3739%" y="309" width="0.9119%" height="15" fill="rgb(216,154,8)" fg:x="44" fg:w="3"/><text x="13.6239%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (2 samples, 0.61%)</title><rect x="13.6778%" y="293" width="0.6079%" height="15" fill="rgb(244,35,45)" fg:x="45" fg:w="2"/><text x="13.9278%" y="303.50"></text></g><g><title>&lt;tftp::packet::Packet as tftp::packet::ByteConverter&gt;::from_bytes (16 samples, 4.86%)</title><rect x="10.3343%" y="373" width="4.8632%" height="15" fill="rgb(251,115,12)" fg:x="34" fg:w="16"/><text x="10.5843%" y="383.50">&lt;tftp:..</text></g><g><title>tftp::packet::PacketType::from_bytes (6 samples, 1.82%)</title><rect x="13.3739%" y="357" width="1.8237%" height="15" fill="rgb(240,54,50)" fg:x="44" fg:w="6"/><text x="13.6239%" y="367.50">t..</text></g><g><title>tftp::packet::try_from (6 samples, 1.82%)</title><rect x="13.3739%" y="341" width="1.8237%" height="15" fill="rgb(233,84,52)" fg:x="44" fg:w="6"/><text x="13.6239%" y="351.50">t..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (3 samples, 0.91%)</title><rect x="14.2857%" y="325" width="0.9119%" height="15" fill="rgb(207,117,47)" fg:x="47" fg:w="3"/><text x="14.5357%" y="335.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (3 samples, 0.91%)</title><rect x="14.2857%" y="309" width="0.9119%" height="15" fill="rgb(249,43,39)" fg:x="47" fg:w="3"/><text x="14.5357%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (3 samples, 0.91%)</title><rect x="14.2857%" y="293" width="0.9119%" height="15" fill="rgb(209,38,44)" fg:x="47" fg:w="3"/><text x="14.5357%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.30%)</title><rect x="14.8936%" y="277" width="0.3040%" height="15" fill="rgb(236,212,23)" fg:x="49" fg:w="1"/><text x="15.1436%" y="287.50"></text></g><g><title>&lt;heapless::vec::Vec&lt;T,_&gt; as core::ops::deref::DerefMut&gt;::deref_mut (3 samples, 0.91%)</title><rect x="16.1094%" y="357" width="0.9119%" height="15" fill="rgb(242,79,21)" fg:x="53" fg:w="3"/><text x="16.3594%" y="367.50"></text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::as_mut_slice (1 samples, 0.30%)</title><rect x="16.7173%" y="341" width="0.3040%" height="15" fill="rgb(211,96,35)" fg:x="55" fg:w="1"/><text x="16.9673%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (2 samples, 0.61%)</title><rect x="17.0213%" y="357" width="0.6079%" height="15" fill="rgb(253,215,40)" fg:x="56" fg:w="2"/><text x="17.2713%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.30%)</title><rect x="17.6292%" y="325" width="0.3040%" height="15" fill="rgb(211,81,21)" fg:x="58" fg:w="1"/><text x="17.8792%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.30%)</title><rect x="17.6292%" y="309" width="0.3040%" height="15" fill="rgb(208,190,38)" fg:x="58" fg:w="1"/><text x="17.8792%" y="319.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (1 samples, 0.30%)</title><rect x="17.6292%" y="293" width="0.3040%" height="15" fill="rgb(235,213,38)" fg:x="58" fg:w="1"/><text x="17.8792%" y="303.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (1 samples, 0.30%)</title><rect x="17.6292%" y="277" width="0.3040%" height="15" fill="rgb(237,122,38)" fg:x="58" fg:w="1"/><text x="17.8792%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.61%)</title><rect x="17.6292%" y="341" width="0.6079%" height="15" fill="rgb(244,218,35)" fg:x="58" fg:w="2"/><text x="17.8792%" y="351.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (1 samples, 0.30%)</title><rect x="17.9331%" y="325" width="0.3040%" height="15" fill="rgb(240,68,47)" fg:x="59" fg:w="1"/><text x="18.1831%" y="335.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (1 samples, 0.30%)</title><rect x="17.9331%" y="309" width="0.3040%" height="15" fill="rgb(210,16,53)" fg:x="59" fg:w="1"/><text x="18.1831%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 1.22%)</title><rect x="18.2371%" y="309" width="1.2158%" height="15" fill="rgb(235,124,12)" fg:x="60" fg:w="4"/><text x="18.4871%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.91%)</title><rect x="18.5410%" y="293" width="0.9119%" height="15" fill="rgb(224,169,11)" fg:x="61" fg:w="3"/><text x="18.7910%" y="303.50"></text></g><g><title>cfree (3 samples, 0.91%)</title><rect x="18.5410%" y="277" width="0.9119%" height="15" fill="rgb(250,166,2)" fg:x="61" fg:w="3"/><text x="18.7910%" y="287.50"></text></g><g><title>[libc.so.6] (2 samples, 0.61%)</title><rect x="18.8450%" y="261" width="0.6079%" height="15" fill="rgb(242,216,29)" fg:x="62" fg:w="2"/><text x="19.0950%" y="271.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.61%)</title><rect x="19.7568%" y="293" width="0.6079%" height="15" fill="rgb(230,116,27)" fg:x="65" fg:w="2"/><text x="20.0068%" y="303.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::convert::From&lt;core::ptr::unique::Unique&lt;T&gt;&gt;&gt;::from (1 samples, 0.30%)</title><rect x="20.0608%" y="277" width="0.3040%" height="15" fill="rgb(228,99,48)" fg:x="66" fg:w="1"/><text x="20.3108%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;polling::Event&gt;&gt; (10 samples, 3.04%)</title><rect x="17.6292%" y="357" width="3.0395%" height="15" fill="rgb(253,11,6)" fg:x="58" fg:w="10"/><text x="17.8792%" y="367.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;polling::Event&gt;&gt; (8 samples, 2.43%)</title><rect x="18.2371%" y="341" width="2.4316%" height="15" fill="rgb(247,143,39)" fg:x="60" fg:w="8"/><text x="18.4871%" y="351.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 2.43%)</title><rect x="18.2371%" y="325" width="2.4316%" height="15" fill="rgb(236,97,10)" fg:x="60" fg:w="8"/><text x="18.4871%" y="335.50">&lt;a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 1.22%)</title><rect x="19.4529%" y="309" width="1.2158%" height="15" fill="rgb(233,208,19)" fg:x="64" fg:w="4"/><text x="19.7029%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_unchecked (1 samples, 0.30%)</title><rect x="20.3647%" y="293" width="0.3040%" height="15" fill="rgb(216,164,2)" fg:x="67" fg:w="1"/><text x="20.6147%" y="303.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (10 samples, 3.04%)</title><rect x="20.6687%" y="357" width="3.0395%" height="15" fill="rgb(220,129,5)" fg:x="68" fg:w="10"/><text x="20.9187%" y="367.50">cor..</text></g><g><title>&lt;tftp::socket::StdSocket as tftp::socket::Socket&gt;::recv_from::{{closure}} (5 samples, 1.52%)</title><rect x="22.1884%" y="341" width="1.5198%" height="15" fill="rgb(242,17,10)" fg:x="73" fg:w="5"/><text x="22.4384%" y="351.50"></text></g><g><title>tftp::socket::std_to_socket_addr (5 samples, 1.52%)</title><rect x="22.1884%" y="325" width="1.5198%" height="15" fill="rgb(242,107,0)" fg:x="73" fg:w="5"/><text x="22.4384%" y="335.50"></text></g><g><title>std::net::socket_addr::SocketAddrV4::ip (3 samples, 0.91%)</title><rect x="22.7964%" y="309" width="0.9119%" height="15" fill="rgb(251,28,31)" fg:x="75" fg:w="3"/><text x="23.0464%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::Error&gt; (4 samples, 1.22%)</title><rect x="25.2280%" y="309" width="1.2158%" height="15" fill="rgb(233,223,10)" fg:x="83" fg:w="4"/><text x="25.4780%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::repr_bitpacked::Repr&gt; (4 samples, 1.22%)</title><rect x="25.2280%" y="293" width="1.2158%" height="15" fill="rgb(215,21,27)" fg:x="83" fg:w="4"/><text x="25.4780%" y="303.50"></text></g><g><title>&lt;std::io::error::repr_bitpacked::Repr as core::ops::drop::Drop&gt;::drop (2 samples, 0.61%)</title><rect x="25.8359%" y="277" width="0.6079%" height="15" fill="rgb(232,23,21)" fg:x="85" fg:w="2"/><text x="26.0859%" y="287.50"></text></g><g><title>std::io::error::repr_bitpacked::decode_repr (2 samples, 0.61%)</title><rect x="25.8359%" y="261" width="0.6079%" height="15" fill="rgb(244,5,23)" fg:x="85" fg:w="2"/><text x="26.0859%" y="271.50"></text></g><g><title>std::io::error::repr_bitpacked::Repr::data (1 samples, 0.30%)</title><rect x="27.3556%" y="293" width="0.3040%" height="15" fill="rgb(226,81,46)" fg:x="90" fg:w="1"/><text x="27.6056%" y="303.50"></text></g><g><title>std::io::error::repr_bitpacked::decode_repr (1 samples, 0.30%)</title><rect x="27.3556%" y="277" width="0.3040%" height="15" fill="rgb(247,70,30)" fg:x="90" fg:w="1"/><text x="27.6056%" y="287.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (14 samples, 4.26%)</title><rect x="23.7082%" y="357" width="4.2553%" height="15" fill="rgb(212,68,19)" fg:x="78" fg:w="14"/><text x="23.9582%" y="367.50">core:..</text></g><g><title>core::ops::function::FnOnce::call_once (9 samples, 2.74%)</title><rect x="25.2280%" y="341" width="2.7356%" height="15" fill="rgb(240,187,13)" fg:x="83" fg:w="9"/><text x="25.4780%" y="351.50">co..</text></g><g><title>tftp::io::from_io_err (9 samples, 2.74%)</title><rect x="25.2280%" y="325" width="2.7356%" height="15" fill="rgb(223,113,26)" fg:x="83" fg:w="9"/><text x="25.4780%" y="335.50">tf..</text></g><g><title>std::io::error::Error::kind (5 samples, 1.52%)</title><rect x="26.4438%" y="309" width="1.5198%" height="15" fill="rgb(206,192,2)" fg:x="87" fg:w="5"/><text x="26.6938%" y="319.50"></text></g><g><title>std::sys::unix::decode_error_kind (1 samples, 0.30%)</title><rect x="27.6596%" y="293" width="0.3040%" height="15" fill="rgb(241,108,4)" fg:x="91" fg:w="1"/><text x="27.9096%" y="303.50"></text></g><g><title>&lt;&amp;T as polling::Source&gt;::raw (2 samples, 0.61%)</title><rect x="28.2675%" y="341" width="0.6079%" height="15" fill="rgb(247,173,49)" fg:x="93" fg:w="2"/><text x="28.5175%" y="351.50"></text></g><g><title>std::os::fd::net::&lt;impl std::os::fd::raw::AsRawFd for std::net::udp::UdpSocket&gt;::as_raw_fd (1 samples, 0.30%)</title><rect x="28.5714%" y="325" width="0.3040%" height="15" fill="rgb(224,114,35)" fg:x="94" fg:w="1"/><text x="28.8214%" y="335.50"></text></g><g><title>&lt;std::sys::unix::fs::File as std::sys_common::AsInner&lt;std::sys::unix::fd::FileDesc&gt;&gt;::as_inner (1 samples, 0.30%)</title><rect x="28.5714%" y="309" width="0.3040%" height="15" fill="rgb(245,159,27)" fg:x="94" fg:w="1"/><text x="28.8214%" y="319.50"></text></g><g><title>log::max_level (3 samples, 0.91%)</title><rect x="29.1793%" y="325" width="0.9119%" height="15" fill="rgb(245,172,44)" fg:x="96" fg:w="3"/><text x="29.4293%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (3 samples, 0.91%)</title><rect x="29.1793%" y="309" width="0.9119%" height="15" fill="rgb(236,23,11)" fg:x="96" fg:w="3"/><text x="29.4293%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_load (3 samples, 0.91%)</title><rect x="29.1793%" y="293" width="0.9119%" height="15" fill="rgb(205,117,38)" fg:x="96" fg:w="3"/><text x="29.4293%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.30%)</title><rect x="30.0912%" y="309" width="0.3040%" height="15" fill="rgb(237,72,25)" fg:x="99" fg:w="1"/><text x="30.3412%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 0.91%)</title><rect x="30.3951%" y="309" width="0.9119%" height="15" fill="rgb(244,70,9)" fg:x="100" fg:w="3"/><text x="30.6451%" y="319.50"></text></g><g><title>polling::epoll::Poller::ctl::{{closure}} (2 samples, 0.61%)</title><rect x="30.6991%" y="293" width="0.6079%" height="15" fill="rgb(217,125,39)" fg:x="101" fg:w="2"/><text x="30.9491%" y="303.50"></text></g><g><title>polling::epoll::read_flags (1 samples, 0.30%)</title><rect x="31.0030%" y="277" width="0.3040%" height="15" fill="rgb(235,36,10)" fg:x="102" fg:w="1"/><text x="31.2530%" y="287.50"></text></g><g><title>core::ptr::null_mut (1 samples, 0.30%)</title><rect x="31.3070%" y="309" width="0.3040%" height="15" fill="rgb(251,123,47)" fg:x="103" fg:w="1"/><text x="31.5570%" y="319.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (1 samples, 0.30%)</title><rect x="31.3070%" y="293" width="0.3040%" height="15" fill="rgb(221,13,13)" fg:x="103" fg:w="1"/><text x="31.5570%" y="303.50"></text></g><g><title>polling::Poller::modify (13 samples, 3.95%)</title><rect x="27.9635%" y="357" width="3.9514%" height="15" fill="rgb(238,131,9)" fg:x="92" fg:w="13"/><text x="28.2135%" y="367.50">poll..</text></g><g><title>polling::epoll::Poller::modify (10 samples, 3.04%)</title><rect x="28.8754%" y="341" width="3.0395%" height="15" fill="rgb(211,50,8)" fg:x="95" fg:w="10"/><text x="29.1254%" y="351.50">pol..</text></g><g><title>polling::epoll::Poller::ctl (6 samples, 1.82%)</title><rect x="30.0912%" y="325" width="1.8237%" height="15" fill="rgb(245,182,24)" fg:x="99" fg:w="6"/><text x="30.3412%" y="335.50">p..</text></g><g><title>epoll_ctl (1 samples, 0.30%)</title><rect x="31.6109%" y="309" width="0.3040%" height="15" fill="rgb(242,14,37)" fg:x="104" fg:w="1"/><text x="31.8609%" y="319.50"></text></g><g><title>core::iter::adapters::map::map_try_fold (1 samples, 0.30%)</title><rect x="34.0426%" y="245" width="0.3040%" height="15" fill="rgb(246,228,12)" fg:x="112" fg:w="1"/><text x="34.2926%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.61%)</title><rect x="35.5623%" y="229" width="0.6079%" height="15" fill="rgb(213,55,15)" fg:x="117" fg:w="2"/><text x="35.8123%" y="239.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 0.30%)</title><rect x="35.8663%" y="213" width="0.3040%" height="15" fill="rgb(209,9,3)" fg:x="118" fg:w="1"/><text x="36.1163%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (1 samples, 0.30%)</title><rect x="36.1702%" y="213" width="0.3040%" height="15" fill="rgb(230,59,30)" fg:x="119" fg:w="1"/><text x="36.4202%" y="223.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.30%)</title><rect x="36.1702%" y="197" width="0.3040%" height="15" fill="rgb(209,121,21)" fg:x="119" fg:w="1"/><text x="36.4202%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 3.04%)</title><rect x="33.7386%" y="293" width="3.0395%" height="15" fill="rgb(220,109,13)" fg:x="111" fg:w="10"/><text x="33.9886%" y="303.50">&lt;co..</text></g><g><title>core::iter::traits::iterator::Iterator::find (10 samples, 3.04%)</title><rect x="33.7386%" y="277" width="3.0395%" height="15" fill="rgb(232,18,1)" fg:x="111" fg:w="10"/><text x="33.9886%" y="287.50">cor..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (10 samples, 3.04%)</title><rect x="33.7386%" y="261" width="3.0395%" height="15" fill="rgb(215,41,42)" fg:x="111" fg:w="10"/><text x="33.9886%" y="271.50">&lt;co..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (8 samples, 2.43%)</title><rect x="34.3465%" y="245" width="2.4316%" height="15" fill="rgb(224,123,36)" fg:x="113" fg:w="8"/><text x="34.5965%" y="255.50">co..</text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (2 samples, 0.61%)</title><rect x="36.1702%" y="229" width="0.6079%" height="15" fill="rgb(240,125,3)" fg:x="119" fg:w="2"/><text x="36.4202%" y="239.50"></text></g><g><title>polling::epoll::Events::iter::{{closure}} (1 samples, 0.30%)</title><rect x="36.4742%" y="213" width="0.3040%" height="15" fill="rgb(205,98,50)" fg:x="120" fg:w="1"/><text x="36.7242%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (3 samples, 0.91%)</title><rect x="36.7781%" y="293" width="0.9119%" height="15" fill="rgb(205,185,37)" fg:x="121" fg:w="3"/><text x="37.0281%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (3 samples, 0.91%)</title><rect x="36.7781%" y="277" width="0.9119%" height="15" fill="rgb(238,207,15)" fg:x="121" fg:w="3"/><text x="37.0281%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.30%)</title><rect x="37.3860%" y="261" width="0.3040%" height="15" fill="rgb(213,199,42)" fg:x="123" fg:w="1"/><text x="37.6360%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.30%)</title><rect x="37.6900%" y="293" width="0.3040%" height="15" fill="rgb(235,201,11)" fg:x="124" fg:w="1"/><text x="37.9400%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.30%)</title><rect x="37.6900%" y="277" width="0.3040%" height="15" fill="rgb(207,46,11)" fg:x="124" fg:w="1"/><text x="37.9400%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null::runtime_impl (1 samples, 0.30%)</title><rect x="37.6900%" y="261" width="0.3040%" height="15" fill="rgb(241,35,35)" fg:x="124" fg:w="1"/><text x="37.9400%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::addr (1 samples, 0.30%)</title><rect x="37.6900%" y="245" width="0.3040%" height="15" fill="rgb(243,32,47)" fg:x="124" fg:w="1"/><text x="37.9400%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::capacity (1 samples, 0.30%)</title><rect x="37.9939%" y="293" width="0.3040%" height="15" fill="rgb(247,202,23)" fg:x="125" fg:w="1"/><text x="38.2439%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (1 samples, 0.30%)</title><rect x="37.9939%" y="277" width="0.3040%" height="15" fill="rgb(219,102,11)" fg:x="125" fg:w="1"/><text x="38.2439%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.30%)</title><rect x="39.2097%" y="261" width="0.3040%" height="15" fill="rgb(243,110,44)" fg:x="129" fg:w="1"/><text x="39.4597%" y="271.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.30%)</title><rect x="40.1216%" y="229" width="0.3040%" height="15" fill="rgb(222,74,54)" fg:x="132" fg:w="1"/><text x="40.3716%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.30%)</title><rect x="40.4255%" y="229" width="0.3040%" height="15" fill="rgb(216,99,12)" fg:x="133" fg:w="1"/><text x="40.6755%" y="239.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 2.74%)</title><rect x="41.9453%" y="181" width="2.7356%" height="15" fill="rgb(226,22,26)" fg:x="138" fg:w="9"/><text x="42.1953%" y="191.50">al..</text></g><g><title>malloc (9 samples, 2.74%)</title><rect x="41.9453%" y="165" width="2.7356%" height="15" fill="rgb(217,163,10)" fg:x="138" fg:w="9"/><text x="42.1953%" y="175.50">ma..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 3.34%)</title><rect x="41.6413%" y="213" width="3.3435%" height="15" fill="rgb(213,25,53)" fg:x="137" fg:w="11"/><text x="41.8913%" y="223.50">&lt;al..</text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 3.34%)</title><rect x="41.6413%" y="197" width="3.3435%" height="15" fill="rgb(252,105,26)" fg:x="137" fg:w="11"/><text x="41.8913%" y="207.50">all..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (1 samples, 0.30%)</title><rect x="44.6809%" y="181" width="0.3040%" height="15" fill="rgb(220,39,43)" fg:x="147" fg:w="1"/><text x="44.9309%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (15 samples, 4.56%)</title><rect x="40.7295%" y="229" width="4.5593%" height="15" fill="rgb(229,68,48)" fg:x="134" fg:w="15"/><text x="40.9795%" y="239.50">alloc..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.30%)</title><rect x="44.9848%" y="213" width="0.3040%" height="15" fill="rgb(252,8,32)" fg:x="148" fg:w="1"/><text x="45.2348%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::array (2 samples, 0.61%)</title><rect x="45.2888%" y="229" width="0.6079%" height="15" fill="rgb(223,20,43)" fg:x="149" fg:w="2"/><text x="45.5388%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (2 samples, 0.61%)</title><rect x="45.2888%" y="213" width="0.6079%" height="15" fill="rgb(229,81,49)" fg:x="149" fg:w="2"/><text x="45.5388%" y="223.50"></text></g><g><title>core::cmp::max (2 samples, 0.61%)</title><rect x="45.8967%" y="229" width="0.6079%" height="15" fill="rgb(236,28,36)" fg:x="151" fg:w="2"/><text x="46.1467%" y="239.50"></text></g><g><title>core::cmp::Ord::max (2 samples, 0.61%)</title><rect x="45.8967%" y="213" width="0.6079%" height="15" fill="rgb(249,185,26)" fg:x="151" fg:w="2"/><text x="46.1467%" y="223.50"></text></g><g><title>core::cmp::max_by (2 samples, 0.61%)</title><rect x="45.8967%" y="197" width="0.6079%" height="15" fill="rgb(249,174,33)" fg:x="151" fg:w="2"/><text x="46.1467%" y="207.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.61%)</title><rect x="45.8967%" y="181" width="0.6079%" height="15" fill="rgb(233,201,37)" fg:x="151" fg:w="2"/><text x="46.1467%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (1 samples, 0.30%)</title><rect x="46.2006%" y="165" width="0.3040%" height="15" fill="rgb(221,78,26)" fg:x="152" fg:w="1"/><text x="46.4506%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (25 samples, 7.60%)</title><rect x="39.8176%" y="245" width="7.5988%" height="15" fill="rgb(250,127,30)" fg:x="131" fg:w="25"/><text x="40.0676%" y="255.50">alloc::raw..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (3 samples, 0.91%)</title><rect x="46.5046%" y="229" width="0.9119%" height="15" fill="rgb(230,49,44)" fg:x="153" fg:w="3"/><text x="46.7546%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.30%)</title><rect x="47.1125%" y="213" width="0.3040%" height="15" fill="rgb(229,67,23)" fg:x="155" fg:w="1"/><text x="47.3625%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (49 samples, 14.89%)</title><rect x="32.8267%" y="341" width="14.8936%" height="15" fill="rgb(249,83,47)" fg:x="108" fg:w="49"/><text x="33.0767%" y="351.50">&lt;alloc::vec::Vec&lt;T,A&gt; a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (48 samples, 14.59%)</title><rect x="33.1307%" y="325" width="14.5897%" height="15" fill="rgb(215,43,3)" fg:x="109" fg:w="48"/><text x="33.3807%" y="335.50">&lt;alloc::vec::Vec&lt;T,A&gt; ..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (47 samples, 14.29%)</title><rect x="33.4347%" y="309" width="14.2857%" height="15" fill="rgb(238,154,13)" fg:x="110" fg:w="47"/><text x="33.6847%" y="319.50">alloc::vec::Vec&lt;T,A&gt;::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (31 samples, 9.42%)</title><rect x="38.2979%" y="293" width="9.4225%" height="15" fill="rgb(219,56,2)" fg:x="126" fg:w="31"/><text x="38.5479%" y="303.50">alloc::vec::V..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (30 samples, 9.12%)</title><rect x="38.6018%" y="277" width="9.1185%" height="15" fill="rgb(233,0,4)" fg:x="127" fg:w="30"/><text x="38.8518%" y="287.50">alloc::raw_ve..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (27 samples, 8.21%)</title><rect x="39.5137%" y="261" width="8.2067%" height="15" fill="rgb(235,30,7)" fg:x="130" fg:w="27"/><text x="39.7637%" y="271.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::handle_reserve (1 samples, 0.30%)</title><rect x="47.4164%" y="245" width="0.3040%" height="15" fill="rgb(250,79,13)" fg:x="156" fg:w="1"/><text x="47.6664%" y="255.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.30%)</title><rect x="47.7204%" y="341" width="0.3040%" height="15" fill="rgb(211,146,34)" fg:x="157" fg:w="1"/><text x="47.9704%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::filter (1 samples, 0.30%)</title><rect x="48.0243%" y="341" width="0.3040%" height="15" fill="rgb(228,22,38)" fg:x="158" fg:w="1"/><text x="48.2743%" y="351.50"></text></g><g><title>core::iter::adapters::filter::Filter&lt;I,P&gt;::new (1 samples, 0.30%)</title><rect x="48.0243%" y="325" width="0.3040%" height="15" fill="rgb(235,168,5)" fg:x="158" fg:w="1"/><text x="48.2743%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;polling::epoll::Events&gt;&gt; (4 samples, 1.22%)</title><rect x="48.3283%" y="341" width="1.2158%" height="15" fill="rgb(221,155,16)" fg:x="159" fg:w="4"/><text x="48.5783%" y="351.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.91%)</title><rect x="48.6322%" y="325" width="0.9119%" height="15" fill="rgb(215,215,53)" fg:x="160" fg:w="3"/><text x="48.8822%" y="335.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (1 samples, 0.30%)</title><rect x="49.2401%" y="309" width="0.3040%" height="15" fill="rgb(223,4,10)" fg:x="162" fg:w="1"/><text x="49.4901%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (1 samples, 0.30%)</title><rect x="49.2401%" y="293" width="0.3040%" height="15" fill="rgb(234,103,6)" fg:x="162" fg:w="1"/><text x="49.4901%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_swap (1 samples, 0.30%)</title><rect x="49.2401%" y="277" width="0.3040%" height="15" fill="rgb(227,97,0)" fg:x="162" fg:w="1"/><text x="49.4901%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (2 samples, 0.61%)</title><rect x="49.5441%" y="341" width="0.6079%" height="15" fill="rgb(234,150,53)" fg:x="163" fg:w="2"/><text x="49.7941%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_swap (2 samples, 0.61%)</title><rect x="49.5441%" y="325" width="0.6079%" height="15" fill="rgb(228,201,54)" fg:x="163" fg:w="2"/><text x="49.7941%" y="335.50"></text></g><g><title>log::max_level (1 samples, 0.30%)</title><rect x="50.1520%" y="341" width="0.3040%" height="15" fill="rgb(222,22,37)" fg:x="165" fg:w="1"/><text x="50.4020%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.30%)</title><rect x="50.1520%" y="325" width="0.3040%" height="15" fill="rgb(237,53,32)" fg:x="165" fg:w="1"/><text x="50.4020%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.30%)</title><rect x="50.1520%" y="309" width="0.3040%" height="15" fill="rgb(233,25,53)" fg:x="165" fg:w="1"/><text x="50.4020%" y="319.50"></text></g><g><title>core::array::&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (6 samples, 1.82%)</title><rect x="50.4559%" y="325" width="1.8237%" height="15" fill="rgb(210,40,34)" fg:x="166" fg:w="6"/><text x="50.7059%" y="335.50">c..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5 samples, 1.52%)</title><rect x="50.7599%" y="309" width="1.5198%" height="15" fill="rgb(241,220,44)" fg:x="167" fg:w="5"/><text x="51.0099%" y="319.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.91%)</title><rect x="51.3678%" y="293" width="0.9119%" height="15" fill="rgb(235,28,35)" fg:x="169" fg:w="3"/><text x="51.6178%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.61%)</title><rect x="51.6717%" y="277" width="0.6079%" height="15" fill="rgb(210,56,17)" fg:x="170" fg:w="2"/><text x="51.9217%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.30%)</title><rect x="51.9757%" y="261" width="0.3040%" height="15" fill="rgb(224,130,29)" fg:x="171" fg:w="1"/><text x="52.2257%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.30%)</title><rect x="51.9757%" y="245" width="0.3040%" height="15" fill="rgb(235,212,8)" fg:x="171" fg:w="1"/><text x="52.2257%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.30%)</title><rect x="51.9757%" y="229" width="0.3040%" height="15" fill="rgb(223,33,50)" fg:x="171" fg:w="1"/><text x="52.2257%" y="239.50"></text></g><g><title>polling::epoll::Events::iter (8 samples, 2.43%)</title><rect x="50.4559%" y="341" width="2.4316%" height="15" fill="rgb(219,149,13)" fg:x="166" fg:w="8"/><text x="50.7059%" y="351.50">po..</text></g><g><title>core::iter::traits::iterator::Iterator::map (2 samples, 0.61%)</title><rect x="52.2796%" y="325" width="0.6079%" height="15" fill="rgb(250,156,29)" fg:x="172" fg:w="2"/><text x="52.5296%" y="335.50"></text></g><g><title>core::iter::adapters::map::Map&lt;I,F&gt;::new (1 samples, 0.30%)</title><rect x="52.5836%" y="309" width="0.3040%" height="15" fill="rgb(216,193,19)" fg:x="173" fg:w="1"/><text x="52.8336%" y="319.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.30%)</title><rect x="54.1033%" y="325" width="0.3040%" height="15" fill="rgb(216,135,14)" fg:x="178" fg:w="1"/><text x="54.3533%" y="335.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.61%)</title><rect x="54.4073%" y="325" width="0.6079%" height="15" fill="rgb(241,47,5)" fg:x="179" fg:w="2"/><text x="54.6573%" y="335.50"></text></g><g><title>&lt;core::time::Duration as core::cmp::PartialEq&gt;::eq (1 samples, 0.30%)</title><rect x="55.0152%" y="325" width="0.3040%" height="15" fill="rgb(233,42,35)" fg:x="181" fg:w="1"/><text x="55.2652%" y="335.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::le (4 samples, 1.22%)</title><rect x="55.3191%" y="325" width="1.2158%" height="15" fill="rgb(231,13,6)" fg:x="182" fg:w="4"/><text x="55.5691%" y="335.50"></text></g><g><title>[libc.so.6] (1 samples, 0.30%)</title><rect x="56.5350%" y="325" width="0.3040%" height="15" fill="rgb(207,181,40)" fg:x="186" fg:w="1"/><text x="56.7850%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;isize,std::io::error::Error&gt;&gt; (3 samples, 0.91%)</title><rect x="56.8389%" y="325" width="0.9119%" height="15" fill="rgb(254,173,49)" fg:x="187" fg:w="3"/><text x="57.0889%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::Error&gt; (2 samples, 0.61%)</title><rect x="57.1429%" y="309" width="0.6079%" height="15" fill="rgb(221,1,38)" fg:x="188" fg:w="2"/><text x="57.3929%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::repr_bitpacked::Repr&gt; (2 samples, 0.61%)</title><rect x="57.1429%" y="293" width="0.6079%" height="15" fill="rgb(206,124,46)" fg:x="188" fg:w="2"/><text x="57.3929%" y="303.50"></text></g><g><title>core::time::Duration::as_secs (1 samples, 0.30%)</title><rect x="57.7508%" y="325" width="0.3040%" height="15" fill="rgb(249,21,11)" fg:x="190" fg:w="1"/><text x="58.0008%" y="335.50"></text></g><g><title>core::time::Duration::from_secs (2 samples, 0.61%)</title><rect x="58.0547%" y="325" width="0.6079%" height="15" fill="rgb(222,201,40)" fg:x="191" fg:w="2"/><text x="58.3047%" y="335.50"></text></g><g><title>core::time::Duration::new (1 samples, 0.30%)</title><rect x="58.3587%" y="309" width="0.3040%" height="15" fill="rgb(235,61,29)" fg:x="192" fg:w="1"/><text x="58.6087%" y="319.50"></text></g><g><title>epoll_wait (30 samples, 9.12%)</title><rect x="58.6626%" y="325" width="9.1185%" height="15" fill="rgb(219,207,3)" fg:x="193" fg:w="30"/><text x="58.9126%" y="335.50">epoll_wait</text></g><g><title>log::max_level (4 samples, 1.22%)</title><rect x="67.7812%" y="325" width="1.2158%" height="15" fill="rgb(222,56,46)" fg:x="223" fg:w="4"/><text x="68.0312%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.61%)</title><rect x="68.3891%" y="309" width="0.6079%" height="15" fill="rgb(239,76,54)" fg:x="225" fg:w="2"/><text x="68.6391%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.61%)</title><rect x="68.3891%" y="293" width="0.6079%" height="15" fill="rgb(231,124,27)" fg:x="225" fg:w="2"/><text x="68.6391%" y="303.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::le (1 samples, 0.30%)</title><rect x="69.6049%" y="309" width="0.3040%" height="15" fill="rgb(249,195,6)" fg:x="229" fg:w="1"/><text x="69.8549%" y="319.50"></text></g><g><title>log::max_level (2 samples, 0.61%)</title><rect x="69.9088%" y="309" width="0.6079%" height="15" fill="rgb(237,174,47)" fg:x="230" fg:w="2"/><text x="70.1588%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.30%)</title><rect x="70.2128%" y="293" width="0.3040%" height="15" fill="rgb(206,201,31)" fg:x="231" fg:w="1"/><text x="70.4628%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.30%)</title><rect x="70.2128%" y="277" width="0.3040%" height="15" fill="rgb(231,57,52)" fg:x="231" fg:w="1"/><text x="70.4628%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (2 samples, 0.61%)</title><rect x="70.8207%" y="293" width="0.6079%" height="15" fill="rgb(248,177,22)" fg:x="233" fg:w="2"/><text x="71.0707%" y="303.50"></text></g><g><title>polling::epoll::Poller::modify (13 samples, 3.95%)</title><rect x="68.9970%" y="325" width="3.9514%" height="15" fill="rgb(215,211,37)" fg:x="227" fg:w="13"/><text x="69.2470%" y="335.50">poll..</text></g><g><title>polling::epoll::Poller::ctl (8 samples, 2.43%)</title><rect x="70.5167%" y="309" width="2.4316%" height="15" fill="rgb(241,128,51)" fg:x="232" fg:w="8"/><text x="70.7667%" y="319.50">po..</text></g><g><title>core::option::Option&lt;T&gt;::map (5 samples, 1.52%)</title><rect x="71.4286%" y="293" width="1.5198%" height="15" fill="rgb(227,165,31)" fg:x="235" fg:w="5"/><text x="71.6786%" y="303.50"></text></g><g><title>polling::epoll::Poller::ctl::{{closure}} (2 samples, 0.61%)</title><rect x="72.3404%" y="277" width="0.6079%" height="15" fill="rgb(228,167,24)" fg:x="238" fg:w="2"/><text x="72.5904%" y="287.50"></text></g><g><title>read (3 samples, 0.91%)</title><rect x="72.9483%" y="325" width="0.9119%" height="15" fill="rgb(228,143,12)" fg:x="240" fg:w="3"/><text x="73.1983%" y="335.50"></text></g><g><title>std::io::error::Error::last_os_error (1 samples, 0.30%)</title><rect x="73.8602%" y="325" width="0.3040%" height="15" fill="rgb(249,149,8)" fg:x="243" fg:w="1"/><text x="74.1102%" y="335.50"></text></g><g><title>std::sys::unix::os::errno (1 samples, 0.30%)</title><rect x="73.8602%" y="309" width="0.3040%" height="15" fill="rgb(243,35,44)" fg:x="243" fg:w="1"/><text x="74.1102%" y="319.50"></text></g><g><title>__errno_location (1 samples, 0.30%)</title><rect x="73.8602%" y="293" width="0.3040%" height="15" fill="rgb(246,89,9)" fg:x="243" fg:w="1"/><text x="74.1102%" y="303.50"></text></g><g><title>polling::epoll::Poller::wait (71 samples, 21.58%)</title><rect x="52.8875%" y="341" width="21.5805%" height="15" fill="rgb(233,213,13)" fg:x="174" fg:w="71"/><text x="53.1375%" y="351.50">polling::epoll::Poller::wait</text></g><g><title>timerfd_settime (1 samples, 0.30%)</title><rect x="74.1641%" y="325" width="0.3040%" height="15" fill="rgb(233,141,41)" fg:x="244" fg:w="1"/><text x="74.4141%" y="335.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.30%)</title><rect x="75.0760%" y="325" width="0.3040%" height="15" fill="rgb(239,167,4)" fg:x="247" fg:w="1"/><text x="75.3260%" y="335.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (1 samples, 0.30%)</title><rect x="75.3799%" y="325" width="0.3040%" height="15" fill="rgb(209,217,16)" fg:x="248" fg:w="1"/><text x="75.6299%" y="335.50"></text></g><g><title>polling::Poller::wait (146 samples, 44.38%)</title><rect x="31.9149%" y="357" width="44.3769%" height="15" fill="rgb(219,88,35)" fg:x="105" fg:w="146"/><text x="32.1649%" y="367.50">polling::Poller::wait</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (6 samples, 1.82%)</title><rect x="74.4681%" y="341" width="1.8237%" height="15" fill="rgb(220,193,23)" fg:x="245" fg:w="6"/><text x="74.7181%" y="351.50">s..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::try_lock (2 samples, 0.61%)</title><rect x="75.6839%" y="325" width="0.6079%" height="15" fill="rgb(230,90,52)" fg:x="249" fg:w="2"/><text x="75.9339%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.30%)</title><rect x="75.9878%" y="309" width="0.3040%" height="15" fill="rgb(252,106,19)" fg:x="250" fg:w="1"/><text x="76.2378%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.30%)</title><rect x="75.9878%" y="293" width="0.3040%" height="15" fill="rgb(206,74,20)" fg:x="250" fg:w="1"/><text x="76.2378%" y="303.50"></text></g><g><title>&lt;tftp::socket::StdSocket as tftp::socket::Socket&gt;::recv_from (205 samples, 62.31%)</title><rect x="15.1976%" y="373" width="62.3100%" height="15" fill="rgb(230,138,44)" fg:x="50" fg:w="205"/><text x="15.4476%" y="383.50">&lt;tftp::socket::StdSocket as tftp::socket::Socket&gt;::recv_from</text></g><g><title>std::net::udp::UdpSocket::recv_from (4 samples, 1.22%)</title><rect x="76.2918%" y="357" width="1.2158%" height="15" fill="rgb(235,182,43)" fg:x="251" fg:w="4"/><text x="76.5418%" y="367.50"></text></g><g><title>std::sys_common::net::UdpSocket::recv_from (3 samples, 0.91%)</title><rect x="76.5957%" y="341" width="0.9119%" height="15" fill="rgb(242,16,51)" fg:x="252" fg:w="3"/><text x="76.8457%" y="351.50"></text></g><g><title>std::sys::unix::net::Socket::recv_from (3 samples, 0.91%)</title><rect x="76.5957%" y="325" width="0.9119%" height="15" fill="rgb(248,9,4)" fg:x="252" fg:w="3"/><text x="76.8457%" y="335.50"></text></g><g><title>std::sys::unix::net::Socket::recv_from_with_flags (3 samples, 0.91%)</title><rect x="76.5957%" y="309" width="0.9119%" height="15" fill="rgb(210,31,22)" fg:x="252" fg:w="3"/><text x="76.8457%" y="319.50"></text></g><g><title>recvfrom (3 samples, 0.91%)</title><rect x="76.5957%" y="293" width="0.9119%" height="15" fill="rgb(239,54,39)" fg:x="252" fg:w="3"/><text x="76.8457%" y="303.50"></text></g><g><title>&lt;tftp::std_compat::io::ErrorKind as core::cmp::PartialEq&gt;::eq (2 samples, 0.61%)</title><rect x="77.5076%" y="373" width="0.6079%" height="15" fill="rgb(230,99,41)" fg:x="255" fg:w="2"/><text x="77.7576%" y="383.50"></text></g><g><title>core::cmp::PartialEq::ne (3 samples, 0.91%)</title><rect x="78.1155%" y="373" width="0.9119%" height="15" fill="rgb(253,106,12)" fg:x="257" fg:w="3"/><text x="78.3655%" y="383.50"></text></g><g><title>&lt;tftp::std_compat::net::SocketAddr as core::cmp::PartialEq&gt;::eq (2 samples, 0.61%)</title><rect x="78.4195%" y="357" width="0.6079%" height="15" fill="rgb(213,46,41)" fg:x="258" fg:w="2"/><text x="78.6695%" y="367.50"></text></g><g><title>core::cmp::PartialOrd::gt (2 samples, 0.61%)</title><rect x="79.0274%" y="373" width="0.6079%" height="15" fill="rgb(215,133,35)" fg:x="260" fg:w="2"/><text x="79.2774%" y="383.50"></text></g><g><title>&lt;core::time::Duration as core::cmp::PartialOrd&gt;::partial_cmp (2 samples, 0.61%)</title><rect x="79.0274%" y="357" width="0.6079%" height="15" fill="rgb(213,28,5)" fg:x="260" fg:w="2"/><text x="79.2774%" y="367.50"></text></g><g><title>core::time::Duration::from_millis (2 samples, 0.61%)</title><rect x="79.6353%" y="373" width="0.6079%" height="15" fill="rgb(215,77,49)" fg:x="262" fg:w="2"/><text x="79.8853%" y="383.50"></text></g><g><title>core::time::Duration::new (1 samples, 0.30%)</title><rect x="79.9392%" y="357" width="0.3040%" height="15" fill="rgb(248,100,22)" fg:x="263" fg:w="1"/><text x="80.1892%" y="367.50"></text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::set_len (1 samples, 0.30%)</title><rect x="80.2432%" y="373" width="0.3040%" height="15" fill="rgb(208,67,9)" fg:x="264" fg:w="1"/><text x="80.4932%" y="383.50"></text></g><g><title>log::max_level (3 samples, 0.91%)</title><rect x="80.5471%" y="373" width="0.9119%" height="15" fill="rgb(219,133,21)" fg:x="265" fg:w="3"/><text x="80.7971%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (3 samples, 0.91%)</title><rect x="80.5471%" y="357" width="0.9119%" height="15" fill="rgb(246,46,29)" fg:x="265" fg:w="3"/><text x="80.7971%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.61%)</title><rect x="80.8511%" y="341" width="0.6079%" height="15" fill="rgb(246,185,52)" fg:x="266" fg:w="2"/><text x="81.1011%" y="351.50"></text></g><g><title>&lt;tftp::socket::StdSocket as tftp::socket::Socket&gt;::send_to (1 samples, 0.30%)</title><rect x="81.7629%" y="357" width="0.3040%" height="15" fill="rgb(252,136,11)" fg:x="269" fg:w="1"/><text x="82.0129%" y="367.50"></text></g><g><title>std::net::udp::UdpSocket::send_to (1 samples, 0.30%)</title><rect x="81.7629%" y="341" width="0.3040%" height="15" fill="rgb(219,138,53)" fg:x="269" fg:w="1"/><text x="82.0129%" y="351.50"></text></g><g><title>&lt;tftp::storage::FileWriter&lt;T&gt; as tftp::storage::BlockWriter&gt;::is_finished_below (1 samples, 0.30%)</title><rect x="82.0669%" y="357" width="0.3040%" height="15" fill="rgb(211,51,23)" fg:x="270" fg:w="1"/><text x="82.3169%" y="367.50"></text></g><g><title>&lt;tftp::io::StdCompatFile as tftp::std_compat::io::Write&gt;::write (3 samples, 0.91%)</title><rect x="83.8906%" y="341" width="0.9119%" height="15" fill="rgb(247,221,28)" fg:x="276" fg:w="3"/><text x="84.1406%" y="351.50"></text></g><g><title>std::os::unix::net::datagram::UnixDatagram::send (1 samples, 0.30%)</title><rect x="84.4985%" y="325" width="0.3040%" height="15" fill="rgb(251,222,45)" fg:x="278" fg:w="1"/><text x="84.7485%" y="335.50"></text></g><g><title>&lt;tftp::storage::BlockMapper as core::clone::Clone&gt;::clone (2 samples, 0.61%)</title><rect x="84.8024%" y="341" width="0.6079%" height="15" fill="rgb(217,162,53)" fg:x="279" fg:w="2"/><text x="85.0524%" y="351.50"></text></g><g><title>tftp::map::Map&lt;K,V,_&gt;::get (1 samples, 0.30%)</title><rect x="85.4103%" y="341" width="0.3040%" height="15" fill="rgb(229,93,14)" fg:x="281" fg:w="1"/><text x="85.6603%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (1 samples, 0.30%)</title><rect x="85.4103%" y="325" width="0.3040%" height="15" fill="rgb(209,67,49)" fg:x="281" fg:w="1"/><text x="85.6603%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (2 samples, 0.61%)</title><rect x="85.7143%" y="325" width="0.6079%" height="15" fill="rgb(213,87,29)" fg:x="282" fg:w="2"/><text x="85.9643%" y="335.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.61%)</title><rect x="86.6261%" y="293" width="0.6079%" height="15" fill="rgb(205,151,52)" fg:x="285" fg:w="2"/><text x="86.8761%" y="303.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::as_slice (1 samples, 0.30%)</title><rect x="86.9301%" y="277" width="0.3040%" height="15" fill="rgb(253,215,39)" fg:x="286" fg:w="1"/><text x="87.1801%" y="287.50"></text></g><g><title>tftp::map::Map&lt;K,V,_&gt;::remove (8 samples, 2.43%)</title><rect x="85.7143%" y="341" width="2.4316%" height="15" fill="rgb(221,220,41)" fg:x="282" fg:w="8"/><text x="85.9643%" y="351.50">tf..</text></g><g><title>tftp::map::Map&lt;K,V,_&gt;::iter (6 samples, 1.82%)</title><rect x="86.3222%" y="325" width="1.8237%" height="15" fill="rgb(218,133,21)" fg:x="284" fg:w="6"/><text x="86.5722%" y="335.50">t..</text></g><g><title>&lt;&amp;tftp::map::Map&lt;K,V,_&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (6 samples, 1.82%)</title><rect x="86.3222%" y="309" width="1.8237%" height="15" fill="rgb(221,193,43)" fg:x="284" fg:w="6"/><text x="86.5722%" y="319.50">&lt;..</text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (3 samples, 0.91%)</title><rect x="87.2340%" y="293" width="0.9119%" height="15" fill="rgb(240,128,52)" fg:x="287" fg:w="3"/><text x="87.4840%" y="303.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (2 samples, 0.61%)</title><rect x="87.5380%" y="277" width="0.6079%" height="15" fill="rgb(253,114,12)" fg:x="288" fg:w="2"/><text x="87.7880%" y="287.50"></text></g><g><title>&lt;tftp::storage::FileWriter&lt;T&gt; as tftp::storage::BlockWriter&gt;::write_block (23 samples, 6.99%)</title><rect x="82.3708%" y="357" width="6.9909%" height="15" fill="rgb(215,223,47)" fg:x="271" fg:w="23"/><text x="82.6208%" y="367.50">&lt;tftp::st..</text></g><g><title>tftp::storage::BlockMapper::index (4 samples, 1.22%)</title><rect x="88.1459%" y="341" width="1.2158%" height="15" fill="rgb(248,225,23)" fg:x="290" fg:w="4"/><text x="88.3959%" y="351.50"></text></g><g><title>[libc.so.6] (1 samples, 0.30%)</title><rect x="89.3617%" y="357" width="0.3040%" height="15" fill="rgb(250,108,0)" fg:x="294" fg:w="1"/><text x="89.6117%" y="367.50"></text></g><g><title>tftp::client::client::write_block (28 samples, 8.51%)</title><rect x="81.4590%" y="373" width="8.5106%" height="15" fill="rgb(228,208,7)" fg:x="268" fg:w="28"/><text x="81.7090%" y="383.50">tftp::client..</text></g><g><title>core::ptr::drop_in_place&lt;heapless::vec::Vec&lt;u8,1420_usize&gt;&gt; (1 samples, 0.30%)</title><rect x="89.6657%" y="357" width="0.3040%" height="15" fill="rgb(244,45,10)" fg:x="295" fg:w="1"/><text x="89.9157%" y="367.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (7 samples, 2.13%)</title><rect x="91.4894%" y="309" width="2.1277%" height="15" fill="rgb(207,125,25)" fg:x="301" fg:w="7"/><text x="91.7394%" y="319.50">s..</text></g><g><title>clock_gettime (6 samples, 1.82%)</title><rect x="91.7933%" y="293" width="1.8237%" height="15" fill="rgb(210,195,18)" fg:x="302" fg:w="6"/><text x="92.0433%" y="303.50">c..</text></g><g><title>__vdso_clock_gettime (5 samples, 1.52%)</title><rect x="92.0973%" y="277" width="1.5198%" height="15" fill="rgb(249,80,12)" fg:x="303" fg:w="5"/><text x="92.3473%" y="287.50"></text></g><g><title>[[vdso]] (2 samples, 0.61%)</title><rect x="93.0091%" y="261" width="0.6079%" height="15" fill="rgb(221,65,9)" fg:x="306" fg:w="2"/><text x="93.2591%" y="271.50"></text></g><g><title>core::ops::function::FnOnce::call_once (12 samples, 3.65%)</title><rect x="90.5775%" y="341" width="3.6474%" height="15" fill="rgb(235,49,36)" fg:x="298" fg:w="12"/><text x="90.8275%" y="351.50">core..</text></g><g><title>tftp::instant_callback::{{closure}} (11 samples, 3.34%)</title><rect x="90.8815%" y="325" width="3.3435%" height="15" fill="rgb(225,32,20)" fg:x="299" fg:w="11"/><text x="91.1315%" y="335.50">tft..</text></g><g><title>std::time::SystemTime::now (2 samples, 0.61%)</title><rect x="93.6170%" y="309" width="0.6079%" height="15" fill="rgb(215,141,46)" fg:x="308" fg:w="2"/><text x="93.8670%" y="319.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (2 samples, 0.61%)</title><rect x="93.6170%" y="293" width="0.6079%" height="15" fill="rgb(250,160,47)" fg:x="308" fg:w="2"/><text x="93.8670%" y="303.50"></text></g><g><title>tftp::instant_callback (17 samples, 5.17%)</title><rect x="89.9696%" y="373" width="5.1672%" height="15" fill="rgb(216,222,40)" fg:x="296" fg:w="17"/><text x="90.2196%" y="383.50">tftp::..</text></g><g><title>tftp::std_compat::time::Instant::from_time (15 samples, 4.56%)</title><rect x="90.5775%" y="357" width="4.5593%" height="15" fill="rgb(234,217,39)" fg:x="298" fg:w="15"/><text x="90.8275%" y="367.50">tftp:..</text></g><g><title>core::time::Duration::from_micros (3 samples, 0.91%)</title><rect x="94.2249%" y="341" width="0.9119%" height="15" fill="rgb(207,178,40)" fg:x="310" fg:w="3"/><text x="94.4749%" y="351.50"></text></g><g><title>core::time::Duration::new (1 samples, 0.30%)</title><rect x="94.8328%" y="325" width="0.3040%" height="15" fill="rgb(221,136,13)" fg:x="312" fg:w="1"/><text x="95.0828%" y="335.50"></text></g><g><title>tftp::packet::PacketType::from_repr (1 samples, 0.30%)</title><rect x="95.1368%" y="357" width="0.3040%" height="15" fill="rgb(249,199,10)" fg:x="313" fg:w="1"/><text x="95.3868%" y="367.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for &amp;[T: N]&gt;::try_from (1 samples, 0.30%)</title><rect x="95.7447%" y="309" width="0.3040%" height="15" fill="rgb(249,222,13)" fg:x="315" fg:w="1"/><text x="95.9947%" y="319.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (2 samples, 0.61%)</title><rect x="95.7447%" y="341" width="0.6079%" height="15" fill="rgb(244,185,38)" fg:x="315" fg:w="2"/><text x="95.9947%" y="351.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (2 samples, 0.61%)</title><rect x="95.7447%" y="325" width="0.6079%" height="15" fill="rgb(236,202,9)" fg:x="315" fg:w="2"/><text x="95.9947%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.30%)</title><rect x="96.0486%" y="309" width="0.3040%" height="15" fill="rgb(250,229,37)" fg:x="316" fg:w="1"/><text x="96.2986%" y="319.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 1.22%)</title><rect x="96.3526%" y="341" width="1.2158%" height="15" fill="rgb(206,174,23)" fg:x="317" fg:w="4"/><text x="96.6026%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (5 samples, 1.52%)</title><rect x="97.5684%" y="341" width="1.5198%" height="15" fill="rgb(211,33,43)" fg:x="321" fg:w="5"/><text x="97.8184%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;tftp::error::PacketError&gt; (2 samples, 0.61%)</title><rect x="98.4802%" y="325" width="0.6079%" height="15" fill="rgb(245,58,50)" fg:x="324" fg:w="2"/><text x="98.7302%" y="335.50"></text></g><g><title>tftp::packet::PacketType::from_bytes (14 samples, 4.26%)</title><rect x="95.1368%" y="373" width="4.2553%" height="15" fill="rgb(244,68,36)" fg:x="313" fg:w="14"/><text x="95.3868%" y="383.50">tftp:..</text></g><g><title>tftp::packet::try_from (13 samples, 3.95%)</title><rect x="95.4407%" y="357" width="3.9514%" height="15" fill="rgb(232,229,15)" fg:x="314" fg:w="13"/><text x="95.6907%" y="367.50">tftp..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.30%)</title><rect x="99.0881%" y="341" width="0.3040%" height="15" fill="rgb(254,30,23)" fg:x="326" fg:w="1"/><text x="99.3381%" y="351.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.30%)</title><rect x="99.0881%" y="325" width="0.3040%" height="15" fill="rgb(235,160,14)" fg:x="326" fg:w="1"/><text x="99.3381%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.30%)</title><rect x="99.0881%" y="309" width="0.3040%" height="15" fill="rgb(212,155,44)" fg:x="326" fg:w="1"/><text x="99.3381%" y="319.50"></text></g><g><title>all (329 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(226,2,50)" fg:x="0" fg:w="329"/><text x="0.2500%" y="447.50"></text></g><g><title>tftp (329 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(234,177,6)" fg:x="0" fg:w="329"/><text x="0.2500%" y="431.50">tftp</text></g><g><title>[unknown] (322 samples, 97.87%)</title><rect x="2.1277%" y="405" width="97.8723%" height="15" fill="rgb(217,24,9)" fg:x="7" fg:w="322"/><text x="2.3777%" y="415.50">[unknown]</text></g><g><title>tftp::client::client::receive_file (312 samples, 94.83%)</title><rect x="5.1672%" y="389" width="94.8328%" height="15" fill="rgb(220,13,46)" fg:x="17" fg:w="312"/><text x="5.4172%" y="399.50">tftp::client::client::receive_file</text></g><g><title>tftp::std_compat::time::Instant::elapsed (2 samples, 0.61%)</title><rect x="99.3921%" y="373" width="0.6079%" height="15" fill="rgb(239,221,27)" fg:x="327" fg:w="2"/><text x="99.6421%" y="383.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.30%)</title><rect x="99.6960%" y="357" width="0.3040%" height="15" fill="rgb(222,198,25)" fg:x="328" fg:w="1"/><text x="99.9460%" y="367.50"></text></g><g><title>tftp::instant_callback::{{closure}} (1 samples, 0.30%)</title><rect x="99.6960%" y="341" width="0.3040%" height="15" fill="rgb(211,99,13)" fg:x="328" fg:w="1"/><text x="99.9460%" y="351.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.30%)</title><rect x="99.6960%" y="325" width="0.3040%" height="15" fill="rgb(232,111,31)" fg:x="328" fg:w="1"/><text x="99.9460%" y="335.50"></text></g><g><title>clock_gettime (1 samples, 0.30%)</title><rect x="99.6960%" y="309" width="0.3040%" height="15" fill="rgb(245,82,37)" fg:x="328" fg:w="1"/><text x="99.9460%" y="319.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.30%)</title><rect x="99.6960%" y="293" width="0.3040%" height="15" fill="rgb(227,149,46)" fg:x="328" fg:w="1"/><text x="99.9460%" y="303.50"></text></g></svg></svg>