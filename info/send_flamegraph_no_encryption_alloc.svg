<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="726" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="709.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="709.00"> </text><svg id="frames" x="10" width="1180" total_samples="703"><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.14%)</title><rect x="0.5690%" y="629" width="0.1422%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="1"/><text x="0.8190%" y="639.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.14%)</title><rect x="0.5690%" y="613" width="0.1422%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="1"/><text x="0.8190%" y="623.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.14%)</title><rect x="0.5690%" y="597" width="0.1422%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="1"/><text x="0.8190%" y="607.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.85%)</title><rect x="0.0000%" y="645" width="0.8535%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="6"/><text x="0.2500%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="0.7112%" y="629" width="0.1422%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="1"/><text x="0.9612%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="0.8535%" y="645" width="0.1422%" height="15" fill="rgb(232,128,0)" fg:x="6" fg:w="1"/><text x="1.1035%" y="655.50"></text></g><g><title>&lt;tftp::cli::ClientCliConfig as clap::derive::Args&gt;::augment_args (1 samples, 0.14%)</title><rect x="0.8535%" y="629" width="0.1422%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="1"/><text x="1.1035%" y="639.50"></text></g><g><title>clap::builder::arg::Arg::required (1 samples, 0.14%)</title><rect x="0.8535%" y="613" width="0.1422%" height="15" fill="rgb(228,23,34)" fg:x="6" fg:w="1"/><text x="1.1035%" y="623.50"></text></g><g><title>[libc.so.6] (1 samples, 0.14%)</title><rect x="1.4225%" y="213" width="0.1422%" height="15" fill="rgb(218,30,26)" fg:x="10" fg:w="1"/><text x="1.6725%" y="223.50"></text></g><g><title>core::const_closure::ConstFnMutClosure&lt;&amp;mut CapturedData,Function&gt;::new (1 samples, 0.14%)</title><rect x="1.7070%" y="133" width="0.1422%" height="15" fill="rgb(220,122,19)" fg:x="12" fg:w="1"/><text x="1.9570%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::by_ref_sized::ByRefSized&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.28%)</title><rect x="1.7070%" y="149" width="0.2845%" height="15" fill="rgb(250,228,42)" fg:x="12" fg:w="2"/><text x="1.9570%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.14%)</title><rect x="1.8492%" y="133" width="0.1422%" height="15" fill="rgb(240,193,28)" fg:x="13" fg:w="1"/><text x="2.0992%" y="143.50"></text></g><g><title>&lt;core::const_closure::ConstFnMutClosure&lt;&amp;mut A,Function&gt; as core::ops::function::FnMut&lt;ClosureArguments&gt;&gt;::call_mut (1 samples, 0.14%)</title><rect x="1.8492%" y="117" width="0.1422%" height="15" fill="rgb(216,20,37)" fg:x="13" fg:w="1"/><text x="2.0992%" y="127.50"></text></g><g><title>core::ops::function::Fn::call (1 samples, 0.14%)</title><rect x="1.8492%" y="101" width="0.1422%" height="15" fill="rgb(206,188,39)" fg:x="13" fg:w="1"/><text x="2.0992%" y="111.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2_imp (1 samples, 0.14%)</title><rect x="1.8492%" y="85" width="0.1422%" height="15" fill="rgb(217,207,13)" fg:x="13" fg:w="1"/><text x="2.0992%" y="95.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold::{{closure}} (1 samples, 0.14%)</title><rect x="1.8492%" y="69" width="0.1422%" height="15" fill="rgb(231,73,38)" fg:x="13" fg:w="1"/><text x="2.0992%" y="79.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.57%)</title><rect x="1.5647%" y="165" width="0.5690%" height="15" fill="rgb(225,20,46)" fg:x="11" fg:w="4"/><text x="1.8147%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::array::iter::IntoIter&lt;u8,2_usize&gt;&gt; (1 samples, 0.14%)</title><rect x="1.9915%" y="149" width="0.1422%" height="15" fill="rgb(210,31,41)" fg:x="14" fg:w="1"/><text x="2.2415%" y="159.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.14%)</title><rect x="1.9915%" y="133" width="0.1422%" height="15" fill="rgb(221,200,47)" fg:x="14" fg:w="1"/><text x="2.2415%" y="143.50"></text></g><g><title>core::array::iter::IntoIter&lt;T,_&gt;::as_mut_slice (1 samples, 0.14%)</title><rect x="1.9915%" y="117" width="0.1422%" height="15" fill="rgb(226,26,5)" fg:x="14" fg:w="1"/><text x="2.2415%" y="127.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (1 samples, 0.14%)</title><rect x="1.9915%" y="101" width="0.1422%" height="15" fill="rgb(249,33,26)" fg:x="14" fg:w="1"/><text x="2.2415%" y="111.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (4 samples, 0.57%)</title><rect x="11.9488%" y="117" width="0.5690%" height="15" fill="rgb(235,183,28)" fg:x="84" fg:w="4"/><text x="12.1988%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (5 samples, 0.71%)</title><rect x="12.5178%" y="117" width="0.7112%" height="15" fill="rgb(221,5,38)" fg:x="88" fg:w="5"/><text x="12.7678%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null::runtime_impl (4 samples, 0.57%)</title><rect x="12.6600%" y="101" width="0.5690%" height="15" fill="rgb(247,18,42)" fg:x="89" fg:w="4"/><text x="12.9100%" y="111.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::addr (4 samples, 0.57%)</title><rect x="12.6600%" y="85" width="0.5690%" height="15" fill="rgb(241,131,45)" fg:x="89" fg:w="4"/><text x="12.9100%" y="95.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (1 samples, 0.14%)</title><rect x="13.2290%" y="117" width="0.1422%" height="15" fill="rgb(249,31,29)" fg:x="93" fg:w="1"/><text x="13.4790%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (18 samples, 2.56%)</title><rect x="16.6430%" y="101" width="2.5605%" height="15" fill="rgb(225,111,53)" fg:x="117" fg:w="18"/><text x="16.8930%" y="111.50">co..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (18 samples, 2.56%)</title><rect x="16.6430%" y="85" width="2.5605%" height="15" fill="rgb(238,160,17)" fg:x="117" fg:w="18"/><text x="16.8930%" y="95.50">co..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (77 samples, 10.95%)</title><rect x="9.1038%" y="133" width="10.9531%" height="15" fill="rgb(214,148,48)" fg:x="64" fg:w="77"/><text x="9.3538%" y="143.50">&lt;core::slice::it..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (47 samples, 6.69%)</title><rect x="13.3713%" y="117" width="6.6856%" height="15" fill="rgb(232,36,49)" fg:x="94" fg:w="47"/><text x="13.6213%" y="127.50">core::sli..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (6 samples, 0.85%)</title><rect x="19.2034%" y="101" width="0.8535%" height="15" fill="rgb(209,103,24)" fg:x="135" fg:w="6"/><text x="19.4534%" y="111.50"></text></g><g><title>alloc::vec::set_len_on_drop::SetLenOnDrop::current_len (5 samples, 0.71%)</title><rect x="27.7383%" y="85" width="0.7112%" height="15" fill="rgb(229,88,8)" fg:x="195" fg:w="5"/><text x="27.9883%" y="95.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (11 samples, 1.56%)</title><rect x="28.4495%" y="85" width="1.5647%" height="15" fill="rgb(213,181,19)" fg:x="200" fg:w="11"/><text x="28.6995%" y="95.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (11 samples, 1.56%)</title><rect x="28.4495%" y="69" width="1.5647%" height="15" fill="rgb(254,191,54)" fg:x="200" fg:w="11"/><text x="28.6995%" y="79.50"></text></g><g><title>core::iter::adapters::copied::copy_fold::{{closure}} (88 samples, 12.52%)</title><rect x="20.0569%" y="133" width="12.5178%" height="15" fill="rgb(241,83,37)" fg:x="141" fg:w="88"/><text x="20.3069%" y="143.50">core::iter::adapter..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (64 samples, 9.10%)</title><rect x="23.4708%" y="117" width="9.1038%" height="15" fill="rgb(233,36,39)" fg:x="165" fg:w="64"/><text x="23.7208%" y="127.50">core::iter::t..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::{{closure}} (44 samples, 6.26%)</title><rect x="26.3158%" y="101" width="6.2589%" height="15" fill="rgb(226,3,54)" fg:x="185" fg:w="44"/><text x="26.5658%" y="111.50">alloc::v..</text></g><g><title>core::ptr::write (18 samples, 2.56%)</title><rect x="30.0142%" y="85" width="2.5605%" height="15" fill="rgb(245,192,40)" fg:x="211" fg:w="18"/><text x="30.2642%" y="95.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (222 samples, 31.58%)</title><rect x="1.4225%" y="229" width="31.5789%" height="15" fill="rgb(238,167,29)" fg:x="10" fg:w="222"/><text x="1.6725%" y="239.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::S..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (221 samples, 31.44%)</title><rect x="1.5647%" y="213" width="31.4367%" height="15" fill="rgb(232,182,51)" fg:x="11" fg:w="221"/><text x="1.8147%" y="223.50">alloc::vec::Vec&lt;T,A&gt;::extend_trusted</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (221 samples, 31.44%)</title><rect x="1.5647%" y="197" width="31.4367%" height="15" fill="rgb(231,60,39)" fg:x="11" fg:w="221"/><text x="1.8147%" y="207.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (221 samples, 31.44%)</title><rect x="1.5647%" y="181" width="31.4367%" height="15" fill="rgb(208,69,12)" fg:x="11" fg:w="221"/><text x="1.8147%" y="191.50">&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::i..</text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (217 samples, 30.87%)</title><rect x="2.1337%" y="165" width="30.8677%" height="15" fill="rgb(235,93,37)" fg:x="15" fg:w="217"/><text x="2.3837%" y="175.50">&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (217 samples, 30.87%)</title><rect x="2.1337%" y="149" width="30.8677%" height="15" fill="rgb(213,116,39)" fg:x="15" fg:w="217"/><text x="2.3837%" y="159.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::copied::copy_fold&lt;u8,(),core::iter::traits::iterator::Iterator::for_each::call&lt;u8,alloc::vec::Vec&lt;u8&gt;::extend_trusted&lt;core::iter::adapters::chain::Chain&lt;core::array::iter::IntoIter&lt;u8,2_usize&gt;,core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;u8&gt;&gt;&gt;&gt;::{{closure}}&gt;::{{closure}}&gt;::{{closure}}&gt; (3 samples, 0.43%)</title><rect x="32.5747%" y="133" width="0.4267%" height="15" fill="rgb(222,207,29)" fg:x="229" fg:w="3"/><text x="32.8247%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::traits::iterator::Iterator::for_each::call&lt;u8,alloc::vec::Vec&lt;u8&gt;::extend_trusted&lt;core::iter::adapters::chain::Chain&lt;core::array::iter::IntoIter&lt;u8,2_usize&gt;,core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;u8&gt;&gt;&gt;&gt;::{{closure}}&gt;::{{closure}}&gt; (2 samples, 0.28%)</title><rect x="32.7169%" y="117" width="0.2845%" height="15" fill="rgb(206,96,30)" fg:x="230" fg:w="2"/><text x="32.9669%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;::extend_trusted&lt;core::iter::adapters::chain::Chain&lt;core::array::iter::IntoIter&lt;u8,2_usize&gt;,core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;u8&gt;&gt;&gt;&gt;::{{closure}}&gt; (1 samples, 0.14%)</title><rect x="32.8592%" y="101" width="0.1422%" height="15" fill="rgb(218,138,4)" fg:x="231" fg:w="1"/><text x="33.1092%" y="111.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.14%)</title><rect x="33.0014%" y="213" width="0.1422%" height="15" fill="rgb(250,191,14)" fg:x="232" fg:w="1"/><text x="33.2514%" y="223.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (1 samples, 0.14%)</title><rect x="33.0014%" y="197" width="0.1422%" height="15" fill="rgb(239,60,40)" fg:x="232" fg:w="1"/><text x="33.2514%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (2 samples, 0.28%)</title><rect x="33.0014%" y="229" width="0.2845%" height="15" fill="rgb(206,27,48)" fg:x="232" fg:w="2"/><text x="33.2514%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.14%)</title><rect x="33.1437%" y="213" width="0.1422%" height="15" fill="rgb(225,35,8)" fg:x="233" fg:w="1"/><text x="33.3937%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.14%)</title><rect x="33.1437%" y="197" width="0.1422%" height="15" fill="rgb(250,213,24)" fg:x="233" fg:w="1"/><text x="33.3937%" y="207.50"></text></g><g><title>__rdl_alloc (1 samples, 0.14%)</title><rect x="33.4282%" y="117" width="0.1422%" height="15" fill="rgb(247,123,22)" fg:x="235" fg:w="1"/><text x="33.6782%" y="127.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.28%)</title><rect x="33.4282%" y="133" width="0.2845%" height="15" fill="rgb(231,138,38)" fg:x="235" fg:w="2"/><text x="33.6782%" y="143.50"></text></g><g><title>malloc (1 samples, 0.14%)</title><rect x="33.5704%" y="117" width="0.1422%" height="15" fill="rgb(231,145,46)" fg:x="236" fg:w="1"/><text x="33.8204%" y="127.50"></text></g><g><title>[libc.so.6] (1 samples, 0.14%)</title><rect x="33.5704%" y="101" width="0.1422%" height="15" fill="rgb(251,118,11)" fg:x="236" fg:w="1"/><text x="33.8204%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (230 samples, 32.72%)</title><rect x="1.2802%" y="245" width="32.7169%" height="15" fill="rgb(217,147,25)" fg:x="9" fg:w="230"/><text x="1.5302%" y="255.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nes..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (5 samples, 0.71%)</title><rect x="33.2859%" y="229" width="0.7112%" height="15" fill="rgb(247,81,37)" fg:x="234" fg:w="5"/><text x="33.5359%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.71%)</title><rect x="33.2859%" y="213" width="0.7112%" height="15" fill="rgb(209,12,38)" fg:x="234" fg:w="5"/><text x="33.5359%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.71%)</title><rect x="33.2859%" y="197" width="0.7112%" height="15" fill="rgb(227,1,9)" fg:x="234" fg:w="5"/><text x="33.5359%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.71%)</title><rect x="33.2859%" y="181" width="0.7112%" height="15" fill="rgb(248,47,43)" fg:x="234" fg:w="5"/><text x="33.5359%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.71%)</title><rect x="33.2859%" y="165" width="0.7112%" height="15" fill="rgb(221,10,30)" fg:x="234" fg:w="5"/><text x="33.5359%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.57%)</title><rect x="33.4282%" y="149" width="0.5690%" height="15" fill="rgb(210,229,1)" fg:x="235" fg:w="4"/><text x="33.6782%" y="159.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (2 samples, 0.28%)</title><rect x="33.7127%" y="133" width="0.2845%" height="15" fill="rgb(222,148,37)" fg:x="237" fg:w="2"/><text x="33.9627%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (231 samples, 32.86%)</title><rect x="1.2802%" y="261" width="32.8592%" height="15" fill="rgb(234,67,33)" fg:x="9" fg:w="231"/><text x="1.5302%" y="271.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::Sp..</text></g><g><title>[libc.so.6] (1 samples, 0.14%)</title><rect x="33.9972%" y="245" width="0.1422%" height="15" fill="rgb(247,98,35)" fg:x="239" fg:w="1"/><text x="34.2472%" y="255.50"></text></g><g><title>&lt;tftp::packet::DataPacket as tftp::packet::ByteConverter&gt;::to_bytes (232 samples, 33.00%)</title><rect x="1.2802%" y="309" width="33.0014%" height="15" fill="rgb(247,138,52)" fg:x="9" fg:w="232"/><text x="1.5302%" y="319.50">&lt;tftp::packet::DataPacket as tftp::packet::ByteConver..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (232 samples, 33.00%)</title><rect x="1.2802%" y="293" width="33.0014%" height="15" fill="rgb(213,79,30)" fg:x="9" fg:w="232"/><text x="1.5302%" y="303.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (232 samples, 33.00%)</title><rect x="1.2802%" y="277" width="33.0014%" height="15" fill="rgb(246,177,23)" fg:x="9" fg:w="232"/><text x="1.5302%" y="287.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::F..</text></g><g><title>[libc.so.6] (1 samples, 0.14%)</title><rect x="34.1394%" y="261" width="0.1422%" height="15" fill="rgb(230,62,27)" fg:x="240" fg:w="1"/><text x="34.3894%" y="271.50"></text></g><g><title>core::array::iter::&lt;impl core::iter::traits::collect::IntoIterator for [T: N]&gt;::into_iter (1 samples, 0.14%)</title><rect x="34.2817%" y="309" width="0.1422%" height="15" fill="rgb(216,154,8)" fg:x="241" fg:w="1"/><text x="34.5317%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::chain (1 samples, 0.14%)</title><rect x="34.4239%" y="309" width="0.1422%" height="15" fill="rgb(244,35,45)" fg:x="242" fg:w="1"/><text x="34.6739%" y="319.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.14%)</title><rect x="34.4239%" y="293" width="0.1422%" height="15" fill="rgb(251,115,12)" fg:x="242" fg:w="1"/><text x="34.6739%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.14%)</title><rect x="34.5661%" y="213" width="0.1422%" height="15" fill="rgb(240,54,50)" fg:x="243" fg:w="1"/><text x="34.8161%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.14%)</title><rect x="34.5661%" y="197" width="0.1422%" height="15" fill="rgb(233,84,52)" fg:x="243" fg:w="1"/><text x="34.8161%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::by_ref_sized::ByRefSized&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.28%)</title><rect x="34.8506%" y="165" width="0.2845%" height="15" fill="rgb(207,117,47)" fg:x="245" fg:w="2"/><text x="35.1006%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.28%)</title><rect x="34.8506%" y="149" width="0.2845%" height="15" fill="rgb(249,43,39)" fg:x="245" fg:w="2"/><text x="35.1006%" y="159.50"></text></g><g><title>&lt;core::const_closure::ConstFnMutClosure&lt;&amp;mut A,Function&gt; as core::ops::function::FnMut&lt;ClosureArguments&gt;&gt;::call_mut (1 samples, 0.14%)</title><rect x="34.9929%" y="133" width="0.1422%" height="15" fill="rgb(209,38,44)" fg:x="246" fg:w="1"/><text x="35.2429%" y="143.50"></text></g><g><title>core::ops::function::Fn::call (1 samples, 0.14%)</title><rect x="34.9929%" y="117" width="0.1422%" height="15" fill="rgb(236,212,23)" fg:x="246" fg:w="1"/><text x="35.2429%" y="127.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2_imp (1 samples, 0.14%)</title><rect x="34.9929%" y="101" width="0.1422%" height="15" fill="rgb(242,79,21)" fg:x="246" fg:w="1"/><text x="35.2429%" y="111.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold::{{closure}} (1 samples, 0.14%)</title><rect x="34.9929%" y="85" width="0.1422%" height="15" fill="rgb(211,96,35)" fg:x="246" fg:w="1"/><text x="35.2429%" y="95.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.57%)</title><rect x="34.7084%" y="181" width="0.5690%" height="15" fill="rgb(253,215,40)" fg:x="244" fg:w="4"/><text x="34.9584%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::array::iter::IntoIter&lt;u8,2_usize&gt;&gt; (1 samples, 0.14%)</title><rect x="35.1351%" y="165" width="0.1422%" height="15" fill="rgb(211,81,21)" fg:x="247" fg:w="1"/><text x="35.3851%" y="175.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.14%)</title><rect x="35.1351%" y="149" width="0.1422%" height="15" fill="rgb(208,190,38)" fg:x="247" fg:w="1"/><text x="35.3851%" y="159.50"></text></g><g><title>core::array::iter::IntoIter&lt;T,_&gt;::as_mut_slice (1 samples, 0.14%)</title><rect x="35.1351%" y="133" width="0.1422%" height="15" fill="rgb(235,213,38)" fg:x="247" fg:w="1"/><text x="35.3851%" y="143.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (1 samples, 0.14%)</title><rect x="35.1351%" y="117" width="0.1422%" height="15" fill="rgb(237,122,38)" fg:x="247" fg:w="1"/><text x="35.3851%" y="127.50"></text></g><g><title>&lt;core::ops::index_range::IndexRange as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.14%)</title><rect x="35.1351%" y="101" width="0.1422%" height="15" fill="rgb(244,218,35)" fg:x="247" fg:w="1"/><text x="35.3851%" y="111.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.14%)</title><rect x="35.1351%" y="85" width="0.1422%" height="15" fill="rgb(240,68,47)" fg:x="247" fg:w="1"/><text x="35.3851%" y="95.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.14%)</title><rect x="35.1351%" y="69" width="0.1422%" height="15" fill="rgb(210,16,53)" fg:x="247" fg:w="1"/><text x="35.3851%" y="79.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (3 samples, 0.43%)</title><rect x="48.7909%" y="149" width="0.4267%" height="15" fill="rgb(235,124,12)" fg:x="343" fg:w="3"/><text x="49.0409%" y="159.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (3 samples, 0.43%)</title><rect x="48.7909%" y="133" width="0.4267%" height="15" fill="rgb(224,169,11)" fg:x="343" fg:w="3"/><text x="49.0409%" y="143.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (49 samples, 6.97%)</title><rect x="43.6700%" y="165" width="6.9701%" height="15" fill="rgb(250,166,2)" fg:x="307" fg:w="49"/><text x="43.9200%" y="175.50">&lt;alloc::v..</text></g><g><title>core::ptr::read (10 samples, 1.42%)</title><rect x="49.2176%" y="149" width="1.4225%" height="15" fill="rgb(242,216,29)" fg:x="346" fg:w="10"/><text x="49.4676%" y="159.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (4 samples, 0.57%)</title><rect x="50.0711%" y="133" width="0.5690%" height="15" fill="rgb(230,116,27)" fg:x="352" fg:w="4"/><text x="50.3211%" y="143.50"></text></g><g><title>alloc::vec::set_len_on_drop::SetLenOnDrop::current_len (1 samples, 0.14%)</title><rect x="55.1920%" y="133" width="0.1422%" height="15" fill="rgb(228,99,48)" fg:x="388" fg:w="1"/><text x="55.4420%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (12 samples, 1.71%)</title><rect x="55.3343%" y="133" width="1.7070%" height="15" fill="rgb(253,11,6)" fg:x="389" fg:w="12"/><text x="55.5843%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (12 samples, 1.71%)</title><rect x="55.3343%" y="117" width="1.7070%" height="15" fill="rgb(247,143,39)" fg:x="389" fg:w="12"/><text x="55.5843%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (56 samples, 7.97%)</title><rect x="50.6401%" y="165" width="7.9659%" height="15" fill="rgb(236,97,10)" fg:x="356" fg:w="56"/><text x="50.8901%" y="175.50">core::iter:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::{{closure}} (41 samples, 5.83%)</title><rect x="52.7738%" y="149" width="5.8321%" height="15" fill="rgb(233,208,19)" fg:x="371" fg:w="41"/><text x="53.0238%" y="159.50">alloc::..</text></g><g><title>core::ptr::write (11 samples, 1.56%)</title><rect x="57.0413%" y="133" width="1.5647%" height="15" fill="rgb(216,164,2)" fg:x="401" fg:w="11"/><text x="57.2913%" y="143.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.14%)</title><rect x="58.7482%" y="53" width="0.1422%" height="15" fill="rgb(220,129,5)" fg:x="413" fg:w="1"/><text x="58.9982%" y="63.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::convert::From&lt;core::ptr::unique::Unique&lt;T&gt;&gt;&gt;::from (1 samples, 0.14%)</title><rect x="58.7482%" y="37" width="0.1422%" height="15" fill="rgb(242,17,10)" fg:x="413" fg:w="1"/><text x="58.9982%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (172 samples, 24.47%)</title><rect x="34.5661%" y="245" width="24.4666%" height="15" fill="rgb(242,107,0)" fg:x="243" fg:w="172"/><text x="34.8161%" y="255.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::sp..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (172 samples, 24.47%)</title><rect x="34.5661%" y="229" width="24.4666%" height="15" fill="rgb(251,28,31)" fg:x="243" fg:w="172"/><text x="34.8161%" y="239.50">alloc::vec::Vec&lt;T,A&gt;::extend_trusted</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (171 samples, 24.32%)</title><rect x="34.7084%" y="213" width="24.3243%" height="15" fill="rgb(233,223,10)" fg:x="244" fg:w="171"/><text x="34.9584%" y="223.50">core::iter::traits::iterator::Iterator:..</text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (171 samples, 24.32%)</title><rect x="34.7084%" y="197" width="24.3243%" height="15" fill="rgb(215,21,27)" fg:x="244" fg:w="171"/><text x="34.9584%" y="207.50">&lt;core::iter::adapters::chain::Chain&lt;A,B..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (167 samples, 23.76%)</title><rect x="35.2774%" y="181" width="23.7553%" height="15" fill="rgb(232,23,21)" fg:x="248" fg:w="167"/><text x="35.5274%" y="191.50">core::iter::traits::iterator::Iterator..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;u8&gt;&gt; (3 samples, 0.43%)</title><rect x="58.6060%" y="165" width="0.4267%" height="15" fill="rgb(244,5,23)" fg:x="412" fg:w="3"/><text x="58.8560%" y="175.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.43%)</title><rect x="58.6060%" y="149" width="0.4267%" height="15" fill="rgb(226,81,46)" fg:x="412" fg:w="3"/><text x="58.8560%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u8,alloc::alloc::Global&gt;&gt; (3 samples, 0.43%)</title><rect x="58.6060%" y="133" width="0.4267%" height="15" fill="rgb(247,70,30)" fg:x="412" fg:w="3"/><text x="58.8560%" y="143.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.43%)</title><rect x="58.6060%" y="117" width="0.4267%" height="15" fill="rgb(212,68,19)" fg:x="412" fg:w="3"/><text x="58.8560%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.28%)</title><rect x="58.7482%" y="101" width="0.2845%" height="15" fill="rgb(240,187,13)" fg:x="413" fg:w="2"/><text x="58.9982%" y="111.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.28%)</title><rect x="58.7482%" y="85" width="0.2845%" height="15" fill="rgb(223,113,26)" fg:x="413" fg:w="2"/><text x="58.9982%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.28%)</title><rect x="58.7482%" y="69" width="0.2845%" height="15" fill="rgb(206,192,2)" fg:x="413" fg:w="2"/><text x="58.9982%" y="79.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.14%)</title><rect x="58.8905%" y="53" width="0.1422%" height="15" fill="rgb(241,108,4)" fg:x="414" fg:w="1"/><text x="59.1405%" y="63.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.14%)</title><rect x="58.8905%" y="37" width="0.1422%" height="15" fill="rgb(247,173,49)" fg:x="414" fg:w="1"/><text x="59.1405%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (174 samples, 24.75%)</title><rect x="34.5661%" y="293" width="24.7511%" height="15" fill="rgb(224,114,35)" fg:x="243" fg:w="174"/><text x="34.8161%" y="303.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::trai..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (174 samples, 24.75%)</title><rect x="34.5661%" y="277" width="24.7511%" height="15" fill="rgb(245,159,27)" fg:x="243" fg:w="174"/><text x="34.8161%" y="287.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (174 samples, 24.75%)</title><rect x="34.5661%" y="261" width="24.7511%" height="15" fill="rgb(245,172,44)" fg:x="243" fg:w="174"/><text x="34.8161%" y="271.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.28%)</title><rect x="59.0327%" y="245" width="0.2845%" height="15" fill="rgb(236,23,11)" fg:x="415" fg:w="2"/><text x="59.2827%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.28%)</title><rect x="59.0327%" y="229" width="0.2845%" height="15" fill="rgb(205,117,38)" fg:x="415" fg:w="2"/><text x="59.2827%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.28%)</title><rect x="59.0327%" y="213" width="0.2845%" height="15" fill="rgb(237,72,25)" fg:x="415" fg:w="2"/><text x="59.2827%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.28%)</title><rect x="59.0327%" y="197" width="0.2845%" height="15" fill="rgb(244,70,9)" fg:x="415" fg:w="2"/><text x="59.2827%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.28%)</title><rect x="59.0327%" y="181" width="0.2845%" height="15" fill="rgb(217,125,39)" fg:x="415" fg:w="2"/><text x="59.2827%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.28%)</title><rect x="59.0327%" y="165" width="0.2845%" height="15" fill="rgb(235,36,10)" fg:x="415" fg:w="2"/><text x="59.2827%" y="175.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.28%)</title><rect x="59.0327%" y="149" width="0.2845%" height="15" fill="rgb(251,123,47)" fg:x="415" fg:w="2"/><text x="59.2827%" y="159.50"></text></g><g><title>malloc (2 samples, 0.28%)</title><rect x="59.0327%" y="133" width="0.2845%" height="15" fill="rgb(221,13,13)" fg:x="415" fg:w="2"/><text x="59.2827%" y="143.50"></text></g><g><title>[libc.so.6] (2 samples, 0.28%)</title><rect x="59.0327%" y="117" width="0.2845%" height="15" fill="rgb(238,131,9)" fg:x="415" fg:w="2"/><text x="59.2827%" y="127.50"></text></g><g><title>&lt;tftp::packet::Packet as tftp::packet::ByteConverter&gt;::to_bytes (409 samples, 58.18%)</title><rect x="1.2802%" y="325" width="58.1792%" height="15" fill="rgb(211,50,8)" fg:x="9" fg:w="409"/><text x="1.5302%" y="335.50">&lt;tftp::packet::Packet as tftp::packet::ByteConverter&gt;::to_bytes</text></g><g><title>core::iter::traits::iterator::Iterator::collect (175 samples, 24.89%)</title><rect x="34.5661%" y="309" width="24.8933%" height="15" fill="rgb(245,182,24)" fg:x="243" fg:w="175"/><text x="34.8161%" y="319.50">core::iter::traits::iterator::Iterator::..</text></g><g><title>memcpy (1 samples, 0.14%)</title><rect x="59.3172%" y="293" width="0.1422%" height="15" fill="rgb(242,14,37)" fg:x="417" fg:w="1"/><text x="59.5672%" y="303.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.14%)</title><rect x="59.4595%" y="309" width="0.1422%" height="15" fill="rgb(246,228,12)" fg:x="418" fg:w="1"/><text x="59.7095%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::Error&gt; (2 samples, 0.28%)</title><rect x="59.6017%" y="261" width="0.2845%" height="15" fill="rgb(213,55,15)" fg:x="419" fg:w="2"/><text x="59.8517%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::repr_bitpacked::Repr&gt; (2 samples, 0.28%)</title><rect x="59.6017%" y="245" width="0.2845%" height="15" fill="rgb(209,9,3)" fg:x="419" fg:w="2"/><text x="59.8517%" y="255.50"></text></g><g><title>&lt;std::io::error::repr_bitpacked::Repr as core::ops::drop::Drop&gt;::drop (2 samples, 0.28%)</title><rect x="59.6017%" y="229" width="0.2845%" height="15" fill="rgb(230,59,30)" fg:x="419" fg:w="2"/><text x="59.8517%" y="239.50"></text></g><g><title>std::io::error::repr_bitpacked::decode_repr (1 samples, 0.14%)</title><rect x="59.7440%" y="213" width="0.1422%" height="15" fill="rgb(209,121,21)" fg:x="420" fg:w="1"/><text x="59.9940%" y="223.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (5 samples, 0.71%)</title><rect x="59.6017%" y="309" width="0.7112%" height="15" fill="rgb(220,109,13)" fg:x="419" fg:w="5"/><text x="59.8517%" y="319.50"></text></g><g><title>core::ops::function::FnOnce::call_once (5 samples, 0.71%)</title><rect x="59.6017%" y="293" width="0.7112%" height="15" fill="rgb(232,18,1)" fg:x="419" fg:w="5"/><text x="59.8517%" y="303.50"></text></g><g><title>tftp::io::from_io_err (5 samples, 0.71%)</title><rect x="59.6017%" y="277" width="0.7112%" height="15" fill="rgb(215,41,42)" fg:x="419" fg:w="5"/><text x="59.8517%" y="287.50"></text></g><g><title>std::io::error::Error::kind (3 samples, 0.43%)</title><rect x="59.8862%" y="261" width="0.4267%" height="15" fill="rgb(224,123,36)" fg:x="421" fg:w="3"/><text x="60.1362%" y="271.50"></text></g><g><title>std::io::error::repr_bitpacked::Repr::data (3 samples, 0.43%)</title><rect x="59.8862%" y="245" width="0.4267%" height="15" fill="rgb(240,125,3)" fg:x="421" fg:w="3"/><text x="60.1362%" y="255.50"></text></g><g><title>std::io::error::repr_bitpacked::decode_repr (3 samples, 0.43%)</title><rect x="59.8862%" y="229" width="0.4267%" height="15" fill="rgb(205,98,50)" fg:x="421" fg:w="3"/><text x="60.1362%" y="239.50"></text></g><g><title>epoll_wait (17 samples, 2.42%)</title><rect x="60.7397%" y="277" width="2.4182%" height="15" fill="rgb(205,185,37)" fg:x="427" fg:w="17"/><text x="60.9897%" y="287.50">ep..</text></g><g><title>&lt;tftp::socket::StdSocket as tftp::socket::Socket&gt;::recv_from (27 samples, 3.84%)</title><rect x="59.4595%" y="325" width="3.8407%" height="15" fill="rgb(238,207,15)" fg:x="418" fg:w="27"/><text x="59.7095%" y="335.50">&lt;tft..</text></g><g><title>polling::Poller::wait (21 samples, 2.99%)</title><rect x="60.3129%" y="309" width="2.9872%" height="15" fill="rgb(213,199,42)" fg:x="424" fg:w="21"/><text x="60.5629%" y="319.50">pol..</text></g><g><title>polling::epoll::Poller::wait (21 samples, 2.99%)</title><rect x="60.3129%" y="293" width="2.9872%" height="15" fill="rgb(235,201,11)" fg:x="424" fg:w="21"/><text x="60.5629%" y="303.50">pol..</text></g><g><title>polling::epoll::Poller::modify (1 samples, 0.14%)</title><rect x="63.1579%" y="277" width="0.1422%" height="15" fill="rgb(207,46,11)" fg:x="444" fg:w="1"/><text x="63.4079%" y="287.50"></text></g><g><title>polling::epoll::Poller::ctl (1 samples, 0.14%)</title><rect x="63.1579%" y="261" width="0.1422%" height="15" fill="rgb(241,35,35)" fg:x="444" fg:w="1"/><text x="63.4079%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.14%)</title><rect x="63.3001%" y="309" width="0.1422%" height="15" fill="rgb(243,32,47)" fg:x="445" fg:w="1"/><text x="63.5501%" y="319.50"></text></g><g><title>&lt;tftp::socket::StdSocket as tftp::socket::Socket&gt;::send_to (3 samples, 0.43%)</title><rect x="63.3001%" y="325" width="0.4267%" height="15" fill="rgb(247,202,23)" fg:x="445" fg:w="3"/><text x="63.5501%" y="335.50"></text></g><g><title>std::net::udp::UdpSocket::send_to (2 samples, 0.28%)</title><rect x="63.4424%" y="309" width="0.2845%" height="15" fill="rgb(219,102,11)" fg:x="446" fg:w="2"/><text x="63.6924%" y="319.50"></text></g><g><title>&lt;tftp::std_compat::io::ErrorKind as core::cmp::PartialEq&gt;::eq (1 samples, 0.14%)</title><rect x="63.7269%" y="325" width="0.1422%" height="15" fill="rgb(243,110,44)" fg:x="448" fg:w="1"/><text x="63.9769%" y="335.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;Node,Type&gt;::idx (1 samples, 0.14%)</title><rect x="64.0114%" y="213" width="0.1422%" height="15" fill="rgb(222,74,54)" fg:x="450" fg:w="1"/><text x="64.2614%" y="223.50"></text></g><g><title>alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V,A&gt;::remove_entry (4 samples, 0.57%)</title><rect x="63.8691%" y="277" width="0.5690%" height="15" fill="rgb(216,99,12)" fg:x="449" fg:w="4"/><text x="64.1191%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V,A&gt;::remove_kv (4 samples, 0.57%)</title><rect x="63.8691%" y="261" width="0.5690%" height="15" fill="rgb(226,22,26)" fg:x="449" fg:w="4"/><text x="64.1191%" y="271.50"></text></g><g><title>alloc::collections::btree::remove::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_kv_tracking (4 samples, 0.57%)</title><rect x="63.8691%" y="245" width="0.5690%" height="15" fill="rgb(217,163,10)" fg:x="449" fg:w="4"/><text x="64.1191%" y="255.50"></text></g><g><title>alloc::collections::btree::remove::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (4 samples, 0.57%)</title><rect x="63.8691%" y="229" width="0.5690%" height="15" fill="rgb(213,25,53)" fg:x="449" fg:w="4"/><text x="64.1191%" y="239.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::choose_parent_kv (2 samples, 0.28%)</title><rect x="64.1536%" y="213" width="0.2845%" height="15" fill="rgb(252,105,26)" fg:x="451" fg:w="2"/><text x="64.4036%" y="223.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (2 samples, 0.28%)</title><rect x="64.1536%" y="197" width="0.2845%" height="15" fill="rgb(220,39,43)" fg:x="451" fg:w="2"/><text x="64.4036%" y="207.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove_entry (6 samples, 0.85%)</title><rect x="63.8691%" y="293" width="0.8535%" height="15" fill="rgb(229,68,48)" fg:x="449" fg:w="6"/><text x="64.1191%" y="303.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (2 samples, 0.28%)</title><rect x="64.4381%" y="277" width="0.2845%" height="15" fill="rgb(252,8,32)" fg:x="453" fg:w="2"/><text x="64.6881%" y="287.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (2 samples, 0.28%)</title><rect x="64.4381%" y="261" width="0.2845%" height="15" fill="rgb(223,20,43)" fg:x="453" fg:w="2"/><text x="64.6881%" y="271.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (2 samples, 0.28%)</title><rect x="64.4381%" y="245" width="0.2845%" height="15" fill="rgb(229,81,49)" fg:x="453" fg:w="2"/><text x="64.6881%" y="255.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (1 samples, 0.14%)</title><rect x="64.5804%" y="229" width="0.1422%" height="15" fill="rgb(236,28,36)" fg:x="454" fg:w="1"/><text x="64.8304%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.14%)</title><rect x="64.5804%" y="213" width="0.1422%" height="15" fill="rgb(249,185,26)" fg:x="454" fg:w="1"/><text x="64.8304%" y="223.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.14%)</title><rect x="64.5804%" y="197" width="0.1422%" height="15" fill="rgb(249,174,33)" fg:x="454" fg:w="1"/><text x="64.8304%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.14%)</title><rect x="64.5804%" y="181" width="0.1422%" height="15" fill="rgb(233,201,37)" fg:x="454" fg:w="1"/><text x="64.8304%" y="191.50"></text></g><g><title>core::ptr::slice_from_raw_parts (1 samples, 0.14%)</title><rect x="64.5804%" y="165" width="0.1422%" height="15" fill="rgb(221,78,26)" fg:x="454" fg:w="1"/><text x="64.8304%" y="175.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (1 samples, 0.14%)</title><rect x="64.5804%" y="149" width="0.1422%" height="15" fill="rgb(250,127,30)" fg:x="454" fg:w="1"/><text x="64.8304%" y="159.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove::{{closure}} (1 samples, 0.14%)</title><rect x="64.7226%" y="277" width="0.1422%" height="15" fill="rgb(230,49,44)" fg:x="455" fg:w="1"/><text x="64.9726%" y="287.50"></text></g><g><title>[libc.so.6] (1 samples, 0.14%)</title><rect x="64.7226%" y="261" width="0.1422%" height="15" fill="rgb(229,67,23)" fg:x="455" fg:w="1"/><text x="64.9726%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (9 samples, 1.28%)</title><rect x="63.8691%" y="309" width="1.2802%" height="15" fill="rgb(249,83,47)" fg:x="449" fg:w="9"/><text x="64.1191%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 0.43%)</title><rect x="64.7226%" y="293" width="0.4267%" height="15" fill="rgb(215,43,3)" fg:x="455" fg:w="3"/><text x="64.9726%" y="303.50"></text></g><g><title>memcpy (2 samples, 0.28%)</title><rect x="64.8649%" y="277" width="0.2845%" height="15" fill="rgb(238,154,13)" fg:x="456" fg:w="2"/><text x="65.1149%" y="287.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::next (1 samples, 0.14%)</title><rect x="65.1494%" y="309" width="0.1422%" height="15" fill="rgb(219,56,2)" fg:x="458" fg:w="1"/><text x="65.3994%" y="319.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_next (1 samples, 0.14%)</title><rect x="65.1494%" y="293" width="0.1422%" height="15" fill="rgb(233,0,4)" fg:x="458" fg:w="1"/><text x="65.3994%" y="303.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::is_empty (1 samples, 0.14%)</title><rect x="65.1494%" y="277" width="0.1422%" height="15" fill="rgb(235,30,7)" fg:x="458" fg:w="1"/><text x="65.3994%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u64&gt;::le (1 samples, 0.14%)</title><rect x="65.1494%" y="261" width="0.1422%" height="15" fill="rgb(250,79,13)" fg:x="458" fg:w="1"/><text x="65.3994%" y="271.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.14%)</title><rect x="65.2916%" y="181" width="0.1422%" height="15" fill="rgb(211,146,34)" fg:x="459" fg:w="1"/><text x="65.5416%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.14%)</title><rect x="65.2916%" y="165" width="0.1422%" height="15" fill="rgb(228,22,38)" fg:x="459" fg:w="1"/><text x="65.5416%" y="175.50"></text></g><g><title>&lt;tftp::storage::FileReader&lt;T&gt; as tftp::storage::BlockReader&gt;::free_block (12 samples, 1.71%)</title><rect x="63.8691%" y="325" width="1.7070%" height="15" fill="rgb(235,168,5)" fg:x="449" fg:w="12"/><text x="64.1191%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.28%)</title><rect x="65.2916%" y="309" width="0.2845%" height="15" fill="rgb(221,155,16)" fg:x="459" fg:w="2"/><text x="65.5416%" y="319.50"></text></g><g><title>&lt;tftp::storage::FileReader&lt;T&gt; as tftp::storage::BlockReader&gt;::free_block::{{closure}} (2 samples, 0.28%)</title><rect x="65.2916%" y="293" width="0.2845%" height="15" fill="rgb(215,215,53)" fg:x="459" fg:w="2"/><text x="65.5416%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;tftp::storage::TimedBlock&gt; (2 samples, 0.28%)</title><rect x="65.2916%" y="277" width="0.2845%" height="15" fill="rgb(223,4,10)" fg:x="459" fg:w="2"/><text x="65.5416%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.28%)</title><rect x="65.2916%" y="261" width="0.2845%" height="15" fill="rgb(234,103,6)" fg:x="459" fg:w="2"/><text x="65.5416%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.28%)</title><rect x="65.2916%" y="245" width="0.2845%" height="15" fill="rgb(227,97,0)" fg:x="459" fg:w="2"/><text x="65.5416%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.28%)</title><rect x="65.2916%" y="229" width="0.2845%" height="15" fill="rgb(234,150,53)" fg:x="459" fg:w="2"/><text x="65.5416%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.28%)</title><rect x="65.2916%" y="213" width="0.2845%" height="15" fill="rgb(228,201,54)" fg:x="459" fg:w="2"/><text x="65.5416%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.28%)</title><rect x="65.2916%" y="197" width="0.2845%" height="15" fill="rgb(222,22,37)" fg:x="459" fg:w="2"/><text x="65.5416%" y="207.50"></text></g><g><title>cfree (1 samples, 0.14%)</title><rect x="65.4339%" y="181" width="0.1422%" height="15" fill="rgb(237,53,32)" fg:x="460" fg:w="1"/><text x="65.6839%" y="191.50"></text></g><g><title>[libc.so.6] (1 samples, 0.14%)</title><rect x="65.4339%" y="165" width="0.1422%" height="15" fill="rgb(233,25,53)" fg:x="460" fg:w="1"/><text x="65.6839%" y="175.50"></text></g><g><title>[libc.so.6] (1 samples, 0.14%)</title><rect x="65.4339%" y="149" width="0.1422%" height="15" fill="rgb(210,40,34)" fg:x="460" fg:w="1"/><text x="65.6839%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.14%)</title><rect x="66.0028%" y="309" width="0.1422%" height="15" fill="rgb(241,220,44)" fg:x="464" fg:w="1"/><text x="66.2528%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::allocator (1 samples, 0.14%)</title><rect x="66.0028%" y="293" width="0.1422%" height="15" fill="rgb(235,28,35)" fg:x="464" fg:w="1"/><text x="66.2528%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocator (1 samples, 0.14%)</title><rect x="66.0028%" y="277" width="0.1422%" height="15" fill="rgb(210,56,17)" fg:x="464" fg:w="1"/><text x="66.2528%" y="287.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,Type&gt;::force (1 samples, 0.14%)</title><rect x="66.1451%" y="277" width="0.1422%" height="15" fill="rgb(224,130,29)" fg:x="465" fg:w="1"/><text x="66.3951%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get_mut (3 samples, 0.43%)</title><rect x="66.1451%" y="309" width="0.4267%" height="15" fill="rgb(235,212,8)" fg:x="465" fg:w="3"/><text x="66.3951%" y="319.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (3 samples, 0.43%)</title><rect x="66.1451%" y="293" width="0.4267%" height="15" fill="rgb(223,33,50)" fg:x="465" fg:w="3"/><text x="66.3951%" y="303.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (2 samples, 0.28%)</title><rect x="66.2873%" y="277" width="0.2845%" height="15" fill="rgb(219,149,13)" fg:x="466" fg:w="2"/><text x="66.5373%" y="287.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (2 samples, 0.28%)</title><rect x="66.2873%" y="261" width="0.2845%" height="15" fill="rgb(250,156,29)" fg:x="466" fg:w="2"/><text x="66.5373%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.28%)</title><rect x="66.2873%" y="245" width="0.2845%" height="15" fill="rgb(216,193,19)" fg:x="466" fg:w="2"/><text x="66.5373%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.28%)</title><rect x="66.2873%" y="229" width="0.2845%" height="15" fill="rgb(216,135,14)" fg:x="466" fg:w="2"/><text x="66.5373%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.14%)</title><rect x="66.7141%" y="229" width="0.1422%" height="15" fill="rgb(241,47,5)" fg:x="469" fg:w="1"/><text x="66.9641%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.14%)</title><rect x="66.7141%" y="213" width="0.1422%" height="15" fill="rgb(233,42,35)" fg:x="469" fg:w="1"/><text x="66.9641%" y="223.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::reborrow (1 samples, 0.14%)</title><rect x="66.8563%" y="229" width="0.1422%" height="15" fill="rgb(231,13,6)" fg:x="470" fg:w="1"/><text x="67.1063%" y="239.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (3 samples, 0.43%)</title><rect x="66.7141%" y="277" width="0.4267%" height="15" fill="rgb(207,181,40)" fg:x="469" fg:w="3"/><text x="66.9641%" y="287.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (3 samples, 0.43%)</title><rect x="66.7141%" y="261" width="0.4267%" height="15" fill="rgb(254,173,49)" fg:x="469" fg:w="3"/><text x="66.9641%" y="271.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (3 samples, 0.43%)</title><rect x="66.7141%" y="245" width="0.4267%" height="15" fill="rgb(221,1,38)" fg:x="469" fg:w="3"/><text x="66.9641%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.14%)</title><rect x="66.9986%" y="229" width="0.1422%" height="15" fill="rgb(206,124,46)" fg:x="471" fg:w="1"/><text x="67.2486%" y="239.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.14%)</title><rect x="66.9986%" y="213" width="0.1422%" height="15" fill="rgb(249,21,11)" fg:x="471" fg:w="1"/><text x="67.2486%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.14%)</title><rect x="66.9986%" y="197" width="0.1422%" height="15" fill="rgb(222,201,40)" fg:x="471" fg:w="1"/><text x="67.2486%" y="207.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (5 samples, 0.71%)</title><rect x="66.5718%" y="293" width="0.7112%" height="15" fill="rgb(235,61,29)" fg:x="468" fg:w="5"/><text x="66.8218%" y="303.50"></text></g><g><title>memcpy (1 samples, 0.14%)</title><rect x="67.1408%" y="277" width="0.1422%" height="15" fill="rgb(219,207,3)" fg:x="472" fg:w="1"/><text x="67.3908%" y="287.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (1 samples, 0.14%)</title><rect x="67.8521%" y="213" width="0.1422%" height="15" fill="rgb(222,56,46)" fg:x="477" fg:w="1"/><text x="68.1021%" y="223.50"></text></g><g><title>memcpy (1 samples, 0.14%)</title><rect x="67.8521%" y="197" width="0.1422%" height="15" fill="rgb(239,76,54)" fg:x="477" fg:w="1"/><text x="68.1021%" y="207.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (11 samples, 1.56%)</title><rect x="66.5718%" y="309" width="1.5647%" height="15" fill="rgb(231,124,27)" fg:x="468" fg:w="11"/><text x="66.8218%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (6 samples, 0.85%)</title><rect x="67.2831%" y="293" width="0.8535%" height="15" fill="rgb(249,195,6)" fg:x="473" fg:w="6"/><text x="67.5331%" y="303.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (4 samples, 0.57%)</title><rect x="67.5676%" y="277" width="0.5690%" height="15" fill="rgb(237,174,47)" fg:x="475" fg:w="4"/><text x="67.8176%" y="287.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (4 samples, 0.57%)</title><rect x="67.5676%" y="261" width="0.5690%" height="15" fill="rgb(206,201,31)" fg:x="475" fg:w="4"/><text x="67.8176%" y="271.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (4 samples, 0.57%)</title><rect x="67.5676%" y="245" width="0.5690%" height="15" fill="rgb(231,57,52)" fg:x="475" fg:w="4"/><text x="67.8176%" y="255.50"></text></g><g><title>alloc::collections::btree::node::slice_insert (3 samples, 0.43%)</title><rect x="67.7098%" y="229" width="0.4267%" height="15" fill="rgb(248,177,22)" fg:x="476" fg:w="3"/><text x="67.9598%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::len (1 samples, 0.14%)</title><rect x="67.9943%" y="213" width="0.1422%" height="15" fill="rgb(215,211,37)" fg:x="478" fg:w="1"/><text x="68.2443%" y="223.50"></text></g><g><title>core::ptr::metadata::metadata (1 samples, 0.14%)</title><rect x="67.9943%" y="197" width="0.1422%" height="15" fill="rgb(241,128,51)" fg:x="478" fg:w="1"/><text x="68.2443%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tftp::storage::TimedBlock&gt;&gt; (1 samples, 0.14%)</title><rect x="68.1366%" y="309" width="0.1422%" height="15" fill="rgb(227,165,31)" fg:x="479" fg:w="1"/><text x="68.3866%" y="319.50"></text></g><g><title>tftp::instant_callback (1 samples, 0.14%)</title><rect x="68.2788%" y="309" width="0.1422%" height="15" fill="rgb(228,167,24)" fg:x="480" fg:w="1"/><text x="68.5288%" y="319.50"></text></g><g><title>tftp::std_compat::time::Instant::elapsed (1 samples, 0.14%)</title><rect x="68.4211%" y="309" width="0.1422%" height="15" fill="rgb(228,143,12)" fg:x="481" fg:w="1"/><text x="68.6711%" y="319.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.14%)</title><rect x="68.4211%" y="293" width="0.1422%" height="15" fill="rgb(249,149,8)" fg:x="481" fg:w="1"/><text x="68.6711%" y="303.50"></text></g><g><title>tftp::instant_callback::{{closure}} (1 samples, 0.14%)</title><rect x="68.4211%" y="277" width="0.1422%" height="15" fill="rgb(243,35,44)" fg:x="481" fg:w="1"/><text x="68.6711%" y="287.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.14%)</title><rect x="68.4211%" y="261" width="0.1422%" height="15" fill="rgb(246,89,9)" fg:x="481" fg:w="1"/><text x="68.6711%" y="271.50"></text></g><g><title>std::sys::unix::cvt (1 samples, 0.14%)</title><rect x="68.4211%" y="245" width="0.1422%" height="15" fill="rgb(233,213,13)" fg:x="481" fg:w="1"/><text x="68.6711%" y="255.50"></text></g><g><title>&lt;i32 as std::sys::unix::IsMinusOne&gt;::is_minus_one (1 samples, 0.14%)</title><rect x="68.4211%" y="229" width="0.1422%" height="15" fill="rgb(233,141,41)" fg:x="481" fg:w="1"/><text x="68.6711%" y="239.50"></text></g><g><title>&lt;alloc::vec::ExtendElement&lt;T&gt; as alloc::vec::ExtendWith&lt;T&gt;&gt;::next (5 samples, 0.71%)</title><rect x="73.6842%" y="261" width="0.7112%" height="15" fill="rgb(239,167,4)" fg:x="518" fg:w="5"/><text x="73.9342%" y="271.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for u8&gt;::clone (1 samples, 0.14%)</title><rect x="74.2532%" y="245" width="0.1422%" height="15" fill="rgb(209,217,16)" fg:x="522" fg:w="1"/><text x="74.5032%" y="255.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.28%)</title><rect x="74.6799%" y="149" width="0.2845%" height="15" fill="rgb(219,88,35)" fg:x="525" fg:w="2"/><text x="74.9299%" y="159.50"></text></g><g><title>malloc (2 samples, 0.28%)</title><rect x="74.6799%" y="133" width="0.2845%" height="15" fill="rgb(220,193,23)" fg:x="525" fg:w="2"/><text x="74.9299%" y="143.50"></text></g><g><title>[libc.so.6] (1 samples, 0.14%)</title><rect x="74.8222%" y="117" width="0.1422%" height="15" fill="rgb(230,90,52)" fg:x="526" fg:w="1"/><text x="75.0722%" y="127.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (1 samples, 0.14%)</title><rect x="74.9644%" y="149" width="0.1422%" height="15" fill="rgb(252,106,19)" fg:x="527" fg:w="1"/><text x="75.2144%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.85%)</title><rect x="74.3954%" y="197" width="0.8535%" height="15" fill="rgb(206,74,20)" fg:x="523" fg:w="6"/><text x="74.6454%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.57%)</title><rect x="74.6799%" y="181" width="0.5690%" height="15" fill="rgb(230,138,44)" fg:x="525" fg:w="4"/><text x="74.9299%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.57%)</title><rect x="74.6799%" y="165" width="0.5690%" height="15" fill="rgb(235,182,43)" fg:x="525" fg:w="4"/><text x="74.9299%" y="175.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (1 samples, 0.14%)</title><rect x="75.1067%" y="149" width="0.1422%" height="15" fill="rgb(242,16,51)" fg:x="528" fg:w="1"/><text x="75.3567%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (7 samples, 1.00%)</title><rect x="74.3954%" y="261" width="0.9957%" height="15" fill="rgb(248,9,4)" fg:x="523" fg:w="7"/><text x="74.6454%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 1.00%)</title><rect x="74.3954%" y="245" width="0.9957%" height="15" fill="rgb(210,31,22)" fg:x="523" fg:w="7"/><text x="74.6454%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 1.00%)</title><rect x="74.3954%" y="229" width="0.9957%" height="15" fill="rgb(239,54,39)" fg:x="523" fg:w="7"/><text x="74.6454%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (7 samples, 1.00%)</title><rect x="74.3954%" y="213" width="0.9957%" height="15" fill="rgb(230,99,41)" fg:x="523" fg:w="7"/><text x="74.6454%" y="223.50"></text></g><g><title>core::cmp::max (1 samples, 0.14%)</title><rect x="75.2489%" y="197" width="0.1422%" height="15" fill="rgb(253,106,12)" fg:x="529" fg:w="1"/><text x="75.4989%" y="207.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.14%)</title><rect x="75.2489%" y="181" width="0.1422%" height="15" fill="rgb(213,46,41)" fg:x="529" fg:w="1"/><text x="75.4989%" y="191.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.14%)</title><rect x="75.2489%" y="165" width="0.1422%" height="15" fill="rgb(215,133,35)" fg:x="529" fg:w="1"/><text x="75.4989%" y="175.50"></text></g><g><title>alloc::vec::set_len_on_drop::SetLenOnDrop::increment_len (3 samples, 0.43%)</title><rect x="75.3912%" y="261" width="0.4267%" height="15" fill="rgb(213,28,5)" fg:x="530" fg:w="3"/><text x="75.6412%" y="271.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (13 samples, 1.85%)</title><rect x="80.2276%" y="229" width="1.8492%" height="15" fill="rgb(215,77,49)" fg:x="564" fg:w="13"/><text x="80.4776%" y="239.50">&lt;..</text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (1 samples, 0.14%)</title><rect x="81.9346%" y="213" width="0.1422%" height="15" fill="rgb(248,100,22)" fg:x="576" fg:w="1"/><text x="82.1846%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (7 samples, 1.00%)</title><rect x="82.0768%" y="229" width="0.9957%" height="15" fill="rgb(208,67,9)" fg:x="577" fg:w="7"/><text x="82.3268%" y="239.50"></text></g><g><title>core::ptr::read (33 samples, 4.69%)</title><rect x="86.0597%" y="213" width="4.6942%" height="15" fill="rgb(219,133,21)" fg:x="605" fg:w="33"/><text x="86.3097%" y="223.50">core:..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (3 samples, 0.43%)</title><rect x="90.3272%" y="197" width="0.4267%" height="15" fill="rgb(246,46,29)" fg:x="635" fg:w="3"/><text x="90.5772%" y="207.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::into_inner (3 samples, 0.43%)</title><rect x="90.3272%" y="181" width="0.4267%" height="15" fill="rgb(246,185,52)" fg:x="635" fg:w="3"/><text x="90.5772%" y="191.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (108 samples, 15.36%)</title><rect x="75.8179%" y="261" width="15.3627%" height="15" fill="rgb(252,136,11)" fg:x="533" fg:w="108"/><text x="76.0679%" y="271.50">core::iter::range::&lt;impl..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (100 samples, 14.22%)</title><rect x="76.9559%" y="245" width="14.2248%" height="15" fill="rgb(219,138,53)" fg:x="541" fg:w="100"/><text x="77.2059%" y="255.50">&lt;core::ops::range::Ran..</text></g><g><title>core::mem::replace (57 samples, 8.11%)</title><rect x="83.0725%" y="229" width="8.1081%" height="15" fill="rgb(211,51,23)" fg:x="584" fg:w="57"/><text x="83.3225%" y="239.50">core::mem::..</text></g><g><title>core::ptr::write (3 samples, 0.43%)</title><rect x="90.7539%" y="213" width="0.4267%" height="15" fill="rgb(247,221,28)" fg:x="638" fg:w="3"/><text x="91.0039%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.43%)</title><rect x="91.1807%" y="261" width="0.4267%" height="15" fill="rgb(251,222,45)" fg:x="641" fg:w="3"/><text x="91.4307%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.43%)</title><rect x="91.1807%" y="245" width="0.4267%" height="15" fill="rgb(217,162,53)" fg:x="641" fg:w="3"/><text x="91.4307%" y="255.50"></text></g><g><title>&lt;tftp::storage::FileReader&lt;T&gt; as tftp::storage::BlockReader&gt;::next (202 samples, 28.73%)</title><rect x="65.5761%" y="325" width="28.7340%" height="15" fill="rgb(229,93,14)" fg:x="461" fg:w="202"/><text x="65.8261%" y="335.50">&lt;tftp::storage::FileReader&lt;T&gt; as tftp::storage..</text></g><g><title>tftp::storage::FileReader&lt;T&gt;::read_block (181 samples, 25.75%)</title><rect x="68.5633%" y="309" width="25.7468%" height="15" fill="rgb(209,67,49)" fg:x="482" fg:w="181"/><text x="68.8133%" y="319.50">tftp::storage::FileReader&lt;T&gt;::read_block</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (180 samples, 25.60%)</title><rect x="68.7055%" y="293" width="25.6046%" height="15" fill="rgb(213,87,29)" fg:x="483" fg:w="180"/><text x="68.9555%" y="303.50">alloc::vec::Vec&lt;T,A&gt;::resize</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (180 samples, 25.60%)</title><rect x="68.7055%" y="277" width="25.6046%" height="15" fill="rgb(205,151,52)" fg:x="483" fg:w="180"/><text x="68.9555%" y="287.50">alloc::vec::Vec&lt;T,A&gt;::extend_with</text></g><g><title>core::ptr::write (19 samples, 2.70%)</title><rect x="91.6074%" y="261" width="2.7027%" height="15" fill="rgb(253,215,39)" fg:x="644" fg:w="19"/><text x="91.8574%" y="271.50">co..</text></g><g><title>&lt;alloc::vec::ExtendElement&lt;T&gt; as alloc::vec::ExtendWith&lt;T&gt;&gt;::next (1 samples, 0.14%)</title><rect x="95.0213%" y="293" width="0.1422%" height="15" fill="rgb(221,220,41)" fg:x="668" fg:w="1"/><text x="95.2713%" y="303.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (3 samples, 0.43%)</title><rect x="95.4481%" y="261" width="0.4267%" height="15" fill="rgb(218,133,21)" fg:x="671" fg:w="3"/><text x="95.6981%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (1 samples, 0.14%)</title><rect x="95.7326%" y="245" width="0.1422%" height="15" fill="rgb(221,193,43)" fg:x="673" fg:w="1"/><text x="95.9826%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.14%)</title><rect x="95.8748%" y="261" width="0.1422%" height="15" fill="rgb(240,128,52)" fg:x="674" fg:w="1"/><text x="96.1248%" y="271.50"></text></g><g><title>core::ptr::read (5 samples, 0.71%)</title><rect x="96.3016%" y="245" width="0.7112%" height="15" fill="rgb(253,114,12)" fg:x="677" fg:w="5"/><text x="96.5516%" y="255.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (14 samples, 1.99%)</title><rect x="95.1636%" y="293" width="1.9915%" height="15" fill="rgb(215,223,47)" fg:x="669" fg:w="14"/><text x="95.4136%" y="303.50">c..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (14 samples, 1.99%)</title><rect x="95.1636%" y="277" width="1.9915%" height="15" fill="rgb(248,225,23)" fg:x="669" fg:w="14"/><text x="95.4136%" y="287.50">&lt;..</text></g><g><title>core::mem::replace (8 samples, 1.14%)</title><rect x="96.0171%" y="261" width="1.1380%" height="15" fill="rgb(250,108,0)" fg:x="675" fg:w="8"/><text x="96.2671%" y="271.50"></text></g><g><title>core::ptr::write (1 samples, 0.14%)</title><rect x="97.0128%" y="245" width="0.1422%" height="15" fill="rgb(228,208,7)" fg:x="682" fg:w="1"/><text x="97.2628%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (28 samples, 3.98%)</title><rect x="94.3101%" y="325" width="3.9829%" height="15" fill="rgb(244,45,10)" fg:x="663" fg:w="28"/><text x="94.5601%" y="335.50">allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (28 samples, 3.98%)</title><rect x="94.3101%" y="309" width="3.9829%" height="15" fill="rgb(207,125,25)" fg:x="663" fg:w="28"/><text x="94.5601%" y="319.50">allo..</text></g><g><title>core::ptr::write (8 samples, 1.14%)</title><rect x="97.1550%" y="293" width="1.1380%" height="15" fill="rgb(210,195,18)" fg:x="683" fg:w="8"/><text x="97.4050%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.14%)</title><rect x="98.2930%" y="309" width="0.1422%" height="15" fill="rgb(249,80,12)" fg:x="691" fg:w="1"/><text x="98.5430%" y="319.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (1 samples, 0.14%)</title><rect x="98.2930%" y="293" width="0.1422%" height="15" fill="rgb(221,65,9)" fg:x="691" fg:w="1"/><text x="98.5430%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::cast (1 samples, 0.14%)</title><rect x="98.2930%" y="277" width="0.1422%" height="15" fill="rgb(235,49,36)" fg:x="691" fg:w="1"/><text x="98.5430%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.43%)</title><rect x="98.4353%" y="277" width="0.4267%" height="15" fill="rgb(225,32,20)" fg:x="692" fg:w="3"/><text x="98.6853%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.43%)</title><rect x="98.4353%" y="261" width="0.4267%" height="15" fill="rgb(215,141,46)" fg:x="692" fg:w="3"/><text x="98.6853%" y="271.50"></text></g><g><title>cfree (3 samples, 0.43%)</title><rect x="98.4353%" y="245" width="0.4267%" height="15" fill="rgb(250,160,47)" fg:x="692" fg:w="3"/><text x="98.6853%" y="255.50"></text></g><g><title>[libc.so.6] (1 samples, 0.14%)</title><rect x="98.7198%" y="229" width="0.1422%" height="15" fill="rgb(216,222,40)" fg:x="694" fg:w="1"/><text x="98.9698%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (5 samples, 0.71%)</title><rect x="98.2930%" y="325" width="0.7112%" height="15" fill="rgb(234,217,39)" fg:x="691" fg:w="5"/><text x="98.5430%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4 samples, 0.57%)</title><rect x="98.4353%" y="309" width="0.5690%" height="15" fill="rgb(207,178,40)" fg:x="692" fg:w="4"/><text x="98.6853%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.57%)</title><rect x="98.4353%" y="293" width="0.5690%" height="15" fill="rgb(221,136,13)" fg:x="692" fg:w="4"/><text x="98.6853%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.14%)</title><rect x="98.8620%" y="277" width="0.1422%" height="15" fill="rgb(249,199,10)" fg:x="695" fg:w="1"/><text x="99.1120%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.14%)</title><rect x="99.1465%" y="293" width="0.1422%" height="15" fill="rgb(249,222,13)" fg:x="697" fg:w="1"/><text x="99.3965%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.14%)</title><rect x="99.1465%" y="277" width="0.1422%" height="15" fill="rgb(244,185,38)" fg:x="697" fg:w="1"/><text x="99.3965%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.14%)</title><rect x="99.1465%" y="261" width="0.1422%" height="15" fill="rgb(236,202,9)" fg:x="697" fg:w="1"/><text x="99.3965%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.14%)</title><rect x="99.2888%" y="261" width="0.1422%" height="15" fill="rgb(250,229,37)" fg:x="698" fg:w="1"/><text x="99.5388%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.14%)</title><rect x="99.2888%" y="245" width="0.1422%" height="15" fill="rgb(206,174,23)" fg:x="698" fg:w="1"/><text x="99.5388%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;tftp::storage::Block&gt; (4 samples, 0.57%)</title><rect x="99.0043%" y="325" width="0.5690%" height="15" fill="rgb(211,33,43)" fg:x="696" fg:w="4"/><text x="99.2543%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3 samples, 0.43%)</title><rect x="99.1465%" y="309" width="0.4267%" height="15" fill="rgb(245,58,50)" fg:x="697" fg:w="3"/><text x="99.3965%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.28%)</title><rect x="99.2888%" y="293" width="0.2845%" height="15" fill="rgb(244,68,36)" fg:x="698" fg:w="2"/><text x="99.5388%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.28%)</title><rect x="99.2888%" y="277" width="0.2845%" height="15" fill="rgb(232,229,15)" fg:x="698" fg:w="2"/><text x="99.5388%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.14%)</title><rect x="99.4310%" y="261" width="0.1422%" height="15" fill="rgb(254,30,23)" fg:x="699" fg:w="1"/><text x="99.6810%" y="271.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.14%)</title><rect x="99.4310%" y="245" width="0.1422%" height="15" fill="rgb(235,160,14)" fg:x="699" fg:w="1"/><text x="99.6810%" y="255.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.14%)</title><rect x="99.4310%" y="229" width="0.1422%" height="15" fill="rgb(212,155,44)" fg:x="699" fg:w="1"/><text x="99.6810%" y="239.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.14%)</title><rect x="99.5733%" y="277" width="0.1422%" height="15" fill="rgb(226,2,50)" fg:x="700" fg:w="1"/><text x="99.8233%" y="287.50"></text></g><g><title>clock_gettime (1 samples, 0.14%)</title><rect x="99.5733%" y="261" width="0.1422%" height="15" fill="rgb(234,177,6)" fg:x="700" fg:w="1"/><text x="99.8233%" y="271.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.14%)</title><rect x="99.5733%" y="245" width="0.1422%" height="15" fill="rgb(217,24,9)" fg:x="700" fg:w="1"/><text x="99.8233%" y="255.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.28%)</title><rect x="99.5733%" y="309" width="0.2845%" height="15" fill="rgb(220,13,46)" fg:x="700" fg:w="2"/><text x="99.8233%" y="319.50"></text></g><g><title>tftp::instant_callback::{{closure}} (2 samples, 0.28%)</title><rect x="99.5733%" y="293" width="0.2845%" height="15" fill="rgb(239,221,27)" fg:x="700" fg:w="2"/><text x="99.8233%" y="303.50"></text></g><g><title>std::time::SystemTime::duration_since (1 samples, 0.14%)</title><rect x="99.7155%" y="277" width="0.1422%" height="15" fill="rgb(222,198,25)" fg:x="701" fg:w="1"/><text x="99.9655%" y="287.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (1 samples, 0.14%)</title><rect x="99.7155%" y="261" width="0.1422%" height="15" fill="rgb(211,99,13)" fg:x="701" fg:w="1"/><text x="99.9655%" y="271.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1 samples, 0.14%)</title><rect x="99.7155%" y="245" width="0.1422%" height="15" fill="rgb(232,111,31)" fg:x="701" fg:w="1"/><text x="99.9655%" y="255.50"></text></g><g><title>all (703 samples, 100%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(245,82,37)" fg:x="0" fg:w="703"/><text x="0.2500%" y="687.50"></text></g><g><title>tftp (703 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(227,149,46)" fg:x="0" fg:w="703"/><text x="0.2500%" y="671.50">tftp</text></g><g><title>_start (696 samples, 99.00%)</title><rect x="0.9957%" y="645" width="99.0043%" height="15" fill="rgb(218,36,50)" fg:x="7" fg:w="696"/><text x="1.2457%" y="655.50">_start</text></g><g><title>__libc_start_main (696 samples, 99.00%)</title><rect x="0.9957%" y="629" width="99.0043%" height="15" fill="rgb(226,80,48)" fg:x="7" fg:w="696"/><text x="1.2457%" y="639.50">__libc_start_main</text></g><g><title>[libc.so.6] (696 samples, 99.00%)</title><rect x="0.9957%" y="613" width="99.0043%" height="15" fill="rgb(238,224,15)" fg:x="7" fg:w="696"/><text x="1.2457%" y="623.50">[libc.so.6]</text></g><g><title>main (696 samples, 99.00%)</title><rect x="0.9957%" y="597" width="99.0043%" height="15" fill="rgb(241,136,10)" fg:x="7" fg:w="696"/><text x="1.2457%" y="607.50">main</text></g><g><title>std::rt::lang_start (696 samples, 99.00%)</title><rect x="0.9957%" y="581" width="99.0043%" height="15" fill="rgb(208,32,45)" fg:x="7" fg:w="696"/><text x="1.2457%" y="591.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (696 samples, 99.00%)</title><rect x="0.9957%" y="565" width="99.0043%" height="15" fill="rgb(207,135,9)" fg:x="7" fg:w="696"/><text x="1.2457%" y="575.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (696 samples, 99.00%)</title><rect x="0.9957%" y="549" width="99.0043%" height="15" fill="rgb(206,86,44)" fg:x="7" fg:w="696"/><text x="1.2457%" y="559.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (696 samples, 99.00%)</title><rect x="0.9957%" y="533" width="99.0043%" height="15" fill="rgb(245,177,15)" fg:x="7" fg:w="696"/><text x="1.2457%" y="543.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (696 samples, 99.00%)</title><rect x="0.9957%" y="517" width="99.0043%" height="15" fill="rgb(206,64,50)" fg:x="7" fg:w="696"/><text x="1.2457%" y="527.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (696 samples, 99.00%)</title><rect x="0.9957%" y="501" width="99.0043%" height="15" fill="rgb(234,36,40)" fg:x="7" fg:w="696"/><text x="1.2457%" y="511.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (696 samples, 99.00%)</title><rect x="0.9957%" y="485" width="99.0043%" height="15" fill="rgb(213,64,8)" fg:x="7" fg:w="696"/><text x="1.2457%" y="495.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (696 samples, 99.00%)</title><rect x="0.9957%" y="469" width="99.0043%" height="15" fill="rgb(210,75,36)" fg:x="7" fg:w="696"/><text x="1.2457%" y="479.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (696 samples, 99.00%)</title><rect x="0.9957%" y="453" width="99.0043%" height="15" fill="rgb(229,88,21)" fg:x="7" fg:w="696"/><text x="1.2457%" y="463.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (696 samples, 99.00%)</title><rect x="0.9957%" y="437" width="99.0043%" height="15" fill="rgb(252,204,47)" fg:x="7" fg:w="696"/><text x="1.2457%" y="447.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (696 samples, 99.00%)</title><rect x="0.9957%" y="421" width="99.0043%" height="15" fill="rgb(208,77,27)" fg:x="7" fg:w="696"/><text x="1.2457%" y="431.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (696 samples, 99.00%)</title><rect x="0.9957%" y="405" width="99.0043%" height="15" fill="rgb(221,76,26)" fg:x="7" fg:w="696"/><text x="1.2457%" y="415.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (696 samples, 99.00%)</title><rect x="0.9957%" y="389" width="99.0043%" height="15" fill="rgb(225,139,18)" fg:x="7" fg:w="696"/><text x="1.2457%" y="399.50">core::ops::function::FnOnce::call_once</text></g><g><title>tftp::main (696 samples, 99.00%)</title><rect x="0.9957%" y="373" width="99.0043%" height="15" fill="rgb(230,137,11)" fg:x="7" fg:w="696"/><text x="1.2457%" y="383.50">tftp::main</text></g><g><title>tftp::start_send (696 samples, 99.00%)</title><rect x="0.9957%" y="357" width="99.0043%" height="15" fill="rgb(212,28,1)" fg:x="7" fg:w="696"/><text x="1.2457%" y="367.50">tftp::start_send</text></g><g><title>tftp::client::client::send_file (696 samples, 99.00%)</title><rect x="0.9957%" y="341" width="99.0043%" height="15" fill="rgb(248,164,17)" fg:x="7" fg:w="696"/><text x="1.2457%" y="351.50">tftp::client::client::send_file</text></g><g><title>tftp::std_compat::time::Instant::elapsed (3 samples, 0.43%)</title><rect x="99.5733%" y="325" width="0.4267%" height="15" fill="rgb(222,171,42)" fg:x="700" fg:w="3"/><text x="99.8233%" y="335.50"></text></g><g><title>core::time::Duration::from_micros (1 samples, 0.14%)</title><rect x="99.8578%" y="309" width="0.1422%" height="15" fill="rgb(243,84,45)" fg:x="702" fg:w="1"/><text x="100.1078%" y="319.50"></text></g><g><title>core::time::Duration::new (1 samples, 0.14%)</title><rect x="99.8578%" y="293" width="0.1422%" height="15" fill="rgb(252,49,23)" fg:x="702" fg:w="1"/><text x="100.1078%" y="303.50"></text></g></svg></svg>