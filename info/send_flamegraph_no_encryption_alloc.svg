<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="966" onload="init(evt)" viewBox="0 0 1200 966" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="966" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="949.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="949.00"> </text><svg id="frames" x="10" width="1180" total_samples="104"><g><title>perf_event_comm (1 samples, 0.96%)</title><rect x="0.0000%" y="773" width="0.9615%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="783.50"></text></g><g><title>perf_iterate_sb (1 samples, 0.96%)</title><rect x="0.0000%" y="757" width="0.9615%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="767.50"></text></g><g><title>perf_event_comm_output (1 samples, 0.96%)</title><rect x="0.0000%" y="741" width="0.9615%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="751.50"></text></g><g><title>ctx_resched (2 samples, 1.92%)</title><rect x="0.9615%" y="757" width="1.9231%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="2"/><text x="1.2115%" y="767.50">c..</text></g><g><title>perf_ctx_enable (2 samples, 1.92%)</title><rect x="0.9615%" y="741" width="1.9231%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="2"/><text x="1.2115%" y="751.50">p..</text></g><g><title>amd_pmu_enable_all (1 samples, 0.96%)</title><rect x="1.9231%" y="725" width="0.9615%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="1"/><text x="2.1731%" y="735.50"></text></g><g><title>x86_pmu_enable_event (1 samples, 0.96%)</title><rect x="1.9231%" y="709" width="0.9615%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="1"/><text x="2.1731%" y="719.50"></text></g><g><title>perf-exec (4 samples, 3.85%)</title><rect x="0.0000%" y="901" width="3.8462%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="4"/><text x="0.2500%" y="911.50">perf..</text></g><g><title>entry_SYSCALL_64_after_hwframe (4 samples, 3.85%)</title><rect x="0.0000%" y="885" width="3.8462%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="4"/><text x="0.2500%" y="895.50">entr..</text></g><g><title>do_syscall_64 (4 samples, 3.85%)</title><rect x="0.0000%" y="869" width="3.8462%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="4"/><text x="0.2500%" y="879.50">do_s..</text></g><g><title>__x64_sys_execve (4 samples, 3.85%)</title><rect x="0.0000%" y="853" width="3.8462%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="4"/><text x="0.2500%" y="863.50">__x6..</text></g><g><title>do_execveat_common.isra.0 (4 samples, 3.85%)</title><rect x="0.0000%" y="837" width="3.8462%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="4"/><text x="0.2500%" y="847.50">do_e..</text></g><g><title>bprm_execve (4 samples, 3.85%)</title><rect x="0.0000%" y="821" width="3.8462%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="4"/><text x="0.2500%" y="831.50">bprm..</text></g><g><title>load_elf_binary (4 samples, 3.85%)</title><rect x="0.0000%" y="805" width="3.8462%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="4"/><text x="0.2500%" y="815.50">load..</text></g><g><title>begin_new_exec (4 samples, 3.85%)</title><rect x="0.0000%" y="789" width="3.8462%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="4"/><text x="0.2500%" y="799.50">begi..</text></g><g><title>perf_event_exec (3 samples, 2.88%)</title><rect x="0.9615%" y="773" width="2.8846%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="3"/><text x="1.2115%" y="783.50">pe..</text></g><g><title>perf_iterate_ctx (1 samples, 0.96%)</title><rect x="2.8846%" y="757" width="0.9615%" height="15" fill="rgb(225,20,46)" fg:x="3" fg:w="1"/><text x="3.1346%" y="767.50"></text></g><g><title>perf_event_addr_filters_exec (1 samples, 0.96%)</title><rect x="2.8846%" y="741" width="0.9615%" height="15" fill="rgb(210,31,41)" fg:x="3" fg:w="1"/><text x="3.1346%" y="751.50"></text></g><g><title>&lt;tftp::readers::multiple_block_reader::MultipleBlockReader&lt;R&gt; as tftp::readers::block_reader::BlockReader&gt;::next::{{closure}} (1 samples, 0.96%)</title><rect x="3.8462%" y="869" width="0.9615%" height="15" fill="rgb(221,200,47)" fg:x="4" fg:w="1"/><text x="4.0962%" y="879.50"></text></g><g><title>&lt;tftp::std_compat::net::IpVersion as core::cmp::PartialEq&gt;::eq (1 samples, 0.96%)</title><rect x="4.8077%" y="869" width="0.9615%" height="15" fill="rgb(226,26,5)" fg:x="5" fg:w="1"/><text x="5.0577%" y="879.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1 samples, 0.96%)</title><rect x="5.7692%" y="869" width="0.9615%" height="15" fill="rgb(249,33,26)" fg:x="6" fg:w="1"/><text x="6.0192%" y="879.50"></text></g><g><title>[[heap]] (4 samples, 3.85%)</title><rect x="3.8462%" y="885" width="3.8462%" height="15" fill="rgb(235,183,28)" fg:x="4" fg:w="4"/><text x="4.0962%" y="895.50">[[he..</text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.96%)</title><rect x="6.7308%" y="869" width="0.9615%" height="15" fill="rgb(221,5,38)" fg:x="7" fg:w="1"/><text x="6.9808%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::Entered&gt; (2 samples, 1.92%)</title><rect x="7.6923%" y="869" width="1.9231%" height="15" fill="rgb(247,18,42)" fg:x="8" fg:w="2"/><text x="7.9423%" y="879.50">c..</text></g><g><title>&lt;tracing::span::Entered as core::ops::drop::Drop&gt;::drop (2 samples, 1.92%)</title><rect x="7.6923%" y="853" width="1.9231%" height="15" fill="rgb(241,131,45)" fg:x="8" fg:w="2"/><text x="7.9423%" y="863.50">&lt;..</text></g><g><title>tracing::span::Span::do_exit (1 samples, 0.96%)</title><rect x="8.6538%" y="837" width="0.9615%" height="15" fill="rgb(249,31,29)" fg:x="9" fg:w="1"/><text x="8.9038%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::Span&gt; (1 samples, 0.96%)</title><rect x="9.6154%" y="869" width="0.9615%" height="15" fill="rgb(225,111,53)" fg:x="10" fg:w="1"/><text x="9.8654%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.96%)</title><rect x="9.6154%" y="853" width="0.9615%" height="15" fill="rgb(238,160,17)" fg:x="10" fg:w="1"/><text x="9.8654%" y="863.50"></text></g><g><title>rustix::backend::event::epoll::_::InternalBitFlags::from_bits_retain (1 samples, 0.96%)</title><rect x="10.5769%" y="869" width="0.9615%" height="15" fill="rgb(214,148,48)" fg:x="11" fg:w="1"/><text x="10.8269%" y="879.50"></text></g><g><title>[[stack]] (5 samples, 4.81%)</title><rect x="7.6923%" y="885" width="4.8077%" height="15" fill="rgb(232,36,49)" fg:x="8" fg:w="5"/><text x="7.9423%" y="895.50">[[stac..</text></g><g><title>rustix::backend::event::epoll::_::InternalBitFlags::union (1 samples, 0.96%)</title><rect x="11.5385%" y="869" width="0.9615%" height="15" fill="rgb(209,103,24)" fg:x="12" fg:w="1"/><text x="11.7885%" y="879.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (1 samples, 0.96%)</title><rect x="12.5000%" y="869" width="0.9615%" height="15" fill="rgb(229,88,8)" fg:x="13" fg:w="1"/><text x="12.7500%" y="879.50"></text></g><g><title>polling::epoll::Poller::wait (1 samples, 0.96%)</title><rect x="12.5000%" y="853" width="0.9615%" height="15" fill="rgb(213,181,19)" fg:x="13" fg:w="1"/><text x="12.7500%" y="863.50"></text></g><g><title>[tftp] (2 samples, 1.92%)</title><rect x="12.5000%" y="885" width="1.9231%" height="15" fill="rgb(254,191,54)" fg:x="13" fg:w="2"/><text x="12.7500%" y="895.50">[..</text></g><g><title>polling::Poller::wait (1 samples, 0.96%)</title><rect x="13.4615%" y="869" width="0.9615%" height="15" fill="rgb(241,83,37)" fg:x="14" fg:w="1"/><text x="13.7115%" y="879.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.96%)</title><rect x="14.4231%" y="869" width="0.9615%" height="15" fill="rgb(233,36,39)" fg:x="15" fg:w="1"/><text x="14.6731%" y="879.50"></text></g><g><title>&lt;tftp::socket::UdpUnboundSocket as tftp::socket::Socket&gt;::recv_from (1 samples, 0.96%)</title><rect x="15.3846%" y="869" width="0.9615%" height="15" fill="rgb(226,3,54)" fg:x="16" fg:w="1"/><text x="15.6346%" y="879.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (1 samples, 0.96%)</title><rect x="16.3462%" y="869" width="0.9615%" height="15" fill="rgb(245,192,40)" fg:x="17" fg:w="1"/><text x="16.5962%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.96%)</title><rect x="17.3077%" y="869" width="0.9615%" height="15" fill="rgb(238,167,29)" fg:x="18" fg:w="1"/><text x="17.5577%" y="879.50"></text></g><g><title>core::cmp::PartialOrd::le (1 samples, 0.96%)</title><rect x="18.2692%" y="869" width="0.9615%" height="15" fill="rgb(232,182,51)" fg:x="19" fg:w="1"/><text x="18.5192%" y="879.50"></text></g><g><title>core::ops::range::RangeBounds::contains (1 samples, 0.96%)</title><rect x="19.2308%" y="869" width="0.9615%" height="15" fill="rgb(231,60,39)" fg:x="20" fg:w="1"/><text x="19.4808%" y="879.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.96%)</title><rect x="20.1923%" y="869" width="0.9615%" height="15" fill="rgb(208,69,12)" fg:x="21" fg:w="1"/><text x="20.4423%" y="879.50"></text></g><g><title>core::time::Duration::new (1 samples, 0.96%)</title><rect x="21.1538%" y="869" width="0.9615%" height="15" fill="rgb(235,93,37)" fg:x="22" fg:w="1"/><text x="21.4038%" y="879.50"></text></g><g><title>core::num::&lt;impl u64&gt;::checked_add (1 samples, 0.96%)</title><rect x="21.1538%" y="853" width="0.9615%" height="15" fill="rgb(213,116,39)" fg:x="22" fg:w="1"/><text x="21.4038%" y="863.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (1 samples, 0.96%)</title><rect x="21.1538%" y="837" width="0.9615%" height="15" fill="rgb(222,207,29)" fg:x="22" fg:w="1"/><text x="21.4038%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.96%)</title><rect x="22.1154%" y="869" width="0.9615%" height="15" fill="rgb(206,96,30)" fg:x="23" fg:w="1"/><text x="22.3654%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.96%)</title><rect x="22.1154%" y="853" width="0.9615%" height="15" fill="rgb(218,138,4)" fg:x="23" fg:w="1"/><text x="22.3654%" y="863.50"></text></g><g><title>rustix::backend::arch::asm::syscall4_readonly (3 samples, 2.88%)</title><rect x="23.0769%" y="869" width="2.8846%" height="15" fill="rgb(250,191,14)" fg:x="24" fg:w="3"/><text x="23.3269%" y="879.50">ru..</text></g><g><title>rustix::backend::io::syscalls::read (1 samples, 0.96%)</title><rect x="25.9615%" y="869" width="0.9615%" height="15" fill="rgb(239,60,40)" fg:x="27" fg:w="1"/><text x="26.2115%" y="879.50"></text></g><g><title>std::rt::lang_start_internal (1 samples, 0.96%)</title><rect x="26.9231%" y="869" width="0.9615%" height="15" fill="rgb(206,27,48)" fg:x="28" fg:w="1"/><text x="27.1731%" y="879.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.96%)</title><rect x="26.9231%" y="853" width="0.9615%" height="15" fill="rgb(225,35,8)" fg:x="28" fg:w="1"/><text x="27.1731%" y="863.50"></text></g><g><title>std::panicking::try (1 samples, 0.96%)</title><rect x="26.9231%" y="837" width="0.9615%" height="15" fill="rgb(250,213,24)" fg:x="28" fg:w="1"/><text x="27.1731%" y="847.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.96%)</title><rect x="26.9231%" y="821" width="0.9615%" height="15" fill="rgb(247,123,22)" fg:x="28" fg:w="1"/><text x="27.1731%" y="831.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (1 samples, 0.96%)</title><rect x="26.9231%" y="805" width="0.9615%" height="15" fill="rgb(231,138,38)" fg:x="28" fg:w="1"/><text x="27.1731%" y="815.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.96%)</title><rect x="26.9231%" y="789" width="0.9615%" height="15" fill="rgb(231,145,46)" fg:x="28" fg:w="1"/><text x="27.1731%" y="799.50"></text></g><g><title>std::panicking::try (1 samples, 0.96%)</title><rect x="26.9231%" y="773" width="0.9615%" height="15" fill="rgb(251,118,11)" fg:x="28" fg:w="1"/><text x="27.1731%" y="783.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.96%)</title><rect x="26.9231%" y="757" width="0.9615%" height="15" fill="rgb(217,147,25)" fg:x="28" fg:w="1"/><text x="27.1731%" y="767.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1 samples, 0.96%)</title><rect x="26.9231%" y="741" width="0.9615%" height="15" fill="rgb(247,81,37)" fg:x="28" fg:w="1"/><text x="27.1731%" y="751.50"></text></g><g><title>std::rt::lang_start::{{closure}} (1 samples, 0.96%)</title><rect x="26.9231%" y="725" width="0.9615%" height="15" fill="rgb(209,12,38)" fg:x="28" fg:w="1"/><text x="27.1731%" y="735.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.96%)</title><rect x="26.9231%" y="709" width="0.9615%" height="15" fill="rgb(227,1,9)" fg:x="28" fg:w="1"/><text x="27.1731%" y="719.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.96%)</title><rect x="26.9231%" y="693" width="0.9615%" height="15" fill="rgb(248,47,43)" fg:x="28" fg:w="1"/><text x="27.1731%" y="703.50"></text></g><g><title>tftp::main (1 samples, 0.96%)</title><rect x="26.9231%" y="677" width="0.9615%" height="15" fill="rgb(221,10,30)" fg:x="28" fg:w="1"/><text x="27.1731%" y="687.50"></text></g><g><title>tftp::sender::start_send (1 samples, 0.96%)</title><rect x="26.9231%" y="661" width="0.9615%" height="15" fill="rgb(210,229,1)" fg:x="28" fg:w="1"/><text x="27.1731%" y="671.50"></text></g><g><title>tftp::client::sender::send_file (1 samples, 0.96%)</title><rect x="26.9231%" y="645" width="0.9615%" height="15" fill="rgb(222,148,37)" fg:x="28" fg:w="1"/><text x="27.1731%" y="655.50"></text></g><g><title>&lt;tftp::socket::UdpUnboundSocket as tftp::socket::Socket&gt;::recv_from (1 samples, 0.96%)</title><rect x="26.9231%" y="629" width="0.9615%" height="15" fill="rgb(234,67,33)" fg:x="28" fg:w="1"/><text x="27.1731%" y="639.50"></text></g><g><title>polling::Poller::wait (1 samples, 0.96%)</title><rect x="26.9231%" y="613" width="0.9615%" height="15" fill="rgb(247,98,35)" fg:x="28" fg:w="1"/><text x="27.1731%" y="623.50"></text></g><g><title>polling::epoll::Poller::wait (1 samples, 0.96%)</title><rect x="26.9231%" y="597" width="0.9615%" height="15" fill="rgb(247,138,52)" fg:x="28" fg:w="1"/><text x="27.1731%" y="607.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.96%)</title><rect x="26.9231%" y="581" width="0.9615%" height="15" fill="rgb(213,79,30)" fg:x="28" fg:w="1"/><text x="27.1731%" y="591.50"></text></g><g><title>eventfd_read (1 samples, 0.96%)</title><rect x="27.8846%" y="645" width="0.9615%" height="15" fill="rgb(246,177,23)" fg:x="29" fg:w="1"/><text x="28.1346%" y="655.50"></text></g><g><title>_raw_spin_lock_irq (1 samples, 0.96%)</title><rect x="27.8846%" y="629" width="0.9615%" height="15" fill="rgb(230,62,27)" fg:x="29" fg:w="1"/><text x="28.1346%" y="639.50"></text></g><g><title>preempt_count_add (1 samples, 0.96%)</title><rect x="27.8846%" y="613" width="0.9615%" height="15" fill="rgb(216,154,8)" fg:x="29" fg:w="1"/><text x="28.1346%" y="623.50"></text></g><g><title>rustix::backend::arch::asm::syscall3 (2 samples, 1.92%)</title><rect x="27.8846%" y="725" width="1.9231%" height="15" fill="rgb(244,35,45)" fg:x="29" fg:w="2"/><text x="28.1346%" y="735.50">r..</text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 1.92%)</title><rect x="27.8846%" y="709" width="1.9231%" height="15" fill="rgb(251,115,12)" fg:x="29" fg:w="2"/><text x="28.1346%" y="719.50">e..</text></g><g><title>do_syscall_64 (2 samples, 1.92%)</title><rect x="27.8846%" y="693" width="1.9231%" height="15" fill="rgb(240,54,50)" fg:x="29" fg:w="2"/><text x="28.1346%" y="703.50">d..</text></g><g><title>ksys_read (2 samples, 1.92%)</title><rect x="27.8846%" y="677" width="1.9231%" height="15" fill="rgb(233,84,52)" fg:x="29" fg:w="2"/><text x="28.1346%" y="687.50">k..</text></g><g><title>vfs_read (2 samples, 1.92%)</title><rect x="27.8846%" y="661" width="1.9231%" height="15" fill="rgb(207,117,47)" fg:x="29" fg:w="2"/><text x="28.1346%" y="671.50">v..</text></g><g><title>security_file_permission (1 samples, 0.96%)</title><rect x="28.8462%" y="645" width="0.9615%" height="15" fill="rgb(249,43,39)" fg:x="30" fg:w="1"/><text x="29.0962%" y="655.50"></text></g><g><title>polling::epoll::Notifier::clear (3 samples, 2.88%)</title><rect x="27.8846%" y="773" width="2.8846%" height="15" fill="rgb(209,38,44)" fg:x="29" fg:w="3"/><text x="28.1346%" y="783.50">po..</text></g><g><title>rustix::io::read_write::read (3 samples, 2.88%)</title><rect x="27.8846%" y="757" width="2.8846%" height="15" fill="rgb(236,212,23)" fg:x="29" fg:w="3"/><text x="28.1346%" y="767.50">ru..</text></g><g><title>rustix::backend::io::syscalls::read (3 samples, 2.88%)</title><rect x="27.8846%" y="741" width="2.8846%" height="15" fill="rgb(242,79,21)" fg:x="29" fg:w="3"/><text x="28.1346%" y="751.50">ru..</text></g><g><title>rustix::backend::conv::ret_usize (1 samples, 0.96%)</title><rect x="29.8077%" y="725" width="0.9615%" height="15" fill="rgb(211,96,35)" fg:x="31" fg:w="1"/><text x="30.0577%" y="735.50"></text></g><g><title>rustix::backend::io::errno::try_decode_usize (1 samples, 0.96%)</title><rect x="29.8077%" y="709" width="0.9615%" height="15" fill="rgb(253,215,40)" fg:x="31" fg:w="1"/><text x="30.0577%" y="719.50"></text></g><g><title>rustix::backend::reg::RetReg&lt;Num&gt;::decode_error_code (1 samples, 0.96%)</title><rect x="29.8077%" y="693" width="0.9615%" height="15" fill="rgb(211,81,21)" fg:x="31" fg:w="1"/><text x="30.0577%" y="703.50"></text></g><g><title>polling::epoll::epoll_flags (1 samples, 0.96%)</title><rect x="30.7692%" y="757" width="0.9615%" height="15" fill="rgb(208,190,38)" fg:x="32" fg:w="1"/><text x="31.0192%" y="767.50"></text></g><g><title>polling::epoll::read_flags (1 samples, 0.96%)</title><rect x="30.7692%" y="741" width="0.9615%" height="15" fill="rgb(235,213,38)" fg:x="32" fg:w="1"/><text x="31.0192%" y="751.50"></text></g><g><title>rustix::backend::io::errno::try_decode_void (1 samples, 0.96%)</title><rect x="30.7692%" y="725" width="0.9615%" height="15" fill="rgb(237,122,38)" fg:x="32" fg:w="1"/><text x="31.0192%" y="735.50"></text></g><g><title>polling::epoll::Poller::modify (2 samples, 1.92%)</title><rect x="30.7692%" y="773" width="1.9231%" height="15" fill="rgb(244,218,35)" fg:x="32" fg:w="2"/><text x="31.0192%" y="783.50">p..</text></g><g><title>rustix::backend::event::epoll::_::&lt;impl core::ops::bit::BitOr for rustix::backend::event::epoll::EventFlags&gt;::bitor (1 samples, 0.96%)</title><rect x="31.7308%" y="757" width="0.9615%" height="15" fill="rgb(240,68,47)" fg:x="33" fg:w="1"/><text x="31.9808%" y="767.50"></text></g><g><title>rustix::backend::event::epoll::_::&lt;impl rustix::backend::event::epoll::EventFlags&gt;::union (1 samples, 0.96%)</title><rect x="31.7308%" y="741" width="0.9615%" height="15" fill="rgb(210,16,53)" fg:x="33" fg:w="1"/><text x="31.9808%" y="751.50"></text></g><g><title>rustix::backend::event::epoll::_::InternalBitFlags::union (1 samples, 0.96%)</title><rect x="31.7308%" y="725" width="0.9615%" height="15" fill="rgb(235,124,12)" fg:x="33" fg:w="1"/><text x="31.9808%" y="735.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.96%)</title><rect x="31.7308%" y="709" width="0.9615%" height="15" fill="rgb(224,169,11)" fg:x="33" fg:w="1"/><text x="31.9808%" y="719.50"></text></g><g><title>rustix::backend::event::epoll::wait (1 samples, 0.96%)</title><rect x="32.6923%" y="773" width="0.9615%" height="15" fill="rgb(250,166,2)" fg:x="34" fg:w="1"/><text x="32.9423%" y="783.50"></text></g><g><title>rustix::backend::event::syscalls::epoll_wait (1 samples, 0.96%)</title><rect x="32.6923%" y="757" width="0.9615%" height="15" fill="rgb(242,216,29)" fg:x="34" fg:w="1"/><text x="32.9423%" y="767.50"></text></g><g><title>rustix::backend::conv::ret_usize (1 samples, 0.96%)</title><rect x="32.6923%" y="741" width="0.9615%" height="15" fill="rgb(230,116,27)" fg:x="34" fg:w="1"/><text x="32.9423%" y="751.50"></text></g><g><title>rustix::backend::io::errno::try_decode_usize (1 samples, 0.96%)</title><rect x="32.6923%" y="725" width="0.9615%" height="15" fill="rgb(228,99,48)" fg:x="34" fg:w="1"/><text x="32.9423%" y="735.50"></text></g><g><title>rustix::backend::reg::RetReg&lt;Num&gt;::decode_usize (1 samples, 0.96%)</title><rect x="32.6923%" y="709" width="0.9615%" height="15" fill="rgb(253,11,6)" fg:x="34" fg:w="1"/><text x="32.9423%" y="719.50"></text></g><g><title>core::ops::range::Range&lt;Idx&gt;::contains (1 samples, 0.96%)</title><rect x="32.6923%" y="693" width="0.9615%" height="15" fill="rgb(247,143,39)" fg:x="34" fg:w="1"/><text x="32.9423%" y="703.50"></text></g><g><title>core::ops::range::RangeBounds::contains (1 samples, 0.96%)</title><rect x="32.6923%" y="677" width="0.9615%" height="15" fill="rgb(236,97,10)" fg:x="34" fg:w="1"/><text x="32.9423%" y="687.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.96%)</title><rect x="33.6538%" y="725" width="0.9615%" height="15" fill="rgb(233,208,19)" fg:x="35" fg:w="1"/><text x="33.9038%" y="735.50"></text></g><g><title>do_syscall_64 (1 samples, 0.96%)</title><rect x="33.6538%" y="709" width="0.9615%" height="15" fill="rgb(216,164,2)" fg:x="35" fg:w="1"/><text x="33.9038%" y="719.50"></text></g><g><title>__x64_sys_timerfd_settime (1 samples, 0.96%)</title><rect x="33.6538%" y="693" width="0.9615%" height="15" fill="rgb(220,129,5)" fg:x="35" fg:w="1"/><text x="33.9038%" y="703.50"></text></g><g><title>put_itimerspec64 (1 samples, 0.96%)</title><rect x="33.6538%" y="677" width="0.9615%" height="15" fill="rgb(242,17,10)" fg:x="35" fg:w="1"/><text x="33.9038%" y="687.50"></text></g><g><title>_copy_to_user (1 samples, 0.96%)</title><rect x="33.6538%" y="661" width="0.9615%" height="15" fill="rgb(242,107,0)" fg:x="35" fg:w="1"/><text x="33.9038%" y="671.50"></text></g><g><title>copy_user_generic_string (1 samples, 0.96%)</title><rect x="33.6538%" y="645" width="0.9615%" height="15" fill="rgb(251,28,31)" fg:x="35" fg:w="1"/><text x="33.9038%" y="655.50"></text></g><g><title>[unknown] (22 samples, 21.15%)</title><rect x="14.4231%" y="885" width="21.1538%" height="15" fill="rgb(233,223,10)" fg:x="15" fg:w="22"/><text x="14.6731%" y="895.50">[unknown]</text></g><g><title>tftp::main (8 samples, 7.69%)</title><rect x="27.8846%" y="869" width="7.6923%" height="15" fill="rgb(215,21,27)" fg:x="29" fg:w="8"/><text x="28.1346%" y="879.50">tftp::main</text></g><g><title>tftp::sender::start_send (8 samples, 7.69%)</title><rect x="27.8846%" y="853" width="7.6923%" height="15" fill="rgb(232,23,21)" fg:x="29" fg:w="8"/><text x="28.1346%" y="863.50">tftp::sende..</text></g><g><title>tftp::client::sender::send_file (8 samples, 7.69%)</title><rect x="27.8846%" y="837" width="7.6923%" height="15" fill="rgb(244,5,23)" fg:x="29" fg:w="8"/><text x="28.1346%" y="847.50">tftp::clien..</text></g><g><title>&lt;tftp::socket::UdpUnboundSocket as tftp::socket::Socket&gt;::recv_from (8 samples, 7.69%)</title><rect x="27.8846%" y="821" width="7.6923%" height="15" fill="rgb(226,81,46)" fg:x="29" fg:w="8"/><text x="28.1346%" y="831.50">&lt;tftp::sock..</text></g><g><title>polling::Poller::wait (8 samples, 7.69%)</title><rect x="27.8846%" y="805" width="7.6923%" height="15" fill="rgb(247,70,30)" fg:x="29" fg:w="8"/><text x="28.1346%" y="815.50">polling::Po..</text></g><g><title>polling::epoll::Poller::wait (8 samples, 7.69%)</title><rect x="27.8846%" y="789" width="7.6923%" height="15" fill="rgb(212,68,19)" fg:x="29" fg:w="8"/><text x="28.1346%" y="799.50">polling::ep..</text></g><g><title>rustix::time::timerfd::timerfd_settime (2 samples, 1.92%)</title><rect x="33.6538%" y="773" width="1.9231%" height="15" fill="rgb(240,187,13)" fg:x="35" fg:w="2"/><text x="33.9038%" y="783.50">r..</text></g><g><title>rustix::backend::time::syscalls::timerfd_settime (2 samples, 1.92%)</title><rect x="33.6538%" y="757" width="1.9231%" height="15" fill="rgb(223,113,26)" fg:x="35" fg:w="2"/><text x="33.9038%" y="767.50">r..</text></g><g><title>rustix::backend::arch::asm::syscall4 (2 samples, 1.92%)</title><rect x="33.6538%" y="741" width="1.9231%" height="15" fill="rgb(206,192,2)" fg:x="35" fg:w="2"/><text x="33.9038%" y="751.50">r..</text></g><g><title>rustix::backend::event::epoll::_::&lt;impl core::ops::bit::BitOr for rustix::backend::event::epoll::EventFlags&gt;::bitor (1 samples, 0.96%)</title><rect x="34.6154%" y="725" width="0.9615%" height="15" fill="rgb(241,108,4)" fg:x="36" fg:w="1"/><text x="34.8654%" y="735.50"></text></g><g><title>__x86_indirect_thunk_rax (1 samples, 0.96%)</title><rect x="35.5769%" y="885" width="0.9615%" height="15" fill="rgb(247,173,49)" fg:x="37" fg:w="1"/><text x="35.8269%" y="895.50"></text></g><g><title>&lt;tftp::packet::Packet as tftp::packet::ByteConverter&gt;::from_bytes (1 samples, 0.96%)</title><rect x="36.5385%" y="565" width="0.9615%" height="15" fill="rgb(224,114,35)" fg:x="38" fg:w="1"/><text x="36.7885%" y="575.50"></text></g><g><title>tftp::packet::PacketType::from_bytes (1 samples, 0.96%)</title><rect x="36.5385%" y="549" width="0.9615%" height="15" fill="rgb(245,159,27)" fg:x="38" fg:w="1"/><text x="36.7885%" y="559.50"></text></g><g><title>&lt;&amp;mut [u8] as tftp::buffer::SliceMutExt&gt;::write_bytes (1 samples, 0.96%)</title><rect x="38.4615%" y="549" width="0.9615%" height="15" fill="rgb(245,172,44)" fg:x="40" fg:w="1"/><text x="38.7115%" y="559.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.96%)</title><rect x="38.4615%" y="533" width="0.9615%" height="15" fill="rgb(236,23,11)" fg:x="40" fg:w="1"/><text x="38.7115%" y="543.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (1 samples, 0.96%)</title><rect x="39.4231%" y="549" width="0.9615%" height="15" fill="rgb(205,117,38)" fg:x="41" fg:w="1"/><text x="39.6731%" y="559.50"></text></g><g><title>&lt;tftp::readers::multiple_block_reader::MultipleBlockReader&lt;R&gt; as tftp::readers::block_reader::BlockReader&gt;::next::{{closure}} (1 samples, 0.96%)</title><rect x="39.4231%" y="533" width="0.9615%" height="15" fill="rgb(237,72,25)" fg:x="41" fg:w="1"/><text x="39.6731%" y="543.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.96%)</title><rect x="39.4231%" y="517" width="0.9615%" height="15" fill="rgb(244,70,9)" fg:x="41" fg:w="1"/><text x="39.6731%" y="527.50"></text></g><g><title>&lt;T as core::option::SpecOptionPartialEq&gt;::eq (1 samples, 0.96%)</title><rect x="39.4231%" y="501" width="0.9615%" height="15" fill="rgb(217,125,39)" fg:x="41" fg:w="1"/><text x="39.6731%" y="511.50"></text></g><g><title>&lt;tftp::readers::multiple_block_reader::MultipleBlockReader&lt;R&gt; as tftp::readers::block_reader::BlockReader&gt;::next (4 samples, 3.85%)</title><rect x="37.5000%" y="565" width="3.8462%" height="15" fill="rgb(235,36,10)" fg:x="39" fg:w="4"/><text x="37.7500%" y="575.50">&lt;tft..</text></g><g><title>&lt;tftp::std_compat::fs::File as tftp::std_compat::io::Read&gt;::read (1 samples, 0.96%)</title><rect x="40.3846%" y="549" width="0.9615%" height="15" fill="rgb(251,123,47)" fg:x="42" fg:w="1"/><text x="40.6346%" y="559.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (1 samples, 0.96%)</title><rect x="40.3846%" y="533" width="0.9615%" height="15" fill="rgb(221,13,13)" fg:x="42" fg:w="1"/><text x="40.6346%" y="543.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read (1 samples, 0.96%)</title><rect x="40.3846%" y="517" width="0.9615%" height="15" fill="rgb(238,131,9)" fg:x="42" fg:w="1"/><text x="40.6346%" y="527.50"></text></g><g><title>std::sys::unix::fs::File::read (1 samples, 0.96%)</title><rect x="40.3846%" y="501" width="0.9615%" height="15" fill="rgb(211,50,8)" fg:x="42" fg:w="1"/><text x="40.6346%" y="511.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (1 samples, 0.96%)</title><rect x="40.3846%" y="485" width="0.9615%" height="15" fill="rgb(245,182,24)" fg:x="42" fg:w="1"/><text x="40.6346%" y="495.50"></text></g><g><title>__GI___libc_read (1 samples, 0.96%)</title><rect x="40.3846%" y="469" width="0.9615%" height="15" fill="rgb(242,14,37)" fg:x="42" fg:w="1"/><text x="40.6346%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.96%)</title><rect x="41.3462%" y="549" width="0.9615%" height="15" fill="rgb(246,228,12)" fg:x="43" fg:w="1"/><text x="41.5962%" y="559.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (1 samples, 0.96%)</title><rect x="41.3462%" y="533" width="0.9615%" height="15" fill="rgb(213,55,15)" fg:x="43" fg:w="1"/><text x="41.5962%" y="543.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (1 samples, 0.96%)</title><rect x="41.3462%" y="517" width="0.9615%" height="15" fill="rgb(209,9,3)" fg:x="43" fg:w="1"/><text x="41.5962%" y="527.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (1 samples, 0.96%)</title><rect x="41.3462%" y="501" width="0.9615%" height="15" fill="rgb(230,59,30)" fg:x="43" fg:w="1"/><text x="41.5962%" y="511.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.96%)</title><rect x="42.3077%" y="549" width="0.9615%" height="15" fill="rgb(209,121,21)" fg:x="44" fg:w="1"/><text x="42.5577%" y="559.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.96%)</title><rect x="42.3077%" y="533" width="0.9615%" height="15" fill="rgb(220,109,13)" fg:x="44" fg:w="1"/><text x="42.5577%" y="543.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.96%)</title><rect x="42.3077%" y="517" width="0.9615%" height="15" fill="rgb(232,18,1)" fg:x="44" fg:w="1"/><text x="42.5577%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.96%)</title><rect x="42.3077%" y="501" width="0.9615%" height="15" fill="rgb(215,41,42)" fg:x="44" fg:w="1"/><text x="42.5577%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.96%)</title><rect x="42.3077%" y="485" width="0.9615%" height="15" fill="rgb(224,123,36)" fg:x="44" fg:w="1"/><text x="42.5577%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.96%)</title><rect x="42.3077%" y="469" width="0.9615%" height="15" fill="rgb(240,125,3)" fg:x="44" fg:w="1"/><text x="42.5577%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.96%)</title><rect x="42.3077%" y="453" width="0.9615%" height="15" fill="rgb(205,98,50)" fg:x="44" fg:w="1"/><text x="42.5577%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.96%)</title><rect x="42.3077%" y="437" width="0.9615%" height="15" fill="rgb(205,185,37)" fg:x="44" fg:w="1"/><text x="42.5577%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.96%)</title><rect x="42.3077%" y="421" width="0.9615%" height="15" fill="rgb(238,207,15)" fg:x="44" fg:w="1"/><text x="42.5577%" y="431.50"></text></g><g><title>&lt;rustix::backend::event::epoll::Iter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.96%)</title><rect x="42.3077%" y="405" width="0.9615%" height="15" fill="rgb(213,199,42)" fg:x="44" fg:w="1"/><text x="42.5577%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.96%)</title><rect x="42.3077%" y="389" width="0.9615%" height="15" fill="rgb(235,201,11)" fg:x="44" fg:w="1"/><text x="42.5577%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.96%)</title><rect x="42.3077%" y="373" width="0.9615%" height="15" fill="rgb(207,46,11)" fg:x="44" fg:w="1"/><text x="42.5577%" y="383.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.96%)</title><rect x="42.3077%" y="357" width="0.9615%" height="15" fill="rgb(241,35,35)" fg:x="44" fg:w="1"/><text x="42.5577%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 1.92%)</title><rect x="44.2308%" y="469" width="1.9231%" height="15" fill="rgb(243,32,47)" fg:x="46" fg:w="2"/><text x="44.4808%" y="479.50">h..</text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 1.92%)</title><rect x="44.2308%" y="453" width="1.9231%" height="15" fill="rgb(247,202,23)" fg:x="46" fg:w="2"/><text x="44.4808%" y="463.50">c..</text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.96%)</title><rect x="45.1923%" y="437" width="0.9615%" height="15" fill="rgb(219,102,11)" fg:x="47" fg:w="1"/><text x="45.4423%" y="447.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.96%)</title><rect x="45.1923%" y="421" width="0.9615%" height="15" fill="rgb(243,110,44)" fg:x="47" fg:w="1"/><text x="45.4423%" y="431.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.96%)</title><rect x="45.1923%" y="405" width="0.9615%" height="15" fill="rgb(222,74,54)" fg:x="47" fg:w="1"/><text x="45.4423%" y="415.50"></text></g><g><title>[[vdso]] (1 samples, 0.96%)</title><rect x="45.1923%" y="389" width="0.9615%" height="15" fill="rgb(216,99,12)" fg:x="47" fg:w="1"/><text x="45.4423%" y="399.50"></text></g><g><title>&lt;tftp::socket::UdpUnboundSocket as tftp::socket::Socket&gt;::modify_interest (4 samples, 3.85%)</title><rect x="43.2692%" y="549" width="3.8462%" height="15" fill="rgb(226,22,26)" fg:x="45" fg:w="4"/><text x="43.5192%" y="559.50">&lt;tft..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (3 samples, 2.88%)</title><rect x="44.2308%" y="533" width="2.8846%" height="15" fill="rgb(217,163,10)" fg:x="46" fg:w="3"/><text x="44.4808%" y="543.50">st..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (3 samples, 2.88%)</title><rect x="44.2308%" y="517" width="2.8846%" height="15" fill="rgb(213,25,53)" fg:x="46" fg:w="3"/><text x="44.4808%" y="527.50">ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (3 samples, 2.88%)</title><rect x="44.2308%" y="501" width="2.8846%" height="15" fill="rgb(252,105,26)" fg:x="46" fg:w="3"/><text x="44.4808%" y="511.50">ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (3 samples, 2.88%)</title><rect x="44.2308%" y="485" width="2.8846%" height="15" fill="rgb(220,39,43)" fg:x="46" fg:w="3"/><text x="44.4808%" y="495.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.96%)</title><rect x="46.1538%" y="469" width="0.9615%" height="15" fill="rgb(229,68,48)" fg:x="48" fg:w="1"/><text x="46.4038%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.96%)</title><rect x="46.1538%" y="453" width="0.9615%" height="15" fill="rgb(252,8,32)" fg:x="48" fg:w="1"/><text x="46.4038%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.96%)</title><rect x="46.1538%" y="437" width="0.9615%" height="15" fill="rgb(223,20,43)" fg:x="48" fg:w="1"/><text x="46.4038%" y="447.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (1 samples, 0.96%)</title><rect x="46.1538%" y="421" width="0.9615%" height="15" fill="rgb(229,81,49)" fg:x="48" fg:w="1"/><text x="46.4038%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.96%)</title><rect x="46.1538%" y="405" width="0.9615%" height="15" fill="rgb(236,28,36)" fg:x="48" fg:w="1"/><text x="46.4038%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.96%)</title><rect x="46.1538%" y="389" width="0.9615%" height="15" fill="rgb(249,185,26)" fg:x="48" fg:w="1"/><text x="46.4038%" y="399.50"></text></g><g><title>&lt;tftp::socket::UdpUnboundSocket as tftp::socket::ToSocketId&gt;::as_raw_fd (1 samples, 0.96%)</title><rect x="47.1154%" y="549" width="0.9615%" height="15" fill="rgb(249,174,33)" fg:x="49" fg:w="1"/><text x="47.3654%" y="559.50"></text></g><g><title>&lt;std::os::fd::owned::BorrowedFd as std::os::fd::raw::AsRawFd&gt;::as_raw_fd (1 samples, 0.96%)</title><rect x="47.1154%" y="533" width="0.9615%" height="15" fill="rgb(233,201,37)" fg:x="49" fg:w="1"/><text x="47.3654%" y="543.50"></text></g><g><title>&lt;tftp::socket::UdpUnboundSocket as tftp::socket::Socket&gt;::recv_from (8 samples, 7.69%)</title><rect x="41.3462%" y="565" width="7.6923%" height="15" fill="rgb(221,78,26)" fg:x="43" fg:w="8"/><text x="41.5962%" y="575.50">&lt;tftp::sock..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.96%)</title><rect x="48.0769%" y="549" width="0.9615%" height="15" fill="rgb(250,127,30)" fg:x="50" fg:w="1"/><text x="48.3269%" y="559.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.96%)</title><rect x="48.0769%" y="533" width="0.9615%" height="15" fill="rgb(230,49,44)" fg:x="50" fg:w="1"/><text x="48.3269%" y="543.50"></text></g><g><title>tftp::std_compat::io::from_io_err (1 samples, 0.96%)</title><rect x="48.0769%" y="517" width="0.9615%" height="15" fill="rgb(229,67,23)" fg:x="50" fg:w="1"/><text x="48.3269%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::Error&gt; (1 samples, 0.96%)</title><rect x="48.0769%" y="501" width="0.9615%" height="15" fill="rgb(249,83,47)" fg:x="50" fg:w="1"/><text x="48.3269%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::repr_bitpacked::Repr&gt; (1 samples, 0.96%)</title><rect x="48.0769%" y="485" width="0.9615%" height="15" fill="rgb(215,43,3)" fg:x="50" fg:w="1"/><text x="48.3269%" y="495.50"></text></g><g><title>&lt;std::io::error::repr_bitpacked::Repr as core::ops::drop::Drop&gt;::drop (1 samples, 0.96%)</title><rect x="48.0769%" y="469" width="0.9615%" height="15" fill="rgb(238,154,13)" fg:x="50" fg:w="1"/><text x="48.3269%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::ErrorData&lt;alloc::boxed::Box&lt;std::io::error::Custom&gt;&gt;&gt; (1 samples, 0.96%)</title><rect x="48.0769%" y="453" width="0.9615%" height="15" fill="rgb(219,56,2)" fg:x="50" fg:w="1"/><text x="48.3269%" y="463.50"></text></g><g><title>__x86_return_thunk (1 samples, 0.96%)</title><rect x="50.9615%" y="485" width="0.9615%" height="15" fill="rgb(233,0,4)" fg:x="53" fg:w="1"/><text x="51.2115%" y="495.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.96%)</title><rect x="53.8462%" y="405" width="0.9615%" height="15" fill="rgb(235,30,7)" fg:x="56" fg:w="1"/><text x="54.0962%" y="415.50"></text></g><g><title>__build_skb_around (1 samples, 0.96%)</title><rect x="55.7692%" y="325" width="0.9615%" height="15" fill="rgb(250,79,13)" fg:x="58" fg:w="1"/><text x="56.0192%" y="335.50"></text></g><g><title>__ip_append_data (3 samples, 2.88%)</title><rect x="54.8077%" y="389" width="2.8846%" height="15" fill="rgb(211,146,34)" fg:x="57" fg:w="3"/><text x="55.0577%" y="399.50">__..</text></g><g><title>sock_alloc_send_pskb (2 samples, 1.92%)</title><rect x="55.7692%" y="373" width="1.9231%" height="15" fill="rgb(228,22,38)" fg:x="58" fg:w="2"/><text x="56.0192%" y="383.50">s..</text></g><g><title>alloc_skb_with_frags (2 samples, 1.92%)</title><rect x="55.7692%" y="357" width="1.9231%" height="15" fill="rgb(235,168,5)" fg:x="58" fg:w="2"/><text x="56.0192%" y="367.50">a..</text></g><g><title>__alloc_skb (2 samples, 1.92%)</title><rect x="55.7692%" y="341" width="1.9231%" height="15" fill="rgb(221,155,16)" fg:x="58" fg:w="2"/><text x="56.0192%" y="351.50">_..</text></g><g><title>kmalloc_reserve (1 samples, 0.96%)</title><rect x="56.7308%" y="325" width="0.9615%" height="15" fill="rgb(215,215,53)" fg:x="59" fg:w="1"/><text x="56.9808%" y="335.50"></text></g><g><title>__kmalloc_node_track_caller (1 samples, 0.96%)</title><rect x="56.7308%" y="309" width="0.9615%" height="15" fill="rgb(223,4,10)" fg:x="59" fg:w="1"/><text x="56.9808%" y="319.50"></text></g><g><title>__kmem_cache_alloc_node (1 samples, 0.96%)</title><rect x="56.7308%" y="293" width="0.9615%" height="15" fill="rgb(234,103,6)" fg:x="59" fg:w="1"/><text x="56.9808%" y="303.50"></text></g><g><title>__memset (1 samples, 0.96%)</title><rect x="56.7308%" y="277" width="0.9615%" height="15" fill="rgb(227,97,0)" fg:x="59" fg:w="1"/><text x="56.9808%" y="287.50"></text></g><g><title>ip_make_skb (6 samples, 5.77%)</title><rect x="54.8077%" y="405" width="5.7692%" height="15" fill="rgb(234,150,53)" fg:x="57" fg:w="6"/><text x="55.0577%" y="415.50">ip_make..</text></g><g><title>__ip_make_skb (3 samples, 2.88%)</title><rect x="57.6923%" y="389" width="2.8846%" height="15" fill="rgb(228,201,54)" fg:x="60" fg:w="3"/><text x="57.9423%" y="399.50">__..</text></g><g><title>__ip_select_ident (1 samples, 0.96%)</title><rect x="59.6154%" y="373" width="0.9615%" height="15" fill="rgb(222,22,37)" fg:x="62" fg:w="1"/><text x="59.8654%" y="383.50"></text></g><g><title>ip_route_output_flow (2 samples, 1.92%)</title><rect x="60.5769%" y="405" width="1.9231%" height="15" fill="rgb(237,53,32)" fg:x="63" fg:w="2"/><text x="60.8269%" y="415.50">i..</text></g><g><title>ip_route_output_key_hash_rcu (1 samples, 0.96%)</title><rect x="61.5385%" y="389" width="0.9615%" height="15" fill="rgb(233,25,53)" fg:x="64" fg:w="1"/><text x="61.7885%" y="399.50"></text></g><g><title>find_exception (1 samples, 0.96%)</title><rect x="61.5385%" y="373" width="0.9615%" height="15" fill="rgb(210,40,34)" fg:x="64" fg:w="1"/><text x="61.7885%" y="383.50"></text></g><g><title>__ip_local_out (2 samples, 1.92%)</title><rect x="62.5000%" y="373" width="1.9231%" height="15" fill="rgb(241,220,44)" fg:x="65" fg:w="2"/><text x="62.7500%" y="383.50">_..</text></g><g><title>nf_hook_slow (2 samples, 1.92%)</title><rect x="62.5000%" y="357" width="1.9231%" height="15" fill="rgb(235,28,35)" fg:x="65" fg:w="2"/><text x="62.7500%" y="367.50">n..</text></g><g><title>nf_conntrack_in (2 samples, 1.92%)</title><rect x="62.5000%" y="341" width="1.9231%" height="15" fill="rgb(210,56,17)" fg:x="65" fg:w="2"/><text x="62.7500%" y="351.50">n..</text></g><g><title>get_l4proto (1 samples, 0.96%)</title><rect x="63.4615%" y="325" width="0.9615%" height="15" fill="rgb(224,130,29)" fg:x="66" fg:w="1"/><text x="63.7115%" y="335.50"></text></g><g><title>__dev_queue_xmit (1 samples, 0.96%)</title><rect x="65.3846%" y="357" width="0.9615%" height="15" fill="rgb(235,212,8)" fg:x="68" fg:w="1"/><text x="65.6346%" y="367.50"></text></g><g><title>dev_hard_start_xmit (1 samples, 0.96%)</title><rect x="65.3846%" y="341" width="0.9615%" height="15" fill="rgb(223,33,50)" fg:x="68" fg:w="1"/><text x="65.6346%" y="351.50"></text></g><g><title>loopback_xmit (1 samples, 0.96%)</title><rect x="65.3846%" y="325" width="0.9615%" height="15" fill="rgb(219,149,13)" fg:x="68" fg:w="1"/><text x="65.6346%" y="335.50"></text></g><g><title>__netif_rx (1 samples, 0.96%)</title><rect x="65.3846%" y="309" width="0.9615%" height="15" fill="rgb(250,156,29)" fg:x="68" fg:w="1"/><text x="65.6346%" y="319.50"></text></g><g><title>netif_rx_internal (1 samples, 0.96%)</title><rect x="65.3846%" y="293" width="0.9615%" height="15" fill="rgb(216,193,19)" fg:x="68" fg:w="1"/><text x="65.6346%" y="303.50"></text></g><g><title>enqueue_to_backlog (1 samples, 0.96%)</title><rect x="65.3846%" y="277" width="0.9615%" height="15" fill="rgb(216,135,14)" fg:x="68" fg:w="1"/><text x="65.6346%" y="287.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.96%)</title><rect x="65.3846%" y="261" width="0.9615%" height="15" fill="rgb(241,47,5)" fg:x="68" fg:w="1"/><text x="65.6346%" y="271.50"></text></g><g><title>__sk_mem_raise_allocated (1 samples, 0.96%)</title><rect x="68.2692%" y="149" width="0.9615%" height="15" fill="rgb(233,42,35)" fg:x="71" fg:w="1"/><text x="68.5192%" y="159.50"></text></g><g><title>mem_cgroup_charge_skmem (1 samples, 0.96%)</title><rect x="68.2692%" y="133" width="0.9615%" height="15" fill="rgb(231,13,6)" fg:x="71" fg:w="1"/><text x="68.5192%" y="143.50"></text></g><g><title>mod_memcg_state (1 samples, 0.96%)</title><rect x="68.2692%" y="117" width="0.9615%" height="15" fill="rgb(207,181,40)" fg:x="71" fg:w="1"/><text x="68.5192%" y="127.50"></text></g><g><title>__mod_memcg_state (1 samples, 0.96%)</title><rect x="68.2692%" y="101" width="0.9615%" height="15" fill="rgb(254,173,49)" fg:x="71" fg:w="1"/><text x="68.5192%" y="111.50"></text></g><g><title>cgroup_rstat_updated (1 samples, 0.96%)</title><rect x="68.2692%" y="85" width="0.9615%" height="15" fill="rgb(221,1,38)" fg:x="71" fg:w="1"/><text x="68.5192%" y="95.50"></text></g><g><title>__wake_up_common_lock (2 samples, 1.92%)</title><rect x="69.2308%" y="85" width="1.9231%" height="15" fill="rgb(206,124,46)" fg:x="72" fg:w="2"/><text x="69.4808%" y="95.50">_..</text></g><g><title>__wake_up_common (2 samples, 1.92%)</title><rect x="69.2308%" y="69" width="1.9231%" height="15" fill="rgb(249,21,11)" fg:x="72" fg:w="2"/><text x="69.4808%" y="79.50">_..</text></g><g><title>ep_autoremove_wake_function (1 samples, 0.96%)</title><rect x="70.1923%" y="53" width="0.9615%" height="15" fill="rgb(222,201,40)" fg:x="73" fg:w="1"/><text x="70.4423%" y="63.50"></text></g><g><title>try_to_wake_up (1 samples, 0.96%)</title><rect x="70.1923%" y="37" width="0.9615%" height="15" fill="rgb(235,61,29)" fg:x="73" fg:w="1"/><text x="70.4423%" y="47.50"></text></g><g><title>__wake_up_common (3 samples, 2.88%)</title><rect x="69.2308%" y="117" width="2.8846%" height="15" fill="rgb(219,207,3)" fg:x="72" fg:w="3"/><text x="69.4808%" y="127.50">__..</text></g><g><title>ep_poll_callback (3 samples, 2.88%)</title><rect x="69.2308%" y="101" width="2.8846%" height="15" fill="rgb(222,56,46)" fg:x="72" fg:w="3"/><text x="69.4808%" y="111.50">ep..</text></g><g><title>_raw_read_lock_irqsave (1 samples, 0.96%)</title><rect x="71.1538%" y="85" width="0.9615%" height="15" fill="rgb(239,76,54)" fg:x="74" fg:w="1"/><text x="71.4038%" y="95.50"></text></g><g><title>__udp4_lib_rcv (7 samples, 6.73%)</title><rect x="66.3462%" y="213" width="6.7308%" height="15" fill="rgb(231,124,27)" fg:x="69" fg:w="7"/><text x="66.5962%" y="223.50">__udp4_li..</text></g><g><title>udp_unicast_rcv_skb (7 samples, 6.73%)</title><rect x="66.3462%" y="197" width="6.7308%" height="15" fill="rgb(249,195,6)" fg:x="69" fg:w="7"/><text x="66.5962%" y="207.50">udp_unica..</text></g><g><title>udp_queue_rcv_one_skb (6 samples, 5.77%)</title><rect x="67.3077%" y="181" width="5.7692%" height="15" fill="rgb(237,174,47)" fg:x="70" fg:w="6"/><text x="67.5577%" y="191.50">udp_que..</text></g><g><title>__udp_enqueue_schedule_skb (5 samples, 4.81%)</title><rect x="68.2692%" y="165" width="4.8077%" height="15" fill="rgb(206,201,31)" fg:x="71" fg:w="5"/><text x="68.5192%" y="175.50">__udp_..</text></g><g><title>sock_def_readable (4 samples, 3.85%)</title><rect x="69.2308%" y="149" width="3.8462%" height="15" fill="rgb(231,57,52)" fg:x="72" fg:w="4"/><text x="69.4808%" y="159.50">sock..</text></g><g><title>__wake_up_common_lock (4 samples, 3.85%)</title><rect x="69.2308%" y="133" width="3.8462%" height="15" fill="rgb(248,177,22)" fg:x="72" fg:w="4"/><text x="69.4808%" y="143.50">__wa..</text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.96%)</title><rect x="72.1154%" y="117" width="0.9615%" height="15" fill="rgb(215,211,37)" fg:x="75" fg:w="1"/><text x="72.3654%" y="127.50"></text></g><g><title>std::net::udp::UdpSocket::send_to (24 samples, 23.08%)</title><rect x="50.9615%" y="549" width="23.0769%" height="15" fill="rgb(241,128,51)" fg:x="53" fg:w="24"/><text x="51.2115%" y="559.50">std::net::udp::UdpSocket::send_to</text></g><g><title>std::sys_common::net::UdpSocket::send_to (24 samples, 23.08%)</title><rect x="50.9615%" y="533" width="23.0769%" height="15" fill="rgb(227,165,31)" fg:x="53" fg:w="24"/><text x="51.2115%" y="543.50">std::sys_common::net::UdpSocket::send..</text></g><g><title>__libc_sendto (24 samples, 23.08%)</title><rect x="50.9615%" y="517" width="23.0769%" height="15" fill="rgb(228,167,24)" fg:x="53" fg:w="24"/><text x="51.2115%" y="527.50">__libc_sendto</text></g><g><title>entry_SYSCALL_64_after_hwframe (24 samples, 23.08%)</title><rect x="50.9615%" y="501" width="23.0769%" height="15" fill="rgb(228,143,12)" fg:x="53" fg:w="24"/><text x="51.2115%" y="511.50">entry_SYSCALL_64_after_hwframe</text></g><g><title>do_syscall_64 (23 samples, 22.12%)</title><rect x="51.9231%" y="485" width="22.1154%" height="15" fill="rgb(249,149,8)" fg:x="54" fg:w="23"/><text x="52.1731%" y="495.50">do_syscall_64</text></g><g><title>__x64_sys_sendto (23 samples, 22.12%)</title><rect x="51.9231%" y="469" width="22.1154%" height="15" fill="rgb(243,35,44)" fg:x="54" fg:w="23"/><text x="52.1731%" y="479.50">__x64_sys_sendto</text></g><g><title>__sys_sendto (23 samples, 22.12%)</title><rect x="51.9231%" y="453" width="22.1154%" height="15" fill="rgb(246,89,9)" fg:x="54" fg:w="23"/><text x="52.1731%" y="463.50">__sys_sendto</text></g><g><title>sock_sendmsg (22 samples, 21.15%)</title><rect x="52.8846%" y="437" width="21.1538%" height="15" fill="rgb(233,213,13)" fg:x="55" fg:w="22"/><text x="53.1346%" y="447.50">sock_sendmsg</text></g><g><title>udp_sendmsg (22 samples, 21.15%)</title><rect x="52.8846%" y="421" width="21.1538%" height="15" fill="rgb(233,141,41)" fg:x="55" fg:w="22"/><text x="53.1346%" y="431.50">udp_sendmsg</text></g><g><title>udp_send_skb (12 samples, 11.54%)</title><rect x="62.5000%" y="405" width="11.5385%" height="15" fill="rgb(239,167,4)" fg:x="65" fg:w="12"/><text x="62.7500%" y="415.50">udp_send_skb</text></g><g><title>ip_send_skb (12 samples, 11.54%)</title><rect x="62.5000%" y="389" width="11.5385%" height="15" fill="rgb(209,217,16)" fg:x="65" fg:w="12"/><text x="62.7500%" y="399.50">ip_send_skb</text></g><g><title>ip_finish_output2 (10 samples, 9.62%)</title><rect x="64.4231%" y="373" width="9.6154%" height="15" fill="rgb(219,88,35)" fg:x="67" fg:w="10"/><text x="64.6731%" y="383.50">ip_finish_outp..</text></g><g><title>__local_bh_enable_ip (8 samples, 7.69%)</title><rect x="66.3462%" y="357" width="7.6923%" height="15" fill="rgb(220,193,23)" fg:x="69" fg:w="8"/><text x="66.5962%" y="367.50">__local_bh_..</text></g><g><title>do_softirq.part.0 (8 samples, 7.69%)</title><rect x="66.3462%" y="341" width="7.6923%" height="15" fill="rgb(230,90,52)" fg:x="69" fg:w="8"/><text x="66.5962%" y="351.50">do_softirq...</text></g><g><title>__do_softirq (8 samples, 7.69%)</title><rect x="66.3462%" y="325" width="7.6923%" height="15" fill="rgb(252,106,19)" fg:x="69" fg:w="8"/><text x="66.5962%" y="335.50">__do_softirq</text></g><g><title>net_rx_action (8 samples, 7.69%)</title><rect x="66.3462%" y="309" width="7.6923%" height="15" fill="rgb(206,74,20)" fg:x="69" fg:w="8"/><text x="66.5962%" y="319.50">net_rx_acti..</text></g><g><title>__napi_poll (8 samples, 7.69%)</title><rect x="66.3462%" y="293" width="7.6923%" height="15" fill="rgb(230,138,44)" fg:x="69" fg:w="8"/><text x="66.5962%" y="303.50">__napi_poll</text></g><g><title>process_backlog (8 samples, 7.69%)</title><rect x="66.3462%" y="277" width="7.6923%" height="15" fill="rgb(235,182,43)" fg:x="69" fg:w="8"/><text x="66.5962%" y="287.50">process_bac..</text></g><g><title>__netif_receive_skb_one_core (8 samples, 7.69%)</title><rect x="66.3462%" y="261" width="7.6923%" height="15" fill="rgb(242,16,51)" fg:x="69" fg:w="8"/><text x="66.5962%" y="271.50">__netif_rec..</text></g><g><title>ip_local_deliver_finish (8 samples, 7.69%)</title><rect x="66.3462%" y="245" width="7.6923%" height="15" fill="rgb(248,9,4)" fg:x="69" fg:w="8"/><text x="66.5962%" y="255.50">ip_local_de..</text></g><g><title>ip_protocol_deliver_rcu (8 samples, 7.69%)</title><rect x="66.3462%" y="229" width="7.6923%" height="15" fill="rgb(210,31,22)" fg:x="69" fg:w="8"/><text x="66.5962%" y="239.50">ip_protocol..</text></g><g><title>raw_local_deliver (1 samples, 0.96%)</title><rect x="73.0769%" y="213" width="0.9615%" height="15" fill="rgb(239,54,39)" fg:x="76" fg:w="1"/><text x="73.3269%" y="223.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.96%)</title><rect x="73.0769%" y="197" width="0.9615%" height="15" fill="rgb(230,99,41)" fg:x="76" fg:w="1"/><text x="73.3269%" y="207.50"></text></g><g><title>&lt;tftp::socket::UdpUnboundSocket as tftp::socket::Socket&gt;::send_to (27 samples, 25.96%)</title><rect x="49.0385%" y="565" width="25.9615%" height="15" fill="rgb(253,106,12)" fg:x="51" fg:w="27"/><text x="49.2885%" y="575.50">&lt;tftp::socket::UdpUnboundSocket as tftp::s..</text></g><g><title>tftp::socket::socket_addr_to_std (1 samples, 0.96%)</title><rect x="74.0385%" y="549" width="0.9615%" height="15" fill="rgb(213,46,41)" fg:x="77" fg:w="1"/><text x="74.2885%" y="559.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.96%)</title><rect x="79.8077%" y="517" width="0.9615%" height="15" fill="rgb(215,133,35)" fg:x="83" fg:w="1"/><text x="80.0577%" y="527.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.96%)</title><rect x="79.8077%" y="501" width="0.9615%" height="15" fill="rgb(213,28,5)" fg:x="83" fg:w="1"/><text x="80.0577%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (7 samples, 6.73%)</title><rect x="75.0000%" y="533" width="6.7308%" height="15" fill="rgb(215,77,49)" fg:x="78" fg:w="7"/><text x="75.2500%" y="543.50">alloc::ve..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.96%)</title><rect x="80.7692%" y="517" width="0.9615%" height="15" fill="rgb(248,100,22)" fg:x="84" fg:w="1"/><text x="81.0192%" y="527.50"></text></g><g><title>tftp::buffer::resize_buffer (8 samples, 7.69%)</title><rect x="75.0000%" y="565" width="7.6923%" height="15" fill="rgb(208,67,9)" fg:x="78" fg:w="8"/><text x="75.2500%" y="575.50">tftp::buffe..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (8 samples, 7.69%)</title><rect x="75.0000%" y="549" width="7.6923%" height="15" fill="rgb(219,133,21)" fg:x="78" fg:w="8"/><text x="75.2500%" y="559.50">alloc::vec:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.96%)</title><rect x="81.7308%" y="533" width="0.9615%" height="15" fill="rgb(246,46,29)" fg:x="85" fg:w="1"/><text x="81.9808%" y="543.50"></text></g><g><title>__libc_start_main_impl (49 samples, 47.12%)</title><rect x="36.5385%" y="869" width="47.1154%" height="15" fill="rgb(246,185,52)" fg:x="38" fg:w="49"/><text x="36.7885%" y="879.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (49 samples, 47.12%)</title><rect x="36.5385%" y="853" width="47.1154%" height="15" fill="rgb(252,136,11)" fg:x="38" fg:w="49"/><text x="36.7885%" y="863.50">__libc_start_call_main</text></g><g><title>main (49 samples, 47.12%)</title><rect x="36.5385%" y="837" width="47.1154%" height="15" fill="rgb(219,138,53)" fg:x="38" fg:w="49"/><text x="36.7885%" y="847.50">main</text></g><g><title>std::rt::lang_start (49 samples, 47.12%)</title><rect x="36.5385%" y="821" width="47.1154%" height="15" fill="rgb(211,51,23)" fg:x="38" fg:w="49"/><text x="36.7885%" y="831.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (49 samples, 47.12%)</title><rect x="36.5385%" y="805" width="47.1154%" height="15" fill="rgb(247,221,28)" fg:x="38" fg:w="49"/><text x="36.7885%" y="815.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (49 samples, 47.12%)</title><rect x="36.5385%" y="789" width="47.1154%" height="15" fill="rgb(251,222,45)" fg:x="38" fg:w="49"/><text x="36.7885%" y="799.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (49 samples, 47.12%)</title><rect x="36.5385%" y="773" width="47.1154%" height="15" fill="rgb(217,162,53)" fg:x="38" fg:w="49"/><text x="36.7885%" y="783.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (49 samples, 47.12%)</title><rect x="36.5385%" y="757" width="47.1154%" height="15" fill="rgb(229,93,14)" fg:x="38" fg:w="49"/><text x="36.7885%" y="767.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (49 samples, 47.12%)</title><rect x="36.5385%" y="741" width="47.1154%" height="15" fill="rgb(209,67,49)" fg:x="38" fg:w="49"/><text x="36.7885%" y="751.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (49 samples, 47.12%)</title><rect x="36.5385%" y="725" width="47.1154%" height="15" fill="rgb(213,87,29)" fg:x="38" fg:w="49"/><text x="36.7885%" y="735.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (49 samples, 47.12%)</title><rect x="36.5385%" y="709" width="47.1154%" height="15" fill="rgb(205,151,52)" fg:x="38" fg:w="49"/><text x="36.7885%" y="719.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (49 samples, 47.12%)</title><rect x="36.5385%" y="693" width="47.1154%" height="15" fill="rgb(253,215,39)" fg:x="38" fg:w="49"/><text x="36.7885%" y="703.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (49 samples, 47.12%)</title><rect x="36.5385%" y="677" width="47.1154%" height="15" fill="rgb(221,220,41)" fg:x="38" fg:w="49"/><text x="36.7885%" y="687.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::cal..</text></g><g><title>std::rt::lang_start::{{closure}} (49 samples, 47.12%)</title><rect x="36.5385%" y="661" width="47.1154%" height="15" fill="rgb(218,133,21)" fg:x="38" fg:w="49"/><text x="36.7885%" y="671.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (49 samples, 47.12%)</title><rect x="36.5385%" y="645" width="47.1154%" height="15" fill="rgb(221,193,43)" fg:x="38" fg:w="49"/><text x="36.7885%" y="655.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (49 samples, 47.12%)</title><rect x="36.5385%" y="629" width="47.1154%" height="15" fill="rgb(240,128,52)" fg:x="38" fg:w="49"/><text x="36.7885%" y="639.50">core::ops::function::FnOnce::call_once</text></g><g><title>tftp::main (49 samples, 47.12%)</title><rect x="36.5385%" y="613" width="47.1154%" height="15" fill="rgb(253,114,12)" fg:x="38" fg:w="49"/><text x="36.7885%" y="623.50">tftp::main</text></g><g><title>tftp::sender::start_send (49 samples, 47.12%)</title><rect x="36.5385%" y="597" width="47.1154%" height="15" fill="rgb(215,223,47)" fg:x="38" fg:w="49"/><text x="36.7885%" y="607.50">tftp::sender::start_send</text></g><g><title>tftp::client::sender::send_file (49 samples, 47.12%)</title><rect x="36.5385%" y="581" width="47.1154%" height="15" fill="rgb(248,225,23)" fg:x="38" fg:w="49"/><text x="36.7885%" y="591.50">tftp::client::sender::send_file</text></g><g><title>tftp::io::instant_callback (1 samples, 0.96%)</title><rect x="82.6923%" y="565" width="0.9615%" height="15" fill="rgb(250,108,0)" fg:x="86" fg:w="1"/><text x="82.9423%" y="575.50"></text></g><g><title>tftp::std_compat::time::Instant::from_time (1 samples, 0.96%)</title><rect x="82.6923%" y="549" width="0.9615%" height="15" fill="rgb(228,208,7)" fg:x="86" fg:w="1"/><text x="82.9423%" y="559.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.96%)</title><rect x="82.6923%" y="533" width="0.9615%" height="15" fill="rgb(244,45,10)" fg:x="86" fg:w="1"/><text x="82.9423%" y="543.50"></text></g><g><title>tftp::io::instant_callback::{{closure}} (1 samples, 0.96%)</title><rect x="82.6923%" y="517" width="0.9615%" height="15" fill="rgb(207,125,25)" fg:x="86" fg:w="1"/><text x="82.9423%" y="527.50"></text></g><g><title>std::time::SystemTime::duration_since (1 samples, 0.96%)</title><rect x="82.6923%" y="501" width="0.9615%" height="15" fill="rgb(210,195,18)" fg:x="86" fg:w="1"/><text x="82.9423%" y="511.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.96%)</title><rect x="82.6923%" y="485" width="0.9615%" height="15" fill="rgb(249,80,12)" fg:x="86" fg:w="1"/><text x="82.9423%" y="495.50"></text></g><g><title>_start (50 samples, 48.08%)</title><rect x="36.5385%" y="885" width="48.0769%" height="15" fill="rgb(221,65,9)" fg:x="38" fg:w="50"/><text x="36.7885%" y="895.50">_start</text></g><g><title>_dl_start (1 samples, 0.96%)</title><rect x="83.6538%" y="869" width="0.9615%" height="15" fill="rgb(235,49,36)" fg:x="87" fg:w="1"/><text x="83.9038%" y="879.50"></text></g><g><title>rtld_timer_start (1 samples, 0.96%)</title><rect x="83.6538%" y="853" width="0.9615%" height="15" fill="rgb(225,32,20)" fg:x="87" fg:w="1"/><text x="83.9038%" y="863.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.96%)</title><rect x="83.6538%" y="837" width="0.9615%" height="15" fill="rgb(215,141,46)" fg:x="87" fg:w="1"/><text x="83.9038%" y="847.50"></text></g><g><title>exc_page_fault (1 samples, 0.96%)</title><rect x="83.6538%" y="821" width="0.9615%" height="15" fill="rgb(250,160,47)" fg:x="87" fg:w="1"/><text x="83.9038%" y="831.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.96%)</title><rect x="83.6538%" y="805" width="0.9615%" height="15" fill="rgb(216,222,40)" fg:x="87" fg:w="1"/><text x="83.9038%" y="815.50"></text></g><g><title>handle_mm_fault (1 samples, 0.96%)</title><rect x="83.6538%" y="789" width="0.9615%" height="15" fill="rgb(234,217,39)" fg:x="87" fg:w="1"/><text x="83.9038%" y="799.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.96%)</title><rect x="83.6538%" y="773" width="0.9615%" height="15" fill="rgb(207,178,40)" fg:x="87" fg:w="1"/><text x="83.9038%" y="783.50"></text></g><g><title>do_fault (1 samples, 0.96%)</title><rect x="83.6538%" y="757" width="0.9615%" height="15" fill="rgb(221,136,13)" fg:x="87" fg:w="1"/><text x="83.9038%" y="767.50"></text></g><g><title>vma_alloc_folio (1 samples, 0.96%)</title><rect x="83.6538%" y="741" width="0.9615%" height="15" fill="rgb(249,199,10)" fg:x="87" fg:w="1"/><text x="83.9038%" y="751.50"></text></g><g><title>__folio_alloc (1 samples, 0.96%)</title><rect x="83.6538%" y="725" width="0.9615%" height="15" fill="rgb(249,222,13)" fg:x="87" fg:w="1"/><text x="83.9038%" y="735.50"></text></g><g><title>__alloc_pages (1 samples, 0.96%)</title><rect x="83.6538%" y="709" width="0.9615%" height="15" fill="rgb(244,185,38)" fg:x="87" fg:w="1"/><text x="83.9038%" y="719.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.96%)</title><rect x="83.6538%" y="693" width="0.9615%" height="15" fill="rgb(236,202,9)" fg:x="87" fg:w="1"/><text x="83.9038%" y="703.50"></text></g><g><title>__list_del_entry_valid (1 samples, 0.96%)</title><rect x="83.6538%" y="677" width="0.9615%" height="15" fill="rgb(250,229,37)" fg:x="87" fg:w="1"/><text x="83.9038%" y="687.50"></text></g><g><title>__x64_sys_epoll_ctl (2 samples, 1.92%)</title><rect x="86.5385%" y="853" width="1.9231%" height="15" fill="rgb(206,174,23)" fg:x="90" fg:w="2"/><text x="86.7885%" y="863.50">_..</text></g><g><title>do_epoll_ctl (2 samples, 1.92%)</title><rect x="86.5385%" y="837" width="1.9231%" height="15" fill="rgb(211,33,43)" fg:x="90" fg:w="2"/><text x="86.7885%" y="847.50">d..</text></g><g><title>ep_item_poll.isra.0 (2 samples, 1.92%)</title><rect x="86.5385%" y="821" width="1.9231%" height="15" fill="rgb(245,58,50)" fg:x="90" fg:w="2"/><text x="86.7885%" y="831.50">e..</text></g><g><title>sock_poll (2 samples, 1.92%)</title><rect x="86.5385%" y="805" width="1.9231%" height="15" fill="rgb(244,68,36)" fg:x="90" fg:w="2"/><text x="86.7885%" y="815.50">s..</text></g><g><title>udp_poll (1 samples, 0.96%)</title><rect x="87.5000%" y="789" width="0.9615%" height="15" fill="rgb(232,229,15)" fg:x="91" fg:w="1"/><text x="87.7500%" y="799.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.96%)</title><rect x="88.4615%" y="853" width="0.9615%" height="15" fill="rgb(254,30,23)" fg:x="92" fg:w="1"/><text x="88.7115%" y="863.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 0.96%)</title><rect x="88.4615%" y="837" width="0.9615%" height="15" fill="rgb(235,160,14)" fg:x="92" fg:w="1"/><text x="88.7115%" y="847.50"></text></g><g><title>bprm_execve (1 samples, 0.96%)</title><rect x="88.4615%" y="821" width="0.9615%" height="15" fill="rgb(212,155,44)" fg:x="92" fg:w="1"/><text x="88.7115%" y="831.50"></text></g><g><title>load_elf_binary (1 samples, 0.96%)</title><rect x="88.4615%" y="805" width="0.9615%" height="15" fill="rgb(226,2,50)" fg:x="92" fg:w="1"/><text x="88.7115%" y="815.50"></text></g><g><title>setup_arg_pages (1 samples, 0.96%)</title><rect x="88.4615%" y="789" width="0.9615%" height="15" fill="rgb(234,177,6)" fg:x="92" fg:w="1"/><text x="88.7115%" y="799.50"></text></g><g><title>mprotect_fixup (1 samples, 0.96%)</title><rect x="88.4615%" y="773" width="0.9615%" height="15" fill="rgb(217,24,9)" fg:x="92" fg:w="1"/><text x="88.7115%" y="783.50"></text></g><g><title>__x64_sys_recvfrom (1 samples, 0.96%)</title><rect x="89.4231%" y="853" width="0.9615%" height="15" fill="rgb(220,13,46)" fg:x="93" fg:w="1"/><text x="89.6731%" y="863.50"></text></g><g><title>__sys_recvfrom (1 samples, 0.96%)</title><rect x="89.4231%" y="837" width="0.9615%" height="15" fill="rgb(239,221,27)" fg:x="93" fg:w="1"/><text x="89.6731%" y="847.50"></text></g><g><title>sock_recvmsg (1 samples, 0.96%)</title><rect x="89.4231%" y="821" width="0.9615%" height="15" fill="rgb(222,198,25)" fg:x="93" fg:w="1"/><text x="89.6731%" y="831.50"></text></g><g><title>security_socket_recvmsg (1 samples, 0.96%)</title><rect x="89.4231%" y="805" width="0.9615%" height="15" fill="rgb(211,99,13)" fg:x="93" fg:w="1"/><text x="89.6731%" y="815.50"></text></g><g><title>aa_sk_perm (1 samples, 0.96%)</title><rect x="89.4231%" y="789" width="0.9615%" height="15" fill="rgb(232,111,31)" fg:x="93" fg:w="1"/><text x="89.6731%" y="799.50"></text></g><g><title>security_socket_sendmsg (1 samples, 0.96%)</title><rect x="90.3846%" y="805" width="0.9615%" height="15" fill="rgb(245,82,37)" fg:x="94" fg:w="1"/><text x="90.6346%" y="815.50"></text></g><g><title>tomoyo_socket_sendmsg_permission (1 samples, 0.96%)</title><rect x="90.3846%" y="789" width="0.9615%" height="15" fill="rgb(227,149,46)" fg:x="94" fg:w="1"/><text x="90.6346%" y="799.50"></text></g><g><title>tomoyo_check_inet_address (1 samples, 0.96%)</title><rect x="90.3846%" y="773" width="0.9615%" height="15" fill="rgb(218,36,50)" fg:x="94" fg:w="1"/><text x="90.6346%" y="783.50"></text></g><g><title>tomoyo_init_request_info (1 samples, 0.96%)</title><rect x="90.3846%" y="757" width="0.9615%" height="15" fill="rgb(226,80,48)" fg:x="94" fg:w="1"/><text x="90.6346%" y="767.50"></text></g><g><title>tomoyo_domain (1 samples, 0.96%)</title><rect x="90.3846%" y="741" width="0.9615%" height="15" fill="rgb(238,224,15)" fg:x="94" fg:w="1"/><text x="90.6346%" y="751.50"></text></g><g><title>ip_make_skb (1 samples, 0.96%)</title><rect x="93.2692%" y="789" width="0.9615%" height="15" fill="rgb(241,136,10)" fg:x="97" fg:w="1"/><text x="93.5192%" y="799.50"></text></g><g><title>__x64_sys_sendto (6 samples, 5.77%)</title><rect x="90.3846%" y="853" width="5.7692%" height="15" fill="rgb(208,32,45)" fg:x="94" fg:w="6"/><text x="90.6346%" y="863.50">__x64_s..</text></g><g><title>__sys_sendto (6 samples, 5.77%)</title><rect x="90.3846%" y="837" width="5.7692%" height="15" fill="rgb(207,135,9)" fg:x="94" fg:w="6"/><text x="90.6346%" y="847.50">__sys_s..</text></g><g><title>sock_sendmsg (6 samples, 5.77%)</title><rect x="90.3846%" y="821" width="5.7692%" height="15" fill="rgb(206,86,44)" fg:x="94" fg:w="6"/><text x="90.6346%" y="831.50">sock_se..</text></g><g><title>udp_sendmsg (5 samples, 4.81%)</title><rect x="91.3462%" y="805" width="4.8077%" height="15" fill="rgb(245,177,15)" fg:x="95" fg:w="5"/><text x="91.5962%" y="815.50">udp_se..</text></g><g><title>ip_route_output_flow (2 samples, 1.92%)</title><rect x="94.2308%" y="789" width="1.9231%" height="15" fill="rgb(206,64,50)" fg:x="98" fg:w="2"/><text x="94.4808%" y="799.50">i..</text></g><g><title>ip_route_output_key_hash_rcu (2 samples, 1.92%)</title><rect x="94.2308%" y="773" width="1.9231%" height="15" fill="rgb(234,36,40)" fg:x="98" fg:w="2"/><text x="94.4808%" y="783.50">i..</text></g><g><title>fib_table_lookup (1 samples, 0.96%)</title><rect x="95.1923%" y="757" width="0.9615%" height="15" fill="rgb(213,64,8)" fg:x="99" fg:w="1"/><text x="95.4423%" y="767.50"></text></g><g><title>ksys_read (1 samples, 0.96%)</title><rect x="96.1538%" y="853" width="0.9615%" height="15" fill="rgb(210,75,36)" fg:x="100" fg:w="1"/><text x="96.4038%" y="863.50"></text></g><g><title>vfs_read (1 samples, 0.96%)</title><rect x="96.1538%" y="837" width="0.9615%" height="15" fill="rgb(229,88,21)" fg:x="100" fg:w="1"/><text x="96.4038%" y="847.50"></text></g><g><title>filemap_read (1 samples, 0.96%)</title><rect x="96.1538%" y="821" width="0.9615%" height="15" fill="rgb(252,204,47)" fg:x="100" fg:w="1"/><text x="96.4038%" y="831.50"></text></g><g><title>copy_page_to_iter (1 samples, 0.96%)</title><rect x="96.1538%" y="805" width="0.9615%" height="15" fill="rgb(208,77,27)" fg:x="100" fg:w="1"/><text x="96.4038%" y="815.50"></text></g><g><title>_copy_to_iter (1 samples, 0.96%)</title><rect x="96.1538%" y="789" width="0.9615%" height="15" fill="rgb(221,76,26)" fg:x="100" fg:w="1"/><text x="96.4038%" y="799.50"></text></g><g><title>copy_user_generic_string (1 samples, 0.96%)</title><rect x="96.1538%" y="773" width="0.9615%" height="15" fill="rgb(225,139,18)" fg:x="100" fg:w="1"/><text x="96.4038%" y="783.50"></text></g><g><title>syscall_enter_from_user_mode (1 samples, 0.96%)</title><rect x="97.1154%" y="853" width="0.9615%" height="15" fill="rgb(230,137,11)" fg:x="101" fg:w="1"/><text x="97.3654%" y="863.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (15 samples, 14.42%)</title><rect x="84.6154%" y="885" width="14.4231%" height="15" fill="rgb(212,28,1)" fg:x="88" fg:w="15"/><text x="84.8654%" y="895.50">entry_SYSCALL_64_after..</text></g><g><title>do_syscall_64 (13 samples, 12.50%)</title><rect x="86.5385%" y="869" width="12.5000%" height="15" fill="rgb(248,164,17)" fg:x="90" fg:w="13"/><text x="86.7885%" y="879.50">do_syscall_64</text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.96%)</title><rect x="98.0769%" y="853" width="0.9615%" height="15" fill="rgb(222,171,42)" fg:x="102" fg:w="1"/><text x="98.3269%" y="863.50"></text></g><g><title>syscall_exit_to_user_mode_prepare (1 samples, 0.96%)</title><rect x="98.0769%" y="837" width="0.9615%" height="15" fill="rgb(243,84,45)" fg:x="102" fg:w="1"/><text x="98.3269%" y="847.50"></text></g><g><title>all (104 samples, 100%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(252,49,23)" fg:x="0" fg:w="104"/><text x="0.2500%" y="927.50"></text></g><g><title>tftp (100 samples, 96.15%)</title><rect x="3.8462%" y="901" width="96.1538%" height="15" fill="rgb(215,19,7)" fg:x="4" fg:w="100"/><text x="4.0962%" y="911.50">tftp</text></g><g><title>entry_SYSCALL_64_safe_stack (1 samples, 0.96%)</title><rect x="99.0385%" y="885" width="0.9615%" height="15" fill="rgb(238,81,41)" fg:x="103" fg:w="1"/><text x="99.2885%" y="895.50"></text></g></svg></svg>