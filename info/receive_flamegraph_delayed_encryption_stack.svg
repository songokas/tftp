<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="518" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="501.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="501.00"> </text><svg id="frames" x="10" width="1180" total_samples="2894"><g><title>[[stack]] (1 samples, 0.03%)</title><rect x="0.0000%" y="437" width="0.0346%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="447.50"></text></g><g><title>epoll_ctl (1 samples, 0.03%)</title><rect x="0.0000%" y="421" width="0.0346%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.0000%" y="405" width="0.0346%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="0.1728%" y="421" width="0.0346%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="1"/><text x="0.4228%" y="431.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="0.1728%" y="405" width="0.0346%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="1"/><text x="0.4228%" y="415.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="0.1728%" y="389" width="0.0346%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="1"/><text x="0.4228%" y="399.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.21%)</title><rect x="0.0346%" y="437" width="0.2073%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="6"/><text x="0.2846%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.2073%" y="421" width="0.0346%" height="15" fill="rgb(228,23,34)" fg:x="6" fg:w="1"/><text x="0.4573%" y="431.50"></text></g><g><title>&lt;tftp::cli::Commands as clap::derive::Subcommand&gt;::augment_subcommands (1 samples, 0.03%)</title><rect x="0.2419%" y="421" width="0.0346%" height="15" fill="rgb(218,30,26)" fg:x="7" fg:w="1"/><text x="0.4919%" y="431.50"></text></g><g><title>clap::builder::arg::Arg::value_name (1 samples, 0.03%)</title><rect x="0.2419%" y="405" width="0.0346%" height="15" fill="rgb(220,122,19)" fg:x="7" fg:w="1"/><text x="0.4919%" y="415.50"></text></g><g><title>clap::builder::arg::Arg::value_names (1 samples, 0.03%)</title><rect x="0.2419%" y="389" width="0.0346%" height="15" fill="rgb(250,228,42)" fg:x="7" fg:w="1"/><text x="0.4919%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.03%)</title><rect x="0.2419%" y="373" width="0.0346%" height="15" fill="rgb(240,193,28)" fg:x="7" fg:w="1"/><text x="0.4919%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.03%)</title><rect x="0.2419%" y="357" width="0.0346%" height="15" fill="rgb(216,20,37)" fg:x="7" fg:w="1"/><text x="0.4919%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.03%)</title><rect x="0.2419%" y="341" width="0.0346%" height="15" fill="rgb(206,188,39)" fg:x="7" fg:w="1"/><text x="0.4919%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.03%)</title><rect x="0.2419%" y="325" width="0.0346%" height="15" fill="rgb(217,207,13)" fg:x="7" fg:w="1"/><text x="0.4919%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="0.2419%" y="309" width="0.0346%" height="15" fill="rgb(231,73,38)" fg:x="7" fg:w="1"/><text x="0.4919%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.03%)</title><rect x="0.2419%" y="293" width="0.0346%" height="15" fill="rgb(225,20,46)" fg:x="7" fg:w="1"/><text x="0.4919%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.03%)</title><rect x="0.2419%" y="277" width="0.0346%" height="15" fill="rgb(210,31,41)" fg:x="7" fg:w="1"/><text x="0.4919%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.03%)</title><rect x="0.2419%" y="261" width="0.0346%" height="15" fill="rgb(221,200,47)" fg:x="7" fg:w="1"/><text x="0.4919%" y="271.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.03%)</title><rect x="0.2419%" y="245" width="0.0346%" height="15" fill="rgb(226,26,5)" fg:x="7" fg:w="1"/><text x="0.4919%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::array::iter::IntoIter&lt;clap::builder::str::Str,1_usize&gt;&gt; (1 samples, 0.03%)</title><rect x="0.2419%" y="229" width="0.0346%" height="15" fill="rgb(249,33,26)" fg:x="7" fg:w="1"/><text x="0.4919%" y="239.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="0.2419%" y="213" width="0.0346%" height="15" fill="rgb(235,183,28)" fg:x="7" fg:w="1"/><text x="0.4919%" y="223.50"></text></g><g><title>core::array::iter::IntoIter&lt;T,_&gt;::as_mut_slice (1 samples, 0.03%)</title><rect x="0.2419%" y="197" width="0.0346%" height="15" fill="rgb(221,5,38)" fg:x="7" fg:w="1"/><text x="0.4919%" y="207.50"></text></g><g><title>&lt;tftp::packet::AckPacket as tftp::packet::ByteConverter&gt;::to_bytes (1 samples, 0.03%)</title><rect x="0.3110%" y="405" width="0.0346%" height="15" fill="rgb(247,18,42)" fg:x="9" fg:w="1"/><text x="0.5610%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.03%)</title><rect x="0.3110%" y="389" width="0.0346%" height="15" fill="rgb(241,131,45)" fg:x="9" fg:w="1"/><text x="0.5610%" y="399.50"></text></g><g><title>&lt;heapless::vec::Vec&lt;T,_&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.03%)</title><rect x="0.3110%" y="373" width="0.0346%" height="15" fill="rgb(249,31,29)" fg:x="9" fg:w="1"/><text x="0.5610%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::array::iter::IntoIter&lt;u8,2_usize&gt;&gt; (1 samples, 0.03%)</title><rect x="0.3110%" y="357" width="0.0346%" height="15" fill="rgb(225,111,53)" fg:x="9" fg:w="1"/><text x="0.5610%" y="367.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="0.3110%" y="341" width="0.0346%" height="15" fill="rgb(238,160,17)" fg:x="9" fg:w="1"/><text x="0.5610%" y="351.50"></text></g><g><title>core::array::iter::IntoIter&lt;T,_&gt;::as_mut_slice (1 samples, 0.03%)</title><rect x="0.3110%" y="325" width="0.0346%" height="15" fill="rgb(214,148,48)" fg:x="9" fg:w="1"/><text x="0.5610%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (1 samples, 0.03%)</title><rect x="0.3110%" y="309" width="0.0346%" height="15" fill="rgb(232,36,49)" fg:x="9" fg:w="1"/><text x="0.5610%" y="319.50"></text></g><g><title>&lt;core::ops::index_range::IndexRange as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.03%)</title><rect x="0.3110%" y="293" width="0.0346%" height="15" fill="rgb(209,103,24)" fg:x="9" fg:w="1"/><text x="0.5610%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="0.3455%" y="373" width="0.0346%" height="15" fill="rgb(229,88,8)" fg:x="10" fg:w="1"/><text x="0.5955%" y="383.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="0.3801%" y="373" width="0.0346%" height="15" fill="rgb(213,181,19)" fg:x="11" fg:w="1"/><text x="0.6301%" y="383.50"></text></g><g><title>&lt;tftp::packet::Packet as tftp::packet::ByteConverter&gt;::to_bytes (5 samples, 0.17%)</title><rect x="0.2764%" y="421" width="0.1728%" height="15" fill="rgb(254,191,54)" fg:x="8" fg:w="5"/><text x="0.5264%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.10%)</title><rect x="0.3455%" y="405" width="0.1037%" height="15" fill="rgb(241,83,37)" fg:x="10" fg:w="3"/><text x="0.5955%" y="415.50"></text></g><g><title>&lt;heapless::vec::Vec&lt;T,_&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.10%)</title><rect x="0.3455%" y="389" width="0.1037%" height="15" fill="rgb(233,36,39)" fg:x="10" fg:w="3"/><text x="0.5955%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::chain::Chain&lt;core::array::iter::IntoIter&lt;u8,2_usize&gt;,heapless::vec::IntoIter&lt;u8,1420_usize&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="0.4147%" y="373" width="0.0346%" height="15" fill="rgb(226,3,54)" fg:x="12" fg:w="1"/><text x="0.6647%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;heapless::vec::IntoIter&lt;u8,1420_usize&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="0.4147%" y="357" width="0.0346%" height="15" fill="rgb(245,192,40)" fg:x="12" fg:w="1"/><text x="0.6647%" y="367.50"></text></g><g><title>__rust_probestack (1 samples, 0.03%)</title><rect x="0.4492%" y="421" width="0.0346%" height="15" fill="rgb(238,167,29)" fg:x="13" fg:w="1"/><text x="0.6992%" y="431.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.03%)</title><rect x="0.6220%" y="405" width="0.0346%" height="15" fill="rgb(232,182,51)" fg:x="18" fg:w="1"/><text x="0.8720%" y="415.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::convert::From&lt;T&gt;&gt;::from (1 samples, 0.03%)</title><rect x="0.6220%" y="389" width="0.0346%" height="15" fill="rgb(231,60,39)" fg:x="18" fg:w="1"/><text x="0.8720%" y="399.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="0.6565%" y="405" width="0.0346%" height="15" fill="rgb(208,69,12)" fg:x="19" fg:w="1"/><text x="0.9065%" y="415.50"></text></g><g><title>&lt;heapless::vec::Vec&lt;T,_&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.14%)</title><rect x="0.6911%" y="405" width="0.1382%" height="15" fill="rgb(235,93,37)" fg:x="20" fg:w="4"/><text x="0.9411%" y="415.50"></text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::as_slice (1 samples, 0.03%)</title><rect x="0.7947%" y="389" width="0.0346%" height="15" fill="rgb(213,116,39)" fg:x="23" fg:w="1"/><text x="1.0447%" y="399.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.03%)</title><rect x="0.7947%" y="373" width="0.0346%" height="15" fill="rgb(222,207,29)" fg:x="23" fg:w="1"/><text x="1.0447%" y="383.50"></text></g><g><title>&lt;tftp::packet::DataPacket as tftp::packet::ByteConverter&gt;::from_bytes (1 samples, 0.03%)</title><rect x="0.8293%" y="389" width="0.0346%" height="15" fill="rgb(206,96,30)" fg:x="24" fg:w="1"/><text x="1.0793%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.03%)</title><rect x="0.8639%" y="389" width="0.0346%" height="15" fill="rgb(218,138,4)" fg:x="25" fg:w="1"/><text x="1.1139%" y="399.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.03%)</title><rect x="0.8639%" y="373" width="0.0346%" height="15" fill="rgb(250,191,14)" fg:x="25" fg:w="1"/><text x="1.1139%" y="383.50"></text></g><g><title>&lt;tftp::packet::Packet as tftp::packet::ByteConverter&gt;::from_bytes (5 samples, 0.17%)</title><rect x="0.8293%" y="405" width="0.1728%" height="15" fill="rgb(239,60,40)" fg:x="24" fg:w="5"/><text x="1.0793%" y="415.50"></text></g><g><title>tftp::packet::PacketType::from_bytes (3 samples, 0.10%)</title><rect x="0.8984%" y="389" width="0.1037%" height="15" fill="rgb(206,27,48)" fg:x="26" fg:w="3"/><text x="1.1484%" y="399.50"></text></g><g><title>tftp::packet::try_from (3 samples, 0.10%)</title><rect x="0.8984%" y="373" width="0.1037%" height="15" fill="rgb(225,35,8)" fg:x="26" fg:w="3"/><text x="1.1484%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.03%)</title><rect x="0.9675%" y="357" width="0.0346%" height="15" fill="rgb(250,213,24)" fg:x="28" fg:w="1"/><text x="1.2175%" y="367.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.03%)</title><rect x="0.9675%" y="341" width="0.0346%" height="15" fill="rgb(247,123,22)" fg:x="28" fg:w="1"/><text x="1.2175%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.03%)</title><rect x="0.9675%" y="325" width="0.0346%" height="15" fill="rgb(231,138,38)" fg:x="28" fg:w="1"/><text x="1.2175%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.03%)</title><rect x="0.9675%" y="309" width="0.0346%" height="15" fill="rgb(231,145,46)" fg:x="28" fg:w="1"/><text x="1.2175%" y="319.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="1.2440%" y="373" width="0.0346%" height="15" fill="rgb(251,118,11)" fg:x="36" fg:w="1"/><text x="1.4940%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (1 samples, 0.03%)</title><rect x="1.2785%" y="373" width="0.0346%" height="15" fill="rgb(217,147,25)" fg:x="37" fg:w="1"/><text x="1.5285%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;polling::Event&gt;&gt; (3 samples, 0.10%)</title><rect x="1.3131%" y="373" width="0.1037%" height="15" fill="rgb(247,81,37)" fg:x="38" fg:w="3"/><text x="1.5631%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;polling::Event&gt;&gt; (3 samples, 0.10%)</title><rect x="1.3131%" y="357" width="0.1037%" height="15" fill="rgb(209,12,38)" fg:x="38" fg:w="3"/><text x="1.5631%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.10%)</title><rect x="1.3131%" y="341" width="0.1037%" height="15" fill="rgb(227,1,9)" fg:x="38" fg:w="3"/><text x="1.5631%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.10%)</title><rect x="1.3131%" y="325" width="0.1037%" height="15" fill="rgb(248,47,43)" fg:x="38" fg:w="3"/><text x="1.5631%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="1.3822%" y="309" width="0.0346%" height="15" fill="rgb(221,10,30)" fg:x="40" fg:w="1"/><text x="1.6322%" y="319.50"></text></g><g><title>cfree (1 samples, 0.03%)</title><rect x="1.3822%" y="293" width="0.0346%" height="15" fill="rgb(210,229,1)" fg:x="40" fg:w="1"/><text x="1.6322%" y="303.50"></text></g><g><title>std::net::ip_addr::Ipv4Addr::octets (2 samples, 0.07%)</title><rect x="1.4513%" y="325" width="0.0691%" height="15" fill="rgb(222,148,37)" fg:x="42" fg:w="2"/><text x="1.7013%" y="335.50"></text></g><g><title>&lt;tftp::socket::StdSocket as tftp::socket::Socket&gt;::recv_from::{{closure}} (4 samples, 0.14%)</title><rect x="1.4167%" y="357" width="0.1382%" height="15" fill="rgb(234,67,33)" fg:x="41" fg:w="4"/><text x="1.6667%" y="367.50"></text></g><g><title>tftp::socket::std_to_socket_addr (3 samples, 0.10%)</title><rect x="1.4513%" y="341" width="0.1037%" height="15" fill="rgb(247,98,35)" fg:x="42" fg:w="3"/><text x="1.7013%" y="351.50"></text></g><g><title>std::net::socket_addr::SocketAddrV4::port (1 samples, 0.03%)</title><rect x="1.5204%" y="325" width="0.0346%" height="15" fill="rgb(247,138,52)" fg:x="44" fg:w="1"/><text x="1.7704%" y="335.50"></text></g><g><title>[libc.so.6] (2 samples, 0.07%)</title><rect x="1.5549%" y="357" width="0.0691%" height="15" fill="rgb(213,79,30)" fg:x="45" fg:w="2"/><text x="1.8049%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (7 samples, 0.24%)</title><rect x="1.4167%" y="373" width="0.2419%" height="15" fill="rgb(246,177,23)" fg:x="41" fg:w="7"/><text x="1.6667%" y="383.50"></text></g><g><title>memcpy (1 samples, 0.03%)</title><rect x="1.6240%" y="357" width="0.0346%" height="15" fill="rgb(230,62,27)" fg:x="47" fg:w="1"/><text x="1.8740%" y="367.50"></text></g><g><title>&lt;tftp::std_compat::io::Error as core::convert::From&lt;tftp::std_compat::io::ErrorKind&gt;&gt;::from (1 samples, 0.03%)</title><rect x="1.7623%" y="325" width="0.0346%" height="15" fill="rgb(216,154,8)" fg:x="51" fg:w="1"/><text x="2.0123%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::Error&gt; (2 samples, 0.07%)</title><rect x="1.7968%" y="325" width="0.0691%" height="15" fill="rgb(244,35,45)" fg:x="52" fg:w="2"/><text x="2.0468%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::repr_bitpacked::Repr&gt; (2 samples, 0.07%)</title><rect x="1.7968%" y="309" width="0.0691%" height="15" fill="rgb(251,115,12)" fg:x="52" fg:w="2"/><text x="2.0468%" y="319.50"></text></g><g><title>&lt;std::io::error::repr_bitpacked::Repr as core::ops::drop::Drop&gt;::drop (2 samples, 0.07%)</title><rect x="1.7968%" y="293" width="0.0691%" height="15" fill="rgb(240,54,50)" fg:x="52" fg:w="2"/><text x="2.0468%" y="303.50"></text></g><g><title>std::io::error::repr_bitpacked::decode_repr (2 samples, 0.07%)</title><rect x="1.7968%" y="277" width="0.0691%" height="15" fill="rgb(233,84,52)" fg:x="52" fg:w="2"/><text x="2.0468%" y="287.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (8 samples, 0.28%)</title><rect x="1.6586%" y="373" width="0.2764%" height="15" fill="rgb(207,117,47)" fg:x="48" fg:w="8"/><text x="1.9086%" y="383.50"></text></g><g><title>core::ops::function::FnOnce::call_once (6 samples, 0.21%)</title><rect x="1.7277%" y="357" width="0.2073%" height="15" fill="rgb(249,43,39)" fg:x="50" fg:w="6"/><text x="1.9777%" y="367.50"></text></g><g><title>tftp::io::from_io_err (5 samples, 0.17%)</title><rect x="1.7623%" y="341" width="0.1728%" height="15" fill="rgb(209,38,44)" fg:x="51" fg:w="5"/><text x="2.0123%" y="351.50"></text></g><g><title>std::io::error::Error::kind (2 samples, 0.07%)</title><rect x="1.8659%" y="325" width="0.0691%" height="15" fill="rgb(236,212,23)" fg:x="54" fg:w="2"/><text x="2.1159%" y="335.50"></text></g><g><title>std::io::error::repr_bitpacked::Repr::data (1 samples, 0.03%)</title><rect x="1.9005%" y="309" width="0.0346%" height="15" fill="rgb(242,79,21)" fg:x="55" fg:w="1"/><text x="2.1505%" y="319.50"></text></g><g><title>std::io::error::repr_bitpacked::decode_repr (1 samples, 0.03%)</title><rect x="1.9005%" y="293" width="0.0346%" height="15" fill="rgb(211,96,35)" fg:x="55" fg:w="1"/><text x="2.1505%" y="303.50"></text></g><g><title>polling::Event::readable (1 samples, 0.03%)</title><rect x="1.9350%" y="373" width="0.0346%" height="15" fill="rgb(253,215,40)" fg:x="56" fg:w="1"/><text x="2.1850%" y="383.50"></text></g><g><title>&lt;&amp;T as polling::Source&gt;::raw (2 samples, 0.07%)</title><rect x="1.9696%" y="357" width="0.0691%" height="15" fill="rgb(211,81,21)" fg:x="57" fg:w="2"/><text x="2.2196%" y="367.50"></text></g><g><title>std::os::fd::net::&lt;impl std::os::fd::raw::AsRawFd for std::net::udp::UdpSocket&gt;::as_raw_fd (1 samples, 0.03%)</title><rect x="2.0041%" y="341" width="0.0346%" height="15" fill="rgb(208,190,38)" fg:x="58" fg:w="1"/><text x="2.2541%" y="351.50"></text></g><g><title>polling::Poller::modify (3 samples, 0.10%)</title><rect x="1.9696%" y="373" width="0.1037%" height="15" fill="rgb(235,213,38)" fg:x="57" fg:w="3"/><text x="2.2196%" y="383.50"></text></g><g><title>polling::epoll::Poller::modify (1 samples, 0.03%)</title><rect x="2.0387%" y="357" width="0.0346%" height="15" fill="rgb(237,122,38)" fg:x="59" fg:w="1"/><text x="2.2887%" y="367.50"></text></g><g><title>polling::epoll::Poller::ctl (1 samples, 0.03%)</title><rect x="2.0387%" y="341" width="0.0346%" height="15" fill="rgb(244,218,35)" fg:x="59" fg:w="1"/><text x="2.2887%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.03%)</title><rect x="2.0387%" y="325" width="0.0346%" height="15" fill="rgb(240,68,47)" fg:x="59" fg:w="1"/><text x="2.2887%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.10%)</title><rect x="2.0733%" y="309" width="0.1037%" height="15" fill="rgb(210,16,53)" fg:x="60" fg:w="3"/><text x="2.3233%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (3 samples, 0.10%)</title><rect x="2.0733%" y="293" width="0.1037%" height="15" fill="rgb(235,124,12)" fg:x="60" fg:w="3"/><text x="2.3233%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.10%)</title><rect x="2.0733%" y="277" width="0.1037%" height="15" fill="rgb(224,169,11)" fg:x="60" fg:w="3"/><text x="2.3233%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3 samples, 0.10%)</title><rect x="2.0733%" y="261" width="0.1037%" height="15" fill="rgb(250,166,2)" fg:x="60" fg:w="3"/><text x="2.3233%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="2.1078%" y="245" width="0.0691%" height="15" fill="rgb(242,216,29)" fg:x="61" fg:w="2"/><text x="2.3578%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (2 samples, 0.07%)</title><rect x="2.1078%" y="229" width="0.0691%" height="15" fill="rgb(230,116,27)" fg:x="61" fg:w="2"/><text x="2.3578%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null::runtime_impl (2 samples, 0.07%)</title><rect x="2.1078%" y="213" width="0.0691%" height="15" fill="rgb(228,99,48)" fg:x="61" fg:w="2"/><text x="2.3578%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (2 samples, 0.07%)</title><rect x="2.1769%" y="309" width="0.0691%" height="15" fill="rgb(253,11,6)" fg:x="63" fg:w="2"/><text x="2.4269%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (2 samples, 0.07%)</title><rect x="2.1769%" y="293" width="0.0691%" height="15" fill="rgb(247,143,39)" fg:x="63" fg:w="2"/><text x="2.4269%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (2 samples, 0.07%)</title><rect x="2.1769%" y="277" width="0.0691%" height="15" fill="rgb(236,97,10)" fg:x="63" fg:w="2"/><text x="2.4269%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (2 samples, 0.07%)</title><rect x="2.1769%" y="261" width="0.0691%" height="15" fill="rgb(233,208,19)" fg:x="63" fg:w="2"/><text x="2.4269%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.03%)</title><rect x="2.2806%" y="245" width="0.0346%" height="15" fill="rgb(216,164,2)" fg:x="66" fg:w="1"/><text x="2.5306%" y="255.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="2.3497%" y="181" width="0.0346%" height="15" fill="rgb(220,129,5)" fg:x="68" fg:w="1"/><text x="2.5997%" y="191.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.24%)</title><rect x="2.3497%" y="197" width="0.2419%" height="15" fill="rgb(242,17,10)" fg:x="68" fg:w="7"/><text x="2.5997%" y="207.50"></text></g><g><title>malloc (6 samples, 0.21%)</title><rect x="2.3842%" y="181" width="0.2073%" height="15" fill="rgb(242,107,0)" fg:x="69" fg:w="6"/><text x="2.6342%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (10 samples, 0.35%)</title><rect x="2.3151%" y="245" width="0.3455%" height="15" fill="rgb(251,28,31)" fg:x="67" fg:w="10"/><text x="2.5651%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (10 samples, 0.35%)</title><rect x="2.3151%" y="229" width="0.3455%" height="15" fill="rgb(233,223,10)" fg:x="67" fg:w="10"/><text x="2.5651%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 0.35%)</title><rect x="2.3151%" y="213" width="0.3455%" height="15" fill="rgb(215,21,27)" fg:x="67" fg:w="10"/><text x="2.5651%" y="223.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (2 samples, 0.07%)</title><rect x="2.5916%" y="197" width="0.0691%" height="15" fill="rgb(232,23,21)" fg:x="75" fg:w="2"/><text x="2.8416%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.03%)</title><rect x="2.6261%" y="181" width="0.0346%" height="15" fill="rgb(244,5,23)" fg:x="76" fg:w="1"/><text x="2.8761%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null::runtime_impl (1 samples, 0.03%)</title><rect x="2.6261%" y="165" width="0.0346%" height="15" fill="rgb(226,81,46)" fg:x="76" fg:w="1"/><text x="2.8761%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::addr (1 samples, 0.03%)</title><rect x="2.6261%" y="149" width="0.0346%" height="15" fill="rgb(247,70,30)" fg:x="76" fg:w="1"/><text x="2.8761%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (18 samples, 0.62%)</title><rect x="2.0733%" y="357" width="0.6220%" height="15" fill="rgb(212,68,19)" fg:x="60" fg:w="18"/><text x="2.3233%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (18 samples, 0.62%)</title><rect x="2.0733%" y="341" width="0.6220%" height="15" fill="rgb(240,187,13)" fg:x="60" fg:w="18"/><text x="2.3233%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (18 samples, 0.62%)</title><rect x="2.0733%" y="325" width="0.6220%" height="15" fill="rgb(223,113,26)" fg:x="60" fg:w="18"/><text x="2.3233%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (13 samples, 0.45%)</title><rect x="2.2460%" y="309" width="0.4492%" height="15" fill="rgb(206,192,2)" fg:x="65" fg:w="13"/><text x="2.4960%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (13 samples, 0.45%)</title><rect x="2.2460%" y="293" width="0.4492%" height="15" fill="rgb(241,108,4)" fg:x="65" fg:w="13"/><text x="2.4960%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (12 samples, 0.41%)</title><rect x="2.2806%" y="277" width="0.4147%" height="15" fill="rgb(247,173,49)" fg:x="66" fg:w="12"/><text x="2.5306%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (12 samples, 0.41%)</title><rect x="2.2806%" y="261" width="0.4147%" height="15" fill="rgb(224,114,35)" fg:x="66" fg:w="12"/><text x="2.5306%" y="271.50"></text></g><g><title>core::cmp::max (1 samples, 0.03%)</title><rect x="2.6607%" y="245" width="0.0346%" height="15" fill="rgb(245,159,27)" fg:x="77" fg:w="1"/><text x="2.9107%" y="255.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.03%)</title><rect x="2.6607%" y="229" width="0.0346%" height="15" fill="rgb(245,172,44)" fg:x="77" fg:w="1"/><text x="2.9107%" y="239.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.03%)</title><rect x="2.6607%" y="213" width="0.0346%" height="15" fill="rgb(236,23,11)" fg:x="77" fg:w="1"/><text x="2.9107%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::filter (1 samples, 0.03%)</title><rect x="2.6952%" y="357" width="0.0346%" height="15" fill="rgb(205,117,38)" fg:x="78" fg:w="1"/><text x="2.9452%" y="367.50"></text></g><g><title>std::sync::poison::Flag::done (1 samples, 0.03%)</title><rect x="2.7989%" y="325" width="0.0346%" height="15" fill="rgb(237,72,25)" fg:x="81" fg:w="1"/><text x="3.0489%" y="335.50"></text></g><g><title>std::thread::panicking (1 samples, 0.03%)</title><rect x="2.7989%" y="309" width="0.0346%" height="15" fill="rgb(244,70,9)" fg:x="81" fg:w="1"/><text x="3.0489%" y="319.50"></text></g><g><title>std::panicking::panicking (1 samples, 0.03%)</title><rect x="2.7989%" y="293" width="0.0346%" height="15" fill="rgb(217,125,39)" fg:x="81" fg:w="1"/><text x="3.0489%" y="303.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (1 samples, 0.03%)</title><rect x="2.7989%" y="277" width="0.0346%" height="15" fill="rgb(235,36,10)" fg:x="81" fg:w="1"/><text x="3.0489%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.03%)</title><rect x="2.7989%" y="261" width="0.0346%" height="15" fill="rgb(251,123,47)" fg:x="81" fg:w="1"/><text x="3.0489%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.03%)</title><rect x="2.7989%" y="245" width="0.0346%" height="15" fill="rgb(221,13,13)" fg:x="81" fg:w="1"/><text x="3.0489%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;polling::epoll::Events&gt;&gt; (5 samples, 0.17%)</title><rect x="2.7298%" y="357" width="0.1728%" height="15" fill="rgb(238,131,9)" fg:x="79" fg:w="5"/><text x="2.9798%" y="367.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.14%)</title><rect x="2.7643%" y="341" width="0.1382%" height="15" fill="rgb(211,50,8)" fg:x="80" fg:w="4"/><text x="3.0143%" y="351.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (2 samples, 0.07%)</title><rect x="2.8334%" y="325" width="0.0691%" height="15" fill="rgb(245,182,24)" fg:x="82" fg:w="2"/><text x="3.0834%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (2 samples, 0.07%)</title><rect x="2.8334%" y="309" width="0.0691%" height="15" fill="rgb(242,14,37)" fg:x="82" fg:w="2"/><text x="3.0834%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_swap (2 samples, 0.07%)</title><rect x="2.8334%" y="293" width="0.0691%" height="15" fill="rgb(246,228,12)" fg:x="82" fg:w="2"/><text x="3.0834%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (1 samples, 0.03%)</title><rect x="2.9026%" y="357" width="0.0346%" height="15" fill="rgb(213,55,15)" fg:x="84" fg:w="1"/><text x="3.1526%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_swap (1 samples, 0.03%)</title><rect x="2.9026%" y="341" width="0.0346%" height="15" fill="rgb(209,9,3)" fg:x="84" fg:w="1"/><text x="3.1526%" y="351.50"></text></g><g><title>polling::epoll::Events::iter (1 samples, 0.03%)</title><rect x="2.9371%" y="357" width="0.0346%" height="15" fill="rgb(230,59,30)" fg:x="85" fg:w="1"/><text x="3.1871%" y="367.50"></text></g><g><title>core::array::&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (1 samples, 0.03%)</title><rect x="2.9371%" y="341" width="0.0346%" height="15" fill="rgb(209,121,21)" fg:x="85" fg:w="1"/><text x="3.1871%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="2.9371%" y="325" width="0.0346%" height="15" fill="rgb(220,109,13)" fg:x="85" fg:w="1"/><text x="3.1871%" y="335.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="2.9371%" y="309" width="0.0346%" height="15" fill="rgb(232,18,1)" fg:x="85" fg:w="1"/><text x="3.1871%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="2.9371%" y="293" width="0.0346%" height="15" fill="rgb(215,41,42)" fg:x="85" fg:w="1"/><text x="3.1871%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.03%)</title><rect x="2.9371%" y="277" width="0.0346%" height="15" fill="rgb(224,123,36)" fg:x="85" fg:w="1"/><text x="3.1871%" y="287.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="3.0408%" y="341" width="0.0346%" height="15" fill="rgb(240,125,3)" fg:x="88" fg:w="1"/><text x="3.2908%" y="351.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::le (1 samples, 0.03%)</title><rect x="3.0753%" y="341" width="0.0346%" height="15" fill="rgb(205,98,50)" fg:x="89" fg:w="1"/><text x="3.3253%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;isize,std::io::error::Error&gt;&gt; (1 samples, 0.03%)</title><rect x="3.1099%" y="341" width="0.0346%" height="15" fill="rgb(205,185,37)" fg:x="90" fg:w="1"/><text x="3.3599%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::Error&gt; (1 samples, 0.03%)</title><rect x="3.1099%" y="325" width="0.0346%" height="15" fill="rgb(238,207,15)" fg:x="90" fg:w="1"/><text x="3.3599%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::repr_bitpacked::Repr&gt; (1 samples, 0.03%)</title><rect x="3.1099%" y="309" width="0.0346%" height="15" fill="rgb(213,199,42)" fg:x="90" fg:w="1"/><text x="3.3599%" y="319.50"></text></g><g><title>&lt;std::io::error::repr_bitpacked::Repr as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="3.1099%" y="293" width="0.0346%" height="15" fill="rgb(235,201,11)" fg:x="90" fg:w="1"/><text x="3.3599%" y="303.50"></text></g><g><title>std::io::error::repr_bitpacked::decode_repr (1 samples, 0.03%)</title><rect x="3.1099%" y="277" width="0.0346%" height="15" fill="rgb(207,46,11)" fg:x="90" fg:w="1"/><text x="3.3599%" y="287.50"></text></g><g><title>core::time::Duration::as_secs (1 samples, 0.03%)</title><rect x="3.1444%" y="341" width="0.0346%" height="15" fill="rgb(241,35,35)" fg:x="91" fg:w="1"/><text x="3.3944%" y="351.50"></text></g><g><title>epoll_wait (18 samples, 0.62%)</title><rect x="3.1790%" y="341" width="0.6220%" height="15" fill="rgb(243,32,47)" fg:x="92" fg:w="18"/><text x="3.4290%" y="351.50"></text></g><g><title>log::max_level (1 samples, 0.03%)</title><rect x="3.8010%" y="341" width="0.0346%" height="15" fill="rgb(247,202,23)" fg:x="110" fg:w="1"/><text x="4.0510%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.03%)</title><rect x="3.8010%" y="325" width="0.0346%" height="15" fill="rgb(219,102,11)" fg:x="110" fg:w="1"/><text x="4.0510%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.03%)</title><rect x="3.8010%" y="309" width="0.0346%" height="15" fill="rgb(243,110,44)" fg:x="110" fg:w="1"/><text x="4.0510%" y="319.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::le (1 samples, 0.03%)</title><rect x="3.8355%" y="325" width="0.0346%" height="15" fill="rgb(222,74,54)" fg:x="111" fg:w="1"/><text x="4.0855%" y="335.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="3.8701%" y="309" width="0.0346%" height="15" fill="rgb(216,99,12)" fg:x="112" fg:w="1"/><text x="4.1201%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.03%)</title><rect x="3.9046%" y="309" width="0.0346%" height="15" fill="rgb(226,22,26)" fg:x="113" fg:w="1"/><text x="4.1546%" y="319.50"></text></g><g><title>polling::epoll::Poller::modify (4 samples, 0.14%)</title><rect x="3.8355%" y="341" width="0.1382%" height="15" fill="rgb(217,163,10)" fg:x="111" fg:w="4"/><text x="4.0855%" y="351.50"></text></g><g><title>polling::epoll::Poller::ctl (3 samples, 0.10%)</title><rect x="3.8701%" y="325" width="0.1037%" height="15" fill="rgb(213,25,53)" fg:x="112" fg:w="3"/><text x="4.1201%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (1 samples, 0.03%)</title><rect x="3.9392%" y="309" width="0.0346%" height="15" fill="rgb(252,105,26)" fg:x="114" fg:w="1"/><text x="4.1892%" y="319.50"></text></g><g><title>read (1 samples, 0.03%)</title><rect x="3.9737%" y="341" width="0.0346%" height="15" fill="rgb(220,39,43)" fg:x="115" fg:w="1"/><text x="4.2237%" y="351.50"></text></g><g><title>polling::epoll::Poller::wait (31 samples, 1.07%)</title><rect x="2.9717%" y="357" width="1.0712%" height="15" fill="rgb(229,68,48)" fg:x="86" fg:w="31"/><text x="3.2217%" y="367.50"></text></g><g><title>std::io::error::Error::last_os_error (1 samples, 0.03%)</title><rect x="4.0083%" y="341" width="0.0346%" height="15" fill="rgb(252,8,32)" fg:x="116" fg:w="1"/><text x="4.2583%" y="351.50"></text></g><g><title>std::sys::unix::os::errno (1 samples, 0.03%)</title><rect x="4.0083%" y="325" width="0.0346%" height="15" fill="rgb(223,20,43)" fg:x="116" fg:w="1"/><text x="4.2583%" y="335.50"></text></g><g><title>__errno_location (1 samples, 0.03%)</title><rect x="4.0083%" y="309" width="0.0346%" height="15" fill="rgb(229,81,49)" fg:x="116" fg:w="1"/><text x="4.2583%" y="319.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.07%)</title><rect x="4.1120%" y="341" width="0.0691%" height="15" fill="rgb(236,28,36)" fg:x="119" fg:w="2"/><text x="4.3620%" y="351.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (1 samples, 0.03%)</title><rect x="4.1811%" y="341" width="0.0346%" height="15" fill="rgb(249,185,26)" fg:x="121" fg:w="1"/><text x="4.4311%" y="351.50"></text></g><g><title>std::sync::poison::Flag::guard (1 samples, 0.03%)</title><rect x="4.1811%" y="325" width="0.0346%" height="15" fill="rgb(249,174,33)" fg:x="121" fg:w="1"/><text x="4.4311%" y="335.50"></text></g><g><title>std::sync::poison::Flag::get (1 samples, 0.03%)</title><rect x="4.1811%" y="309" width="0.0346%" height="15" fill="rgb(233,201,37)" fg:x="121" fg:w="1"/><text x="4.4311%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (1 samples, 0.03%)</title><rect x="4.1811%" y="293" width="0.0346%" height="15" fill="rgb(221,78,26)" fg:x="121" fg:w="1"/><text x="4.4311%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.03%)</title><rect x="4.1811%" y="277" width="0.0346%" height="15" fill="rgb(250,127,30)" fg:x="121" fg:w="1"/><text x="4.4311%" y="287.50"></text></g><g><title>polling::Poller::wait (63 samples, 2.18%)</title><rect x="2.0733%" y="373" width="2.1769%" height="15" fill="rgb(230,49,44)" fg:x="60" fg:w="63"/><text x="2.3233%" y="383.50">p..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (6 samples, 0.21%)</title><rect x="4.0428%" y="357" width="0.2073%" height="15" fill="rgb(229,67,23)" fg:x="117" fg:w="6"/><text x="4.2928%" y="367.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::try_lock (1 samples, 0.03%)</title><rect x="4.2156%" y="341" width="0.0346%" height="15" fill="rgb(249,83,47)" fg:x="122" fg:w="1"/><text x="4.4656%" y="351.50"></text></g><g><title>&lt;tftp::socket::StdSocket as tftp::socket::Socket&gt;::recv_from (92 samples, 3.18%)</title><rect x="1.1403%" y="389" width="3.1790%" height="15" fill="rgb(215,43,3)" fg:x="33" fg:w="92"/><text x="1.3903%" y="399.50">&lt;tf..</text></g><g><title>std::net::udp::UdpSocket::recv_from (2 samples, 0.07%)</title><rect x="4.2502%" y="373" width="0.0691%" height="15" fill="rgb(238,154,13)" fg:x="123" fg:w="2"/><text x="4.5002%" y="383.50"></text></g><g><title>std::sys_common::net::UdpSocket::recv_from (1 samples, 0.03%)</title><rect x="4.2847%" y="357" width="0.0346%" height="15" fill="rgb(219,56,2)" fg:x="124" fg:w="1"/><text x="4.5347%" y="367.50"></text></g><g><title>std::sys::unix::net::Socket::recv_from (1 samples, 0.03%)</title><rect x="4.2847%" y="341" width="0.0346%" height="15" fill="rgb(233,0,4)" fg:x="124" fg:w="1"/><text x="4.5347%" y="351.50"></text></g><g><title>std::sys::unix::net::Socket::recv_from_with_flags (1 samples, 0.03%)</title><rect x="4.2847%" y="325" width="0.0346%" height="15" fill="rgb(235,30,7)" fg:x="124" fg:w="1"/><text x="4.5347%" y="335.50"></text></g><g><title>std::sys::unix::cvt (1 samples, 0.03%)</title><rect x="4.2847%" y="309" width="0.0346%" height="15" fill="rgb(250,79,13)" fg:x="124" fg:w="1"/><text x="4.5347%" y="319.50"></text></g><g><title>std::io::error::Error::last_os_error (1 samples, 0.03%)</title><rect x="4.2847%" y="293" width="0.0346%" height="15" fill="rgb(211,146,34)" fg:x="124" fg:w="1"/><text x="4.5347%" y="303.50"></text></g><g><title>std::sys::unix::os::errno (1 samples, 0.03%)</title><rect x="4.2847%" y="277" width="0.0346%" height="15" fill="rgb(228,22,38)" fg:x="124" fg:w="1"/><text x="4.5347%" y="287.50"></text></g><g><title>__errno_location (1 samples, 0.03%)</title><rect x="4.2847%" y="261" width="0.0346%" height="15" fill="rgb(235,168,5)" fg:x="124" fg:w="1"/><text x="4.5347%" y="271.50"></text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::truncate (1 samples, 0.03%)</title><rect x="4.3193%" y="389" width="0.0346%" height="15" fill="rgb(221,155,16)" fg:x="125" fg:w="1"/><text x="4.5693%" y="399.50"></text></g><g><title>log::max_level (1 samples, 0.03%)</title><rect x="4.3538%" y="389" width="0.0346%" height="15" fill="rgb(215,215,53)" fg:x="126" fg:w="1"/><text x="4.6038%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.03%)</title><rect x="4.3538%" y="373" width="0.0346%" height="15" fill="rgb(223,4,10)" fg:x="126" fg:w="1"/><text x="4.6038%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.03%)</title><rect x="4.3538%" y="357" width="0.0346%" height="15" fill="rgb(234,103,6)" fg:x="126" fg:w="1"/><text x="4.6038%" y="367.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for &amp;[T: N]&gt;::try_from (1 samples, 0.03%)</title><rect x="4.5957%" y="261" width="0.0346%" height="15" fill="rgb(227,97,0)" fg:x="133" fg:w="1"/><text x="4.8457%" y="271.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (5 samples, 0.17%)</title><rect x="4.4921%" y="293" width="0.1728%" height="15" fill="rgb(234,150,53)" fg:x="130" fg:w="5"/><text x="4.7421%" y="303.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (4 samples, 0.14%)</title><rect x="4.5266%" y="277" width="0.1382%" height="15" fill="rgb(228,201,54)" fg:x="131" fg:w="4"/><text x="4.7766%" y="287.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.03%)</title><rect x="4.6303%" y="261" width="0.0346%" height="15" fill="rgb(222,22,37)" fg:x="134" fg:w="1"/><text x="4.8803%" y="271.50"></text></g><g><title>&lt;core::slice::iter::ChunksExact&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (1 samples, 0.03%)</title><rect x="4.6648%" y="261" width="0.0346%" height="15" fill="rgb(237,53,32)" fg:x="135" fg:w="1"/><text x="4.9148%" y="271.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.03%)</title><rect x="4.6648%" y="245" width="0.0346%" height="15" fill="rgb(233,25,53)" fg:x="135" fg:w="1"/><text x="4.9148%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="4.6648%" y="293" width="0.0691%" height="15" fill="rgb(210,40,34)" fg:x="135" fg:w="2"/><text x="4.9148%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (2 samples, 0.07%)</title><rect x="4.6648%" y="277" width="0.0691%" height="15" fill="rgb(241,220,44)" fg:x="135" fg:w="2"/><text x="4.9148%" y="287.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (1 samples, 0.03%)</title><rect x="4.6994%" y="261" width="0.0346%" height="15" fill="rgb(235,28,35)" fg:x="136" fg:w="1"/><text x="4.9494%" y="271.50"></text></g><g><title>chacha20::avx2_cpuid::init (1 samples, 0.03%)</title><rect x="4.7339%" y="293" width="0.0346%" height="15" fill="rgb(210,56,17)" fg:x="137" fg:w="1"/><text x="4.9839%" y="303.50"></text></g><g><title>chacha20::avx2_cpuid::init_get (1 samples, 0.03%)</title><rect x="4.7339%" y="277" width="0.0346%" height="15" fill="rgb(224,130,29)" fg:x="137" fg:w="1"/><text x="4.9839%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicU8::load (1 samples, 0.03%)</title><rect x="4.7339%" y="261" width="0.0346%" height="15" fill="rgb(235,212,8)" fg:x="137" fg:w="1"/><text x="4.9839%" y="271.50"></text></g><g><title>core::array::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T: N]&gt;::index_mut (1 samples, 0.03%)</title><rect x="4.7685%" y="293" width="0.0346%" height="15" fill="rgb(223,33,50)" fg:x="138" fg:w="1"/><text x="5.0185%" y="303.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.03%)</title><rect x="4.8030%" y="293" width="0.0346%" height="15" fill="rgb(219,149,13)" fg:x="139" fg:w="1"/><text x="5.0530%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="4.8721%" y="261" width="0.0346%" height="15" fill="rgb(250,156,29)" fg:x="141" fg:w="1"/><text x="5.1221%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="4.8721%" y="245" width="0.0346%" height="15" fill="rgb(216,193,19)" fg:x="141" fg:w="1"/><text x="5.1221%" y="255.50"></text></g><g><title>&lt;chacha20::ChaChaCore&lt;R&gt; as crypto_common::KeyIvInit&gt;::new (13 samples, 0.45%)</title><rect x="4.4921%" y="309" width="0.4492%" height="15" fill="rgb(216,135,14)" fg:x="130" fg:w="13"/><text x="4.7421%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter_mut (3 samples, 0.10%)</title><rect x="4.8376%" y="293" width="0.1037%" height="15" fill="rgb(241,47,5)" fg:x="140" fg:w="3"/><text x="5.0876%" y="303.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::new (3 samples, 0.10%)</title><rect x="4.8376%" y="277" width="0.1037%" height="15" fill="rgb(233,42,35)" fg:x="140" fg:w="3"/><text x="5.0876%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.03%)</title><rect x="4.9067%" y="261" width="0.0346%" height="15" fill="rgb(231,13,6)" fg:x="142" fg:w="1"/><text x="5.1567%" y="271.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="4.9413%" y="309" width="0.0346%" height="15" fill="rgb(207,181,40)" fg:x="143" fg:w="1"/><text x="5.1913%" y="319.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.03%)</title><rect x="4.9413%" y="293" width="0.0346%" height="15" fill="rgb(254,173,49)" fg:x="143" fg:w="1"/><text x="5.1913%" y="303.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (3 samples, 0.10%)</title><rect x="5.1486%" y="293" width="0.1037%" height="15" fill="rgb(221,1,38)" fg:x="149" fg:w="3"/><text x="5.3986%" y="303.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (3 samples, 0.10%)</title><rect x="5.1486%" y="277" width="0.1037%" height="15" fill="rgb(206,124,46)" fg:x="149" fg:w="3"/><text x="5.3986%" y="287.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (2 samples, 0.07%)</title><rect x="5.1831%" y="261" width="0.0691%" height="15" fill="rgb(249,21,11)" fg:x="150" fg:w="2"/><text x="5.4331%" y="271.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (1 samples, 0.03%)</title><rect x="5.2177%" y="245" width="0.0346%" height="15" fill="rgb(222,201,40)" fg:x="151" fg:w="1"/><text x="5.4677%" y="255.50"></text></g><g><title>&lt;core::slice::iter::ChunksExact&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (2 samples, 0.07%)</title><rect x="5.2868%" y="261" width="0.0691%" height="15" fill="rgb(235,61,29)" fg:x="153" fg:w="2"/><text x="5.5368%" y="271.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.03%)</title><rect x="5.3214%" y="245" width="0.0346%" height="15" fill="rgb(219,207,3)" fg:x="154" fg:w="1"/><text x="5.5714%" y="255.50"></text></g><g><title>core::ptr::slice_from_raw_parts (1 samples, 0.03%)</title><rect x="5.3214%" y="229" width="0.0346%" height="15" fill="rgb(222,56,46)" fg:x="154" fg:w="1"/><text x="5.5714%" y="239.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (1 samples, 0.03%)</title><rect x="5.3214%" y="213" width="0.0346%" height="15" fill="rgb(239,76,54)" fg:x="154" fg:w="1"/><text x="5.5714%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.17%)</title><rect x="5.2522%" y="293" width="0.1728%" height="15" fill="rgb(231,124,27)" fg:x="152" fg:w="5"/><text x="5.5022%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (4 samples, 0.14%)</title><rect x="5.2868%" y="277" width="0.1382%" height="15" fill="rgb(249,195,6)" fg:x="153" fg:w="4"/><text x="5.5368%" y="287.50"></text></g><g><title>&lt;core::slice::iter::ChunksExactMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (2 samples, 0.07%)</title><rect x="5.3559%" y="261" width="0.0691%" height="15" fill="rgb(237,174,47)" fg:x="155" fg:w="2"/><text x="5.6059%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="5.3905%" y="245" width="0.0346%" height="15" fill="rgb(206,201,31)" fg:x="156" fg:w="1"/><text x="5.6405%" y="255.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.03%)</title><rect x="5.4250%" y="293" width="0.0346%" height="15" fill="rgb(231,57,52)" fg:x="157" fg:w="1"/><text x="5.6750%" y="303.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (1 samples, 0.03%)</title><rect x="5.4250%" y="277" width="0.0346%" height="15" fill="rgb(248,177,22)" fg:x="157" fg:w="1"/><text x="5.6750%" y="287.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (1 samples, 0.03%)</title><rect x="5.4250%" y="261" width="0.0346%" height="15" fill="rgb(215,211,37)" fg:x="157" fg:w="1"/><text x="5.6750%" y="271.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (1 samples, 0.03%)</title><rect x="5.4250%" y="245" width="0.0346%" height="15" fill="rgb(241,128,51)" fg:x="157" fg:w="1"/><text x="5.6750%" y="255.50"></text></g><g><title>[libc.so.6] (2 samples, 0.07%)</title><rect x="5.4596%" y="293" width="0.0691%" height="15" fill="rgb(227,165,31)" fg:x="158" fg:w="2"/><text x="5.7096%" y="303.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (6 samples, 0.21%)</title><rect x="6.3580%" y="277" width="0.2073%" height="15" fill="rgb(228,167,24)" fg:x="184" fg:w="6"/><text x="6.6080%" y="287.50"></text></g><g><title>chacha20::xchacha::quarter_round (34 samples, 1.17%)</title><rect x="5.5287%" y="293" width="1.1748%" height="15" fill="rgb(228,143,12)" fg:x="160" fg:w="34"/><text x="5.7787%" y="303.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (4 samples, 0.14%)</title><rect x="6.5653%" y="277" width="0.1382%" height="15" fill="rgb(249,149,8)" fg:x="190" fg:w="4"/><text x="6.8153%" y="287.50"></text></g><g><title>core::array::&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (2 samples, 0.07%)</title><rect x="6.7035%" y="293" width="0.0691%" height="15" fill="rgb(243,35,44)" fg:x="194" fg:w="2"/><text x="6.9535%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.07%)</title><rect x="6.7035%" y="277" width="0.0691%" height="15" fill="rgb(246,89,9)" fg:x="194" fg:w="2"/><text x="6.9535%" y="287.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.07%)</title><rect x="6.7035%" y="261" width="0.0691%" height="15" fill="rgb(233,213,13)" fg:x="194" fg:w="2"/><text x="6.9535%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.07%)</title><rect x="6.7035%" y="245" width="0.0691%" height="15" fill="rgb(233,141,41)" fg:x="194" fg:w="2"/><text x="6.9535%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.03%)</title><rect x="6.7381%" y="229" width="0.0346%" height="15" fill="rgb(239,167,4)" fg:x="195" fg:w="1"/><text x="6.9881%" y="239.50"></text></g><g><title>core::array::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T: N]&gt;::index_mut (2 samples, 0.07%)</title><rect x="6.7726%" y="293" width="0.0691%" height="15" fill="rgb(209,217,16)" fg:x="196" fg:w="2"/><text x="7.0226%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.07%)</title><rect x="6.7726%" y="277" width="0.0691%" height="15" fill="rgb(219,88,35)" fg:x="196" fg:w="2"/><text x="7.0226%" y="287.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="6.8072%" y="261" width="0.0346%" height="15" fill="rgb(220,193,23)" fg:x="197" fg:w="1"/><text x="7.0572%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="6.8072%" y="245" width="0.0346%" height="15" fill="rgb(230,90,52)" fg:x="197" fg:w="1"/><text x="7.0572%" y="255.50"></text></g><g><title>core::cmp::min (1 samples, 0.03%)</title><rect x="6.8763%" y="245" width="0.0346%" height="15" fill="rgb(252,106,19)" fg:x="199" fg:w="1"/><text x="7.1263%" y="255.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.03%)</title><rect x="6.8763%" y="229" width="0.0346%" height="15" fill="rgb(206,74,20)" fg:x="199" fg:w="1"/><text x="7.1263%" y="239.50"></text></g><g><title>core::cmp::min_by (1 samples, 0.03%)</title><rect x="6.8763%" y="213" width="0.0346%" height="15" fill="rgb(230,138,44)" fg:x="199" fg:w="1"/><text x="7.1263%" y="223.50"></text></g><g><title>core::iter::adapters::zip::TrustedRandomAccessNoCoerce::size (3 samples, 0.10%)</title><rect x="6.9109%" y="245" width="0.1037%" height="15" fill="rgb(235,182,43)" fg:x="200" fg:w="3"/><text x="7.1609%" y="255.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (3 samples, 0.10%)</title><rect x="6.9109%" y="229" width="0.1037%" height="15" fill="rgb(242,16,51)" fg:x="200" fg:w="3"/><text x="7.1609%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (6 samples, 0.21%)</title><rect x="6.8417%" y="293" width="0.2073%" height="15" fill="rgb(248,9,4)" fg:x="198" fg:w="6"/><text x="7.0917%" y="303.50"></text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (6 samples, 0.21%)</title><rect x="6.8417%" y="277" width="0.2073%" height="15" fill="rgb(210,31,22)" fg:x="198" fg:w="6"/><text x="7.0917%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (5 samples, 0.17%)</title><rect x="6.8763%" y="261" width="0.1728%" height="15" fill="rgb(239,54,39)" fg:x="199" fg:w="5"/><text x="7.1263%" y="271.50"></text></g><g><title>memcpy (1 samples, 0.03%)</title><rect x="7.0145%" y="245" width="0.0346%" height="15" fill="rgb(230,99,41)" fg:x="203" fg:w="1"/><text x="7.2645%" y="255.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_le_bytes (2 samples, 0.07%)</title><rect x="7.0491%" y="293" width="0.0691%" height="15" fill="rgb(253,106,12)" fg:x="204" fg:w="2"/><text x="7.2991%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::chunks_exact (2 samples, 0.07%)</title><rect x="7.1182%" y="293" width="0.0691%" height="15" fill="rgb(213,46,41)" fg:x="206" fg:w="2"/><text x="7.3682%" y="303.50"></text></g><g><title>core::slice::iter::ChunksExact&lt;T&gt;::new (2 samples, 0.07%)</title><rect x="7.1182%" y="277" width="0.0691%" height="15" fill="rgb(215,133,35)" fg:x="206" fg:w="2"/><text x="7.3682%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (2 samples, 0.07%)</title><rect x="7.1182%" y="261" width="0.0691%" height="15" fill="rgb(213,28,5)" fg:x="206" fg:w="2"/><text x="7.3682%" y="271.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.03%)</title><rect x="7.1527%" y="245" width="0.0346%" height="15" fill="rgb(215,77,49)" fg:x="207" fg:w="1"/><text x="7.4027%" y="255.50"></text></g><g><title>core::ptr::slice_from_raw_parts (1 samples, 0.03%)</title><rect x="7.1527%" y="229" width="0.0346%" height="15" fill="rgb(248,100,22)" fg:x="207" fg:w="1"/><text x="7.4027%" y="239.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (1 samples, 0.03%)</title><rect x="7.1527%" y="213" width="0.0346%" height="15" fill="rgb(208,67,9)" fg:x="207" fg:w="1"/><text x="7.4027%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.03%)</title><rect x="7.1873%" y="293" width="0.0346%" height="15" fill="rgb(219,133,21)" fg:x="208" fg:w="1"/><text x="7.4373%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="7.1873%" y="277" width="0.0346%" height="15" fill="rgb(246,46,29)" fg:x="208" fg:w="1"/><text x="7.4373%" y="287.50"></text></g><g><title>memcpy (1 samples, 0.03%)</title><rect x="7.1873%" y="261" width="0.0346%" height="15" fill="rgb(246,185,52)" fg:x="208" fg:w="1"/><text x="7.4373%" y="271.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="7.2909%" y="277" width="0.0346%" height="15" fill="rgb(252,136,11)" fg:x="211" fg:w="1"/><text x="7.5409%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (4 samples, 0.14%)</title><rect x="7.2218%" y="293" width="0.1382%" height="15" fill="rgb(219,138,53)" fg:x="209" fg:w="4"/><text x="7.4718%" y="303.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="7.3255%" y="277" width="0.0346%" height="15" fill="rgb(211,51,23)" fg:x="212" fg:w="1"/><text x="7.5755%" y="287.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="7.6365%" y="165" width="0.0346%" height="15" fill="rgb(247,221,28)" fg:x="221" fg:w="1"/><text x="7.8865%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (7 samples, 0.24%)</title><rect x="7.4637%" y="213" width="0.2419%" height="15" fill="rgb(251,222,45)" fg:x="216" fg:w="7"/><text x="7.7137%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (4 samples, 0.14%)</title><rect x="7.5674%" y="197" width="0.1382%" height="15" fill="rgb(217,162,53)" fg:x="219" fg:w="4"/><text x="7.8174%" y="207.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate::{{closure}} (3 samples, 0.10%)</title><rect x="7.6019%" y="181" width="0.1037%" height="15" fill="rgb(229,93,14)" fg:x="220" fg:w="3"/><text x="7.8519%" y="191.50"></text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default::{{closure}} (1 samples, 0.03%)</title><rect x="7.6710%" y="165" width="0.0346%" height="15" fill="rgb(209,67,49)" fg:x="222" fg:w="1"/><text x="7.9210%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (13 samples, 0.45%)</title><rect x="7.3946%" y="261" width="0.4492%" height="15" fill="rgb(213,87,29)" fg:x="214" fg:w="13"/><text x="7.6446%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 0.45%)</title><rect x="7.3946%" y="245" width="0.4492%" height="15" fill="rgb(205,151,52)" fg:x="214" fg:w="13"/><text x="7.6446%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (12 samples, 0.41%)</title><rect x="7.4292%" y="229" width="0.4147%" height="15" fill="rgb(253,215,39)" fg:x="215" fg:w="12"/><text x="7.6792%" y="239.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.14%)</title><rect x="7.7056%" y="213" width="0.1382%" height="15" fill="rgb(221,220,41)" fg:x="223" fg:w="4"/><text x="7.9556%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.03%)</title><rect x="7.8093%" y="197" width="0.0346%" height="15" fill="rgb(218,133,21)" fg:x="226" fg:w="1"/><text x="8.0593%" y="207.50"></text></g><g><title>chacha20::xchacha::hchacha (84 samples, 2.90%)</title><rect x="4.9758%" y="309" width="2.9026%" height="15" fill="rgb(221,193,43)" fg:x="144" fg:w="84"/><text x="5.2258%" y="319.50">ch..</text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default (15 samples, 0.52%)</title><rect x="7.3601%" y="293" width="0.5183%" height="15" fill="rgb(240,128,52)" fg:x="213" fg:w="15"/><text x="7.6101%" y="303.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (15 samples, 0.52%)</title><rect x="7.3601%" y="277" width="0.5183%" height="15" fill="rgb(253,114,12)" fg:x="213" fg:w="15"/><text x="7.6101%" y="287.50"></text></g><g><title>generic_array::ArrayBuilder&lt;T,N&gt;::iter_position (1 samples, 0.03%)</title><rect x="7.8438%" y="261" width="0.0346%" height="15" fill="rgb(215,223,47)" fg:x="227" fg:w="1"/><text x="8.0938%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter_mut (1 samples, 0.03%)</title><rect x="7.8438%" y="245" width="0.0346%" height="15" fill="rgb(248,225,23)" fg:x="227" fg:w="1"/><text x="8.0938%" y="255.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::new (1 samples, 0.03%)</title><rect x="7.8438%" y="229" width="0.0346%" height="15" fill="rgb(250,108,0)" fg:x="227" fg:w="1"/><text x="8.0938%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="7.8784%" y="309" width="0.0346%" height="15" fill="rgb(228,208,7)" fg:x="228" fg:w="1"/><text x="8.1284%" y="319.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="7.8784%" y="293" width="0.0346%" height="15" fill="rgb(244,45,10)" fg:x="228" fg:w="1"/><text x="8.1284%" y="303.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.03%)</title><rect x="7.8784%" y="277" width="0.0346%" height="15" fill="rgb(207,125,25)" fg:x="228" fg:w="1"/><text x="8.1284%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.03%)</title><rect x="7.8784%" y="261" width="0.0346%" height="15" fill="rgb(210,195,18)" fg:x="228" fg:w="1"/><text x="8.1284%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (3 samples, 0.10%)</title><rect x="7.9129%" y="229" width="0.1037%" height="15" fill="rgb(249,80,12)" fg:x="229" fg:w="3"/><text x="8.1629%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.03%)</title><rect x="7.9820%" y="213" width="0.0346%" height="15" fill="rgb(221,65,9)" fg:x="231" fg:w="1"/><text x="8.2320%" y="223.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate::{{closure}} (1 samples, 0.03%)</title><rect x="7.9820%" y="197" width="0.0346%" height="15" fill="rgb(235,49,36)" fg:x="231" fg:w="1"/><text x="8.2320%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4 samples, 0.14%)</title><rect x="7.9129%" y="277" width="0.1382%" height="15" fill="rgb(225,32,20)" fg:x="229" fg:w="4"/><text x="8.1629%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.14%)</title><rect x="7.9129%" y="261" width="0.1382%" height="15" fill="rgb(215,141,46)" fg:x="229" fg:w="4"/><text x="8.1629%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (4 samples, 0.14%)</title><rect x="7.9129%" y="245" width="0.1382%" height="15" fill="rgb(250,160,47)" fg:x="229" fg:w="4"/><text x="8.1629%" y="255.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="8.0166%" y="229" width="0.0346%" height="15" fill="rgb(216,222,40)" fg:x="232" fg:w="1"/><text x="8.2666%" y="239.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (1 samples, 0.03%)</title><rect x="8.0166%" y="213" width="0.0346%" height="15" fill="rgb(234,217,39)" fg:x="232" fg:w="1"/><text x="8.2666%" y="223.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.03%)</title><rect x="8.0511%" y="261" width="0.0346%" height="15" fill="rgb(207,178,40)" fg:x="233" fg:w="1"/><text x="8.3011%" y="271.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (1 samples, 0.03%)</title><rect x="8.0511%" y="245" width="0.0346%" height="15" fill="rgb(221,136,13)" fg:x="233" fg:w="1"/><text x="8.3011%" y="255.50"></text></g><g><title>&lt;chacha20::xchacha::XChaChaCore&lt;R&gt; as crypto_common::KeyIvInit&gt;::new (105 samples, 3.63%)</title><rect x="4.4921%" y="325" width="3.6282%" height="15" fill="rgb(249,199,10)" fg:x="130" fg:w="105"/><text x="4.7421%" y="335.50">&lt;cha..</text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default (6 samples, 0.21%)</title><rect x="7.9129%" y="309" width="0.2073%" height="15" fill="rgb(249,222,13)" fg:x="229" fg:w="6"/><text x="8.1629%" y="319.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (6 samples, 0.21%)</title><rect x="7.9129%" y="293" width="0.2073%" height="15" fill="rgb(244,185,38)" fg:x="229" fg:w="6"/><text x="8.1629%" y="303.50"></text></g><g><title>generic_array::ArrayBuilder&lt;T,N&gt;::iter_position (2 samples, 0.07%)</title><rect x="8.0511%" y="277" width="0.0691%" height="15" fill="rgb(236,202,9)" fg:x="233" fg:w="2"/><text x="8.3011%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter_mut (1 samples, 0.03%)</title><rect x="8.0857%" y="261" width="0.0346%" height="15" fill="rgb(250,229,37)" fg:x="234" fg:w="1"/><text x="8.3357%" y="271.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::new (1 samples, 0.03%)</title><rect x="8.0857%" y="245" width="0.0346%" height="15" fill="rgb(206,174,23)" fg:x="234" fg:w="1"/><text x="8.3357%" y="255.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="8.1202%" y="325" width="0.0346%" height="15" fill="rgb(211,33,43)" fg:x="235" fg:w="1"/><text x="8.3702%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::enumerate (1 samples, 0.03%)</title><rect x="8.1548%" y="293" width="0.0346%" height="15" fill="rgb(245,58,50)" fg:x="236" fg:w="1"/><text x="8.4048%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (10 samples, 0.35%)</title><rect x="8.3967%" y="245" width="0.3455%" height="15" fill="rgb(244,68,36)" fg:x="243" fg:w="10"/><text x="8.6467%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (6 samples, 0.21%)</title><rect x="8.5349%" y="229" width="0.2073%" height="15" fill="rgb(232,229,15)" fg:x="247" fg:w="6"/><text x="8.7849%" y="239.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate::{{closure}} (3 samples, 0.10%)</title><rect x="8.6386%" y="213" width="0.1037%" height="15" fill="rgb(254,30,23)" fg:x="250" fg:w="3"/><text x="8.8886%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (2 samples, 0.07%)</title><rect x="8.7768%" y="229" width="0.0691%" height="15" fill="rgb(235,160,14)" fg:x="254" fg:w="2"/><text x="9.0268%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="8.8804%" y="213" width="0.0346%" height="15" fill="rgb(212,155,44)" fg:x="257" fg:w="1"/><text x="9.1304%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="8.8804%" y="197" width="0.0346%" height="15" fill="rgb(226,2,50)" fg:x="257" fg:w="1"/><text x="9.1304%" y="207.50"></text></g><g><title>&lt;cipher::stream_wrapper::StreamCipherCoreWrapper&lt;T&gt; as crypto_common::KeyIvInit&gt;::new (129 samples, 4.46%)</title><rect x="4.4921%" y="341" width="4.4575%" height="15" fill="rgb(234,177,6)" fg:x="130" fg:w="129"/><text x="4.7421%" y="351.50">&lt;ciph..</text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default (23 samples, 0.79%)</title><rect x="8.1548%" y="325" width="0.7947%" height="15" fill="rgb(217,24,9)" fg:x="236" fg:w="23"/><text x="8.4048%" y="335.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (23 samples, 0.79%)</title><rect x="8.1548%" y="309" width="0.7947%" height="15" fill="rgb(220,13,46)" fg:x="236" fg:w="23"/><text x="8.4048%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (22 samples, 0.76%)</title><rect x="8.1894%" y="293" width="0.7602%" height="15" fill="rgb(239,221,27)" fg:x="237" fg:w="22"/><text x="8.4394%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21 samples, 0.73%)</title><rect x="8.2239%" y="277" width="0.7256%" height="15" fill="rgb(222,198,25)" fg:x="238" fg:w="21"/><text x="8.4739%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (21 samples, 0.73%)</title><rect x="8.2239%" y="261" width="0.7256%" height="15" fill="rgb(211,99,13)" fg:x="238" fg:w="21"/><text x="8.4739%" y="271.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.21%)</title><rect x="8.7422%" y="245" width="0.2073%" height="15" fill="rgb(232,111,31)" fg:x="253" fg:w="6"/><text x="8.9922%" y="255.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (3 samples, 0.10%)</title><rect x="8.8459%" y="229" width="0.1037%" height="15" fill="rgb(245,82,37)" fg:x="256" fg:w="3"/><text x="9.0959%" y="239.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (1 samples, 0.03%)</title><rect x="8.9150%" y="213" width="0.0346%" height="15" fill="rgb(227,149,46)" fg:x="258" fg:w="1"/><text x="9.1650%" y="223.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.03%)</title><rect x="8.9841%" y="309" width="0.0346%" height="15" fill="rgb(218,36,50)" fg:x="260" fg:w="1"/><text x="9.2341%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.03%)</title><rect x="9.0187%" y="309" width="0.0346%" height="15" fill="rgb(226,80,48)" fg:x="261" fg:w="1"/><text x="9.2687%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.03%)</title><rect x="9.0532%" y="309" width="0.0346%" height="15" fill="rgb(238,224,15)" fg:x="262" fg:w="1"/><text x="9.3032%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (4 samples, 0.14%)</title><rect x="9.0878%" y="229" width="0.1382%" height="15" fill="rgb(241,136,10)" fg:x="263" fg:w="4"/><text x="9.3378%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.03%)</title><rect x="9.1914%" y="213" width="0.0346%" height="15" fill="rgb(208,32,45)" fg:x="266" fg:w="1"/><text x="9.4414%" y="223.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate::{{closure}} (1 samples, 0.03%)</title><rect x="9.1914%" y="197" width="0.0346%" height="15" fill="rgb(207,135,9)" fg:x="266" fg:w="1"/><text x="9.4414%" y="207.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="9.1914%" y="181" width="0.0346%" height="15" fill="rgb(206,86,44)" fg:x="266" fg:w="1"/><text x="9.4414%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.03%)</title><rect x="9.2260%" y="213" width="0.0346%" height="15" fill="rgb(245,177,15)" fg:x="267" fg:w="1"/><text x="9.4760%" y="223.50"></text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default (6 samples, 0.21%)</title><rect x="9.0878%" y="309" width="0.2073%" height="15" fill="rgb(206,64,50)" fg:x="263" fg:w="6"/><text x="9.3378%" y="319.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (6 samples, 0.21%)</title><rect x="9.0878%" y="293" width="0.2073%" height="15" fill="rgb(234,36,40)" fg:x="263" fg:w="6"/><text x="9.3378%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6 samples, 0.21%)</title><rect x="9.0878%" y="277" width="0.2073%" height="15" fill="rgb(213,64,8)" fg:x="263" fg:w="6"/><text x="9.3378%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.21%)</title><rect x="9.0878%" y="261" width="0.2073%" height="15" fill="rgb(210,75,36)" fg:x="263" fg:w="6"/><text x="9.3378%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (6 samples, 0.21%)</title><rect x="9.0878%" y="245" width="0.2073%" height="15" fill="rgb(229,88,21)" fg:x="263" fg:w="6"/><text x="9.3378%" y="255.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="9.2260%" y="229" width="0.0691%" height="15" fill="rgb(252,204,47)" fg:x="267" fg:w="2"/><text x="9.4760%" y="239.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (1 samples, 0.03%)</title><rect x="9.2605%" y="213" width="0.0346%" height="15" fill="rgb(208,77,27)" fg:x="268" fg:w="1"/><text x="9.5105%" y="223.50"></text></g><g><title>chacha20poly1305::cipher::Cipher&lt;C&gt;::authenticate_lengths (13 samples, 0.45%)</title><rect x="8.9841%" y="325" width="0.4492%" height="15" fill="rgb(221,76,26)" fg:x="260" fg:w="13"/><text x="9.2341%" y="335.50"></text></g><g><title>universal_hash::UniversalHash::update (4 samples, 0.14%)</title><rect x="9.2951%" y="309" width="0.1382%" height="15" fill="rgb(225,139,18)" fg:x="269" fg:w="4"/><text x="9.5451%" y="319.50"></text></g><g><title>&lt;poly1305::Poly1305 as universal_hash::UniversalHash&gt;::update_with_backend (4 samples, 0.14%)</title><rect x="9.2951%" y="293" width="0.1382%" height="15" fill="rgb(230,137,11)" fg:x="269" fg:w="4"/><text x="9.5451%" y="303.50"></text></g><g><title>&lt;poly1305::backend::autodetect::State as universal_hash::UniversalHash&gt;::update_with_backend (4 samples, 0.14%)</title><rect x="9.2951%" y="277" width="0.1382%" height="15" fill="rgb(212,28,1)" fg:x="269" fg:w="4"/><text x="9.5451%" y="287.50"></text></g><g><title>&lt;universal_hash::UniversalHash::update::Ctx&lt;BS&gt; as universal_hash::UhfClosure&gt;::call (4 samples, 0.14%)</title><rect x="9.2951%" y="261" width="0.1382%" height="15" fill="rgb(248,164,17)" fg:x="269" fg:w="4"/><text x="9.5451%" y="271.50"></text></g><g><title>&lt;poly1305::backend::soft::State as universal_hash::UhfBackend&gt;::proc_block (4 samples, 0.14%)</title><rect x="9.2951%" y="245" width="0.1382%" height="15" fill="rgb(222,171,42)" fg:x="269" fg:w="4"/><text x="9.5451%" y="255.50"></text></g><g><title>poly1305::backend::soft::State::compute_block (4 samples, 0.14%)</title><rect x="9.2951%" y="229" width="0.1382%" height="15" fill="rgb(243,84,45)" fg:x="269" fg:w="4"/><text x="9.5451%" y="239.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;u32&gt; for u64&gt;::from (1 samples, 0.03%)</title><rect x="9.3988%" y="213" width="0.0346%" height="15" fill="rgb(252,49,23)" fg:x="272" fg:w="1"/><text x="9.6488%" y="223.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.03%)</title><rect x="9.9516%" y="165" width="0.0346%" height="15" fill="rgb(215,19,7)" fg:x="288" fg:w="1"/><text x="10.2016%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_add_epi32 (95 samples, 3.28%)</title><rect x="19.4195%" y="133" width="3.2827%" height="15" fill="rgb(238,81,41)" fg:x="562" fg:w="95"/><text x="19.6695%" y="143.50">cor..</text></g><g><title>core::core_arch::x86::m128iExt::as_i32x4 (18 samples, 0.62%)</title><rect x="22.0802%" y="117" width="0.6220%" height="15" fill="rgb(210,199,37)" fg:x="639" fg:w="18"/><text x="22.3302%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_slli_epi32 (66 samples, 2.28%)</title><rect x="22.7021%" y="133" width="2.2806%" height="15" fill="rgb(244,192,49)" fg:x="657" fg:w="66"/><text x="22.9521%" y="143.50">c..</text></g><g><title>core::core_arch::x86::m128iExt::as_i32x4 (13 samples, 0.45%)</title><rect x="24.5335%" y="117" width="0.4492%" height="15" fill="rgb(226,211,11)" fg:x="710" fg:w="13"/><text x="24.7835%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_srli_epi32 (13 samples, 0.45%)</title><rect x="24.9827%" y="133" width="0.4492%" height="15" fill="rgb(236,162,54)" fg:x="723" fg:w="13"/><text x="25.2327%" y="143.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i32x4 (2 samples, 0.07%)</title><rect x="25.3628%" y="117" width="0.0691%" height="15" fill="rgb(220,229,9)" fg:x="734" fg:w="2"/><text x="25.6128%" y="127.50"></text></g><g><title>chacha20::backends::sse2::add_xor_rot (507 samples, 17.52%)</title><rect x="10.1244%" y="149" width="17.5190%" height="15" fill="rgb(250,87,22)" fg:x="293" fg:w="507"/><text x="10.3744%" y="159.50">chacha20::backends::sse2::a..</text></g><g><title>core::core_arch::x86::sse2::_mm_xor_si128 (64 samples, 2.21%)</title><rect x="25.4319%" y="133" width="2.2115%" height="15" fill="rgb(239,43,17)" fg:x="736" fg:w="64"/><text x="25.6819%" y="143.50">c..</text></g><g><title>chacha20::backends::sse2::cols_to_rows (34 samples, 1.17%)</title><rect x="27.6434%" y="149" width="1.1748%" height="15" fill="rgb(231,177,25)" fg:x="800" fg:w="34"/><text x="27.8934%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_shuffle_epi32 (19 samples, 0.66%)</title><rect x="28.1617%" y="133" width="0.6565%" height="15" fill="rgb(219,179,1)" fg:x="815" fg:w="19"/><text x="28.4117%" y="143.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i32x4 (4 samples, 0.14%)</title><rect x="28.6800%" y="117" width="0.1382%" height="15" fill="rgb(238,219,53)" fg:x="830" fg:w="4"/><text x="28.9300%" y="127.50"></text></g><g><title>chacha20::backends::sse2::double_quarter_round (576 samples, 19.90%)</title><rect x="9.9862%" y="165" width="19.9032%" height="15" fill="rgb(232,167,36)" fg:x="289" fg:w="576"/><text x="10.2362%" y="175.50">chacha20::backends::sse2::doubl..</text></g><g><title>chacha20::backends::sse2::rows_to_cols (31 samples, 1.07%)</title><rect x="28.8182%" y="149" width="1.0712%" height="15" fill="rgb(244,19,51)" fg:x="834" fg:w="31"/><text x="29.0682%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_shuffle_epi32 (24 samples, 0.83%)</title><rect x="29.0601%" y="133" width="0.8293%" height="15" fill="rgb(224,6,22)" fg:x="841" fg:w="24"/><text x="29.3101%" y="143.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i32x4 (8 samples, 0.28%)</title><rect x="29.6130%" y="117" width="0.2764%" height="15" fill="rgb(224,145,5)" fg:x="857" fg:w="8"/><text x="29.8630%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_add_epi32 (7 samples, 0.24%)</title><rect x="29.8894%" y="165" width="0.2419%" height="15" fill="rgb(234,130,49)" fg:x="865" fg:w="7"/><text x="30.1394%" y="175.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i32x4 (4 samples, 0.14%)</title><rect x="29.9931%" y="149" width="0.1382%" height="15" fill="rgb(254,6,2)" fg:x="868" fg:w="4"/><text x="30.2431%" y="159.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (4 samples, 0.14%)</title><rect x="30.5805%" y="133" width="0.1382%" height="15" fill="rgb(208,96,46)" fg:x="885" fg:w="4"/><text x="30.8305%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (1 samples, 0.03%)</title><rect x="30.6842%" y="117" width="0.0346%" height="15" fill="rgb(239,3,39)" fg:x="888" fg:w="1"/><text x="30.9342%" y="127.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (6 samples, 0.21%)</title><rect x="30.7187%" y="133" width="0.2073%" height="15" fill="rgb(233,210,1)" fg:x="889" fg:w="6"/><text x="30.9687%" y="143.50"></text></g><g><title>core::ptr::read (3 samples, 0.10%)</title><rect x="30.9606%" y="117" width="0.1037%" height="15" fill="rgb(244,137,37)" fg:x="896" fg:w="3"/><text x="31.2106%" y="127.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (28 samples, 0.97%)</title><rect x="30.1313%" y="165" width="0.9675%" height="15" fill="rgb(240,136,2)" fg:x="872" fg:w="28"/><text x="30.3813%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (25 samples, 0.86%)</title><rect x="30.2350%" y="149" width="0.8639%" height="15" fill="rgb(239,18,37)" fg:x="875" fg:w="25"/><text x="30.4850%" y="159.50"></text></g><g><title>core::mem::replace (5 samples, 0.17%)</title><rect x="30.9261%" y="133" width="0.1728%" height="15" fill="rgb(218,185,22)" fg:x="895" fg:w="5"/><text x="31.1761%" y="143.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="31.0643%" y="117" width="0.0346%" height="15" fill="rgb(225,218,4)" fg:x="899" fg:w="1"/><text x="31.3143%" y="127.50"></text></g><g><title>chacha20::backends::sse2::rounds (622 samples, 21.49%)</title><rect x="9.6406%" y="181" width="21.4927%" height="15" fill="rgb(230,182,32)" fg:x="279" fg:w="622"/><text x="9.8906%" y="191.50">chacha20::backends::sse2::rounds</text></g><g><title>memcpy (1 samples, 0.03%)</title><rect x="31.0988%" y="165" width="0.0346%" height="15" fill="rgb(242,56,43)" fg:x="900" fg:w="1"/><text x="31.3488%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_storeu_si128 (3 samples, 0.10%)</title><rect x="31.1334%" y="181" width="0.1037%" height="15" fill="rgb(233,99,24)" fg:x="901" fg:w="3"/><text x="31.3834%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.03%)</title><rect x="31.3407%" y="149" width="0.0346%" height="15" fill="rgb(234,209,42)" fg:x="907" fg:w="1"/><text x="31.5907%" y="159.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (7 samples, 0.24%)</title><rect x="31.2370%" y="181" width="0.2419%" height="15" fill="rgb(227,7,12)" fg:x="904" fg:w="7"/><text x="31.4870%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (6 samples, 0.21%)</title><rect x="31.2716%" y="165" width="0.2073%" height="15" fill="rgb(245,203,43)" fg:x="905" fg:w="6"/><text x="31.5216%" y="175.50"></text></g><g><title>core::mem::replace (3 samples, 0.10%)</title><rect x="31.3753%" y="149" width="0.1037%" height="15" fill="rgb(238,205,33)" fg:x="908" fg:w="3"/><text x="31.6253%" y="159.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="31.4444%" y="133" width="0.0346%" height="15" fill="rgb(231,56,7)" fg:x="910" fg:w="1"/><text x="31.6944%" y="143.50"></text></g><g><title>&lt;chacha20::backends::sse2::Backend&lt;R&gt; as cipher::stream_core::StreamBackend&gt;::gen_ks_block (641 samples, 22.15%)</title><rect x="9.4333%" y="197" width="22.1493%" height="15" fill="rgb(244,186,29)" fg:x="273" fg:w="641"/><text x="9.6833%" y="207.50">&lt;chacha20::backends::sse2::Backend&lt;..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.10%)</title><rect x="31.4789%" y="181" width="0.1037%" height="15" fill="rgb(234,111,31)" fg:x="911" fg:w="3"/><text x="31.7289%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.10%)</title><rect x="31.4789%" y="165" width="0.1037%" height="15" fill="rgb(241,149,10)" fg:x="911" fg:w="3"/><text x="31.7289%" y="175.50"></text></g><g><title>&lt;inout::inout_buf::InOutBufIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.21%)</title><rect x="31.5826%" y="197" width="0.2073%" height="15" fill="rgb(249,206,44)" fg:x="914" fg:w="6"/><text x="31.8326%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="31.7554%" y="181" width="0.0346%" height="15" fill="rgb(251,153,30)" fg:x="919" fg:w="1"/><text x="32.0054%" y="191.50"></text></g><g><title>core::ptr::write (19 samples, 0.66%)</title><rect x="39.4264%" y="69" width="0.6565%" height="15" fill="rgb(239,152,38)" fg:x="1141" fg:w="19"/><text x="39.6764%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (157 samples, 5.43%)</title><rect x="35.0726%" y="117" width="5.4250%" height="15" fill="rgb(249,139,47)" fg:x="1015" fg:w="157"/><text x="35.3226%" y="127.50">&lt;core::..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (89 samples, 3.08%)</title><rect x="37.4223%" y="101" width="3.0753%" height="15" fill="rgb(244,64,35)" fg:x="1083" fg:w="89"/><text x="37.6723%" y="111.50">cor..</text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate::{{closure}} (66 samples, 2.28%)</title><rect x="38.2170%" y="85" width="2.2806%" height="15" fill="rgb(216,46,15)" fg:x="1106" fg:w="66"/><text x="38.4670%" y="95.50">&lt;..</text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default::{{closure}} (12 samples, 0.41%)</title><rect x="40.0829%" y="69" width="0.4147%" height="15" fill="rgb(250,74,19)" fg:x="1160" fg:w="12"/><text x="40.3329%" y="79.50"></text></g><g><title>&lt;u8 as core::default::Default&gt;::default (3 samples, 0.10%)</title><rect x="40.3939%" y="53" width="0.1037%" height="15" fill="rgb(249,42,33)" fg:x="1169" fg:w="3"/><text x="40.6439%" y="63.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (38 samples, 1.31%)</title><rect x="41.3614%" y="101" width="1.3131%" height="15" fill="rgb(242,149,17)" fg:x="1197" fg:w="38"/><text x="41.6114%" y="111.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null::runtime_impl (19 samples, 0.66%)</title><rect x="42.0180%" y="85" width="0.6565%" height="15" fill="rgb(244,29,21)" fg:x="1216" fg:w="19"/><text x="42.2680%" y="95.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::addr (13 samples, 0.45%)</title><rect x="42.2253%" y="69" width="0.4492%" height="15" fill="rgb(220,130,37)" fg:x="1222" fg:w="13"/><text x="42.4753%" y="79.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (1 samples, 0.03%)</title><rect x="42.6745%" y="101" width="0.0346%" height="15" fill="rgb(211,67,2)" fg:x="1235" fg:w="1"/><text x="42.9245%" y="111.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (27 samples, 0.93%)</title><rect x="43.8839%" y="85" width="0.9330%" height="15" fill="rgb(235,68,52)" fg:x="1270" fg:w="27"/><text x="44.1339%" y="95.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (23 samples, 0.79%)</title><rect x="44.0221%" y="69" width="0.7947%" height="15" fill="rgb(246,142,3)" fg:x="1274" fg:w="23"/><text x="44.2721%" y="79.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (1 samples, 0.03%)</title><rect x="44.8169%" y="85" width="0.0346%" height="15" fill="rgb(241,25,7)" fg:x="1297" fg:w="1"/><text x="45.0669%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (384 samples, 13.27%)</title><rect x="31.8245%" y="165" width="13.2688%" height="15" fill="rgb(242,119,39)" fg:x="921" fg:w="384"/><text x="32.0745%" y="175.50">core::iter::traits::..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (384 samples, 13.27%)</title><rect x="31.8245%" y="149" width="13.2688%" height="15" fill="rgb(241,98,45)" fg:x="921" fg:w="384"/><text x="32.0745%" y="159.50">&lt;core::iter::adapter..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (384 samples, 13.27%)</title><rect x="31.8245%" y="133" width="13.2688%" height="15" fill="rgb(254,28,30)" fg:x="921" fg:w="384"/><text x="32.0745%" y="143.50">core::iter::traits::..</text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (133 samples, 4.60%)</title><rect x="40.4976%" y="117" width="4.5957%" height="15" fill="rgb(241,142,54)" fg:x="1172" fg:w="133"/><text x="40.7476%" y="127.50">&lt;core..</text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (69 samples, 2.38%)</title><rect x="42.7091%" y="101" width="2.3842%" height="15" fill="rgb(222,85,15)" fg:x="1236" fg:w="69"/><text x="42.9591%" y="111.50">co..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (7 samples, 0.24%)</title><rect x="44.8514%" y="85" width="0.2419%" height="15" fill="rgb(210,85,47)" fg:x="1298" fg:w="7"/><text x="45.1014%" y="95.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (2 samples, 0.07%)</title><rect x="45.1970%" y="149" width="0.0691%" height="15" fill="rgb(224,206,25)" fg:x="1308" fg:w="2"/><text x="45.4470%" y="159.50"></text></g><g><title>[libc.so.6] (2 samples, 0.07%)</title><rect x="45.1970%" y="133" width="0.0691%" height="15" fill="rgb(243,201,19)" fg:x="1308" fg:w="2"/><text x="45.4470%" y="143.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="45.2661%" y="133" width="0.0346%" height="15" fill="rgb(236,59,4)" fg:x="1310" fg:w="1"/><text x="45.5161%" y="143.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="45.3006%" y="117" width="0.0346%" height="15" fill="rgb(254,179,45)" fg:x="1311" fg:w="1"/><text x="45.5506%" y="127.50"></text></g><g><title>_init (1 samples, 0.03%)</title><rect x="45.3352%" y="117" width="0.0346%" height="15" fill="rgb(226,14,10)" fg:x="1312" fg:w="1"/><text x="45.5852%" y="127.50"></text></g><g><title>[libc.so.6] (4 samples, 0.14%)</title><rect x="45.3697%" y="101" width="0.1382%" height="15" fill="rgb(244,27,41)" fg:x="1313" fg:w="4"/><text x="45.6197%" y="111.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::into_inner (7 samples, 0.24%)</title><rect x="45.3697%" y="117" width="0.2419%" height="15" fill="rgb(235,35,32)" fg:x="1313" fg:w="7"/><text x="45.6197%" y="127.50"></text></g><g><title>memcpy (3 samples, 0.10%)</title><rect x="45.5079%" y="101" width="0.1037%" height="15" fill="rgb(218,68,31)" fg:x="1317" fg:w="3"/><text x="45.7579%" y="111.50"></text></g><g><title>generic_array::ArrayBuilder&lt;T,N&gt;::into_inner (16 samples, 0.55%)</title><rect x="45.0933%" y="165" width="0.5529%" height="15" fill="rgb(207,120,37)" fg:x="1305" fg:w="16"/><text x="45.3433%" y="175.50"></text></g><g><title>core::ptr::read (11 samples, 0.38%)</title><rect x="45.2661%" y="149" width="0.3801%" height="15" fill="rgb(227,98,0)" fg:x="1310" fg:w="11"/><text x="45.5161%" y="159.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (10 samples, 0.35%)</title><rect x="45.3006%" y="133" width="0.3455%" height="15" fill="rgb(207,7,3)" fg:x="1311" fg:w="10"/><text x="45.5506%" y="143.50"></text></g><g><title>memcpy (1 samples, 0.03%)</title><rect x="45.6116%" y="117" width="0.0346%" height="15" fill="rgb(206,98,19)" fg:x="1320" fg:w="1"/><text x="45.8616%" y="127.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.03%)</title><rect x="45.7153%" y="149" width="0.0346%" height="15" fill="rgb(217,5,26)" fg:x="1323" fg:w="1"/><text x="45.9653%" y="159.50"></text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default (406 samples, 14.03%)</title><rect x="31.7899%" y="197" width="14.0290%" height="15" fill="rgb(235,190,38)" fg:x="920" fg:w="406"/><text x="32.0399%" y="207.50">generic_array::impls:..</text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (406 samples, 14.03%)</title><rect x="31.7899%" y="181" width="14.0290%" height="15" fill="rgb(247,86,24)" fg:x="920" fg:w="406"/><text x="32.0399%" y="191.50">&lt;generic_array::Gener..</text></g><g><title>generic_array::ArrayBuilder&lt;T,N&gt;::iter_position (5 samples, 0.17%)</title><rect x="45.6462%" y="165" width="0.1728%" height="15" fill="rgb(205,101,16)" fg:x="1321" fg:w="5"/><text x="45.8962%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter_mut (2 samples, 0.07%)</title><rect x="45.7498%" y="149" width="0.0691%" height="15" fill="rgb(246,168,33)" fg:x="1324" fg:w="2"/><text x="45.9998%" y="159.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::new (2 samples, 0.07%)</title><rect x="45.7498%" y="133" width="0.0691%" height="15" fill="rgb(231,114,1)" fg:x="1324" fg:w="2"/><text x="45.9998%" y="143.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::as_mut_ptr (1 samples, 0.03%)</title><rect x="45.7844%" y="117" width="0.0346%" height="15" fill="rgb(207,184,53)" fg:x="1325" fg:w="1"/><text x="46.0344%" y="127.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::cast (1 samples, 0.03%)</title><rect x="54.9067%" y="133" width="0.0346%" height="15" fill="rgb(224,95,51)" fg:x="1589" fg:w="1"/><text x="55.1567%" y="143.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as core::ops::deref::Deref&gt;::deref (81 samples, 2.80%)</title><rect x="53.5936%" y="181" width="2.7989%" height="15" fill="rgb(212,188,45)" fg:x="1551" fg:w="81"/><text x="53.8436%" y="191.50">&lt;g..</text></g><g><title>core::slice::raw::from_raw_parts (69 samples, 2.38%)</title><rect x="54.0083%" y="165" width="2.3842%" height="15" fill="rgb(223,154,38)" fg:x="1563" fg:w="69"/><text x="54.2583%" y="175.50">co..</text></g><g><title>core::ptr::slice_from_raw_parts (54 samples, 1.87%)</title><rect x="54.5266%" y="149" width="1.8659%" height="15" fill="rgb(251,22,52)" fg:x="1578" fg:w="54"/><text x="54.7766%" y="159.50">c..</text></g><g><title>core::ptr::metadata::from_raw_parts (42 samples, 1.45%)</title><rect x="54.9413%" y="133" width="1.4513%" height="15" fill="rgb(229,209,22)" fg:x="1590" fg:w="42"/><text x="55.1913%" y="143.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as core::ops::deref::DerefMut&gt;::deref_mut (47 samples, 1.62%)</title><rect x="56.3925%" y="181" width="1.6240%" height="15" fill="rgb(234,138,34)" fg:x="1632" fg:w="47"/><text x="56.6425%" y="191.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (36 samples, 1.24%)</title><rect x="56.7726%" y="165" width="1.2440%" height="15" fill="rgb(212,95,11)" fg:x="1643" fg:w="36"/><text x="57.0226%" y="175.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (20 samples, 0.69%)</title><rect x="57.3255%" y="149" width="0.6911%" height="15" fill="rgb(240,179,47)" fg:x="1659" fg:w="20"/><text x="57.5755%" y="159.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (15 samples, 0.52%)</title><rect x="57.4983%" y="133" width="0.5183%" height="15" fill="rgb(240,163,11)" fg:x="1664" fg:w="15"/><text x="57.7483%" y="143.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (19 samples, 0.66%)</title><rect x="59.6752%" y="149" width="0.6565%" height="15" fill="rgb(236,37,12)" fg:x="1727" fg:w="19"/><text x="59.9252%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (1 samples, 0.03%)</title><rect x="60.2972%" y="133" width="0.0346%" height="15" fill="rgb(232,164,16)" fg:x="1745" fg:w="1"/><text x="60.5472%" y="143.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (12 samples, 0.41%)</title><rect x="60.3317%" y="149" width="0.4147%" height="15" fill="rgb(244,205,15)" fg:x="1746" fg:w="12"/><text x="60.5817%" y="159.50"></text></g><g><title>core::ptr::read (34 samples, 1.17%)</title><rect x="61.1956%" y="133" width="1.1748%" height="15" fill="rgb(223,117,47)" fg:x="1771" fg:w="34"/><text x="61.4456%" y="143.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (4 samples, 0.14%)</title><rect x="62.2322%" y="117" width="0.1382%" height="15" fill="rgb(244,107,35)" fg:x="1801" fg:w="4"/><text x="62.4822%" y="127.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::into_inner (4 samples, 0.14%)</title><rect x="62.2322%" y="101" width="0.1382%" height="15" fill="rgb(205,140,8)" fg:x="1801" fg:w="4"/><text x="62.4822%" y="111.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (131 samples, 4.53%)</title><rect x="58.0166%" y="181" width="4.5266%" height="15" fill="rgb(228,84,46)" fg:x="1679" fg:w="131"/><text x="58.2666%" y="191.50">core:..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (126 samples, 4.35%)</title><rect x="58.1894%" y="165" width="4.3538%" height="15" fill="rgb(254,188,9)" fg:x="1684" fg:w="126"/><text x="58.4394%" y="175.50">&lt;core..</text></g><g><title>core::mem::replace (52 samples, 1.80%)</title><rect x="60.7464%" y="149" width="1.7968%" height="15" fill="rgb(206,112,54)" fg:x="1758" fg:w="52"/><text x="60.9964%" y="159.50">c..</text></g><g><title>core::ptr::write (5 samples, 0.17%)</title><rect x="62.3704%" y="133" width="0.1728%" height="15" fill="rgb(216,84,49)" fg:x="1805" fg:w="5"/><text x="62.6204%" y="143.50"></text></g><g><title>[libc.so.6] (2 samples, 0.07%)</title><rect x="62.5432%" y="149" width="0.0691%" height="15" fill="rgb(214,194,35)" fg:x="1810" fg:w="2"/><text x="62.7932%" y="159.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::into_inner (3 samples, 0.10%)</title><rect x="62.6123%" y="149" width="0.1037%" height="15" fill="rgb(249,28,3)" fg:x="1812" fg:w="3"/><text x="62.8623%" y="159.50"></text></g><g><title>[libc.so.6] (2 samples, 0.07%)</title><rect x="62.6469%" y="133" width="0.0691%" height="15" fill="rgb(222,56,52)" fg:x="1813" fg:w="2"/><text x="62.8969%" y="143.50"></text></g><g><title>core::ptr::read (6 samples, 0.21%)</title><rect x="62.5432%" y="181" width="0.2073%" height="15" fill="rgb(245,217,50)" fg:x="1810" fg:w="6"/><text x="62.7932%" y="191.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (6 samples, 0.21%)</title><rect x="62.5432%" y="165" width="0.2073%" height="15" fill="rgb(213,201,24)" fg:x="1810" fg:w="6"/><text x="62.7932%" y="175.50"></text></g><g><title>memcpy (1 samples, 0.03%)</title><rect x="62.7160%" y="149" width="0.0346%" height="15" fill="rgb(248,116,28)" fg:x="1815" fg:w="1"/><text x="62.9660%" y="159.50"></text></g><g><title>core::ptr::write (20 samples, 0.69%)</title><rect x="71.2509%" y="53" width="0.6911%" height="15" fill="rgb(219,72,43)" fg:x="2062" fg:w="20"/><text x="71.5009%" y="63.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (184 samples, 6.36%)</title><rect x="66.1368%" y="101" width="6.3580%" height="15" fill="rgb(209,138,14)" fg:x="1914" fg:w="184"/><text x="66.3868%" y="111.50">&lt;core::i..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (116 samples, 4.01%)</title><rect x="68.4865%" y="85" width="4.0083%" height="15" fill="rgb(222,18,33)" fg:x="1982" fg:w="116"/><text x="68.7365%" y="95.50">core..</text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate::{{closure}} (82 samples, 2.83%)</title><rect x="69.6614%" y="69" width="2.8334%" height="15" fill="rgb(213,199,7)" fg:x="2016" fg:w="82"/><text x="69.9114%" y="79.50">&lt;g..</text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default::{{closure}} (16 samples, 0.55%)</title><rect x="71.9419%" y="53" width="0.5529%" height="15" fill="rgb(250,110,10)" fg:x="2082" fg:w="16"/><text x="72.1919%" y="63.50"></text></g><g><title>&lt;u8 as core::default::Default&gt;::default (3 samples, 0.10%)</title><rect x="72.3912%" y="37" width="0.1037%" height="15" fill="rgb(248,123,6)" fg:x="2095" fg:w="3"/><text x="72.6412%" y="47.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (27 samples, 0.93%)</title><rect x="73.5314%" y="85" width="0.9330%" height="15" fill="rgb(206,91,31)" fg:x="2128" fg:w="27"/><text x="73.7814%" y="95.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null::runtime_impl (14 samples, 0.48%)</title><rect x="73.9806%" y="69" width="0.4838%" height="15" fill="rgb(211,154,13)" fg:x="2141" fg:w="14"/><text x="74.2306%" y="79.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::addr (10 samples, 0.35%)</title><rect x="74.1189%" y="53" width="0.3455%" height="15" fill="rgb(225,148,7)" fg:x="2145" fg:w="10"/><text x="74.3689%" y="63.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (22 samples, 0.76%)</title><rect x="75.6047%" y="69" width="0.7602%" height="15" fill="rgb(220,160,43)" fg:x="2188" fg:w="22"/><text x="75.8547%" y="79.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (21 samples, 0.73%)</title><rect x="75.6393%" y="53" width="0.7256%" height="15" fill="rgb(213,52,39)" fg:x="2189" fg:w="21"/><text x="75.8893%" y="63.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (397 samples, 13.72%)</title><rect x="62.8542%" y="149" width="13.7180%" height="15" fill="rgb(243,137,7)" fg:x="1819" fg:w="397"/><text x="63.1042%" y="159.50">core::iter::traits::i..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (397 samples, 13.72%)</title><rect x="62.8542%" y="133" width="13.7180%" height="15" fill="rgb(230,79,13)" fg:x="1819" fg:w="397"/><text x="63.1042%" y="143.50">&lt;core::iter::adapters..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (396 samples, 13.68%)</title><rect x="62.8887%" y="117" width="13.6835%" height="15" fill="rgb(247,105,23)" fg:x="1820" fg:w="396"/><text x="63.1387%" y="127.50">core::iter::traits::i..</text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (118 samples, 4.08%)</title><rect x="72.4948%" y="101" width="4.0774%" height="15" fill="rgb(223,179,41)" fg:x="2098" fg:w="118"/><text x="72.7448%" y="111.50">&lt;cor..</text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (61 samples, 2.11%)</title><rect x="74.4644%" y="85" width="2.1078%" height="15" fill="rgb(218,9,34)" fg:x="2155" fg:w="61"/><text x="74.7144%" y="95.50">c..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (6 samples, 0.21%)</title><rect x="76.3649%" y="69" width="0.2073%" height="15" fill="rgb(222,106,8)" fg:x="2210" fg:w="6"/><text x="76.6149%" y="79.50"></text></g><g><title>[libc.so.6] (2 samples, 0.07%)</title><rect x="76.6413%" y="117" width="0.0691%" height="15" fill="rgb(211,220,0)" fg:x="2218" fg:w="2"/><text x="76.8913%" y="127.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (3 samples, 0.10%)</title><rect x="76.6413%" y="133" width="0.1037%" height="15" fill="rgb(229,52,16)" fg:x="2218" fg:w="3"/><text x="76.8913%" y="143.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::into_inner (1 samples, 0.03%)</title><rect x="76.7104%" y="117" width="0.0346%" height="15" fill="rgb(212,155,18)" fg:x="2220" fg:w="1"/><text x="76.9604%" y="127.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="76.7450%" y="117" width="0.0346%" height="15" fill="rgb(242,21,14)" fg:x="2221" fg:w="1"/><text x="76.9950%" y="127.50"></text></g><g><title>[libc.so.6] (2 samples, 0.07%)</title><rect x="76.7795%" y="101" width="0.0691%" height="15" fill="rgb(222,19,48)" fg:x="2222" fg:w="2"/><text x="77.0295%" y="111.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::into_inner (4 samples, 0.14%)</title><rect x="76.8487%" y="101" width="0.1382%" height="15" fill="rgb(232,45,27)" fg:x="2224" fg:w="4"/><text x="77.0987%" y="111.50"></text></g><g><title>[libc.so.6] (2 samples, 0.07%)</title><rect x="76.9178%" y="85" width="0.0691%" height="15" fill="rgb(249,103,42)" fg:x="2226" fg:w="2"/><text x="77.1678%" y="95.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (8 samples, 0.28%)</title><rect x="76.7795%" y="117" width="0.2764%" height="15" fill="rgb(246,81,33)" fg:x="2222" fg:w="8"/><text x="77.0295%" y="127.50"></text></g><g><title>memcpy (2 samples, 0.07%)</title><rect x="76.9869%" y="101" width="0.0691%" height="15" fill="rgb(252,33,42)" fg:x="2228" fg:w="2"/><text x="77.2369%" y="111.50"></text></g><g><title>generic_array::ArrayBuilder&lt;T,N&gt;::into_inner (16 samples, 0.55%)</title><rect x="76.5722%" y="149" width="0.5529%" height="15" fill="rgb(209,212,41)" fg:x="2216" fg:w="16"/><text x="76.8222%" y="159.50"></text></g><g><title>core::ptr::read (11 samples, 0.38%)</title><rect x="76.7450%" y="133" width="0.3801%" height="15" fill="rgb(207,154,6)" fg:x="2221" fg:w="11"/><text x="76.9950%" y="143.50"></text></g><g><title>memcpy (2 samples, 0.07%)</title><rect x="77.0560%" y="117" width="0.0691%" height="15" fill="rgb(223,64,47)" fg:x="2230" fg:w="2"/><text x="77.3060%" y="127.50"></text></g><g><title>generic_array::ArrayBuilder&lt;T,N&gt;::iter_position (6 samples, 0.21%)</title><rect x="77.1251%" y="149" width="0.2073%" height="15" fill="rgb(211,161,38)" fg:x="2232" fg:w="6"/><text x="77.3751%" y="159.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter_mut (5 samples, 0.17%)</title><rect x="77.1596%" y="133" width="0.1728%" height="15" fill="rgb(219,138,40)" fg:x="2233" fg:w="5"/><text x="77.4096%" y="143.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::new (5 samples, 0.17%)</title><rect x="77.1596%" y="117" width="0.1728%" height="15" fill="rgb(241,228,46)" fg:x="2233" fg:w="5"/><text x="77.4096%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (2 samples, 0.07%)</title><rect x="77.2633%" y="101" width="0.0691%" height="15" fill="rgb(223,209,38)" fg:x="2236" fg:w="2"/><text x="77.5133%" y="111.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null::runtime_impl (1 samples, 0.03%)</title><rect x="77.2979%" y="85" width="0.0346%" height="15" fill="rgb(236,164,45)" fg:x="2237" fg:w="1"/><text x="77.5479%" y="95.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::addr (1 samples, 0.03%)</title><rect x="77.2979%" y="69" width="0.0346%" height="15" fill="rgb(231,15,5)" fg:x="2237" fg:w="1"/><text x="77.5479%" y="79.50"></text></g><g><title>cipher::stream_core::StreamCipherCore::apply_keystream_blocks_inout (1,966 samples, 67.93%)</title><rect x="9.4333%" y="277" width="67.9337%" height="15" fill="rgb(252,35,15)" fg:x="273" fg:w="1966"/><text x="9.6833%" y="287.50">cipher::stream_core::StreamCipherCore::apply_keystream_blocks_inout</text></g><g><title>&lt;chacha20::xchacha::XChaChaCore&lt;R&gt; as cipher::stream_core::StreamCipherCore&gt;::process_with_backend (1,966 samples, 67.93%)</title><rect x="9.4333%" y="261" width="67.9337%" height="15" fill="rgb(248,181,18)" fg:x="273" fg:w="1966"/><text x="9.6833%" y="271.50">&lt;chacha20::xchacha::XChaChaCore&lt;R&gt; as cipher::stream_core::StreamCipherCore&gt;::process_with_backend</text></g><g><title>&lt;chacha20::ChaChaCore&lt;R&gt; as cipher::stream_core::StreamCipherCore&gt;::process_with_backend (1,966 samples, 67.93%)</title><rect x="9.4333%" y="245" width="67.9337%" height="15" fill="rgb(233,39,42)" fg:x="273" fg:w="1966"/><text x="9.6833%" y="255.50">&lt;chacha20::ChaChaCore&lt;R&gt; as cipher::stream_core::StreamCipherCore&gt;::process_with_backend</text></g><g><title>chacha20::backends::sse2::inner (1,966 samples, 67.93%)</title><rect x="9.4333%" y="229" width="67.9337%" height="15" fill="rgb(238,110,33)" fg:x="273" fg:w="1966"/><text x="9.6833%" y="239.50">chacha20::backends::sse2::inner</text></g><g><title>&lt;cipher::stream_core::ApplyBlocksCtx&lt;BS&gt; as cipher::stream_core::StreamClosure&gt;::call (1,966 samples, 67.93%)</title><rect x="9.4333%" y="213" width="67.9337%" height="15" fill="rgb(233,195,10)" fg:x="273" fg:w="1966"/><text x="9.6833%" y="223.50">&lt;cipher::stream_core::ApplyBlocksCtx&lt;BS&gt; as cipher::stream_core::StreamClosure&gt;::call</text></g><g><title>inout::inout::InOut&lt;generic_array::GenericArray&lt;u8,N&gt;&gt;::xor_in2out (913 samples, 31.55%)</title><rect x="45.8189%" y="197" width="31.5480%" height="15" fill="rgb(254,105,3)" fg:x="1326" fg:w="913"/><text x="46.0689%" y="207.50">inout::inout::InOut&lt;generic_array::GenericArray&lt;u8,..</text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default (423 samples, 14.62%)</title><rect x="62.7505%" y="181" width="14.6164%" height="15" fill="rgb(221,225,9)" fg:x="1816" fg:w="423"/><text x="63.0005%" y="191.50">generic_array::impls::..</text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (423 samples, 14.62%)</title><rect x="62.7505%" y="165" width="14.6164%" height="15" fill="rgb(224,227,45)" fg:x="1816" fg:w="423"/><text x="63.0005%" y="175.50">&lt;generic_array::Generi..</text></g><g><title>generic_array::ArrayBuilder&lt;T,N&gt;::new (1 samples, 0.03%)</title><rect x="77.3324%" y="149" width="0.0346%" height="15" fill="rgb(229,198,43)" fg:x="2238" fg:w="1"/><text x="77.5824%" y="159.50"></text></g><g><title>chacha20::avx2_cpuid::InitToken::get (1 samples, 0.03%)</title><rect x="77.3670%" y="229" width="0.0346%" height="15" fill="rgb(206,209,35)" fg:x="2239" fg:w="1"/><text x="77.6170%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicU8::load (1 samples, 0.03%)</title><rect x="77.3670%" y="213" width="0.0346%" height="15" fill="rgb(245,195,53)" fg:x="2239" fg:w="1"/><text x="77.6170%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_add_epi32 (9 samples, 0.31%)</title><rect x="77.7471%" y="133" width="0.3110%" height="15" fill="rgb(240,92,26)" fg:x="2250" fg:w="9"/><text x="77.9971%" y="143.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i32x4 (1 samples, 0.03%)</title><rect x="78.0235%" y="117" width="0.0346%" height="15" fill="rgb(207,40,23)" fg:x="2258" fg:w="1"/><text x="78.2735%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_slli_epi32 (5 samples, 0.17%)</title><rect x="78.0581%" y="133" width="0.1728%" height="15" fill="rgb(223,111,35)" fg:x="2259" fg:w="5"/><text x="78.3081%" y="143.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i32x4 (3 samples, 0.10%)</title><rect x="78.1272%" y="117" width="0.1037%" height="15" fill="rgb(229,147,28)" fg:x="2261" fg:w="3"/><text x="78.3772%" y="127.50"></text></g><g><title>chacha20::backends::sse2::add_xor_rot (27 samples, 0.93%)</title><rect x="77.4706%" y="149" width="0.9330%" height="15" fill="rgb(211,29,28)" fg:x="2242" fg:w="27"/><text x="77.7206%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_xor_si128 (5 samples, 0.17%)</title><rect x="78.2308%" y="133" width="0.1728%" height="15" fill="rgb(228,72,33)" fg:x="2264" fg:w="5"/><text x="78.4808%" y="143.50"></text></g><g><title>cipher::stream_core::StreamCipherCore::write_keystream_block (31 samples, 1.07%)</title><rect x="77.3670%" y="277" width="1.0712%" height="15" fill="rgb(205,214,31)" fg:x="2239" fg:w="31"/><text x="77.6170%" y="287.50"></text></g><g><title>&lt;chacha20::xchacha::XChaChaCore&lt;R&gt; as cipher::stream_core::StreamCipherCore&gt;::process_with_backend (31 samples, 1.07%)</title><rect x="77.3670%" y="261" width="1.0712%" height="15" fill="rgb(224,111,15)" fg:x="2239" fg:w="31"/><text x="77.6170%" y="271.50"></text></g><g><title>&lt;chacha20::ChaChaCore&lt;R&gt; as cipher::stream_core::StreamCipherCore&gt;::process_with_backend (31 samples, 1.07%)</title><rect x="77.3670%" y="245" width="1.0712%" height="15" fill="rgb(253,21,26)" fg:x="2239" fg:w="31"/><text x="77.6170%" y="255.50"></text></g><g><title>chacha20::backends::sse2::inner (30 samples, 1.04%)</title><rect x="77.4015%" y="229" width="1.0366%" height="15" fill="rgb(245,139,43)" fg:x="2240" fg:w="30"/><text x="77.6515%" y="239.50"></text></g><g><title>&lt;cipher::stream_core::WriteBlockCtx&lt;BS&gt; as cipher::stream_core::StreamClosure&gt;::call (29 samples, 1.00%)</title><rect x="77.4361%" y="213" width="1.0021%" height="15" fill="rgb(252,170,7)" fg:x="2241" fg:w="29"/><text x="77.6861%" y="223.50"></text></g><g><title>&lt;chacha20::backends::sse2::Backend&lt;R&gt; as cipher::stream_core::StreamBackend&gt;::gen_ks_block (29 samples, 1.00%)</title><rect x="77.4361%" y="197" width="1.0021%" height="15" fill="rgb(231,118,14)" fg:x="2241" fg:w="29"/><text x="77.6861%" y="207.50"></text></g><g><title>chacha20::backends::sse2::rounds (29 samples, 1.00%)</title><rect x="77.4361%" y="181" width="1.0021%" height="15" fill="rgb(238,83,0)" fg:x="2241" fg:w="29"/><text x="77.6861%" y="191.50"></text></g><g><title>chacha20::backends::sse2::double_quarter_round (28 samples, 0.97%)</title><rect x="77.4706%" y="165" width="0.9675%" height="15" fill="rgb(221,39,39)" fg:x="2242" fg:w="28"/><text x="77.7206%" y="175.50"></text></g><g><title>chacha20::backends::sse2::cols_to_rows (1 samples, 0.03%)</title><rect x="78.4036%" y="149" width="0.0346%" height="15" fill="rgb(222,119,46)" fg:x="2269" fg:w="1"/><text x="78.6536%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_shuffle_epi32 (1 samples, 0.03%)</title><rect x="78.4036%" y="133" width="0.0346%" height="15" fill="rgb(222,165,49)" fg:x="2269" fg:w="1"/><text x="78.6536%" y="143.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i32x4 (1 samples, 0.03%)</title><rect x="78.4036%" y="117" width="0.0346%" height="15" fill="rgb(219,113,52)" fg:x="2269" fg:w="1"/><text x="78.6536%" y="127.50"></text></g><g><title>cipher::stream_wrapper::StreamCipherCoreWrapper&lt;T&gt;::check_remaining (1 samples, 0.03%)</title><rect x="78.4381%" y="277" width="0.0346%" height="15" fill="rgb(214,7,15)" fg:x="2270" fg:w="1"/><text x="78.6881%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.10%)</title><rect x="78.4727%" y="277" width="0.1037%" height="15" fill="rgb(235,32,4)" fg:x="2271" fg:w="3"/><text x="78.7227%" y="287.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.07%)</title><rect x="78.5073%" y="261" width="0.0691%" height="15" fill="rgb(238,90,54)" fg:x="2272" fg:w="2"/><text x="78.7573%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="78.5418%" y="245" width="0.0346%" height="15" fill="rgb(213,208,19)" fg:x="2273" fg:w="1"/><text x="78.7918%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.03%)</title><rect x="78.5418%" y="229" width="0.0346%" height="15" fill="rgb(233,156,4)" fg:x="2273" fg:w="1"/><text x="78.7918%" y="239.50"></text></g><g><title>core::ptr::slice_from_raw_parts (1 samples, 0.03%)</title><rect x="78.5418%" y="213" width="0.0346%" height="15" fill="rgb(207,194,5)" fg:x="2273" fg:w="1"/><text x="78.7918%" y="223.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (1 samples, 0.03%)</title><rect x="78.5418%" y="197" width="0.0346%" height="15" fill="rgb(206,111,30)" fg:x="2273" fg:w="1"/><text x="78.7918%" y="207.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1 samples, 0.03%)</title><rect x="78.8528%" y="229" width="0.0346%" height="15" fill="rgb(243,70,54)" fg:x="2282" fg:w="1"/><text x="79.1028%" y="239.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.07%)</title><rect x="78.8528%" y="261" width="0.0691%" height="15" fill="rgb(242,28,8)" fg:x="2282" fg:w="2"/><text x="79.1028%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.07%)</title><rect x="78.8528%" y="245" width="0.0691%" height="15" fill="rgb(219,106,18)" fg:x="2282" fg:w="2"/><text x="79.1028%" y="255.50"></text></g><g><title>core::mem::replace (1 samples, 0.03%)</title><rect x="78.8874%" y="229" width="0.0346%" height="15" fill="rgb(244,222,10)" fg:x="2283" fg:w="1"/><text x="79.1374%" y="239.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="78.8874%" y="213" width="0.0346%" height="15" fill="rgb(236,179,52)" fg:x="2283" fg:w="1"/><text x="79.1374%" y="223.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (1 samples, 0.03%)</title><rect x="78.8874%" y="197" width="0.0346%" height="15" fill="rgb(213,23,39)" fg:x="2283" fg:w="1"/><text x="79.1374%" y="207.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::into_inner (1 samples, 0.03%)</title><rect x="78.8874%" y="181" width="0.0346%" height="15" fill="rgb(238,48,10)" fg:x="2283" fg:w="1"/><text x="79.1374%" y="191.50"></text></g><g><title>cipher::stream::StreamCipher::apply_keystream (2,012 samples, 69.52%)</title><rect x="9.4333%" y="325" width="69.5232%" height="15" fill="rgb(251,196,23)" fg:x="273" fg:w="2012"/><text x="9.6833%" y="335.50">cipher::stream::StreamCipher::apply_keystream</text></g><g><title>cipher::stream::StreamCipher::try_apply_keystream (2,012 samples, 69.52%)</title><rect x="9.4333%" y="309" width="69.5232%" height="15" fill="rgb(250,152,24)" fg:x="273" fg:w="2012"/><text x="9.6833%" y="319.50">cipher::stream::StreamCipher::try_apply_keystream</text></g><g><title>&lt;cipher::stream_wrapper::StreamCipherCoreWrapper&lt;T&gt; as cipher::stream::StreamCipher&gt;::try_apply_keystream_inout (2,012 samples, 69.52%)</title><rect x="9.4333%" y="293" width="69.5232%" height="15" fill="rgb(209,150,17)" fg:x="273" fg:w="2012"/><text x="9.6833%" y="303.50">&lt;cipher::stream_wrapper::StreamCipherCoreWrapper&lt;T&gt; as cipher::stream::StreamCipher&gt;::try_apply_keystream_inout</text></g><g><title>inout::inout_buf::InOutBuf&lt;u8&gt;::xor_in2out (11 samples, 0.38%)</title><rect x="78.5764%" y="277" width="0.3801%" height="15" fill="rgb(234,202,34)" fg:x="2274" fg:w="11"/><text x="78.8264%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="78.9219%" y="261" width="0.0346%" height="15" fill="rgb(253,148,53)" fg:x="2284" fg:w="1"/><text x="79.1719%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="78.9219%" y="245" width="0.0346%" height="15" fill="rgb(218,129,16)" fg:x="2284" fg:w="1"/><text x="79.1719%" y="255.50"></text></g><g><title>&lt;Z as zeroize::Zeroize&gt;::zeroize (1 samples, 0.03%)</title><rect x="78.9565%" y="293" width="0.0346%" height="15" fill="rgb(216,85,19)" fg:x="2285" fg:w="1"/><text x="79.2065%" y="303.50"></text></g><g><title>zeroize::atomic_fence (1 samples, 0.03%)</title><rect x="78.9565%" y="277" width="0.0346%" height="15" fill="rgb(235,228,7)" fg:x="2285" fg:w="1"/><text x="79.2065%" y="287.50"></text></g><g><title>core::sync::atomic::compiler_fence (1 samples, 0.03%)</title><rect x="78.9565%" y="261" width="0.0346%" height="15" fill="rgb(245,175,0)" fg:x="2285" fg:w="1"/><text x="79.2065%" y="271.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1 samples, 0.03%)</title><rect x="79.1638%" y="229" width="0.0346%" height="15" fill="rgb(208,168,36)" fg:x="2291" fg:w="1"/><text x="79.4138%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (1 samples, 0.03%)</title><rect x="79.1638%" y="213" width="0.0346%" height="15" fill="rgb(246,171,24)" fg:x="2291" fg:w="1"/><text x="79.4138%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.03%)</title><rect x="79.1983%" y="229" width="0.0346%" height="15" fill="rgb(215,142,24)" fg:x="2292" fg:w="1"/><text x="79.4483%" y="239.50"></text></g><g><title>core::ptr::read (2 samples, 0.07%)</title><rect x="79.3020%" y="213" width="0.0691%" height="15" fill="rgb(250,187,7)" fg:x="2295" fg:w="2"/><text x="79.5520%" y="223.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (11 samples, 0.38%)</title><rect x="79.0256%" y="261" width="0.3801%" height="15" fill="rgb(228,66,33)" fg:x="2287" fg:w="11"/><text x="79.2756%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (10 samples, 0.35%)</title><rect x="79.0601%" y="245" width="0.3455%" height="15" fill="rgb(234,215,21)" fg:x="2288" fg:w="10"/><text x="79.3101%" y="255.50"></text></g><g><title>core::mem::replace (5 samples, 0.17%)</title><rect x="79.2329%" y="229" width="0.1728%" height="15" fill="rgb(222,191,20)" fg:x="2293" fg:w="5"/><text x="79.4829%" y="239.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="79.3711%" y="213" width="0.0346%" height="15" fill="rgb(245,79,54)" fg:x="2297" fg:w="1"/><text x="79.6211%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="79.4057%" y="261" width="0.0346%" height="15" fill="rgb(240,10,37)" fg:x="2298" fg:w="1"/><text x="79.6557%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="79.4057%" y="245" width="0.0346%" height="15" fill="rgb(214,192,32)" fg:x="2298" fg:w="1"/><text x="79.6557%" y="255.50"></text></g><g><title>&lt;cipher::stream_wrapper::StreamCipherCoreWrapper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.55%)</title><rect x="78.9565%" y="309" width="0.5529%" height="15" fill="rgb(209,36,54)" fg:x="2285" fg:w="16"/><text x="79.2065%" y="319.50"></text></g><g><title>&lt;[Z] as zeroize::Zeroize&gt;::zeroize (15 samples, 0.52%)</title><rect x="78.9910%" y="293" width="0.5183%" height="15" fill="rgb(220,10,11)" fg:x="2286" fg:w="15"/><text x="79.2410%" y="303.50"></text></g><g><title>zeroize::volatile_set (15 samples, 0.52%)</title><rect x="78.9910%" y="277" width="0.5183%" height="15" fill="rgb(221,106,17)" fg:x="2286" fg:w="15"/><text x="79.2410%" y="287.50"></text></g><g><title>core::ptr::write_volatile (2 samples, 0.07%)</title><rect x="79.4402%" y="261" width="0.0691%" height="15" fill="rgb(251,142,44)" fg:x="2299" fg:w="2"/><text x="79.6902%" y="271.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.17%)</title><rect x="79.5093%" y="229" width="0.1728%" height="15" fill="rgb(238,13,15)" fg:x="2301" fg:w="5"/><text x="79.7593%" y="239.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.17%)</title><rect x="79.5093%" y="213" width="0.1728%" height="15" fill="rgb(208,107,27)" fg:x="2301" fg:w="5"/><text x="79.7593%" y="223.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (4 samples, 0.14%)</title><rect x="79.5439%" y="197" width="0.1382%" height="15" fill="rgb(205,136,37)" fg:x="2302" fg:w="4"/><text x="79.7939%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.07%)</title><rect x="79.6130%" y="181" width="0.0691%" height="15" fill="rgb(250,205,27)" fg:x="2304" fg:w="2"/><text x="79.8630%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.07%)</title><rect x="79.6130%" y="165" width="0.0691%" height="15" fill="rgb(210,80,43)" fg:x="2304" fg:w="2"/><text x="79.8630%" y="175.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.03%)</title><rect x="79.6821%" y="229" width="0.0346%" height="15" fill="rgb(247,160,36)" fg:x="2306" fg:w="1"/><text x="79.9321%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;cipher::stream_wrapper::StreamCipherCoreWrapper&lt;chacha20::xchacha::XChaChaCore&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;&gt;&gt;&gt; (23 samples, 0.79%)</title><rect x="78.9565%" y="325" width="0.7947%" height="15" fill="rgb(234,13,49)" fg:x="2285" fg:w="23"/><text x="79.2065%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;chacha20::xchacha::XChaChaCore&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;&gt;&gt; (7 samples, 0.24%)</title><rect x="79.5093%" y="309" width="0.2419%" height="15" fill="rgb(234,122,0)" fg:x="2301" fg:w="7"/><text x="79.7593%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;chacha20::ChaChaCore&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;&gt;&gt; (7 samples, 0.24%)</title><rect x="79.5093%" y="293" width="0.2419%" height="15" fill="rgb(207,146,38)" fg:x="2301" fg:w="7"/><text x="79.7593%" y="303.50"></text></g><g><title>&lt;chacha20::ChaChaCore&lt;R&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.24%)</title><rect x="79.5093%" y="277" width="0.2419%" height="15" fill="rgb(207,177,25)" fg:x="2301" fg:w="7"/><text x="79.7593%" y="287.50"></text></g><g><title>&lt;[Z: N] as zeroize::Zeroize&gt;::zeroize (7 samples, 0.24%)</title><rect x="79.5093%" y="261" width="0.2419%" height="15" fill="rgb(211,178,42)" fg:x="2301" fg:w="7"/><text x="79.7593%" y="271.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;Z&gt; as zeroize::Zeroize&gt;::zeroize (7 samples, 0.24%)</title><rect x="79.5093%" y="245" width="0.2419%" height="15" fill="rgb(230,69,54)" fg:x="2301" fg:w="7"/><text x="79.7593%" y="255.50"></text></g><g><title>&lt;Z as zeroize::Zeroize&gt;::zeroize (1 samples, 0.03%)</title><rect x="79.7167%" y="229" width="0.0346%" height="15" fill="rgb(214,135,41)" fg:x="2307" fg:w="1"/><text x="79.9667%" y="239.50"></text></g><g><title>zeroize::volatile_write (1 samples, 0.03%)</title><rect x="79.7167%" y="213" width="0.0346%" height="15" fill="rgb(237,67,25)" fg:x="2307" fg:w="1"/><text x="79.9667%" y="223.50"></text></g><g><title>core::ptr::write_volatile (1 samples, 0.03%)</title><rect x="79.7167%" y="197" width="0.0346%" height="15" fill="rgb(222,189,50)" fg:x="2307" fg:w="1"/><text x="79.9667%" y="207.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (1 samples, 0.03%)</title><rect x="79.7512%" y="325" width="0.0346%" height="15" fill="rgb(245,148,34)" fg:x="2308" fg:w="1"/><text x="80.0012%" y="335.50"></text></g><g><title>core::slice::raw::from_ref (1 samples, 0.03%)</title><rect x="79.7858%" y="309" width="0.0346%" height="15" fill="rgb(222,29,6)" fg:x="2309" fg:w="1"/><text x="80.0358%" y="319.50"></text></g><g><title>core::array::from_ref (1 samples, 0.03%)</title><rect x="79.7858%" y="293" width="0.0346%" height="15" fill="rgb(221,189,43)" fg:x="2309" fg:w="1"/><text x="80.0358%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (1 samples, 0.03%)</title><rect x="79.9240%" y="229" width="0.0346%" height="15" fill="rgb(207,36,27)" fg:x="2313" fg:w="1"/><text x="80.1740%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (5 samples, 0.17%)</title><rect x="79.8549%" y="277" width="0.1728%" height="15" fill="rgb(217,90,24)" fg:x="2311" fg:w="5"/><text x="80.1049%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.17%)</title><rect x="79.8549%" y="261" width="0.1728%" height="15" fill="rgb(224,66,35)" fg:x="2311" fg:w="5"/><text x="80.1049%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (5 samples, 0.17%)</title><rect x="79.8549%" y="245" width="0.1728%" height="15" fill="rgb(221,13,50)" fg:x="2311" fg:w="5"/><text x="80.1049%" y="255.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="79.9585%" y="229" width="0.0691%" height="15" fill="rgb(236,68,49)" fg:x="2314" fg:w="2"/><text x="80.2085%" y="239.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (2 samples, 0.07%)</title><rect x="79.9585%" y="213" width="0.0691%" height="15" fill="rgb(229,146,28)" fg:x="2314" fg:w="2"/><text x="80.2085%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="79.9931%" y="197" width="0.0346%" height="15" fill="rgb(225,31,38)" fg:x="2315" fg:w="1"/><text x="80.2431%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="79.9931%" y="181" width="0.0346%" height="15" fill="rgb(250,208,3)" fg:x="2315" fg:w="1"/><text x="80.2431%" y="191.50"></text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default (7 samples, 0.24%)</title><rect x="79.8203%" y="309" width="0.2419%" height="15" fill="rgb(246,54,23)" fg:x="2310" fg:w="7"/><text x="80.0703%" y="319.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (7 samples, 0.24%)</title><rect x="79.8203%" y="293" width="0.2419%" height="15" fill="rgb(243,76,11)" fg:x="2310" fg:w="7"/><text x="80.0703%" y="303.50"></text></g><g><title>generic_array::ArrayBuilder&lt;T,N&gt;::into_inner (1 samples, 0.03%)</title><rect x="80.0276%" y="277" width="0.0346%" height="15" fill="rgb(245,21,50)" fg:x="2316" fg:w="1"/><text x="80.2776%" y="287.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="80.0276%" y="261" width="0.0346%" height="15" fill="rgb(228,9,43)" fg:x="2316" fg:w="1"/><text x="80.2776%" y="271.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (1 samples, 0.03%)</title><rect x="80.0276%" y="245" width="0.0346%" height="15" fill="rgb(208,100,47)" fg:x="2316" fg:w="1"/><text x="80.2776%" y="255.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::into_inner (1 samples, 0.03%)</title><rect x="80.0276%" y="229" width="0.0346%" height="15" fill="rgb(232,26,8)" fg:x="2316" fg:w="1"/><text x="80.2776%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.03%)</title><rect x="80.3732%" y="229" width="0.0346%" height="15" fill="rgb(216,166,38)" fg:x="2326" fg:w="1"/><text x="80.6232%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null::runtime_impl (1 samples, 0.03%)</title><rect x="80.3732%" y="213" width="0.0346%" height="15" fill="rgb(251,202,51)" fg:x="2326" fg:w="1"/><text x="80.6232%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::addr (1 samples, 0.03%)</title><rect x="80.3732%" y="197" width="0.0346%" height="15" fill="rgb(254,216,34)" fg:x="2326" fg:w="1"/><text x="80.6232%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.28%)</title><rect x="80.2004%" y="245" width="0.2764%" height="15" fill="rgb(251,32,27)" fg:x="2321" fg:w="8"/><text x="80.4504%" y="255.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (2 samples, 0.07%)</title><rect x="80.4077%" y="229" width="0.0691%" height="15" fill="rgb(208,127,28)" fg:x="2327" fg:w="2"/><text x="80.6577%" y="239.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for &amp;[T: N]&gt;::try_from (15 samples, 0.52%)</title><rect x="85.7982%" y="181" width="0.5183%" height="15" fill="rgb(224,137,22)" fg:x="2483" fg:w="15"/><text x="86.0482%" y="191.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (120 samples, 4.15%)</title><rect x="84.6925%" y="213" width="4.1465%" height="15" fill="rgb(254,70,32)" fg:x="2451" fg:w="120"/><text x="84.9425%" y="223.50">&lt;T as..</text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (106 samples, 3.66%)</title><rect x="85.1762%" y="197" width="3.6628%" height="15" fill="rgb(229,75,37)" fg:x="2465" fg:w="106"/><text x="85.4262%" y="207.50">core..</text></g><g><title>core::result::Result&lt;T,E&gt;::map (73 samples, 2.52%)</title><rect x="86.3165%" y="181" width="2.5225%" height="15" fill="rgb(252,64,23)" fg:x="2498" fg:w="73"/><text x="86.5665%" y="191.50">co..</text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (18 samples, 0.62%)</title><rect x="88.2170%" y="165" width="0.6220%" height="15" fill="rgb(232,162,48)" fg:x="2553" fg:w="18"/><text x="88.4670%" y="175.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as core::ops::deref::Deref&gt;::deref (7 samples, 0.24%)</title><rect x="88.8390%" y="213" width="0.2419%" height="15" fill="rgb(246,160,12)" fg:x="2571" fg:w="7"/><text x="89.0890%" y="223.50"></text></g><g><title>core::slice::raw::from_raw_parts (6 samples, 0.21%)</title><rect x="88.8735%" y="197" width="0.2073%" height="15" fill="rgb(247,166,0)" fg:x="2572" fg:w="6"/><text x="89.1235%" y="207.50"></text></g><g><title>core::ptr::slice_from_raw_parts (4 samples, 0.14%)</title><rect x="88.9426%" y="181" width="0.1382%" height="15" fill="rgb(249,219,21)" fg:x="2574" fg:w="4"/><text x="89.1926%" y="191.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (4 samples, 0.14%)</title><rect x="88.9426%" y="165" width="0.1382%" height="15" fill="rgb(205,209,3)" fg:x="2574" fg:w="4"/><text x="89.1926%" y="175.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;u32&gt; for u64&gt;::from (4 samples, 0.14%)</title><rect x="89.0809%" y="213" width="0.1382%" height="15" fill="rgb(243,44,1)" fg:x="2578" fg:w="4"/><text x="89.3309%" y="223.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_le_bytes (25 samples, 0.86%)</title><rect x="89.2191%" y="213" width="0.8639%" height="15" fill="rgb(206,159,16)" fg:x="2582" fg:w="25"/><text x="89.4691%" y="223.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_ne_bytes (15 samples, 0.52%)</title><rect x="89.5646%" y="197" width="0.5183%" height="15" fill="rgb(244,77,30)" fg:x="2592" fg:w="15"/><text x="89.8146%" y="207.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (47 samples, 1.62%)</title><rect x="90.0829%" y="213" width="1.6240%" height="15" fill="rgb(218,69,12)" fg:x="2607" fg:w="47"/><text x="90.3329%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (4 samples, 0.14%)</title><rect x="92.5017%" y="165" width="0.1382%" height="15" fill="rgb(212,87,7)" fg:x="2677" fg:w="4"/><text x="92.7517%" y="175.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (4 samples, 0.14%)</title><rect x="92.5017%" y="149" width="0.1382%" height="15" fill="rgb(245,114,25)" fg:x="2677" fg:w="4"/><text x="92.7517%" y="159.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const [T]&gt;::as_ptr (2 samples, 0.07%)</title><rect x="92.6399%" y="165" width="0.0691%" height="15" fill="rgb(210,61,42)" fg:x="2681" fg:w="2"/><text x="92.8899%" y="175.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::cast (3 samples, 0.10%)</title><rect x="92.8127%" y="149" width="0.1037%" height="15" fill="rgb(211,52,33)" fg:x="2686" fg:w="3"/><text x="93.0627%" y="159.50"></text></g><g><title>universal_hash::UniversalHash::update (386 samples, 13.34%)</title><rect x="80.0622%" y="309" width="13.3379%" height="15" fill="rgb(234,58,33)" fg:x="2317" fg:w="386"/><text x="80.3122%" y="319.50">universal_hash::Univ..</text></g><g><title>&lt;poly1305::Poly1305 as universal_hash::UniversalHash&gt;::update_with_backend (386 samples, 13.34%)</title><rect x="80.0622%" y="293" width="13.3379%" height="15" fill="rgb(220,115,36)" fg:x="2317" fg:w="386"/><text x="80.3122%" y="303.50">&lt;poly1305::Poly1305 ..</text></g><g><title>&lt;poly1305::backend::autodetect::State as universal_hash::UniversalHash&gt;::update_with_backend (386 samples, 13.34%)</title><rect x="80.0622%" y="277" width="13.3379%" height="15" fill="rgb(243,153,54)" fg:x="2317" fg:w="386"/><text x="80.3122%" y="287.50">&lt;poly1305::backend::..</text></g><g><title>&lt;universal_hash::UniversalHash::update::Ctx&lt;BS&gt; as universal_hash::UhfClosure&gt;::call (385 samples, 13.30%)</title><rect x="80.0968%" y="261" width="13.3034%" height="15" fill="rgb(251,47,18)" fg:x="2318" fg:w="385"/><text x="80.3468%" y="271.50">&lt;universal_hash::Uni..</text></g><g><title>&lt;poly1305::backend::soft::State as universal_hash::UhfBackend&gt;::proc_block (374 samples, 12.92%)</title><rect x="80.4768%" y="245" width="12.9233%" height="15" fill="rgb(242,102,42)" fg:x="2329" fg:w="374"/><text x="80.7268%" y="255.50">&lt;poly1305::backend:..</text></g><g><title>poly1305::backend::soft::State::compute_block (374 samples, 12.92%)</title><rect x="80.4768%" y="229" width="12.9233%" height="15" fill="rgb(234,31,38)" fg:x="2329" fg:w="374"/><text x="80.7268%" y="239.50">poly1305::backend::..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (49 samples, 1.69%)</title><rect x="91.7070%" y="213" width="1.6932%" height="15" fill="rgb(221,117,51)" fg:x="2654" fg:w="49"/><text x="91.9570%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (46 samples, 1.59%)</title><rect x="91.8106%" y="197" width="1.5895%" height="15" fill="rgb(212,20,18)" fg:x="2657" fg:w="46"/><text x="92.0606%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (38 samples, 1.31%)</title><rect x="92.0871%" y="181" width="1.3131%" height="15" fill="rgb(245,133,36)" fg:x="2665" fg:w="38"/><text x="92.3371%" y="191.50"></text></g><g><title>core::ptr::slice_from_raw_parts (20 samples, 0.69%)</title><rect x="92.7091%" y="165" width="0.6911%" height="15" fill="rgb(212,6,19)" fg:x="2683" fg:w="20"/><text x="92.9591%" y="175.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (14 samples, 0.48%)</title><rect x="92.9164%" y="149" width="0.4838%" height="15" fill="rgb(218,1,36)" fg:x="2689" fg:w="14"/><text x="93.1664%" y="159.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.03%)</title><rect x="93.4001%" y="293" width="0.0346%" height="15" fill="rgb(246,84,54)" fg:x="2703" fg:w="1"/><text x="93.6501%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.03%)</title><rect x="93.4001%" y="277" width="0.0346%" height="15" fill="rgb(242,110,6)" fg:x="2703" fg:w="1"/><text x="93.6501%" y="287.50"></text></g><g><title>universal_hash::UniversalHash::update_padded (396 samples, 13.68%)</title><rect x="79.7858%" y="325" width="13.6835%" height="15" fill="rgb(214,47,5)" fg:x="2309" fg:w="396"/><text x="80.0358%" y="335.50">universal_hash::Unive..</text></g><g><title>universal_hash::to_blocks (2 samples, 0.07%)</title><rect x="93.4001%" y="309" width="0.0691%" height="15" fill="rgb(218,159,25)" fg:x="2703" fg:w="2"/><text x="93.6501%" y="319.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.03%)</title><rect x="93.4347%" y="293" width="0.0346%" height="15" fill="rgb(215,211,28)" fg:x="2704" fg:w="1"/><text x="93.6847%" y="303.50"></text></g><g><title>core::ptr::slice_from_raw_parts (1 samples, 0.03%)</title><rect x="93.4347%" y="277" width="0.0346%" height="15" fill="rgb(238,59,32)" fg:x="2704" fg:w="1"/><text x="93.6847%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="93.4692%" y="293" width="0.0691%" height="15" fill="rgb(226,82,3)" fg:x="2705" fg:w="2"/><text x="93.7192%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (2 samples, 0.07%)</title><rect x="93.4692%" y="277" width="0.0691%" height="15" fill="rgb(240,164,32)" fg:x="2705" fg:w="2"/><text x="93.7192%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (1 samples, 0.03%)</title><rect x="93.5384%" y="293" width="0.0346%" height="15" fill="rgb(232,46,7)" fg:x="2707" fg:w="1"/><text x="93.7884%" y="303.50"></text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (1 samples, 0.03%)</title><rect x="93.5384%" y="277" width="0.0346%" height="15" fill="rgb(229,129,53)" fg:x="2707" fg:w="1"/><text x="93.7884%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (1 samples, 0.03%)</title><rect x="93.5384%" y="261" width="0.0346%" height="15" fill="rgb(234,188,29)" fg:x="2707" fg:w="1"/><text x="93.7884%" y="271.50"></text></g><g><title>&lt;[T] as subtle::ConstantTimeEq&gt;::ct_eq (4 samples, 0.14%)</title><rect x="93.4692%" y="309" width="0.1382%" height="15" fill="rgb(246,141,4)" fg:x="2705" fg:w="4"/><text x="93.7192%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (1 samples, 0.03%)</title><rect x="93.5729%" y="293" width="0.0346%" height="15" fill="rgb(229,23,39)" fg:x="2708" fg:w="1"/><text x="93.8229%" y="303.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (1 samples, 0.03%)</title><rect x="93.5729%" y="277" width="0.0346%" height="15" fill="rgb(206,12,3)" fg:x="2708" fg:w="1"/><text x="93.8229%" y="287.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.03%)</title><rect x="93.7111%" y="261" width="0.0346%" height="15" fill="rgb(252,226,20)" fg:x="2712" fg:w="1"/><text x="93.9611%" y="271.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (1 samples, 0.03%)</title><rect x="93.7111%" y="245" width="0.0346%" height="15" fill="rgb(216,123,35)" fg:x="2712" fg:w="1"/><text x="93.9611%" y="255.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (1 samples, 0.03%)</title><rect x="93.7111%" y="229" width="0.0346%" height="15" fill="rgb(212,68,40)" fg:x="2712" fg:w="1"/><text x="93.9611%" y="239.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (1 samples, 0.03%)</title><rect x="93.7111%" y="213" width="0.0346%" height="15" fill="rgb(254,125,32)" fg:x="2712" fg:w="1"/><text x="93.9611%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (3 samples, 0.10%)</title><rect x="93.8493%" y="181" width="0.1037%" height="15" fill="rgb(253,97,22)" fg:x="2716" fg:w="3"/><text x="94.0993%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (3 samples, 0.10%)</title><rect x="93.8493%" y="165" width="0.1037%" height="15" fill="rgb(241,101,14)" fg:x="2716" fg:w="3"/><text x="94.0993%" y="175.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate::{{closure}} (2 samples, 0.07%)</title><rect x="93.8839%" y="149" width="0.0691%" height="15" fill="rgb(238,103,29)" fg:x="2717" fg:w="2"/><text x="94.1339%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (7 samples, 0.24%)</title><rect x="93.7457%" y="229" width="0.2419%" height="15" fill="rgb(233,195,47)" fg:x="2713" fg:w="7"/><text x="93.9957%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.21%)</title><rect x="93.7802%" y="213" width="0.2073%" height="15" fill="rgb(246,218,30)" fg:x="2714" fg:w="6"/><text x="94.0302%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (6 samples, 0.21%)</title><rect x="93.7802%" y="197" width="0.2073%" height="15" fill="rgb(219,145,47)" fg:x="2714" fg:w="6"/><text x="94.0302%" y="207.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="93.9530%" y="181" width="0.0346%" height="15" fill="rgb(243,12,26)" fg:x="2719" fg:w="1"/><text x="94.2030%" y="191.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (1 samples, 0.03%)</title><rect x="93.9530%" y="165" width="0.0346%" height="15" fill="rgb(214,87,16)" fg:x="2719" fg:w="1"/><text x="94.2030%" y="175.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (1 samples, 0.03%)</title><rect x="93.9530%" y="149" width="0.0346%" height="15" fill="rgb(208,99,42)" fg:x="2719" fg:w="1"/><text x="94.2030%" y="159.50"></text></g><g><title>chacha20poly1305::cipher::Cipher&lt;C&gt;::decrypt_in_place_detached (2,462 samples, 85.07%)</title><rect x="8.9496%" y="341" width="85.0726%" height="15" fill="rgb(253,99,2)" fg:x="259" fg:w="2462"/><text x="9.1996%" y="351.50">chacha20poly1305::cipher::Cipher&lt;C&gt;::decrypt_in_place_detached</text></g><g><title>universal_hash::UniversalHash::verify (16 samples, 0.55%)</title><rect x="93.4692%" y="325" width="0.5529%" height="15" fill="rgb(220,168,23)" fg:x="2705" fg:w="16"/><text x="93.7192%" y="335.50"></text></g><g><title>&lt;poly1305::Poly1305 as universal_hash::UniversalHash&gt;::finalize (12 samples, 0.41%)</title><rect x="93.6075%" y="309" width="0.4147%" height="15" fill="rgb(242,38,24)" fg:x="2709" fg:w="12"/><text x="93.8575%" y="319.50"></text></g><g><title>&lt;poly1305::backend::autodetect::State as universal_hash::UniversalHash&gt;::finalize (11 samples, 0.38%)</title><rect x="93.6420%" y="293" width="0.3801%" height="15" fill="rgb(225,182,9)" fg:x="2710" fg:w="11"/><text x="93.8920%" y="303.50"></text></g><g><title>poly1305::backend::soft::State::finalize_mut (11 samples, 0.38%)</title><rect x="93.6420%" y="277" width="0.3801%" height="15" fill="rgb(243,178,37)" fg:x="2710" fg:w="11"/><text x="93.8920%" y="287.50"></text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default (8 samples, 0.28%)</title><rect x="93.7457%" y="261" width="0.2764%" height="15" fill="rgb(232,139,19)" fg:x="2713" fg:w="8"/><text x="93.9957%" y="271.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (8 samples, 0.28%)</title><rect x="93.7457%" y="245" width="0.2764%" height="15" fill="rgb(225,201,24)" fg:x="2713" fg:w="8"/><text x="93.9957%" y="255.50"></text></g><g><title>generic_array::ArrayBuilder&lt;T,N&gt;::into_inner (1 samples, 0.03%)</title><rect x="93.9876%" y="229" width="0.0346%" height="15" fill="rgb(221,47,46)" fg:x="2720" fg:w="1"/><text x="94.2376%" y="239.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="93.9876%" y="213" width="0.0346%" height="15" fill="rgb(249,23,13)" fg:x="2720" fg:w="1"/><text x="94.2376%" y="223.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (1 samples, 0.03%)</title><rect x="93.9876%" y="197" width="0.0346%" height="15" fill="rgb(219,9,5)" fg:x="2720" fg:w="1"/><text x="94.2376%" y="207.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::into_inner (1 samples, 0.03%)</title><rect x="93.9876%" y="181" width="0.0346%" height="15" fill="rgb(254,171,16)" fg:x="2720" fg:w="1"/><text x="94.2376%" y="191.50"></text></g><g><title>&lt;[Z] as zeroize::Zeroize&gt;::zeroize (3 samples, 0.10%)</title><rect x="94.0221%" y="325" width="0.1037%" height="15" fill="rgb(230,171,20)" fg:x="2721" fg:w="3"/><text x="94.2721%" y="335.50"></text></g><g><title>zeroize::volatile_set (3 samples, 0.10%)</title><rect x="94.0221%" y="309" width="0.1037%" height="15" fill="rgb(210,71,41)" fg:x="2721" fg:w="3"/><text x="94.2721%" y="319.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.07%)</title><rect x="94.0567%" y="293" width="0.0691%" height="15" fill="rgb(206,173,20)" fg:x="2722" fg:w="2"/><text x="94.3067%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.03%)</title><rect x="94.0912%" y="277" width="0.0346%" height="15" fill="rgb(233,88,34)" fg:x="2723" fg:w="1"/><text x="94.3412%" y="287.50"></text></g><g><title>core::mem::replace (1 samples, 0.03%)</title><rect x="94.0912%" y="261" width="0.0346%" height="15" fill="rgb(223,209,46)" fg:x="2723" fg:w="1"/><text x="94.3412%" y="271.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="94.0912%" y="245" width="0.0346%" height="15" fill="rgb(250,43,18)" fg:x="2723" fg:w="1"/><text x="94.3412%" y="255.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (1 samples, 0.03%)</title><rect x="94.1258%" y="293" width="0.0346%" height="15" fill="rgb(208,13,10)" fg:x="2724" fg:w="1"/><text x="94.3758%" y="303.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="94.1258%" y="277" width="0.0346%" height="15" fill="rgb(212,200,36)" fg:x="2724" fg:w="1"/><text x="94.3758%" y="287.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.03%)</title><rect x="94.2640%" y="277" width="0.0346%" height="15" fill="rgb(225,90,30)" fg:x="2728" fg:w="1"/><text x="94.5140%" y="287.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (1 samples, 0.03%)</title><rect x="94.2640%" y="261" width="0.0346%" height="15" fill="rgb(236,182,39)" fg:x="2728" fg:w="1"/><text x="94.5140%" y="271.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.03%)</title><rect x="94.2640%" y="245" width="0.0346%" height="15" fill="rgb(212,144,35)" fg:x="2728" fg:w="1"/><text x="94.5140%" y="255.50"></text></g><g><title>&lt;poly1305::backend::soft::State as core::default::Default&gt;::default (2 samples, 0.07%)</title><rect x="94.2985%" y="277" width="0.0691%" height="15" fill="rgb(228,63,44)" fg:x="2729" fg:w="2"/><text x="94.5485%" y="287.50"></text></g><g><title>core::array::&lt;impl core::default::Default for [T: _]&gt;::default (2 samples, 0.07%)</title><rect x="94.2985%" y="261" width="0.0691%" height="15" fill="rgb(228,109,6)" fg:x="2729" fg:w="2"/><text x="94.5485%" y="271.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_le_bytes (1 samples, 0.03%)</title><rect x="94.3677%" y="277" width="0.0346%" height="15" fill="rgb(238,117,24)" fg:x="2731" fg:w="1"/><text x="94.6177%" y="287.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_ne_bytes (1 samples, 0.03%)</title><rect x="94.3677%" y="261" width="0.0346%" height="15" fill="rgb(242,26,26)" fg:x="2731" fg:w="1"/><text x="94.6177%" y="271.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.03%)</title><rect x="94.4022%" y="277" width="0.0346%" height="15" fill="rgb(221,92,48)" fg:x="2732" fg:w="1"/><text x="94.6522%" y="287.50"></text></g><g><title>&lt;poly1305::Poly1305 as crypto_common::KeyInit&gt;::new (10 samples, 0.35%)</title><rect x="94.1258%" y="325" width="0.3455%" height="15" fill="rgb(209,209,32)" fg:x="2724" fg:w="10"/><text x="94.3758%" y="335.50"></text></g><g><title>poly1305::backend::autodetect::State::new (10 samples, 0.35%)</title><rect x="94.1258%" y="309" width="0.3455%" height="15" fill="rgb(221,70,22)" fg:x="2724" fg:w="10"/><text x="94.3758%" y="319.50"></text></g><g><title>poly1305::backend::soft::State::new (9 samples, 0.31%)</title><rect x="94.1603%" y="293" width="0.3110%" height="15" fill="rgb(248,145,5)" fg:x="2725" fg:w="9"/><text x="94.4103%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="94.4368%" y="277" width="0.0346%" height="15" fill="rgb(226,116,26)" fg:x="2733" fg:w="1"/><text x="94.6868%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="94.4368%" y="261" width="0.0346%" height="15" fill="rgb(244,5,17)" fg:x="2733" fg:w="1"/><text x="94.6868%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.03%)</title><rect x="94.4368%" y="245" width="0.0346%" height="15" fill="rgb(252,159,33)" fg:x="2733" fg:w="1"/><text x="94.6868%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.03%)</title><rect x="94.4368%" y="229" width="0.0346%" height="15" fill="rgb(206,71,0)" fg:x="2733" fg:w="1"/><text x="94.6868%" y="239.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="94.4713%" y="325" width="0.0346%" height="15" fill="rgb(233,118,54)" fg:x="2734" fg:w="1"/><text x="94.7213%" y="335.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.10%)</title><rect x="94.5404%" y="277" width="0.1037%" height="15" fill="rgb(234,83,48)" fg:x="2736" fg:w="3"/><text x="94.7904%" y="287.50"></text></g><g><title>cipher::stream_core::StreamCipherCore::apply_keystream_blocks_inout (3 samples, 0.10%)</title><rect x="94.6441%" y="277" width="0.1037%" height="15" fill="rgb(228,3,54)" fg:x="2739" fg:w="3"/><text x="94.8941%" y="287.50"></text></g><g><title>&lt;chacha20::xchacha::XChaChaCore&lt;R&gt; as cipher::stream_core::StreamCipherCore&gt;::process_with_backend (3 samples, 0.10%)</title><rect x="94.6441%" y="261" width="0.1037%" height="15" fill="rgb(226,155,13)" fg:x="2739" fg:w="3"/><text x="94.8941%" y="271.50"></text></g><g><title>&lt;chacha20::ChaChaCore&lt;R&gt; as cipher::stream_core::StreamCipherCore&gt;::process_with_backend (3 samples, 0.10%)</title><rect x="94.6441%" y="245" width="0.1037%" height="15" fill="rgb(241,28,37)" fg:x="2739" fg:w="3"/><text x="94.8941%" y="255.50"></text></g><g><title>chacha20::backends::sse2::inner (3 samples, 0.10%)</title><rect x="94.6441%" y="229" width="0.1037%" height="15" fill="rgb(233,93,10)" fg:x="2739" fg:w="3"/><text x="94.8941%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_add_epi32 (8 samples, 0.28%)</title><rect x="95.1970%" y="133" width="0.2764%" height="15" fill="rgb(225,113,19)" fg:x="2755" fg:w="8"/><text x="95.4470%" y="143.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i32x4 (2 samples, 0.07%)</title><rect x="95.4043%" y="117" width="0.0691%" height="15" fill="rgb(241,2,18)" fg:x="2761" fg:w="2"/><text x="95.6543%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_slli_epi32 (4 samples, 0.14%)</title><rect x="95.4734%" y="133" width="0.1382%" height="15" fill="rgb(228,207,21)" fg:x="2763" fg:w="4"/><text x="95.7234%" y="143.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_srli_epi32 (2 samples, 0.07%)</title><rect x="95.6116%" y="133" width="0.0691%" height="15" fill="rgb(213,211,35)" fg:x="2767" fg:w="2"/><text x="95.8616%" y="143.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i32x4 (1 samples, 0.03%)</title><rect x="95.6462%" y="117" width="0.0346%" height="15" fill="rgb(209,83,10)" fg:x="2768" fg:w="1"/><text x="95.8962%" y="127.50"></text></g><g><title>chacha20::backends::sse2::add_xor_rot (29 samples, 1.00%)</title><rect x="94.8169%" y="149" width="1.0021%" height="15" fill="rgb(209,164,1)" fg:x="2744" fg:w="29"/><text x="95.0669%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_xor_si128 (4 samples, 0.14%)</title><rect x="95.6807%" y="133" width="0.1382%" height="15" fill="rgb(213,184,43)" fg:x="2769" fg:w="4"/><text x="95.9307%" y="143.50"></text></g><g><title>chacha20::backends::sse2::double_quarter_round (30 samples, 1.04%)</title><rect x="94.8169%" y="165" width="1.0366%" height="15" fill="rgb(231,61,34)" fg:x="2744" fg:w="30"/><text x="95.0669%" y="175.50"></text></g><g><title>chacha20::backends::sse2::rows_to_cols (1 samples, 0.03%)</title><rect x="95.8189%" y="149" width="0.0346%" height="15" fill="rgb(235,75,3)" fg:x="2773" fg:w="1"/><text x="96.0689%" y="159.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1 samples, 0.03%)</title><rect x="95.8535%" y="133" width="0.0346%" height="15" fill="rgb(220,106,47)" fg:x="2774" fg:w="1"/><text x="96.1035%" y="143.50"></text></g><g><title>chacha20::backends::sse2::rounds (32 samples, 1.11%)</title><rect x="94.8169%" y="181" width="1.1057%" height="15" fill="rgb(210,196,33)" fg:x="2744" fg:w="32"/><text x="95.0669%" y="191.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.07%)</title><rect x="95.8535%" y="165" width="0.0691%" height="15" fill="rgb(229,154,42)" fg:x="2774" fg:w="2"/><text x="96.1035%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.07%)</title><rect x="95.8535%" y="149" width="0.0691%" height="15" fill="rgb(228,114,26)" fg:x="2774" fg:w="2"/><text x="96.1035%" y="159.50"></text></g><g><title>core::mem::replace (1 samples, 0.03%)</title><rect x="95.8880%" y="133" width="0.0346%" height="15" fill="rgb(208,144,1)" fg:x="2775" fg:w="1"/><text x="96.1380%" y="143.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="95.8880%" y="117" width="0.0346%" height="15" fill="rgb(239,112,37)" fg:x="2775" fg:w="1"/><text x="96.1380%" y="127.50"></text></g><g><title>cipher::stream_core::StreamCipherCore::write_keystream_block (35 samples, 1.21%)</title><rect x="94.7478%" y="277" width="1.2094%" height="15" fill="rgb(210,96,50)" fg:x="2742" fg:w="35"/><text x="94.9978%" y="287.50"></text></g><g><title>&lt;chacha20::xchacha::XChaChaCore&lt;R&gt; as cipher::stream_core::StreamCipherCore&gt;::process_with_backend (35 samples, 1.21%)</title><rect x="94.7478%" y="261" width="1.2094%" height="15" fill="rgb(222,178,2)" fg:x="2742" fg:w="35"/><text x="94.9978%" y="271.50"></text></g><g><title>&lt;chacha20::ChaChaCore&lt;R&gt; as cipher::stream_core::StreamCipherCore&gt;::process_with_backend (35 samples, 1.21%)</title><rect x="94.7478%" y="245" width="1.2094%" height="15" fill="rgb(226,74,18)" fg:x="2742" fg:w="35"/><text x="94.9978%" y="255.50"></text></g><g><title>chacha20::backends::sse2::inner (35 samples, 1.21%)</title><rect x="94.7478%" y="229" width="1.2094%" height="15" fill="rgb(225,67,54)" fg:x="2742" fg:w="35"/><text x="94.9978%" y="239.50"></text></g><g><title>&lt;cipher::stream_core::WriteBlockCtx&lt;BS&gt; as cipher::stream_core::StreamClosure&gt;::call (35 samples, 1.21%)</title><rect x="94.7478%" y="213" width="1.2094%" height="15" fill="rgb(251,92,32)" fg:x="2742" fg:w="35"/><text x="94.9978%" y="223.50"></text></g><g><title>&lt;chacha20::backends::sse2::Backend&lt;R&gt; as cipher::stream_core::StreamBackend&gt;::gen_ks_block (35 samples, 1.21%)</title><rect x="94.7478%" y="197" width="1.2094%" height="15" fill="rgb(228,149,22)" fg:x="2742" fg:w="35"/><text x="94.9978%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_add_epi32 (1 samples, 0.03%)</title><rect x="95.9226%" y="181" width="0.0346%" height="15" fill="rgb(243,54,13)" fg:x="2776" fg:w="1"/><text x="96.1726%" y="191.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i32x4 (1 samples, 0.03%)</title><rect x="95.9226%" y="165" width="0.0346%" height="15" fill="rgb(243,180,28)" fg:x="2776" fg:w="1"/><text x="96.1726%" y="175.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.03%)</title><rect x="95.9917%" y="229" width="0.0346%" height="15" fill="rgb(208,167,24)" fg:x="2778" fg:w="1"/><text x="96.2417%" y="239.50"></text></g><g><title>core::convert::num::ptr_try_from_impls::&lt;impl core::convert::TryFrom&lt;u32&gt; for usize&gt;::try_from (1 samples, 0.03%)</title><rect x="95.9917%" y="213" width="0.0346%" height="15" fill="rgb(245,73,45)" fg:x="2778" fg:w="1"/><text x="96.2417%" y="223.50"></text></g><g><title>cipher::stream_wrapper::StreamCipherCoreWrapper&lt;T&gt;::check_remaining (3 samples, 0.10%)</title><rect x="95.9572%" y="277" width="0.1037%" height="15" fill="rgb(237,203,48)" fg:x="2777" fg:w="3"/><text x="96.2072%" y="287.50"></text></g><g><title>&lt;chacha20::xchacha::XChaChaCore&lt;R&gt; as cipher::stream_core::StreamCipherCore&gt;::remaining_blocks (2 samples, 0.07%)</title><rect x="95.9917%" y="261" width="0.0691%" height="15" fill="rgb(211,197,16)" fg:x="2778" fg:w="2"/><text x="96.2417%" y="271.50"></text></g><g><title>&lt;chacha20::ChaChaCore&lt;R&gt; as cipher::stream_core::StreamCipherCore&gt;::remaining_blocks (2 samples, 0.07%)</title><rect x="95.9917%" y="245" width="0.0691%" height="15" fill="rgb(243,99,51)" fg:x="2778" fg:w="2"/><text x="96.2417%" y="255.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::ok (1 samples, 0.03%)</title><rect x="96.0263%" y="229" width="0.0346%" height="15" fill="rgb(215,123,29)" fg:x="2779" fg:w="1"/><text x="96.2763%" y="239.50"></text></g><g><title>cipher::stream_wrapper::StreamCipherCoreWrapper&lt;T&gt;::set_pos_unchecked (1 samples, 0.03%)</title><rect x="96.0608%" y="277" width="0.0346%" height="15" fill="rgb(239,186,37)" fg:x="2780" fg:w="1"/><text x="96.3108%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.07%)</title><rect x="96.0954%" y="277" width="0.0691%" height="15" fill="rgb(252,136,39)" fg:x="2781" fg:w="2"/><text x="96.3454%" y="287.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.07%)</title><rect x="96.0954%" y="261" width="0.0691%" height="15" fill="rgb(223,213,32)" fg:x="2781" fg:w="2"/><text x="96.3454%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="96.1299%" y="245" width="0.0346%" height="15" fill="rgb(233,115,5)" fg:x="2782" fg:w="1"/><text x="96.3799%" y="255.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.03%)</title><rect x="96.1645%" y="261" width="0.0346%" height="15" fill="rgb(207,226,44)" fg:x="2783" fg:w="1"/><text x="96.4145%" y="271.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4 samples, 0.14%)</title><rect x="96.1990%" y="261" width="0.1382%" height="15" fill="rgb(208,126,0)" fg:x="2784" fg:w="4"/><text x="96.4490%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4 samples, 0.14%)</title><rect x="96.1990%" y="245" width="0.1382%" height="15" fill="rgb(244,66,21)" fg:x="2784" fg:w="4"/><text x="96.4490%" y="255.50"></text></g><g><title>core::mem::replace (1 samples, 0.03%)</title><rect x="96.3027%" y="229" width="0.0346%" height="15" fill="rgb(222,97,12)" fg:x="2787" fg:w="1"/><text x="96.5527%" y="239.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="96.3027%" y="213" width="0.0346%" height="15" fill="rgb(219,213,19)" fg:x="2787" fg:w="1"/><text x="96.5527%" y="223.50"></text></g><g><title>cipher::stream::StreamCipher::apply_keystream (54 samples, 1.87%)</title><rect x="94.5059%" y="325" width="1.8659%" height="15" fill="rgb(252,169,30)" fg:x="2735" fg:w="54"/><text x="94.7559%" y="335.50">c..</text></g><g><title>cipher::stream::StreamCipher::try_apply_keystream (54 samples, 1.87%)</title><rect x="94.5059%" y="309" width="1.8659%" height="15" fill="rgb(206,32,51)" fg:x="2735" fg:w="54"/><text x="94.7559%" y="319.50">c..</text></g><g><title>&lt;cipher::stream_wrapper::StreamCipherCoreWrapper&lt;T&gt; as cipher::stream::StreamCipher&gt;::try_apply_keystream_inout (54 samples, 1.87%)</title><rect x="94.5059%" y="293" width="1.8659%" height="15" fill="rgb(250,172,42)" fg:x="2735" fg:w="54"/><text x="94.7559%" y="303.50">&lt;..</text></g><g><title>inout::inout_buf::InOutBuf&lt;u8&gt;::xor_in2out (6 samples, 0.21%)</title><rect x="96.1645%" y="277" width="0.2073%" height="15" fill="rgb(209,34,43)" fg:x="2783" fg:w="6"/><text x="96.4145%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="96.3372%" y="261" width="0.0346%" height="15" fill="rgb(223,11,35)" fg:x="2788" fg:w="1"/><text x="96.5872%" y="271.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="96.3718%" y="293" width="0.0346%" height="15" fill="rgb(251,219,26)" fg:x="2789" fg:w="1"/><text x="96.6218%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="96.5100%" y="277" width="0.0346%" height="15" fill="rgb(231,119,3)" fg:x="2793" fg:w="1"/><text x="96.7600%" y="287.50"></text></g><g><title>cipher::stream::StreamCipherSeek::seek (6 samples, 0.21%)</title><rect x="96.3718%" y="325" width="0.2073%" height="15" fill="rgb(216,97,11)" fg:x="2789" fg:w="6"/><text x="96.6218%" y="335.50"></text></g><g><title>&lt;cipher::stream_wrapper::StreamCipherCoreWrapper&lt;T&gt; as cipher::stream::StreamCipherSeek&gt;::try_seek (6 samples, 0.21%)</title><rect x="96.3718%" y="309" width="0.2073%" height="15" fill="rgb(223,59,9)" fg:x="2789" fg:w="6"/><text x="96.6218%" y="319.50"></text></g><g><title>&lt;u64 as cipher::stream::SeekNum&gt;::into_block_byte (5 samples, 0.17%)</title><rect x="96.4064%" y="293" width="0.1728%" height="15" fill="rgb(233,93,31)" fg:x="2790" fg:w="5"/><text x="96.6564%" y="303.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::TryFrom&lt;u64&gt; for u32&gt;::try_from (1 samples, 0.03%)</title><rect x="96.5446%" y="277" width="0.0346%" height="15" fill="rgb(239,81,33)" fg:x="2794" fg:w="1"/><text x="96.7946%" y="287.50"></text></g><g><title>generic_array::GenericArray&lt;T,N&gt;::from_slice (1 samples, 0.03%)</title><rect x="96.5791%" y="325" width="0.0346%" height="15" fill="rgb(213,120,34)" fg:x="2795" fg:w="1"/><text x="96.8291%" y="335.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="96.7865%" y="197" width="0.0346%" height="15" fill="rgb(243,49,53)" fg:x="2801" fg:w="1"/><text x="97.0365%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (7 samples, 0.24%)</title><rect x="96.6137%" y="245" width="0.2419%" height="15" fill="rgb(247,216,33)" fg:x="2796" fg:w="7"/><text x="96.8637%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (5 samples, 0.17%)</title><rect x="96.6828%" y="229" width="0.1728%" height="15" fill="rgb(226,26,14)" fg:x="2798" fg:w="5"/><text x="96.9328%" y="239.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate::{{closure}} (4 samples, 0.14%)</title><rect x="96.7173%" y="213" width="0.1382%" height="15" fill="rgb(215,49,53)" fg:x="2799" fg:w="4"/><text x="96.9673%" y="223.50"></text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default::{{closure}} (1 samples, 0.03%)</title><rect x="96.8210%" y="197" width="0.0346%" height="15" fill="rgb(245,162,40)" fg:x="2802" fg:w="1"/><text x="97.0710%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (8 samples, 0.28%)</title><rect x="96.6137%" y="293" width="0.2764%" height="15" fill="rgb(229,68,17)" fg:x="2796" fg:w="8"/><text x="96.8637%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.28%)</title><rect x="96.6137%" y="277" width="0.2764%" height="15" fill="rgb(213,182,10)" fg:x="2796" fg:w="8"/><text x="96.8637%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (8 samples, 0.28%)</title><rect x="96.6137%" y="261" width="0.2764%" height="15" fill="rgb(245,125,30)" fg:x="2796" fg:w="8"/><text x="96.8637%" y="271.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="96.8556%" y="245" width="0.0346%" height="15" fill="rgb(232,202,2)" fg:x="2803" fg:w="1"/><text x="97.1056%" y="255.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (1 samples, 0.03%)</title><rect x="96.8556%" y="229" width="0.0346%" height="15" fill="rgb(237,140,51)" fg:x="2803" fg:w="1"/><text x="97.1056%" y="239.50"></text></g><g><title>generic_array::ArrayBuilder&lt;T,N&gt;::into_inner (3 samples, 0.10%)</title><rect x="96.8901%" y="293" width="0.1037%" height="15" fill="rgb(236,157,25)" fg:x="2804" fg:w="3"/><text x="97.1401%" y="303.50"></text></g><g><title>&lt;chacha20poly1305::ChaChaPoly1305&lt;C,N&gt; as aead::AeadInPlace&gt;::decrypt_in_place_detached (2,679 samples, 92.57%)</title><rect x="4.4575%" y="357" width="92.5708%" height="15" fill="rgb(219,209,0)" fg:x="129" fg:w="2679"/><text x="4.7075%" y="367.50">&lt;chacha20poly1305::ChaChaPoly1305&lt;C,N&gt; as aead::AeadInPlace&gt;::decrypt_in_place_detached</text></g><g><title>chacha20poly1305::cipher::Cipher&lt;C&gt;::new (87 samples, 3.01%)</title><rect x="94.0221%" y="341" width="3.0062%" height="15" fill="rgb(240,116,54)" fg:x="2721" fg:w="87"/><text x="94.2721%" y="351.50">cha..</text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default (12 samples, 0.41%)</title><rect x="96.6137%" y="325" width="0.4147%" height="15" fill="rgb(216,10,36)" fg:x="2796" fg:w="12"/><text x="96.8637%" y="335.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (12 samples, 0.41%)</title><rect x="96.6137%" y="309" width="0.4147%" height="15" fill="rgb(222,72,44)" fg:x="2796" fg:w="12"/><text x="96.8637%" y="319.50"></text></g><g><title>generic_array::ArrayBuilder&lt;T,N&gt;::iter_position (1 samples, 0.03%)</title><rect x="96.9938%" y="293" width="0.0346%" height="15" fill="rgb(232,159,9)" fg:x="2807" fg:w="1"/><text x="97.2438%" y="303.50"></text></g><g><title>&lt;heapless::vec::Vec&lt;u8,_&gt; as aead::Buffer&gt;::truncate (1 samples, 0.03%)</title><rect x="97.0283%" y="357" width="0.0346%" height="15" fill="rgb(210,39,32)" fg:x="2808" fg:w="1"/><text x="97.2783%" y="367.50"></text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::truncate (1 samples, 0.03%)</title><rect x="97.0283%" y="341" width="0.0346%" height="15" fill="rgb(216,194,45)" fg:x="2808" fg:w="1"/><text x="97.2783%" y="351.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (1 samples, 0.03%)</title><rect x="97.0283%" y="325" width="0.0346%" height="15" fill="rgb(218,18,35)" fg:x="2808" fg:w="1"/><text x="97.2783%" y="335.50"></text></g><g><title>aead::AeadInPlace::decrypt_in_place (2,683 samples, 92.71%)</title><rect x="4.4229%" y="373" width="92.7091%" height="15" fill="rgb(207,83,51)" fg:x="128" fg:w="2683"/><text x="4.6729%" y="383.50">aead::AeadInPlace::decrypt_in_place</text></g><g><title>&lt;typenum::uint::UInt&lt;U,B&gt; as typenum::marker_traits::Unsigned&gt;::to_usize (2 samples, 0.07%)</title><rect x="97.0629%" y="357" width="0.0691%" height="15" fill="rgb(225,63,43)" fg:x="2809" fg:w="2"/><text x="97.3129%" y="367.50"></text></g><g><title>&lt;typenum::uint::UInt&lt;U,B&gt; as typenum::marker_traits::Unsigned&gt;::to_usize (2 samples, 0.07%)</title><rect x="97.0629%" y="341" width="0.0691%" height="15" fill="rgb(207,57,36)" fg:x="2809" fg:w="2"/><text x="97.3129%" y="351.50"></text></g><g><title>&lt;typenum::uint::UInt&lt;U,B&gt; as typenum::marker_traits::Unsigned&gt;::to_usize (2 samples, 0.07%)</title><rect x="97.0629%" y="325" width="0.0691%" height="15" fill="rgb(216,99,33)" fg:x="2809" fg:w="2"/><text x="97.3129%" y="335.50"></text></g><g><title>&lt;tftp::socket::EncryptionBoundSocket&lt;S&gt; as tftp::socket::Socket&gt;::recv_from (2,783 samples, 96.16%)</title><rect x="1.0021%" y="405" width="96.1645%" height="15" fill="rgb(225,42,16)" fg:x="29" fg:w="2783"/><text x="1.2521%" y="415.50">&lt;tftp::socket::EncryptionBoundSocket&lt;S&gt; as tftp::socket::Socket&gt;::recv_from</text></g><g><title>tftp::encryption::Encryptor::decrypt (2,685 samples, 92.78%)</title><rect x="4.3884%" y="389" width="92.7782%" height="15" fill="rgb(220,201,45)" fg:x="127" fg:w="2685"/><text x="4.6384%" y="399.50">tftp::encryption::Encryptor::decrypt</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.03%)</title><rect x="97.1320%" y="373" width="0.0346%" height="15" fill="rgb(225,33,4)" fg:x="2811" fg:w="1"/><text x="97.3820%" y="383.50"></text></g><g><title>&lt;tftp::std_compat::io::ErrorKind as core::cmp::PartialEq&gt;::eq (1 samples, 0.03%)</title><rect x="97.1666%" y="405" width="0.0346%" height="15" fill="rgb(224,33,50)" fg:x="2812" fg:w="1"/><text x="97.4166%" y="415.50"></text></g><g><title>core::cmp::PartialOrd::gt (2 samples, 0.07%)</title><rect x="97.2011%" y="405" width="0.0691%" height="15" fill="rgb(246,198,51)" fg:x="2813" fg:w="2"/><text x="97.4511%" y="415.50"></text></g><g><title>&lt;core::time::Duration as core::cmp::PartialOrd&gt;::partial_cmp (1 samples, 0.03%)</title><rect x="97.2357%" y="389" width="0.0346%" height="15" fill="rgb(205,22,4)" fg:x="2814" fg:w="1"/><text x="97.4857%" y="399.50"></text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::set_len (1 samples, 0.03%)</title><rect x="97.2702%" y="405" width="0.0346%" height="15" fill="rgb(206,3,8)" fg:x="2815" fg:w="1"/><text x="97.5202%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (1 samples, 0.03%)</title><rect x="97.4084%" y="277" width="0.0346%" height="15" fill="rgb(251,23,15)" fg:x="2819" fg:w="1"/><text x="97.6584%" y="287.50"></text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (1 samples, 0.03%)</title><rect x="97.4084%" y="261" width="0.0346%" height="15" fill="rgb(252,88,28)" fg:x="2819" fg:w="1"/><text x="97.6584%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (1 samples, 0.03%)</title><rect x="97.4084%" y="245" width="0.0346%" height="15" fill="rgb(212,127,14)" fg:x="2819" fg:w="1"/><text x="97.6584%" y="255.50"></text></g><g><title>&lt;chacha20::ChaChaCore&lt;R&gt; as crypto_common::KeyIvInit&gt;::new (4 samples, 0.14%)</title><rect x="97.3393%" y="293" width="0.1382%" height="15" fill="rgb(247,145,37)" fg:x="2817" fg:w="4"/><text x="97.5893%" y="303.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_le_bytes (1 samples, 0.03%)</title><rect x="97.4430%" y="277" width="0.0346%" height="15" fill="rgb(209,117,53)" fg:x="2820" fg:w="1"/><text x="97.6930%" y="287.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_ne_bytes (1 samples, 0.03%)</title><rect x="97.4430%" y="261" width="0.0346%" height="15" fill="rgb(212,90,42)" fg:x="2820" fg:w="1"/><text x="97.6930%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="97.4775%" y="277" width="0.0691%" height="15" fill="rgb(218,164,37)" fg:x="2821" fg:w="2"/><text x="97.7275%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (2 samples, 0.07%)</title><rect x="97.4775%" y="261" width="0.0691%" height="15" fill="rgb(246,65,34)" fg:x="2821" fg:w="2"/><text x="97.7275%" y="271.50"></text></g><g><title>&lt;core::slice::iter::ChunksExact&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (1 samples, 0.03%)</title><rect x="97.5121%" y="245" width="0.0346%" height="15" fill="rgb(231,100,33)" fg:x="2822" fg:w="1"/><text x="97.7621%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.03%)</title><rect x="97.5121%" y="229" width="0.0346%" height="15" fill="rgb(228,126,14)" fg:x="2822" fg:w="1"/><text x="97.7621%" y="239.50"></text></g><g><title>core::ptr::slice_from_raw_parts (1 samples, 0.03%)</title><rect x="97.5121%" y="213" width="0.0346%" height="15" fill="rgb(215,173,21)" fg:x="2822" fg:w="1"/><text x="97.7621%" y="223.50"></text></g><g><title>chacha20::xchacha::quarter_round (8 samples, 0.28%)</title><rect x="97.5466%" y="277" width="0.2764%" height="15" fill="rgb(210,6,40)" fg:x="2823" fg:w="8"/><text x="97.7966%" y="287.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (1 samples, 0.03%)</title><rect x="97.7885%" y="261" width="0.0346%" height="15" fill="rgb(212,48,18)" fg:x="2830" fg:w="1"/><text x="98.0385%" y="271.50"></text></g><g><title>core::array::&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (1 samples, 0.03%)</title><rect x="97.8231%" y="277" width="0.0346%" height="15" fill="rgb(230,214,11)" fg:x="2831" fg:w="1"/><text x="98.0731%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="97.8231%" y="261" width="0.0346%" height="15" fill="rgb(254,105,39)" fg:x="2831" fg:w="1"/><text x="98.0731%" y="271.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="97.8231%" y="245" width="0.0346%" height="15" fill="rgb(245,158,5)" fg:x="2831" fg:w="1"/><text x="98.0731%" y="255.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.03%)</title><rect x="97.8231%" y="229" width="0.0346%" height="15" fill="rgb(249,208,11)" fg:x="2831" fg:w="1"/><text x="98.0731%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.03%)</title><rect x="97.8231%" y="213" width="0.0346%" height="15" fill="rgb(210,39,28)" fg:x="2831" fg:w="1"/><text x="98.0731%" y="223.50"></text></g><g><title>core::ptr::slice_from_raw_parts (1 samples, 0.03%)</title><rect x="97.8231%" y="197" width="0.0346%" height="15" fill="rgb(211,56,53)" fg:x="2831" fg:w="1"/><text x="98.0731%" y="207.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (1 samples, 0.03%)</title><rect x="97.8231%" y="181" width="0.0346%" height="15" fill="rgb(226,201,30)" fg:x="2831" fg:w="1"/><text x="98.0731%" y="191.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.03%)</title><rect x="97.8576%" y="277" width="0.0346%" height="15" fill="rgb(239,101,34)" fg:x="2832" fg:w="1"/><text x="98.1076%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.03%)</title><rect x="97.8576%" y="261" width="0.0346%" height="15" fill="rgb(226,209,5)" fg:x="2832" fg:w="1"/><text x="98.1076%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (1 samples, 0.03%)</title><rect x="97.8922%" y="277" width="0.0346%" height="15" fill="rgb(250,105,47)" fg:x="2833" fg:w="1"/><text x="98.1422%" y="287.50"></text></g><g><title>chacha20::xchacha::hchacha (14 samples, 0.48%)</title><rect x="97.4775%" y="293" width="0.4838%" height="15" fill="rgb(230,72,3)" fg:x="2821" fg:w="14"/><text x="97.7275%" y="303.50"></text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default (1 samples, 0.03%)</title><rect x="97.9267%" y="277" width="0.0346%" height="15" fill="rgb(232,218,39)" fg:x="2834" fg:w="1"/><text x="98.1767%" y="287.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (1 samples, 0.03%)</title><rect x="97.9267%" y="261" width="0.0346%" height="15" fill="rgb(248,166,6)" fg:x="2834" fg:w="1"/><text x="98.1767%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.03%)</title><rect x="97.9267%" y="245" width="0.0346%" height="15" fill="rgb(247,89,20)" fg:x="2834" fg:w="1"/><text x="98.1767%" y="255.50"></text></g><g><title>&lt;chacha20::xchacha::XChaChaCore&lt;R&gt; as crypto_common::KeyIvInit&gt;::new (20 samples, 0.69%)</title><rect x="97.3393%" y="309" width="0.6911%" height="15" fill="rgb(248,130,54)" fg:x="2817" fg:w="20"/><text x="97.5893%" y="319.50"></text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default (2 samples, 0.07%)</title><rect x="97.9613%" y="293" width="0.0691%" height="15" fill="rgb(234,196,4)" fg:x="2835" fg:w="2"/><text x="98.2113%" y="303.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (2 samples, 0.07%)</title><rect x="97.9613%" y="277" width="0.0691%" height="15" fill="rgb(250,143,31)" fg:x="2835" fg:w="2"/><text x="98.2113%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.07%)</title><rect x="97.9613%" y="261" width="0.0691%" height="15" fill="rgb(211,110,34)" fg:x="2835" fg:w="2"/><text x="98.2113%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.07%)</title><rect x="97.9613%" y="245" width="0.0691%" height="15" fill="rgb(215,124,48)" fg:x="2835" fg:w="2"/><text x="98.2113%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.07%)</title><rect x="97.9613%" y="229" width="0.0691%" height="15" fill="rgb(216,46,13)" fg:x="2835" fg:w="2"/><text x="98.2113%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (1 samples, 0.03%)</title><rect x="97.9959%" y="213" width="0.0346%" height="15" fill="rgb(205,184,25)" fg:x="2836" fg:w="1"/><text x="98.2459%" y="223.50"></text></g><g><title>&lt;cipher::stream_wrapper::StreamCipherCoreWrapper&lt;T&gt; as crypto_common::KeyIvInit&gt;::new (22 samples, 0.76%)</title><rect x="97.3393%" y="325" width="0.7602%" height="15" fill="rgb(228,1,10)" fg:x="2817" fg:w="22"/><text x="97.5893%" y="335.50"></text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default (2 samples, 0.07%)</title><rect x="98.0304%" y="309" width="0.0691%" height="15" fill="rgb(213,116,27)" fg:x="2837" fg:w="2"/><text x="98.2804%" y="319.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (2 samples, 0.07%)</title><rect x="98.0304%" y="293" width="0.0691%" height="15" fill="rgb(241,95,50)" fg:x="2837" fg:w="2"/><text x="98.2804%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.07%)</title><rect x="98.0304%" y="277" width="0.0691%" height="15" fill="rgb(238,48,32)" fg:x="2837" fg:w="2"/><text x="98.2804%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.07%)</title><rect x="98.0304%" y="261" width="0.0691%" height="15" fill="rgb(235,113,49)" fg:x="2837" fg:w="2"/><text x="98.2804%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.07%)</title><rect x="98.0304%" y="245" width="0.0691%" height="15" fill="rgb(205,127,43)" fg:x="2837" fg:w="2"/><text x="98.2804%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (2 samples, 0.07%)</title><rect x="98.0304%" y="229" width="0.0691%" height="15" fill="rgb(250,162,2)" fg:x="2837" fg:w="2"/><text x="98.2804%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (2 samples, 0.07%)</title><rect x="98.0304%" y="213" width="0.0691%" height="15" fill="rgb(220,13,41)" fg:x="2837" fg:w="2"/><text x="98.2804%" y="223.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate::{{closure}} (2 samples, 0.07%)</title><rect x="98.0304%" y="197" width="0.0691%" height="15" fill="rgb(249,221,25)" fg:x="2837" fg:w="2"/><text x="98.2804%" y="207.50"></text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default::{{closure}} (1 samples, 0.03%)</title><rect x="98.0650%" y="181" width="0.0346%" height="15" fill="rgb(215,208,19)" fg:x="2838" fg:w="1"/><text x="98.3150%" y="191.50"></text></g><g><title>&lt;poly1305::Poly1305 as universal_hash::UniversalHash&gt;::finalize (1 samples, 0.03%)</title><rect x="98.0995%" y="309" width="0.0346%" height="15" fill="rgb(236,175,2)" fg:x="2839" fg:w="1"/><text x="98.3495%" y="319.50"></text></g><g><title>&lt;poly1305::backend::autodetect::State as universal_hash::UniversalHash&gt;::finalize (1 samples, 0.03%)</title><rect x="98.0995%" y="293" width="0.0346%" height="15" fill="rgb(241,52,2)" fg:x="2839" fg:w="1"/><text x="98.3495%" y="303.50"></text></g><g><title>poly1305::backend::soft::State::finalize_mut (1 samples, 0.03%)</title><rect x="98.0995%" y="277" width="0.0346%" height="15" fill="rgb(248,140,14)" fg:x="2839" fg:w="1"/><text x="98.3495%" y="287.50"></text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default (1 samples, 0.03%)</title><rect x="98.0995%" y="261" width="0.0346%" height="15" fill="rgb(253,22,42)" fg:x="2839" fg:w="1"/><text x="98.3495%" y="271.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (1 samples, 0.03%)</title><rect x="98.0995%" y="245" width="0.0346%" height="15" fill="rgb(234,61,47)" fg:x="2839" fg:w="1"/><text x="98.3495%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.03%)</title><rect x="98.0995%" y="229" width="0.0346%" height="15" fill="rgb(208,226,15)" fg:x="2839" fg:w="1"/><text x="98.3495%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.03%)</title><rect x="98.0995%" y="213" width="0.0346%" height="15" fill="rgb(217,221,4)" fg:x="2839" fg:w="1"/><text x="98.3495%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.03%)</title><rect x="98.0995%" y="197" width="0.0346%" height="15" fill="rgb(212,174,34)" fg:x="2839" fg:w="1"/><text x="98.3495%" y="207.50"></text></g><g><title>chacha20poly1305::cipher::Cipher&lt;C&gt;::authenticate_lengths (1 samples, 0.03%)</title><rect x="98.1341%" y="309" width="0.0346%" height="15" fill="rgb(253,83,4)" fg:x="2840" fg:w="1"/><text x="98.3841%" y="319.50"></text></g><g><title>universal_hash::UniversalHash::update (1 samples, 0.03%)</title><rect x="98.1341%" y="293" width="0.0346%" height="15" fill="rgb(250,195,49)" fg:x="2840" fg:w="1"/><text x="98.3841%" y="303.50"></text></g><g><title>&lt;poly1305::Poly1305 as universal_hash::UniversalHash&gt;::update_with_backend (1 samples, 0.03%)</title><rect x="98.1341%" y="277" width="0.0346%" height="15" fill="rgb(241,192,25)" fg:x="2840" fg:w="1"/><text x="98.3841%" y="287.50"></text></g><g><title>&lt;poly1305::backend::autodetect::State as universal_hash::UniversalHash&gt;::update_with_backend (1 samples, 0.03%)</title><rect x="98.1341%" y="261" width="0.0346%" height="15" fill="rgb(208,124,10)" fg:x="2840" fg:w="1"/><text x="98.3841%" y="271.50"></text></g><g><title>&lt;universal_hash::UniversalHash::update::Ctx&lt;BS&gt; as universal_hash::UhfClosure&gt;::call (1 samples, 0.03%)</title><rect x="98.1341%" y="245" width="0.0346%" height="15" fill="rgb(222,33,0)" fg:x="2840" fg:w="1"/><text x="98.3841%" y="255.50"></text></g><g><title>&lt;poly1305::backend::soft::State as universal_hash::UhfBackend&gt;::proc_block (1 samples, 0.03%)</title><rect x="98.1341%" y="229" width="0.0346%" height="15" fill="rgb(234,209,28)" fg:x="2840" fg:w="1"/><text x="98.3841%" y="239.50"></text></g><g><title>poly1305::backend::soft::State::compute_block (1 samples, 0.03%)</title><rect x="98.1341%" y="213" width="0.0346%" height="15" fill="rgb(224,11,23)" fg:x="2840" fg:w="1"/><text x="98.3841%" y="223.50"></text></g><g><title>cipher::stream::StreamCipher::apply_keystream (5 samples, 0.17%)</title><rect x="98.1686%" y="309" width="0.1728%" height="15" fill="rgb(232,99,1)" fg:x="2841" fg:w="5"/><text x="98.4186%" y="319.50"></text></g><g><title>cipher::stream::StreamCipher::try_apply_keystream (5 samples, 0.17%)</title><rect x="98.1686%" y="293" width="0.1728%" height="15" fill="rgb(237,95,45)" fg:x="2841" fg:w="5"/><text x="98.4186%" y="303.50"></text></g><g><title>&lt;cipher::stream_wrapper::StreamCipherCoreWrapper&lt;T&gt; as cipher::stream::StreamCipher&gt;::try_apply_keystream_inout (5 samples, 0.17%)</title><rect x="98.1686%" y="277" width="0.1728%" height="15" fill="rgb(208,109,11)" fg:x="2841" fg:w="5"/><text x="98.4186%" y="287.50"></text></g><g><title>cipher::stream_core::StreamCipherCore::write_keystream_block (5 samples, 0.17%)</title><rect x="98.1686%" y="261" width="0.1728%" height="15" fill="rgb(216,190,48)" fg:x="2841" fg:w="5"/><text x="98.4186%" y="271.50"></text></g><g><title>&lt;chacha20::xchacha::XChaChaCore&lt;R&gt; as cipher::stream_core::StreamCipherCore&gt;::process_with_backend (5 samples, 0.17%)</title><rect x="98.1686%" y="245" width="0.1728%" height="15" fill="rgb(251,171,36)" fg:x="2841" fg:w="5"/><text x="98.4186%" y="255.50"></text></g><g><title>&lt;chacha20::ChaChaCore&lt;R&gt; as cipher::stream_core::StreamCipherCore&gt;::process_with_backend (5 samples, 0.17%)</title><rect x="98.1686%" y="229" width="0.1728%" height="15" fill="rgb(230,62,22)" fg:x="2841" fg:w="5"/><text x="98.4186%" y="239.50"></text></g><g><title>chacha20::backends::sse2::inner (5 samples, 0.17%)</title><rect x="98.1686%" y="213" width="0.1728%" height="15" fill="rgb(225,114,35)" fg:x="2841" fg:w="5"/><text x="98.4186%" y="223.50"></text></g><g><title>&lt;cipher::stream_core::WriteBlockCtx&lt;BS&gt; as cipher::stream_core::StreamClosure&gt;::call (5 samples, 0.17%)</title><rect x="98.1686%" y="197" width="0.1728%" height="15" fill="rgb(215,118,42)" fg:x="2841" fg:w="5"/><text x="98.4186%" y="207.50"></text></g><g><title>&lt;chacha20::backends::sse2::Backend&lt;R&gt; as cipher::stream_core::StreamBackend&gt;::gen_ks_block (5 samples, 0.17%)</title><rect x="98.1686%" y="181" width="0.1728%" height="15" fill="rgb(243,119,21)" fg:x="2841" fg:w="5"/><text x="98.4186%" y="191.50"></text></g><g><title>chacha20::backends::sse2::rounds (5 samples, 0.17%)</title><rect x="98.1686%" y="165" width="0.1728%" height="15" fill="rgb(252,177,53)" fg:x="2841" fg:w="5"/><text x="98.4186%" y="175.50"></text></g><g><title>chacha20::backends::sse2::double_quarter_round (5 samples, 0.17%)</title><rect x="98.1686%" y="149" width="0.1728%" height="15" fill="rgb(237,209,29)" fg:x="2841" fg:w="5"/><text x="98.4186%" y="159.50"></text></g><g><title>chacha20::backends::sse2::add_xor_rot (5 samples, 0.17%)</title><rect x="98.1686%" y="133" width="0.1728%" height="15" fill="rgb(212,65,23)" fg:x="2841" fg:w="5"/><text x="98.4186%" y="143.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_add_epi32 (3 samples, 0.10%)</title><rect x="98.2377%" y="117" width="0.1037%" height="15" fill="rgb(230,222,46)" fg:x="2843" fg:w="3"/><text x="98.4877%" y="127.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i32x4 (1 samples, 0.03%)</title><rect x="98.3068%" y="101" width="0.0346%" height="15" fill="rgb(215,135,32)" fg:x="2845" fg:w="1"/><text x="98.5568%" y="111.50"></text></g><g><title>&lt;cipher::stream_wrapper::StreamCipherCoreWrapper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.07%)</title><rect x="98.3414%" y="293" width="0.0691%" height="15" fill="rgb(246,101,22)" fg:x="2846" fg:w="2"/><text x="98.5914%" y="303.50"></text></g><g><title>&lt;[Z] as zeroize::Zeroize&gt;::zeroize (2 samples, 0.07%)</title><rect x="98.3414%" y="277" width="0.0691%" height="15" fill="rgb(206,107,13)" fg:x="2846" fg:w="2"/><text x="98.5914%" y="287.50"></text></g><g><title>zeroize::volatile_set (2 samples, 0.07%)</title><rect x="98.3414%" y="261" width="0.0691%" height="15" fill="rgb(250,100,44)" fg:x="2846" fg:w="2"/><text x="98.5914%" y="271.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.07%)</title><rect x="98.3414%" y="245" width="0.0691%" height="15" fill="rgb(231,147,38)" fg:x="2846" fg:w="2"/><text x="98.5914%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.07%)</title><rect x="98.3414%" y="229" width="0.0691%" height="15" fill="rgb(229,8,40)" fg:x="2846" fg:w="2"/><text x="98.5914%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;cipher::stream_wrapper::StreamCipherCoreWrapper&lt;chacha20::xchacha::XChaChaCore&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;&gt;&gt;&gt; (3 samples, 0.10%)</title><rect x="98.3414%" y="309" width="0.1037%" height="15" fill="rgb(221,135,30)" fg:x="2846" fg:w="3"/><text x="98.5914%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;chacha20::xchacha::XChaChaCore&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="98.4105%" y="293" width="0.0346%" height="15" fill="rgb(249,193,18)" fg:x="2848" fg:w="1"/><text x="98.6605%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;chacha20::ChaChaCore&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="98.4105%" y="277" width="0.0346%" height="15" fill="rgb(209,133,39)" fg:x="2848" fg:w="1"/><text x="98.6605%" y="287.50"></text></g><g><title>&lt;chacha20::ChaChaCore&lt;R&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="98.4105%" y="261" width="0.0346%" height="15" fill="rgb(232,100,14)" fg:x="2848" fg:w="1"/><text x="98.6605%" y="271.50"></text></g><g><title>&lt;[Z: N] as zeroize::Zeroize&gt;::zeroize (1 samples, 0.03%)</title><rect x="98.4105%" y="245" width="0.0346%" height="15" fill="rgb(224,185,1)" fg:x="2848" fg:w="1"/><text x="98.6605%" y="255.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;Z&gt; as zeroize::Zeroize&gt;::zeroize (1 samples, 0.03%)</title><rect x="98.4105%" y="229" width="0.0346%" height="15" fill="rgb(223,139,8)" fg:x="2848" fg:w="1"/><text x="98.6605%" y="239.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="98.4105%" y="213" width="0.0346%" height="15" fill="rgb(232,213,38)" fg:x="2848" fg:w="1"/><text x="98.6605%" y="223.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="98.4105%" y="197" width="0.0346%" height="15" fill="rgb(207,94,22)" fg:x="2848" fg:w="1"/><text x="98.6605%" y="207.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (1 samples, 0.03%)</title><rect x="98.4105%" y="181" width="0.0346%" height="15" fill="rgb(219,183,54)" fg:x="2848" fg:w="1"/><text x="98.6605%" y="191.50"></text></g><g><title>chacha20poly1305::cipher::Cipher&lt;C&gt;::encrypt_in_place_detached (12 samples, 0.41%)</title><rect x="98.0995%" y="325" width="0.4147%" height="15" fill="rgb(216,185,54)" fg:x="2839" fg:w="12"/><text x="98.3495%" y="335.50"></text></g><g><title>universal_hash::UniversalHash::update_padded (2 samples, 0.07%)</title><rect x="98.4451%" y="309" width="0.0691%" height="15" fill="rgb(254,217,39)" fg:x="2849" fg:w="2"/><text x="98.6951%" y="319.50"></text></g><g><title>universal_hash::UniversalHash::update (1 samples, 0.03%)</title><rect x="98.4796%" y="293" width="0.0346%" height="15" fill="rgb(240,178,23)" fg:x="2850" fg:w="1"/><text x="98.7296%" y="303.50"></text></g><g><title>&lt;poly1305::Poly1305 as universal_hash::UniversalHash&gt;::update_with_backend (1 samples, 0.03%)</title><rect x="98.4796%" y="277" width="0.0346%" height="15" fill="rgb(218,11,47)" fg:x="2850" fg:w="1"/><text x="98.7296%" y="287.50"></text></g><g><title>&lt;poly1305::backend::autodetect::State as universal_hash::UniversalHash&gt;::update_with_backend (1 samples, 0.03%)</title><rect x="98.4796%" y="261" width="0.0346%" height="15" fill="rgb(218,51,51)" fg:x="2850" fg:w="1"/><text x="98.7296%" y="271.50"></text></g><g><title>&lt;universal_hash::UniversalHash::update::Ctx&lt;BS&gt; as universal_hash::UhfClosure&gt;::call (1 samples, 0.03%)</title><rect x="98.4796%" y="245" width="0.0346%" height="15" fill="rgb(238,126,27)" fg:x="2850" fg:w="1"/><text x="98.7296%" y="255.50"></text></g><g><title>&lt;poly1305::backend::soft::State as universal_hash::UhfBackend&gt;::proc_block (1 samples, 0.03%)</title><rect x="98.4796%" y="229" width="0.0346%" height="15" fill="rgb(249,202,22)" fg:x="2850" fg:w="1"/><text x="98.7296%" y="239.50"></text></g><g><title>poly1305::backend::soft::State::compute_block (1 samples, 0.03%)</title><rect x="98.4796%" y="213" width="0.0346%" height="15" fill="rgb(254,195,49)" fg:x="2850" fg:w="1"/><text x="98.7296%" y="223.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.03%)</title><rect x="98.5142%" y="277" width="0.0346%" height="15" fill="rgb(208,123,14)" fg:x="2851" fg:w="1"/><text x="98.7642%" y="287.50"></text></g><g><title>&lt;[Z] as zeroize::Zeroize&gt;::zeroize (3 samples, 0.10%)</title><rect x="98.5142%" y="309" width="0.1037%" height="15" fill="rgb(224,200,8)" fg:x="2851" fg:w="3"/><text x="98.7642%" y="319.50"></text></g><g><title>zeroize::volatile_set (3 samples, 0.10%)</title><rect x="98.5142%" y="293" width="0.1037%" height="15" fill="rgb(217,61,36)" fg:x="2851" fg:w="3"/><text x="98.7642%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.07%)</title><rect x="98.5487%" y="277" width="0.0691%" height="15" fill="rgb(206,35,45)" fg:x="2852" fg:w="2"/><text x="98.7987%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.07%)</title><rect x="98.5487%" y="261" width="0.0691%" height="15" fill="rgb(217,65,33)" fg:x="2852" fg:w="2"/><text x="98.7987%" y="271.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for &amp;[T: N]&gt;::try_from (1 samples, 0.03%)</title><rect x="98.6524%" y="229" width="0.0346%" height="15" fill="rgb(222,158,48)" fg:x="2855" fg:w="1"/><text x="98.9024%" y="239.50"></text></g><g><title>&lt;poly1305::Poly1305 as crypto_common::KeyInit&gt;::new (3 samples, 0.10%)</title><rect x="98.6178%" y="309" width="0.1037%" height="15" fill="rgb(254,2,54)" fg:x="2854" fg:w="3"/><text x="98.8678%" y="319.50"></text></g><g><title>poly1305::backend::autodetect::State::new (3 samples, 0.10%)</title><rect x="98.6178%" y="293" width="0.1037%" height="15" fill="rgb(250,143,38)" fg:x="2854" fg:w="3"/><text x="98.8678%" y="303.50"></text></g><g><title>poly1305::backend::soft::State::new (3 samples, 0.10%)</title><rect x="98.6178%" y="277" width="0.1037%" height="15" fill="rgb(248,25,0)" fg:x="2854" fg:w="3"/><text x="98.8678%" y="287.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (2 samples, 0.07%)</title><rect x="98.6524%" y="261" width="0.0691%" height="15" fill="rgb(206,152,27)" fg:x="2855" fg:w="2"/><text x="98.9024%" y="271.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (2 samples, 0.07%)</title><rect x="98.6524%" y="245" width="0.0691%" height="15" fill="rgb(240,77,30)" fg:x="2855" fg:w="2"/><text x="98.9024%" y="255.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.03%)</title><rect x="98.6869%" y="229" width="0.0346%" height="15" fill="rgb(231,5,3)" fg:x="2856" fg:w="1"/><text x="98.9369%" y="239.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="98.7215%" y="309" width="0.0346%" height="15" fill="rgb(207,226,32)" fg:x="2857" fg:w="1"/><text x="98.9715%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_add_epi32 (1 samples, 0.03%)</title><rect x="98.8252%" y="117" width="0.0346%" height="15" fill="rgb(222,207,47)" fg:x="2860" fg:w="1"/><text x="99.0752%" y="127.50"></text></g><g><title>chacha20::backends::sse2::double_quarter_round (4 samples, 0.14%)</title><rect x="98.7560%" y="149" width="0.1382%" height="15" fill="rgb(229,115,45)" fg:x="2858" fg:w="4"/><text x="99.0060%" y="159.50"></text></g><g><title>chacha20::backends::sse2::add_xor_rot (4 samples, 0.14%)</title><rect x="98.7560%" y="133" width="0.1382%" height="15" fill="rgb(224,191,6)" fg:x="2858" fg:w="4"/><text x="99.0060%" y="143.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_xor_si128 (1 samples, 0.03%)</title><rect x="98.8597%" y="117" width="0.0346%" height="15" fill="rgb(230,227,24)" fg:x="2861" fg:w="1"/><text x="99.1097%" y="127.50"></text></g><g><title>cipher::stream_core::StreamCipherCore::write_keystream_block (6 samples, 0.21%)</title><rect x="98.7560%" y="261" width="0.2073%" height="15" fill="rgb(228,80,19)" fg:x="2858" fg:w="6"/><text x="99.0060%" y="271.50"></text></g><g><title>&lt;chacha20::xchacha::XChaChaCore&lt;R&gt; as cipher::stream_core::StreamCipherCore&gt;::process_with_backend (6 samples, 0.21%)</title><rect x="98.7560%" y="245" width="0.2073%" height="15" fill="rgb(247,229,0)" fg:x="2858" fg:w="6"/><text x="99.0060%" y="255.50"></text></g><g><title>&lt;chacha20::ChaChaCore&lt;R&gt; as cipher::stream_core::StreamCipherCore&gt;::process_with_backend (6 samples, 0.21%)</title><rect x="98.7560%" y="229" width="0.2073%" height="15" fill="rgb(237,194,15)" fg:x="2858" fg:w="6"/><text x="99.0060%" y="239.50"></text></g><g><title>chacha20::backends::sse2::inner (6 samples, 0.21%)</title><rect x="98.7560%" y="213" width="0.2073%" height="15" fill="rgb(219,203,20)" fg:x="2858" fg:w="6"/><text x="99.0060%" y="223.50"></text></g><g><title>&lt;cipher::stream_core::WriteBlockCtx&lt;BS&gt; as cipher::stream_core::StreamClosure&gt;::call (6 samples, 0.21%)</title><rect x="98.7560%" y="197" width="0.2073%" height="15" fill="rgb(234,128,8)" fg:x="2858" fg:w="6"/><text x="99.0060%" y="207.50"></text></g><g><title>&lt;chacha20::backends::sse2::Backend&lt;R&gt; as cipher::stream_core::StreamBackend&gt;::gen_ks_block (6 samples, 0.21%)</title><rect x="98.7560%" y="181" width="0.2073%" height="15" fill="rgb(248,202,8)" fg:x="2858" fg:w="6"/><text x="99.0060%" y="191.50"></text></g><g><title>chacha20::backends::sse2::rounds (6 samples, 0.21%)</title><rect x="98.7560%" y="165" width="0.2073%" height="15" fill="rgb(206,104,37)" fg:x="2858" fg:w="6"/><text x="99.0060%" y="175.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.07%)</title><rect x="98.8943%" y="149" width="0.0691%" height="15" fill="rgb(223,8,27)" fg:x="2862" fg:w="2"/><text x="99.1443%" y="159.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.07%)</title><rect x="98.8943%" y="133" width="0.0691%" height="15" fill="rgb(216,217,28)" fg:x="2862" fg:w="2"/><text x="99.1443%" y="143.50"></text></g><g><title>core::mem::replace (1 samples, 0.03%)</title><rect x="98.9288%" y="117" width="0.0346%" height="15" fill="rgb(249,199,1)" fg:x="2863" fg:w="1"/><text x="99.1788%" y="127.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="98.9288%" y="101" width="0.0346%" height="15" fill="rgb(240,85,17)" fg:x="2863" fg:w="1"/><text x="99.1788%" y="111.50"></text></g><g><title>inout::inout_buf::InOutBuf&lt;T&gt;::into_chunks (1 samples, 0.03%)</title><rect x="98.9634%" y="261" width="0.0346%" height="15" fill="rgb(206,108,45)" fg:x="2864" fg:w="1"/><text x="99.2134%" y="271.50"></text></g><g><title>inout::inout_buf::InOutBuf&lt;T&gt;::len (1 samples, 0.03%)</title><rect x="98.9634%" y="245" width="0.0346%" height="15" fill="rgb(245,210,41)" fg:x="2864" fg:w="1"/><text x="99.2134%" y="255.50"></text></g><g><title>cipher::stream::StreamCipher::apply_keystream (8 samples, 0.28%)</title><rect x="98.7560%" y="309" width="0.2764%" height="15" fill="rgb(206,13,37)" fg:x="2858" fg:w="8"/><text x="99.0060%" y="319.50"></text></g><g><title>cipher::stream::StreamCipher::try_apply_keystream (8 samples, 0.28%)</title><rect x="98.7560%" y="293" width="0.2764%" height="15" fill="rgb(250,61,18)" fg:x="2858" fg:w="8"/><text x="99.0060%" y="303.50"></text></g><g><title>&lt;cipher::stream_wrapper::StreamCipherCoreWrapper&lt;T&gt; as cipher::stream::StreamCipher&gt;::try_apply_keystream_inout (8 samples, 0.28%)</title><rect x="98.7560%" y="277" width="0.2764%" height="15" fill="rgb(235,172,48)" fg:x="2858" fg:w="8"/><text x="99.0060%" y="287.50"></text></g><g><title>inout::inout_buf::InOutBuf&lt;u8&gt;::xor_in2out (1 samples, 0.03%)</title><rect x="98.9979%" y="261" width="0.0346%" height="15" fill="rgb(249,201,17)" fg:x="2865" fg:w="1"/><text x="99.2479%" y="271.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.03%)</title><rect x="98.9979%" y="245" width="0.0346%" height="15" fill="rgb(219,208,6)" fg:x="2865" fg:w="1"/><text x="99.2479%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.03%)</title><rect x="98.9979%" y="229" width="0.0346%" height="15" fill="rgb(248,31,23)" fg:x="2865" fg:w="1"/><text x="99.2479%" y="239.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1 samples, 0.03%)</title><rect x="98.9979%" y="213" width="0.0346%" height="15" fill="rgb(245,15,42)" fg:x="2865" fg:w="1"/><text x="99.2479%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.07%)</title><rect x="99.0325%" y="277" width="0.0691%" height="15" fill="rgb(222,217,39)" fg:x="2866" fg:w="2"/><text x="99.2825%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.07%)</title><rect x="99.0325%" y="261" width="0.0691%" height="15" fill="rgb(210,219,27)" fg:x="2866" fg:w="2"/><text x="99.2825%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.07%)</title><rect x="99.0325%" y="245" width="0.0691%" height="15" fill="rgb(252,166,36)" fg:x="2866" fg:w="2"/><text x="99.2825%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (2 samples, 0.07%)</title><rect x="99.0325%" y="229" width="0.0691%" height="15" fill="rgb(245,132,34)" fg:x="2866" fg:w="2"/><text x="99.2825%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.03%)</title><rect x="99.0670%" y="213" width="0.0346%" height="15" fill="rgb(236,54,3)" fg:x="2867" fg:w="1"/><text x="99.3170%" y="223.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate::{{closure}} (1 samples, 0.03%)</title><rect x="99.0670%" y="197" width="0.0346%" height="15" fill="rgb(241,173,43)" fg:x="2867" fg:w="1"/><text x="99.3170%" y="207.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="99.0670%" y="181" width="0.0346%" height="15" fill="rgb(215,190,9)" fg:x="2867" fg:w="1"/><text x="99.3170%" y="191.50"></text></g><g><title>aead::AeadInPlace::encrypt_in_place (52 samples, 1.80%)</title><rect x="97.3393%" y="357" width="1.7968%" height="15" fill="rgb(242,101,16)" fg:x="2817" fg:w="52"/><text x="97.5893%" y="367.50">a..</text></g><g><title>&lt;chacha20poly1305::ChaChaPoly1305&lt;C,N&gt; as aead::AeadInPlace&gt;::encrypt_in_place_detached (52 samples, 1.80%)</title><rect x="97.3393%" y="341" width="1.7968%" height="15" fill="rgb(223,190,21)" fg:x="2817" fg:w="52"/><text x="97.5893%" y="351.50">&lt;..</text></g><g><title>chacha20poly1305::cipher::Cipher&lt;C&gt;::new (18 samples, 0.62%)</title><rect x="98.5142%" y="325" width="0.6220%" height="15" fill="rgb(215,228,25)" fg:x="2851" fg:w="18"/><text x="98.7642%" y="335.50"></text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default (3 samples, 0.10%)</title><rect x="99.0325%" y="309" width="0.1037%" height="15" fill="rgb(225,36,22)" fg:x="2866" fg:w="3"/><text x="99.2825%" y="319.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (3 samples, 0.10%)</title><rect x="99.0325%" y="293" width="0.1037%" height="15" fill="rgb(251,106,46)" fg:x="2866" fg:w="3"/><text x="99.2825%" y="303.50"></text></g><g><title>generic_array::ArrayBuilder&lt;T,N&gt;::into_inner (1 samples, 0.03%)</title><rect x="99.1016%" y="277" width="0.0346%" height="15" fill="rgb(208,90,1)" fg:x="2868" fg:w="1"/><text x="99.3516%" y="287.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (1 samples, 0.03%)</title><rect x="99.1016%" y="261" width="0.0346%" height="15" fill="rgb(243,10,4)" fg:x="2868" fg:w="1"/><text x="99.3516%" y="271.50"></text></g><g><title>&lt;tftp::socket::EncryptionBoundSocket&lt;S&gt; as tftp::socket::Socket&gt;::send_to (53 samples, 1.83%)</title><rect x="97.3393%" y="389" width="1.8314%" height="15" fill="rgb(212,137,27)" fg:x="2817" fg:w="53"/><text x="97.5893%" y="399.50">&lt;..</text></g><g><title>tftp::encryption::Encryptor::encrypt (53 samples, 1.83%)</title><rect x="97.3393%" y="373" width="1.8314%" height="15" fill="rgb(231,220,49)" fg:x="2817" fg:w="53"/><text x="97.5893%" y="383.50">t..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.03%)</title><rect x="99.1361%" y="357" width="0.0346%" height="15" fill="rgb(237,96,20)" fg:x="2869" fg:w="1"/><text x="99.3861%" y="367.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="99.2053%" y="373" width="0.0346%" height="15" fill="rgb(239,229,30)" fg:x="2871" fg:w="1"/><text x="99.4553%" y="383.50"></text></g><g><title>&lt;tftp::io::StdCompatFile as tftp::std_compat::io::Write&gt;::write (1 samples, 0.03%)</title><rect x="99.2398%" y="373" width="0.0346%" height="15" fill="rgb(219,65,33)" fg:x="2872" fg:w="1"/><text x="99.4898%" y="383.50"></text></g><g><title>tftp::map::Map&lt;K,V,_&gt;::get (1 samples, 0.03%)</title><rect x="99.2744%" y="373" width="0.0346%" height="15" fill="rgb(243,134,7)" fg:x="2873" fg:w="1"/><text x="99.5244%" y="383.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="99.2744%" y="357" width="0.0346%" height="15" fill="rgb(216,177,54)" fg:x="2873" fg:w="1"/><text x="99.5244%" y="367.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::as_slice (1 samples, 0.03%)</title><rect x="99.2744%" y="341" width="0.0346%" height="15" fill="rgb(211,160,20)" fg:x="2873" fg:w="1"/><text x="99.5244%" y="351.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::as_slice (1 samples, 0.03%)</title><rect x="99.2744%" y="325" width="0.0346%" height="15" fill="rgb(239,85,39)" fg:x="2873" fg:w="1"/><text x="99.5244%" y="335.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.03%)</title><rect x="99.2744%" y="309" width="0.0346%" height="15" fill="rgb(232,125,22)" fg:x="2873" fg:w="1"/><text x="99.5244%" y="319.50"></text></g><g><title>core::ptr::slice_from_raw_parts (1 samples, 0.03%)</title><rect x="99.2744%" y="293" width="0.0346%" height="15" fill="rgb(244,57,34)" fg:x="2873" fg:w="1"/><text x="99.5244%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (1 samples, 0.03%)</title><rect x="99.3780%" y="357" width="0.0346%" height="15" fill="rgb(214,203,32)" fg:x="2876" fg:w="1"/><text x="99.6280%" y="367.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.07%)</title><rect x="99.4126%" y="325" width="0.0691%" height="15" fill="rgb(207,58,43)" fg:x="2877" fg:w="2"/><text x="99.6626%" y="335.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::as_slice (2 samples, 0.07%)</title><rect x="99.4126%" y="309" width="0.0691%" height="15" fill="rgb(215,193,15)" fg:x="2877" fg:w="2"/><text x="99.6626%" y="319.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::as_slice (2 samples, 0.07%)</title><rect x="99.4126%" y="293" width="0.0691%" height="15" fill="rgb(232,15,44)" fg:x="2877" fg:w="2"/><text x="99.6626%" y="303.50"></text></g><g><title>tftp::map::Map&lt;K,V,_&gt;::remove (6 samples, 0.21%)</title><rect x="99.3089%" y="373" width="0.2073%" height="15" fill="rgb(212,3,48)" fg:x="2874" fg:w="6"/><text x="99.5589%" y="383.50"></text></g><g><title>tftp::map::Map&lt;K,V,_&gt;::iter (3 samples, 0.10%)</title><rect x="99.4126%" y="357" width="0.1037%" height="15" fill="rgb(218,128,7)" fg:x="2877" fg:w="3"/><text x="99.6626%" y="367.50"></text></g><g><title>&lt;&amp;tftp::map::Map&lt;K,V,_&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (3 samples, 0.10%)</title><rect x="99.4126%" y="341" width="0.1037%" height="15" fill="rgb(226,216,39)" fg:x="2877" fg:w="3"/><text x="99.6626%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (1 samples, 0.03%)</title><rect x="99.4817%" y="325" width="0.0346%" height="15" fill="rgb(243,47,51)" fg:x="2879" fg:w="1"/><text x="99.7317%" y="335.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (1 samples, 0.03%)</title><rect x="99.4817%" y="309" width="0.0346%" height="15" fill="rgb(241,183,40)" fg:x="2879" fg:w="1"/><text x="99.7317%" y="319.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (1 samples, 0.03%)</title><rect x="99.4817%" y="293" width="0.0346%" height="15" fill="rgb(231,217,32)" fg:x="2879" fg:w="1"/><text x="99.7317%" y="303.50"></text></g><g><title>&lt;tftp::storage::FileWriter&lt;T&gt; as tftp::storage::BlockWriter&gt;::write_block (11 samples, 0.38%)</title><rect x="99.1707%" y="389" width="0.3801%" height="15" fill="rgb(229,61,38)" fg:x="2870" fg:w="11"/><text x="99.4207%" y="399.50"></text></g><g><title>tftp::storage::BlockMapper::index (1 samples, 0.03%)</title><rect x="99.5162%" y="373" width="0.0346%" height="15" fill="rgb(225,210,5)" fg:x="2880" fg:w="1"/><text x="99.7662%" y="383.50"></text></g><g><title>tftp::client::client::write_block (66 samples, 2.28%)</title><rect x="97.3048%" y="405" width="2.2806%" height="15" fill="rgb(231,79,45)" fg:x="2816" fg:w="66"/><text x="97.5548%" y="415.50">t..</text></g><g><title>log::max_level (1 samples, 0.03%)</title><rect x="99.5508%" y="389" width="0.0346%" height="15" fill="rgb(224,100,7)" fg:x="2881" fg:w="1"/><text x="99.8008%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.03%)</title><rect x="99.5508%" y="373" width="0.0346%" height="15" fill="rgb(241,198,18)" fg:x="2881" fg:w="1"/><text x="99.8008%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.03%)</title><rect x="99.5508%" y="357" width="0.0346%" height="15" fill="rgb(252,97,53)" fg:x="2881" fg:w="1"/><text x="99.8008%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.07%)</title><rect x="99.6545%" y="373" width="0.0691%" height="15" fill="rgb(220,88,7)" fg:x="2884" fg:w="2"/><text x="99.9045%" y="383.50"></text></g><g><title>tftp::instant_callback::{{closure}} (2 samples, 0.07%)</title><rect x="99.6545%" y="357" width="0.0691%" height="15" fill="rgb(213,176,14)" fg:x="2884" fg:w="2"/><text x="99.9045%" y="367.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.03%)</title><rect x="99.6890%" y="341" width="0.0346%" height="15" fill="rgb(246,73,7)" fg:x="2885" fg:w="1"/><text x="99.9390%" y="351.50"></text></g><g><title>clock_gettime (1 samples, 0.03%)</title><rect x="99.6890%" y="325" width="0.0346%" height="15" fill="rgb(245,64,36)" fg:x="2885" fg:w="1"/><text x="99.9390%" y="335.50"></text></g><g><title>tftp::instant_callback (5 samples, 0.17%)</title><rect x="99.5853%" y="405" width="0.1728%" height="15" fill="rgb(245,80,10)" fg:x="2882" fg:w="5"/><text x="99.8353%" y="415.50"></text></g><g><title>tftp::std_compat::time::Instant::from_time (4 samples, 0.14%)</title><rect x="99.6199%" y="389" width="0.1382%" height="15" fill="rgb(232,107,50)" fg:x="2883" fg:w="4"/><text x="99.8699%" y="399.50"></text></g><g><title>core::time::Duration::from_micros (1 samples, 0.03%)</title><rect x="99.7236%" y="373" width="0.0346%" height="15" fill="rgb(253,3,0)" fg:x="2886" fg:w="1"/><text x="99.9736%" y="383.50"></text></g><g><title>core::time::Duration::new (1 samples, 0.03%)</title><rect x="99.7236%" y="357" width="0.0346%" height="15" fill="rgb(212,99,53)" fg:x="2886" fg:w="1"/><text x="99.9736%" y="367.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.03%)</title><rect x="99.8272%" y="373" width="0.0346%" height="15" fill="rgb(249,111,54)" fg:x="2889" fg:w="1"/><text x="100.0772%" y="383.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (1 samples, 0.03%)</title><rect x="99.8272%" y="357" width="0.0346%" height="15" fill="rgb(249,55,30)" fg:x="2889" fg:w="1"/><text x="100.0772%" y="367.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="99.8618%" y="373" width="0.0346%" height="15" fill="rgb(237,47,42)" fg:x="2890" fg:w="1"/><text x="100.1118%" y="383.50"></text></g><g><title>tftp::packet::PacketType::from_bytes (6 samples, 0.21%)</title><rect x="99.7581%" y="405" width="0.2073%" height="15" fill="rgb(211,20,18)" fg:x="2887" fg:w="6"/><text x="100.0081%" y="415.50"></text></g><g><title>tftp::packet::try_from (4 samples, 0.14%)</title><rect x="99.8272%" y="389" width="0.1382%" height="15" fill="rgb(231,203,46)" fg:x="2889" fg:w="4"/><text x="100.0772%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (2 samples, 0.07%)</title><rect x="99.8963%" y="373" width="0.0691%" height="15" fill="rgb(237,142,3)" fg:x="2891" fg:w="2"/><text x="100.1463%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;tftp::error::PacketError&gt; (1 samples, 0.03%)</title><rect x="99.9309%" y="357" width="0.0346%" height="15" fill="rgb(241,107,1)" fg:x="2892" fg:w="1"/><text x="100.1809%" y="367.50"></text></g><g><title>all (2,894 samples, 100%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(229,83,13)" fg:x="0" fg:w="2894"/><text x="0.2500%" y="479.50"></text></g><g><title>tftp (2,894 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(241,91,40)" fg:x="0" fg:w="2894"/><text x="0.2500%" y="463.50">tftp</text></g><g><title>[unknown] (2,887 samples, 99.76%)</title><rect x="0.2419%" y="437" width="99.7581%" height="15" fill="rgb(225,3,45)" fg:x="7" fg:w="2887"/><text x="0.4919%" y="447.50">[unknown]</text></g><g><title>tftp::client::client::receive_file (2,880 samples, 99.52%)</title><rect x="0.4838%" y="421" width="99.5162%" height="15" fill="rgb(244,223,14)" fg:x="14" fg:w="2880"/><text x="0.7338%" y="431.50">tftp::client::client::receive_file</text></g><g><title>tftp::std_compat::time::Instant::elapsed (1 samples, 0.03%)</title><rect x="99.9654%" y="405" width="0.0346%" height="15" fill="rgb(224,124,37)" fg:x="2893" fg:w="1"/><text x="100.2154%" y="415.50"></text></g><g><title>core::time::Duration::from_micros (1 samples, 0.03%)</title><rect x="99.9654%" y="389" width="0.0346%" height="15" fill="rgb(251,171,30)" fg:x="2893" fg:w="1"/><text x="100.2154%" y="399.50"></text></g><g><title>core::time::Duration::new (1 samples, 0.03%)</title><rect x="99.9654%" y="373" width="0.0346%" height="15" fill="rgb(236,46,54)" fg:x="2893" fg:w="1"/><text x="100.2154%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::checked_add (1 samples, 0.03%)</title><rect x="99.9654%" y="357" width="0.0346%" height="15" fill="rgb(245,213,5)" fg:x="2893" fg:w="1"/><text x="100.2154%" y="367.50"></text></g></svg></svg>