<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="614" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="597.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="597.00"> </text><svg id="frames" x="10" width="1180" total_samples="303"><g><title>[[stack]] (1 samples, 0.33%)</title><rect x="0.0000%" y="533" width="0.3300%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="543.50"></text></g><g><title>recvfrom (1 samples, 0.33%)</title><rect x="0.0000%" y="517" width="0.3300%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="0.0000%" y="501" width="0.3300%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="511.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.66%)</title><rect x="1.6502%" y="517" width="0.6601%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="2"/><text x="1.9002%" y="527.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.66%)</title><rect x="1.6502%" y="501" width="0.6601%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="2"/><text x="1.9002%" y="511.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.66%)</title><rect x="1.6502%" y="485" width="0.6601%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="2"/><text x="1.9002%" y="495.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.33%)</title><rect x="1.9802%" y="469" width="0.3300%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="1"/><text x="2.2302%" y="479.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.33%)</title><rect x="1.9802%" y="453" width="0.3300%" height="15" fill="rgb(228,23,34)" fg:x="6" fg:w="1"/><text x="2.2302%" y="463.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.33%)</title><rect x="1.9802%" y="437" width="0.3300%" height="15" fill="rgb(218,30,26)" fg:x="6" fg:w="1"/><text x="2.2302%" y="447.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.33%)</title><rect x="1.9802%" y="421" width="0.3300%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="1"/><text x="2.2302%" y="431.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.33%)</title><rect x="1.9802%" y="405" width="0.3300%" height="15" fill="rgb(250,228,42)" fg:x="6" fg:w="1"/><text x="2.2302%" y="415.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.33%)</title><rect x="1.9802%" y="389" width="0.3300%" height="15" fill="rgb(240,193,28)" fg:x="6" fg:w="1"/><text x="2.2302%" y="399.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 2.31%)</title><rect x="0.3300%" y="533" width="2.3102%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="7"/><text x="0.5800%" y="543.50">[..</text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="2.3102%" y="517" width="0.3300%" height="15" fill="rgb(206,188,39)" fg:x="7" fg:w="1"/><text x="2.5602%" y="527.50"></text></g><g><title>&lt;tftp::cli::ClientCliConfig as clap::derive::Args&gt;::augment_args (1 samples, 0.33%)</title><rect x="2.6403%" y="517" width="0.3300%" height="15" fill="rgb(217,207,13)" fg:x="8" fg:w="1"/><text x="2.8903%" y="527.50"></text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.33%)</title><rect x="2.6403%" y="501" width="0.3300%" height="15" fill="rgb(231,73,38)" fg:x="8" fg:w="1"/><text x="2.8903%" y="511.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (1 samples, 0.33%)</title><rect x="2.6403%" y="485" width="0.3300%" height="15" fill="rgb(225,20,46)" fg:x="8" fg:w="1"/><text x="2.8903%" y="495.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (1 samples, 0.33%)</title><rect x="2.6403%" y="469" width="0.3300%" height="15" fill="rgb(210,31,41)" fg:x="8" fg:w="1"/><text x="2.8903%" y="479.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1 samples, 0.33%)</title><rect x="2.6403%" y="453" width="0.3300%" height="15" fill="rgb(221,200,47)" fg:x="8" fg:w="1"/><text x="2.8903%" y="463.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get (1 samples, 0.33%)</title><rect x="2.6403%" y="437" width="0.3300%" height="15" fill="rgb(226,26,5)" fg:x="8" fg:w="1"/><text x="2.8903%" y="447.50"></text></g><g><title>[libc.so.6] (1 samples, 0.33%)</title><rect x="2.9703%" y="517" width="0.3300%" height="15" fill="rgb(249,33,26)" fg:x="9" fg:w="1"/><text x="3.2203%" y="527.50"></text></g><g><title>main (1 samples, 0.33%)</title><rect x="2.9703%" y="501" width="0.3300%" height="15" fill="rgb(235,183,28)" fg:x="9" fg:w="1"/><text x="3.2203%" y="511.50"></text></g><g><title>std::rt::lang_start (1 samples, 0.33%)</title><rect x="2.9703%" y="485" width="0.3300%" height="15" fill="rgb(221,5,38)" fg:x="9" fg:w="1"/><text x="3.2203%" y="495.50"></text></g><g><title>std::rt::lang_start_internal (1 samples, 0.33%)</title><rect x="2.9703%" y="469" width="0.3300%" height="15" fill="rgb(247,18,42)" fg:x="9" fg:w="1"/><text x="3.2203%" y="479.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.33%)</title><rect x="2.9703%" y="453" width="0.3300%" height="15" fill="rgb(241,131,45)" fg:x="9" fg:w="1"/><text x="3.2203%" y="463.50"></text></g><g><title>std::panicking::try (1 samples, 0.33%)</title><rect x="2.9703%" y="437" width="0.3300%" height="15" fill="rgb(249,31,29)" fg:x="9" fg:w="1"/><text x="3.2203%" y="447.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.33%)</title><rect x="2.9703%" y="421" width="0.3300%" height="15" fill="rgb(225,111,53)" fg:x="9" fg:w="1"/><text x="3.2203%" y="431.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (1 samples, 0.33%)</title><rect x="2.9703%" y="405" width="0.3300%" height="15" fill="rgb(238,160,17)" fg:x="9" fg:w="1"/><text x="3.2203%" y="415.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.33%)</title><rect x="2.9703%" y="389" width="0.3300%" height="15" fill="rgb(214,148,48)" fg:x="9" fg:w="1"/><text x="3.2203%" y="399.50"></text></g><g><title>std::panicking::try (1 samples, 0.33%)</title><rect x="2.9703%" y="373" width="0.3300%" height="15" fill="rgb(232,36,49)" fg:x="9" fg:w="1"/><text x="3.2203%" y="383.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.33%)</title><rect x="2.9703%" y="357" width="0.3300%" height="15" fill="rgb(209,103,24)" fg:x="9" fg:w="1"/><text x="3.2203%" y="367.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1 samples, 0.33%)</title><rect x="2.9703%" y="341" width="0.3300%" height="15" fill="rgb(229,88,8)" fg:x="9" fg:w="1"/><text x="3.2203%" y="351.50"></text></g><g><title>std::rt::lang_start::{{closure}} (1 samples, 0.33%)</title><rect x="2.9703%" y="325" width="0.3300%" height="15" fill="rgb(213,181,19)" fg:x="9" fg:w="1"/><text x="3.2203%" y="335.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.33%)</title><rect x="2.9703%" y="309" width="0.3300%" height="15" fill="rgb(254,191,54)" fg:x="9" fg:w="1"/><text x="3.2203%" y="319.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.33%)</title><rect x="2.9703%" y="293" width="0.3300%" height="15" fill="rgb(241,83,37)" fg:x="9" fg:w="1"/><text x="3.2203%" y="303.50"></text></g><g><title>tftp::main (1 samples, 0.33%)</title><rect x="2.9703%" y="277" width="0.3300%" height="15" fill="rgb(233,36,39)" fg:x="9" fg:w="1"/><text x="3.2203%" y="287.50"></text></g><g><title>tftp::server::server::server (1 samples, 0.33%)</title><rect x="2.9703%" y="261" width="0.3300%" height="15" fill="rgb(226,3,54)" fg:x="9" fg:w="1"/><text x="3.2203%" y="271.50"></text></g><g><title>tftp::server::server::write_block (1 samples, 0.33%)</title><rect x="2.9703%" y="245" width="0.3300%" height="15" fill="rgb(245,192,40)" fg:x="9" fg:w="1"/><text x="3.2203%" y="255.50"></text></g><g><title>tftp::server::connection::Connection&lt;R,W,S&gt;::send_packet (1 samples, 0.33%)</title><rect x="2.9703%" y="229" width="0.3300%" height="15" fill="rgb(238,167,29)" fg:x="9" fg:w="1"/><text x="3.2203%" y="239.50"></text></g><g><title>&lt;tftp::socket::StdSocket as tftp::socket::Socket&gt;::send_to (1 samples, 0.33%)</title><rect x="2.9703%" y="213" width="0.3300%" height="15" fill="rgb(232,182,51)" fg:x="9" fg:w="1"/><text x="3.2203%" y="223.50"></text></g><g><title>tftp::socket::socket_addr_to_std (1 samples, 0.33%)</title><rect x="2.9703%" y="197" width="0.3300%" height="15" fill="rgb(231,60,39)" fg:x="9" fg:w="1"/><text x="3.2203%" y="207.50"></text></g><g><title>std::net::socket_addr::SocketAddrV4::new (1 samples, 0.33%)</title><rect x="2.9703%" y="181" width="0.3300%" height="15" fill="rgb(208,69,12)" fg:x="9" fg:w="1"/><text x="3.2203%" y="191.50"></text></g><g><title>&lt;tftp::socket::StdSocket as tftp::socket::Socket&gt;::recv_from (2 samples, 0.66%)</title><rect x="3.3003%" y="229" width="0.6601%" height="15" fill="rgb(235,93,37)" fg:x="10" fg:w="2"/><text x="3.5503%" y="239.50"></text></g><g><title>polling::Poller::wait (2 samples, 0.66%)</title><rect x="3.3003%" y="213" width="0.6601%" height="15" fill="rgb(213,116,39)" fg:x="10" fg:w="2"/><text x="3.5503%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2 samples, 0.66%)</title><rect x="3.3003%" y="197" width="0.6601%" height="15" fill="rgb(222,207,29)" fg:x="10" fg:w="2"/><text x="3.5503%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.66%)</title><rect x="3.3003%" y="181" width="0.6601%" height="15" fill="rgb(206,96,30)" fg:x="10" fg:w="2"/><text x="3.5503%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (2 samples, 0.66%)</title><rect x="3.3003%" y="165" width="0.6601%" height="15" fill="rgb(218,138,4)" fg:x="10" fg:w="2"/><text x="3.5503%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.66%)</title><rect x="3.3003%" y="149" width="0.6601%" height="15" fill="rgb(250,191,14)" fg:x="10" fg:w="2"/><text x="3.5503%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.66%)</title><rect x="3.3003%" y="133" width="0.6601%" height="15" fill="rgb(239,60,40)" fg:x="10" fg:w="2"/><text x="3.5503%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.66%)</title><rect x="3.3003%" y="117" width="0.6601%" height="15" fill="rgb(206,27,48)" fg:x="10" fg:w="2"/><text x="3.5503%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.66%)</title><rect x="3.3003%" y="101" width="0.6601%" height="15" fill="rgb(225,35,8)" fg:x="10" fg:w="2"/><text x="3.5503%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.66%)</title><rect x="3.3003%" y="85" width="0.6601%" height="15" fill="rgb(250,213,24)" fg:x="10" fg:w="2"/><text x="3.5503%" y="95.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.33%)</title><rect x="3.6304%" y="69" width="0.3300%" height="15" fill="rgb(247,123,22)" fg:x="11" fg:w="1"/><text x="3.8804%" y="79.50"></text></g><g><title>__libc_start_main (3 samples, 0.99%)</title><rect x="3.3003%" y="517" width="0.9901%" height="15" fill="rgb(231,138,38)" fg:x="10" fg:w="3"/><text x="3.5503%" y="527.50"></text></g><g><title>[libc.so.6] (3 samples, 0.99%)</title><rect x="3.3003%" y="501" width="0.9901%" height="15" fill="rgb(231,145,46)" fg:x="10" fg:w="3"/><text x="3.5503%" y="511.50"></text></g><g><title>main (3 samples, 0.99%)</title><rect x="3.3003%" y="485" width="0.9901%" height="15" fill="rgb(251,118,11)" fg:x="10" fg:w="3"/><text x="3.5503%" y="495.50"></text></g><g><title>std::rt::lang_start (3 samples, 0.99%)</title><rect x="3.3003%" y="469" width="0.9901%" height="15" fill="rgb(217,147,25)" fg:x="10" fg:w="3"/><text x="3.5503%" y="479.50"></text></g><g><title>std::rt::lang_start_internal (3 samples, 0.99%)</title><rect x="3.3003%" y="453" width="0.9901%" height="15" fill="rgb(247,81,37)" fg:x="10" fg:w="3"/><text x="3.5503%" y="463.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.99%)</title><rect x="3.3003%" y="437" width="0.9901%" height="15" fill="rgb(209,12,38)" fg:x="10" fg:w="3"/><text x="3.5503%" y="447.50"></text></g><g><title>std::panicking::try (3 samples, 0.99%)</title><rect x="3.3003%" y="421" width="0.9901%" height="15" fill="rgb(227,1,9)" fg:x="10" fg:w="3"/><text x="3.5503%" y="431.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.99%)</title><rect x="3.3003%" y="405" width="0.9901%" height="15" fill="rgb(248,47,43)" fg:x="10" fg:w="3"/><text x="3.5503%" y="415.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (3 samples, 0.99%)</title><rect x="3.3003%" y="389" width="0.9901%" height="15" fill="rgb(221,10,30)" fg:x="10" fg:w="3"/><text x="3.5503%" y="399.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.99%)</title><rect x="3.3003%" y="373" width="0.9901%" height="15" fill="rgb(210,229,1)" fg:x="10" fg:w="3"/><text x="3.5503%" y="383.50"></text></g><g><title>std::panicking::try (3 samples, 0.99%)</title><rect x="3.3003%" y="357" width="0.9901%" height="15" fill="rgb(222,148,37)" fg:x="10" fg:w="3"/><text x="3.5503%" y="367.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.99%)</title><rect x="3.3003%" y="341" width="0.9901%" height="15" fill="rgb(234,67,33)" fg:x="10" fg:w="3"/><text x="3.5503%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3 samples, 0.99%)</title><rect x="3.3003%" y="325" width="0.9901%" height="15" fill="rgb(247,98,35)" fg:x="10" fg:w="3"/><text x="3.5503%" y="335.50"></text></g><g><title>std::rt::lang_start::{{closure}} (3 samples, 0.99%)</title><rect x="3.3003%" y="309" width="0.9901%" height="15" fill="rgb(247,138,52)" fg:x="10" fg:w="3"/><text x="3.5503%" y="319.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3 samples, 0.99%)</title><rect x="3.3003%" y="293" width="0.9901%" height="15" fill="rgb(213,79,30)" fg:x="10" fg:w="3"/><text x="3.5503%" y="303.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3 samples, 0.99%)</title><rect x="3.3003%" y="277" width="0.9901%" height="15" fill="rgb(246,177,23)" fg:x="10" fg:w="3"/><text x="3.5503%" y="287.50"></text></g><g><title>tftp::main (3 samples, 0.99%)</title><rect x="3.3003%" y="261" width="0.9901%" height="15" fill="rgb(230,62,27)" fg:x="10" fg:w="3"/><text x="3.5503%" y="271.50"></text></g><g><title>tftp::server::server::server (3 samples, 0.99%)</title><rect x="3.3003%" y="245" width="0.9901%" height="15" fill="rgb(216,154,8)" fg:x="10" fg:w="3"/><text x="3.5503%" y="255.50"></text></g><g><title>tftp::server::server::write_block (1 samples, 0.33%)</title><rect x="3.9604%" y="229" width="0.3300%" height="15" fill="rgb(244,35,45)" fg:x="12" fg:w="1"/><text x="4.2104%" y="239.50"></text></g><g><title>tftp::server::connection::Connection&lt;R,W,S&gt;::send_packet (1 samples, 0.33%)</title><rect x="3.9604%" y="213" width="0.3300%" height="15" fill="rgb(251,115,12)" fg:x="12" fg:w="1"/><text x="4.2104%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.33%)</title><rect x="3.9604%" y="197" width="0.3300%" height="15" fill="rgb(240,54,50)" fg:x="12" fg:w="1"/><text x="4.2104%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.33%)</title><rect x="3.9604%" y="181" width="0.3300%" height="15" fill="rgb(233,84,52)" fg:x="12" fg:w="1"/><text x="4.2104%" y="191.50"></text></g><g><title>clap::parser::parser::Parser::get_matches_with (1 samples, 0.33%)</title><rect x="4.2904%" y="517" width="0.3300%" height="15" fill="rgb(207,117,47)" fg:x="13" fg:w="1"/><text x="4.5404%" y="527.50"></text></g><g><title>clap::parser::parser::Parser::parse_subcommand (1 samples, 0.33%)</title><rect x="4.2904%" y="501" width="0.3300%" height="15" fill="rgb(249,43,39)" fg:x="13" fg:w="1"/><text x="4.5404%" y="511.50"></text></g><g><title>clap::builder::command::Command::_build_subcommand (1 samples, 0.33%)</title><rect x="4.2904%" y="485" width="0.3300%" height="15" fill="rgb(209,38,44)" fg:x="13" fg:w="1"/><text x="4.5404%" y="495.50"></text></g><g><title>clap::builder::command::Command::_build_self (1 samples, 0.33%)</title><rect x="4.2904%" y="469" width="0.3300%" height="15" fill="rgb(236,212,23)" fg:x="13" fg:w="1"/><text x="4.5404%" y="479.50"></text></g><g><title>clap::builder::debug_asserts::assert_app (1 samples, 0.33%)</title><rect x="4.2904%" y="453" width="0.3300%" height="15" fill="rgb(242,79,21)" fg:x="13" fg:w="1"/><text x="4.5404%" y="463.50"></text></g><g><title>clap::builder::debug_asserts::assert_arg (1 samples, 0.33%)</title><rect x="4.2904%" y="437" width="0.3300%" height="15" fill="rgb(211,96,35)" fg:x="13" fg:w="1"/><text x="4.5404%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (1 samples, 0.33%)</title><rect x="4.2904%" y="421" width="0.3300%" height="15" fill="rgb(253,215,40)" fg:x="13" fg:w="1"/><text x="4.5404%" y="431.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (1 samples, 0.33%)</title><rect x="4.2904%" y="405" width="0.3300%" height="15" fill="rgb(211,81,21)" fg:x="13" fg:w="1"/><text x="4.5404%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.33%)</title><rect x="4.2904%" y="389" width="0.3300%" height="15" fill="rgb(208,190,38)" fg:x="13" fg:w="1"/><text x="4.5404%" y="399.50"></text></g><g><title>std::rt::lang_start::{{closure}} (1 samples, 0.33%)</title><rect x="4.6205%" y="517" width="0.3300%" height="15" fill="rgb(235,213,38)" fg:x="14" fg:w="1"/><text x="4.8705%" y="527.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.33%)</title><rect x="4.6205%" y="501" width="0.3300%" height="15" fill="rgb(237,122,38)" fg:x="14" fg:w="1"/><text x="4.8705%" y="511.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.33%)</title><rect x="4.6205%" y="485" width="0.3300%" height="15" fill="rgb(244,218,35)" fg:x="14" fg:w="1"/><text x="4.8705%" y="495.50"></text></g><g><title>tftp::main (1 samples, 0.33%)</title><rect x="4.6205%" y="469" width="0.3300%" height="15" fill="rgb(240,68,47)" fg:x="14" fg:w="1"/><text x="4.8705%" y="479.50"></text></g><g><title>tftp::server::server::server (1 samples, 0.33%)</title><rect x="4.6205%" y="453" width="0.3300%" height="15" fill="rgb(210,16,53)" fg:x="14" fg:w="1"/><text x="4.8705%" y="463.50"></text></g><g><title>tftp::server::server::write_block (1 samples, 0.33%)</title><rect x="4.6205%" y="437" width="0.3300%" height="15" fill="rgb(235,124,12)" fg:x="14" fg:w="1"/><text x="4.8705%" y="447.50"></text></g><g><title>tftp::server::connection::Connection&lt;R,W,S&gt;::send_packet (1 samples, 0.33%)</title><rect x="4.6205%" y="421" width="0.3300%" height="15" fill="rgb(224,169,11)" fg:x="14" fg:w="1"/><text x="4.8705%" y="431.50"></text></g><g><title>&lt;tftp::socket::StdSocket as tftp::socket::Socket&gt;::send_to (1 samples, 0.33%)</title><rect x="4.6205%" y="405" width="0.3300%" height="15" fill="rgb(250,166,2)" fg:x="14" fg:w="1"/><text x="4.8705%" y="415.50"></text></g><g><title>std::net::udp::UdpSocket::send_to (1 samples, 0.33%)</title><rect x="4.6205%" y="389" width="0.3300%" height="15" fill="rgb(242,216,29)" fg:x="14" fg:w="1"/><text x="4.8705%" y="399.50"></text></g><g><title>&lt;core::option::IntoIter&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.33%)</title><rect x="4.6205%" y="373" width="0.3300%" height="15" fill="rgb(230,116,27)" fg:x="14" fg:w="1"/><text x="4.8705%" y="383.50"></text></g><g><title>&lt;core::option::Item&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.33%)</title><rect x="4.6205%" y="357" width="0.3300%" height="15" fill="rgb(228,99,48)" fg:x="14" fg:w="1"/><text x="4.8705%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.33%)</title><rect x="4.6205%" y="341" width="0.3300%" height="15" fill="rgb(253,11,6)" fg:x="14" fg:w="1"/><text x="4.8705%" y="351.50"></text></g><g><title>core::mem::replace (1 samples, 0.33%)</title><rect x="4.6205%" y="325" width="0.3300%" height="15" fill="rgb(247,143,39)" fg:x="14" fg:w="1"/><text x="4.8705%" y="335.50"></text></g><g><title>std::rt::lang_start (1 samples, 0.33%)</title><rect x="4.9505%" y="517" width="0.3300%" height="15" fill="rgb(236,97,10)" fg:x="15" fg:w="1"/><text x="5.2005%" y="527.50"></text></g><g><title>std::rt::lang_start_internal (1 samples, 0.33%)</title><rect x="4.9505%" y="501" width="0.3300%" height="15" fill="rgb(233,208,19)" fg:x="15" fg:w="1"/><text x="5.2005%" y="511.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.33%)</title><rect x="4.9505%" y="485" width="0.3300%" height="15" fill="rgb(216,164,2)" fg:x="15" fg:w="1"/><text x="5.2005%" y="495.50"></text></g><g><title>std::panicking::try (1 samples, 0.33%)</title><rect x="4.9505%" y="469" width="0.3300%" height="15" fill="rgb(220,129,5)" fg:x="15" fg:w="1"/><text x="5.2005%" y="479.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.33%)</title><rect x="4.9505%" y="453" width="0.3300%" height="15" fill="rgb(242,17,10)" fg:x="15" fg:w="1"/><text x="5.2005%" y="463.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (1 samples, 0.33%)</title><rect x="4.9505%" y="437" width="0.3300%" height="15" fill="rgb(242,107,0)" fg:x="15" fg:w="1"/><text x="5.2005%" y="447.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.33%)</title><rect x="4.9505%" y="421" width="0.3300%" height="15" fill="rgb(251,28,31)" fg:x="15" fg:w="1"/><text x="5.2005%" y="431.50"></text></g><g><title>std::panicking::try (1 samples, 0.33%)</title><rect x="4.9505%" y="405" width="0.3300%" height="15" fill="rgb(233,223,10)" fg:x="15" fg:w="1"/><text x="5.2005%" y="415.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.33%)</title><rect x="4.9505%" y="389" width="0.3300%" height="15" fill="rgb(215,21,27)" fg:x="15" fg:w="1"/><text x="5.2005%" y="399.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1 samples, 0.33%)</title><rect x="4.9505%" y="373" width="0.3300%" height="15" fill="rgb(232,23,21)" fg:x="15" fg:w="1"/><text x="5.2005%" y="383.50"></text></g><g><title>std::rt::lang_start::{{closure}} (1 samples, 0.33%)</title><rect x="4.9505%" y="357" width="0.3300%" height="15" fill="rgb(244,5,23)" fg:x="15" fg:w="1"/><text x="5.2005%" y="367.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.33%)</title><rect x="4.9505%" y="341" width="0.3300%" height="15" fill="rgb(226,81,46)" fg:x="15" fg:w="1"/><text x="5.2005%" y="351.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.33%)</title><rect x="4.9505%" y="325" width="0.3300%" height="15" fill="rgb(247,70,30)" fg:x="15" fg:w="1"/><text x="5.2005%" y="335.50"></text></g><g><title>tftp::main (1 samples, 0.33%)</title><rect x="4.9505%" y="309" width="0.3300%" height="15" fill="rgb(212,68,19)" fg:x="15" fg:w="1"/><text x="5.2005%" y="319.50"></text></g><g><title>tftp::server::server::server (1 samples, 0.33%)</title><rect x="4.9505%" y="293" width="0.3300%" height="15" fill="rgb(240,187,13)" fg:x="15" fg:w="1"/><text x="5.2005%" y="303.50"></text></g><g><title>tftp::server::server::write_block (1 samples, 0.33%)</title><rect x="4.9505%" y="277" width="0.3300%" height="15" fill="rgb(223,113,26)" fg:x="15" fg:w="1"/><text x="5.2005%" y="287.50"></text></g><g><title>tftp::server::connection::Connection&lt;R,W,S&gt;::send_packet (1 samples, 0.33%)</title><rect x="4.9505%" y="261" width="0.3300%" height="15" fill="rgb(206,192,2)" fg:x="15" fg:w="1"/><text x="5.2005%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.33%)</title><rect x="4.9505%" y="245" width="0.3300%" height="15" fill="rgb(241,108,4)" fg:x="15" fg:w="1"/><text x="5.2005%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.33%)</title><rect x="4.9505%" y="229" width="0.3300%" height="15" fill="rgb(247,173,49)" fg:x="15" fg:w="1"/><text x="5.2005%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.33%)</title><rect x="4.9505%" y="213" width="0.3300%" height="15" fill="rgb(224,114,35)" fg:x="15" fg:w="1"/><text x="5.2005%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.33%)</title><rect x="4.9505%" y="197" width="0.3300%" height="15" fill="rgb(245,159,27)" fg:x="15" fg:w="1"/><text x="5.2005%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.33%)</title><rect x="4.9505%" y="181" width="0.3300%" height="15" fill="rgb(245,172,44)" fg:x="15" fg:w="1"/><text x="5.2005%" y="191.50"></text></g><g><title>cfree (1 samples, 0.33%)</title><rect x="4.9505%" y="165" width="0.3300%" height="15" fill="rgb(236,23,11)" fg:x="15" fg:w="1"/><text x="5.2005%" y="175.50"></text></g><g><title>[libc.so.6] (1 samples, 0.33%)</title><rect x="4.9505%" y="149" width="0.3300%" height="15" fill="rgb(205,117,38)" fg:x="15" fg:w="1"/><text x="5.2005%" y="159.50"></text></g><g><title>__rdl_alloc (1 samples, 0.33%)</title><rect x="5.6106%" y="85" width="0.3300%" height="15" fill="rgb(237,72,25)" fg:x="17" fg:w="1"/><text x="5.8606%" y="95.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.99%)</title><rect x="5.6106%" y="101" width="0.9901%" height="15" fill="rgb(244,70,9)" fg:x="17" fg:w="3"/><text x="5.8606%" y="111.50"></text></g><g><title>malloc (2 samples, 0.66%)</title><rect x="5.9406%" y="85" width="0.6601%" height="15" fill="rgb(217,125,39)" fg:x="18" fg:w="2"/><text x="6.1906%" y="95.50"></text></g><g><title>&lt;tftp::socket::StdSocket as tftp::socket::Socket&gt;::recv_from (5 samples, 1.65%)</title><rect x="5.2805%" y="293" width="1.6502%" height="15" fill="rgb(235,36,10)" fg:x="16" fg:w="5"/><text x="5.5305%" y="303.50"></text></g><g><title>polling::Poller::wait (5 samples, 1.65%)</title><rect x="5.2805%" y="277" width="1.6502%" height="15" fill="rgb(251,123,47)" fg:x="16" fg:w="5"/><text x="5.5305%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (5 samples, 1.65%)</title><rect x="5.2805%" y="261" width="1.6502%" height="15" fill="rgb(221,13,13)" fg:x="16" fg:w="5"/><text x="5.5305%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (5 samples, 1.65%)</title><rect x="5.2805%" y="245" width="1.6502%" height="15" fill="rgb(238,131,9)" fg:x="16" fg:w="5"/><text x="5.5305%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (5 samples, 1.65%)</title><rect x="5.2805%" y="229" width="1.6502%" height="15" fill="rgb(211,50,8)" fg:x="16" fg:w="5"/><text x="5.5305%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (5 samples, 1.65%)</title><rect x="5.2805%" y="213" width="1.6502%" height="15" fill="rgb(245,182,24)" fg:x="16" fg:w="5"/><text x="5.5305%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 1.65%)</title><rect x="5.2805%" y="197" width="1.6502%" height="15" fill="rgb(242,14,37)" fg:x="16" fg:w="5"/><text x="5.5305%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 1.65%)</title><rect x="5.2805%" y="181" width="1.6502%" height="15" fill="rgb(246,228,12)" fg:x="16" fg:w="5"/><text x="5.5305%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 1.65%)</title><rect x="5.2805%" y="165" width="1.6502%" height="15" fill="rgb(213,55,15)" fg:x="16" fg:w="5"/><text x="5.5305%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 1.65%)</title><rect x="5.2805%" y="149" width="1.6502%" height="15" fill="rgb(209,9,3)" fg:x="16" fg:w="5"/><text x="5.5305%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 1.65%)</title><rect x="5.2805%" y="133" width="1.6502%" height="15" fill="rgb(230,59,30)" fg:x="16" fg:w="5"/><text x="5.5305%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 1.65%)</title><rect x="5.2805%" y="117" width="1.6502%" height="15" fill="rgb(209,121,21)" fg:x="16" fg:w="5"/><text x="5.5305%" y="127.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (1 samples, 0.33%)</title><rect x="6.6007%" y="101" width="0.3300%" height="15" fill="rgb(220,109,13)" fg:x="20" fg:w="1"/><text x="6.8507%" y="111.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.33%)</title><rect x="6.6007%" y="85" width="0.3300%" height="15" fill="rgb(232,18,1)" fg:x="20" fg:w="1"/><text x="6.8507%" y="95.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null::runtime_impl (1 samples, 0.33%)</title><rect x="6.6007%" y="69" width="0.3300%" height="15" fill="rgb(215,41,42)" fg:x="20" fg:w="1"/><text x="6.8507%" y="79.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.33%)</title><rect x="7.5908%" y="149" width="0.3300%" height="15" fill="rgb(224,123,36)" fg:x="23" fg:w="1"/><text x="7.8408%" y="159.50"></text></g><g><title>tftp::server::server::send_data_blocks (4 samples, 1.32%)</title><rect x="6.9307%" y="293" width="1.3201%" height="15" fill="rgb(240,125,3)" fg:x="21" fg:w="4"/><text x="7.1807%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::retain (4 samples, 1.32%)</title><rect x="6.9307%" y="277" width="1.3201%" height="15" fill="rgb(205,98,50)" fg:x="21" fg:w="4"/><text x="7.1807%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::DrainFilter&lt;tftp::std_compat::net::SocketAddr,tftp::server::connection::Connection&lt;tftp::io::StdCompatFile,tftp::io::StdCompatFile,tftp::socket::StdSocket&gt;,alloc::collections::btree::map::BTreeMap&lt;tftp::std_compat::net::SocketAddr,tftp::server::connection::Connection&lt;tftp::io::StdCompatFile,tftp::io::StdCompatFile,tftp::socket::StdSocket&gt;&gt;::retain&lt;tftp::server::server::send_data_blocks&lt;tftp::io::StdCompatFile,tftp::io::StdCompatFile,tftp::socket::StdSocket&gt;::{{closure}}&gt;::{{closure}}&gt;&gt; (4 samples, 1.32%)</title><rect x="6.9307%" y="261" width="1.3201%" height="15" fill="rgb(205,185,37)" fg:x="21" fg:w="4"/><text x="7.1807%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::DrainFilter&lt;K,V,F,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 1.32%)</title><rect x="6.9307%" y="245" width="1.3201%" height="15" fill="rgb(238,207,15)" fg:x="21" fg:w="4"/><text x="7.1807%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4 samples, 1.32%)</title><rect x="6.9307%" y="229" width="1.3201%" height="15" fill="rgb(213,199,42)" fg:x="21" fg:w="4"/><text x="7.1807%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (4 samples, 1.32%)</title><rect x="6.9307%" y="213" width="1.3201%" height="15" fill="rgb(235,201,11)" fg:x="21" fg:w="4"/><text x="7.1807%" y="223.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 1.32%)</title><rect x="6.9307%" y="197" width="1.3201%" height="15" fill="rgb(207,46,11)" fg:x="21" fg:w="4"/><text x="7.1807%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::DrainFilter&lt;K,V,F,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 1.32%)</title><rect x="6.9307%" y="181" width="1.3201%" height="15" fill="rgb(241,35,35)" fg:x="21" fg:w="4"/><text x="7.1807%" y="191.50"></text></g><g><title>alloc::collections::btree::map::DrainFilterInner&lt;K,V&gt;::next (4 samples, 1.32%)</title><rect x="6.9307%" y="165" width="1.3201%" height="15" fill="rgb(243,32,47)" fg:x="21" fg:w="4"/><text x="7.1807%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::retain::{{closure}} (1 samples, 0.33%)</title><rect x="7.9208%" y="149" width="0.3300%" height="15" fill="rgb(247,202,23)" fg:x="24" fg:w="1"/><text x="8.1708%" y="159.50"></text></g><g><title>std::rt::lang_start_internal (13 samples, 4.29%)</title><rect x="5.2805%" y="517" width="4.2904%" height="15" fill="rgb(219,102,11)" fg:x="16" fg:w="13"/><text x="5.5305%" y="527.50">std::..</text></g><g><title>std::panic::catch_unwind (13 samples, 4.29%)</title><rect x="5.2805%" y="501" width="4.2904%" height="15" fill="rgb(243,110,44)" fg:x="16" fg:w="13"/><text x="5.5305%" y="511.50">std::..</text></g><g><title>std::panicking::try (13 samples, 4.29%)</title><rect x="5.2805%" y="485" width="4.2904%" height="15" fill="rgb(222,74,54)" fg:x="16" fg:w="13"/><text x="5.5305%" y="495.50">std::..</text></g><g><title>std::panicking::try::do_call (13 samples, 4.29%)</title><rect x="5.2805%" y="469" width="4.2904%" height="15" fill="rgb(216,99,12)" fg:x="16" fg:w="13"/><text x="5.5305%" y="479.50">std::..</text></g><g><title>std::rt::lang_start_internal::{{closure}} (13 samples, 4.29%)</title><rect x="5.2805%" y="453" width="4.2904%" height="15" fill="rgb(226,22,26)" fg:x="16" fg:w="13"/><text x="5.5305%" y="463.50">std::..</text></g><g><title>std::panic::catch_unwind (13 samples, 4.29%)</title><rect x="5.2805%" y="437" width="4.2904%" height="15" fill="rgb(217,163,10)" fg:x="16" fg:w="13"/><text x="5.5305%" y="447.50">std::..</text></g><g><title>std::panicking::try (13 samples, 4.29%)</title><rect x="5.2805%" y="421" width="4.2904%" height="15" fill="rgb(213,25,53)" fg:x="16" fg:w="13"/><text x="5.5305%" y="431.50">std::..</text></g><g><title>std::panicking::try::do_call (13 samples, 4.29%)</title><rect x="5.2805%" y="405" width="4.2904%" height="15" fill="rgb(252,105,26)" fg:x="16" fg:w="13"/><text x="5.5305%" y="415.50">std::..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (13 samples, 4.29%)</title><rect x="5.2805%" y="389" width="4.2904%" height="15" fill="rgb(220,39,43)" fg:x="16" fg:w="13"/><text x="5.5305%" y="399.50">core:..</text></g><g><title>std::rt::lang_start::{{closure}} (13 samples, 4.29%)</title><rect x="5.2805%" y="373" width="4.2904%" height="15" fill="rgb(229,68,48)" fg:x="16" fg:w="13"/><text x="5.5305%" y="383.50">std::..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (13 samples, 4.29%)</title><rect x="5.2805%" y="357" width="4.2904%" height="15" fill="rgb(252,8,32)" fg:x="16" fg:w="13"/><text x="5.5305%" y="367.50">std::..</text></g><g><title>core::ops::function::FnOnce::call_once (13 samples, 4.29%)</title><rect x="5.2805%" y="341" width="4.2904%" height="15" fill="rgb(223,20,43)" fg:x="16" fg:w="13"/><text x="5.5305%" y="351.50">core:..</text></g><g><title>tftp::main (13 samples, 4.29%)</title><rect x="5.2805%" y="325" width="4.2904%" height="15" fill="rgb(229,81,49)" fg:x="16" fg:w="13"/><text x="5.5305%" y="335.50">tftp:..</text></g><g><title>tftp::server::server::server (13 samples, 4.29%)</title><rect x="5.2805%" y="309" width="4.2904%" height="15" fill="rgb(236,28,36)" fg:x="16" fg:w="13"/><text x="5.5305%" y="319.50">tftp:..</text></g><g><title>tftp::server::server::write_block (4 samples, 1.32%)</title><rect x="8.2508%" y="293" width="1.3201%" height="15" fill="rgb(249,185,26)" fg:x="25" fg:w="4"/><text x="8.5008%" y="303.50"></text></g><g><title>tftp::server::connection::Connection&lt;R,W,S&gt;::send_packet (4 samples, 1.32%)</title><rect x="8.2508%" y="277" width="1.3201%" height="15" fill="rgb(249,174,33)" fg:x="25" fg:w="4"/><text x="8.5008%" y="287.50"></text></g><g><title>&lt;tftp::socket::StdSocket as tftp::socket::Socket&gt;::send_to (4 samples, 1.32%)</title><rect x="8.2508%" y="261" width="1.3201%" height="15" fill="rgb(233,201,37)" fg:x="25" fg:w="4"/><text x="8.5008%" y="271.50"></text></g><g><title>std::net::udp::UdpSocket::send_to (4 samples, 1.32%)</title><rect x="8.2508%" y="245" width="1.3201%" height="15" fill="rgb(221,78,26)" fg:x="25" fg:w="4"/><text x="8.5008%" y="255.50"></text></g><g><title>std::sys_common::net::UdpSocket::send_to (4 samples, 1.32%)</title><rect x="8.2508%" y="229" width="1.3201%" height="15" fill="rgb(250,127,30)" fg:x="25" fg:w="4"/><text x="8.5008%" y="239.50"></text></g><g><title>sendto (4 samples, 1.32%)</title><rect x="8.2508%" y="213" width="1.3201%" height="15" fill="rgb(230,49,44)" fg:x="25" fg:w="4"/><text x="8.5008%" y="223.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_leaf_edge (3 samples, 0.99%)</title><rect x="9.5710%" y="309" width="0.9901%" height="15" fill="rgb(229,67,23)" fg:x="29" fg:w="3"/><text x="9.8210%" y="319.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (4 samples, 1.32%)</title><rect x="9.5710%" y="517" width="1.3201%" height="15" fill="rgb(249,83,47)" fg:x="29" fg:w="4"/><text x="9.8210%" y="527.50"></text></g><g><title>core::ops::function::FnOnce::call_once (4 samples, 1.32%)</title><rect x="9.5710%" y="501" width="1.3201%" height="15" fill="rgb(215,43,3)" fg:x="29" fg:w="4"/><text x="9.8210%" y="511.50"></text></g><g><title>tftp::main (4 samples, 1.32%)</title><rect x="9.5710%" y="485" width="1.3201%" height="15" fill="rgb(238,154,13)" fg:x="29" fg:w="4"/><text x="9.8210%" y="495.50"></text></g><g><title>tftp::server::server::server (4 samples, 1.32%)</title><rect x="9.5710%" y="469" width="1.3201%" height="15" fill="rgb(219,56,2)" fg:x="29" fg:w="4"/><text x="9.8210%" y="479.50"></text></g><g><title>tftp::server::server::send_data_blocks (4 samples, 1.32%)</title><rect x="9.5710%" y="453" width="1.3201%" height="15" fill="rgb(233,0,4)" fg:x="29" fg:w="4"/><text x="9.8210%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::retain (4 samples, 1.32%)</title><rect x="9.5710%" y="437" width="1.3201%" height="15" fill="rgb(235,30,7)" fg:x="29" fg:w="4"/><text x="9.8210%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::DrainFilter&lt;tftp::std_compat::net::SocketAddr,tftp::server::connection::Connection&lt;tftp::io::StdCompatFile,tftp::io::StdCompatFile,tftp::socket::StdSocket&gt;,alloc::collections::btree::map::BTreeMap&lt;tftp::std_compat::net::SocketAddr,tftp::server::connection::Connection&lt;tftp::io::StdCompatFile,tftp::io::StdCompatFile,tftp::socket::StdSocket&gt;&gt;::retain&lt;tftp::server::server::send_data_blocks&lt;tftp::io::StdCompatFile,tftp::io::StdCompatFile,tftp::socket::StdSocket&gt;::{{closure}}&gt;::{{closure}}&gt;&gt; (4 samples, 1.32%)</title><rect x="9.5710%" y="421" width="1.3201%" height="15" fill="rgb(250,79,13)" fg:x="29" fg:w="4"/><text x="9.8210%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::DrainFilter&lt;K,V,F,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 1.32%)</title><rect x="9.5710%" y="405" width="1.3201%" height="15" fill="rgb(211,146,34)" fg:x="29" fg:w="4"/><text x="9.8210%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4 samples, 1.32%)</title><rect x="9.5710%" y="389" width="1.3201%" height="15" fill="rgb(228,22,38)" fg:x="29" fg:w="4"/><text x="9.8210%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (4 samples, 1.32%)</title><rect x="9.5710%" y="373" width="1.3201%" height="15" fill="rgb(235,168,5)" fg:x="29" fg:w="4"/><text x="9.8210%" y="383.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 1.32%)</title><rect x="9.5710%" y="357" width="1.3201%" height="15" fill="rgb(221,155,16)" fg:x="29" fg:w="4"/><text x="9.8210%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::DrainFilter&lt;K,V,F,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 1.32%)</title><rect x="9.5710%" y="341" width="1.3201%" height="15" fill="rgb(215,215,53)" fg:x="29" fg:w="4"/><text x="9.8210%" y="351.50"></text></g><g><title>alloc::collections::btree::map::DrainFilterInner&lt;K,V&gt;::next (4 samples, 1.32%)</title><rect x="9.5710%" y="325" width="1.3201%" height="15" fill="rgb(223,4,10)" fg:x="29" fg:w="4"/><text x="9.8210%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.33%)</title><rect x="10.5611%" y="309" width="0.3300%" height="15" fill="rgb(234,103,6)" fg:x="32" fg:w="1"/><text x="10.8111%" y="319.50"></text></g><g><title>core::mem::replace (1 samples, 0.33%)</title><rect x="10.5611%" y="293" width="0.3300%" height="15" fill="rgb(227,97,0)" fg:x="32" fg:w="1"/><text x="10.8111%" y="303.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.33%)</title><rect x="10.8911%" y="309" width="0.3300%" height="15" fill="rgb(234,150,53)" fg:x="33" fg:w="1"/><text x="11.1411%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::retain::{{closure}} (2 samples, 0.66%)</title><rect x="10.8911%" y="341" width="0.6601%" height="15" fill="rgb(228,201,54)" fg:x="33" fg:w="2"/><text x="11.1411%" y="351.50"></text></g><g><title>tftp::server::server::send_data_blocks::{{closure}} (2 samples, 0.66%)</title><rect x="10.8911%" y="325" width="0.6601%" height="15" fill="rgb(222,22,37)" fg:x="33" fg:w="2"/><text x="11.1411%" y="335.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.33%)</title><rect x="11.2211%" y="309" width="0.3300%" height="15" fill="rgb(237,53,32)" fg:x="34" fg:w="1"/><text x="11.4711%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.33%)</title><rect x="11.2211%" y="293" width="0.3300%" height="15" fill="rgb(233,25,53)" fg:x="34" fg:w="1"/><text x="11.4711%" y="303.50"></text></g><g><title>core::mem::replace (1 samples, 0.33%)</title><rect x="11.2211%" y="277" width="0.3300%" height="15" fill="rgb(210,40,34)" fg:x="34" fg:w="1"/><text x="11.4711%" y="287.50"></text></g><g><title>core::ptr::read (1 samples, 0.33%)</title><rect x="11.2211%" y="261" width="0.3300%" height="15" fill="rgb(241,220,44)" fg:x="34" fg:w="1"/><text x="11.4711%" y="271.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (1 samples, 0.33%)</title><rect x="11.2211%" y="245" width="0.3300%" height="15" fill="rgb(235,28,35)" fg:x="34" fg:w="1"/><text x="11.4711%" y="255.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::into_inner (1 samples, 0.33%)</title><rect x="11.2211%" y="229" width="0.3300%" height="15" fill="rgb(210,56,17)" fg:x="34" fg:w="1"/><text x="11.4711%" y="239.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (1 samples, 0.33%)</title><rect x="11.5512%" y="325" width="0.3300%" height="15" fill="rgb(224,130,29)" fg:x="35" fg:w="1"/><text x="11.8012%" y="335.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::new_kv (1 samples, 0.33%)</title><rect x="11.5512%" y="309" width="0.3300%" height="15" fill="rgb(235,212,8)" fg:x="35" fg:w="1"/><text x="11.8012%" y="319.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::forget_node_type (1 samples, 0.33%)</title><rect x="11.8812%" y="325" width="0.3300%" height="15" fill="rgb(223,33,50)" fg:x="36" fg:w="1"/><text x="12.1312%" y="335.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;::forget_type (1 samples, 0.33%)</title><rect x="11.8812%" y="309" width="0.3300%" height="15" fill="rgb(219,149,13)" fg:x="36" fg:w="1"/><text x="12.1312%" y="319.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_kv (3 samples, 0.99%)</title><rect x="11.5512%" y="341" width="0.9901%" height="15" fill="rgb(250,156,29)" fg:x="35" fg:w="3"/><text x="11.8012%" y="351.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (1 samples, 0.33%)</title><rect x="12.2112%" y="325" width="0.3300%" height="15" fill="rgb(216,193,19)" fg:x="37" fg:w="1"/><text x="12.4612%" y="335.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::right_edge (1 samples, 0.33%)</title><rect x="12.5413%" y="325" width="0.3300%" height="15" fill="rgb(216,135,14)" fg:x="38" fg:w="1"/><text x="12.7913%" y="335.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::new_edge (1 samples, 0.33%)</title><rect x="12.5413%" y="309" width="0.3300%" height="15" fill="rgb(241,47,5)" fg:x="38" fg:w="1"/><text x="12.7913%" y="319.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_leaf_edge (3 samples, 0.99%)</title><rect x="12.5413%" y="341" width="0.9901%" height="15" fill="rgb(233,42,35)" fg:x="38" fg:w="3"/><text x="12.7913%" y="351.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,Type&gt;::force (2 samples, 0.66%)</title><rect x="12.8713%" y="325" width="0.6601%" height="15" fill="rgb(231,13,6)" fg:x="39" fg:w="2"/><text x="13.1213%" y="335.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,Type&gt;::as_leaf_mut (2 samples, 0.66%)</title><rect x="13.5314%" y="325" width="0.6601%" height="15" fill="rgb(207,181,40)" fg:x="41" fg:w="2"/><text x="13.7814%" y="335.50"></text></g><g><title>tftp::server::server::send_data_blocks (12 samples, 3.96%)</title><rect x="10.8911%" y="485" width="3.9604%" height="15" fill="rgb(254,173,49)" fg:x="33" fg:w="12"/><text x="11.1411%" y="495.50">tftp..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::retain (12 samples, 3.96%)</title><rect x="10.8911%" y="469" width="3.9604%" height="15" fill="rgb(221,1,38)" fg:x="33" fg:w="12"/><text x="11.1411%" y="479.50">allo..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::DrainFilter&lt;tftp::std_compat::net::SocketAddr,tftp::server::connection::Connection&lt;tftp::io::StdCompatFile,tftp::io::StdCompatFile,tftp::socket::StdSocket&gt;,alloc::collections::btree::map::BTreeMap&lt;tftp::std_compat::net::SocketAddr,tftp::server::connection::Connection&lt;tftp::io::StdCompatFile,tftp::io::StdCompatFile,tftp::socket::StdSocket&gt;&gt;::retain&lt;tftp::server::server::send_data_blocks&lt;tftp::io::StdCompatFile,tftp::io::StdCompatFile,tftp::socket::StdSocket&gt;::{{closure}}&gt;::{{closure}}&gt;&gt; (12 samples, 3.96%)</title><rect x="10.8911%" y="453" width="3.9604%" height="15" fill="rgb(206,124,46)" fg:x="33" fg:w="12"/><text x="11.1411%" y="463.50">core..</text></g><g><title>&lt;alloc::collections::btree::map::DrainFilter&lt;K,V,F,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 3.96%)</title><rect x="10.8911%" y="437" width="3.9604%" height="15" fill="rgb(249,21,11)" fg:x="33" fg:w="12"/><text x="11.1411%" y="447.50">&lt;all..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (12 samples, 3.96%)</title><rect x="10.8911%" y="421" width="3.9604%" height="15" fill="rgb(222,201,40)" fg:x="33" fg:w="12"/><text x="11.1411%" y="431.50">core..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (12 samples, 3.96%)</title><rect x="10.8911%" y="405" width="3.9604%" height="15" fill="rgb(235,61,29)" fg:x="33" fg:w="12"/><text x="11.1411%" y="415.50">core..</text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 3.96%)</title><rect x="10.8911%" y="389" width="3.9604%" height="15" fill="rgb(219,207,3)" fg:x="33" fg:w="12"/><text x="11.1411%" y="399.50">&lt;&amp;mu..</text></g><g><title>&lt;alloc::collections::btree::map::DrainFilter&lt;K,V,F,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 3.96%)</title><rect x="10.8911%" y="373" width="3.9604%" height="15" fill="rgb(222,56,46)" fg:x="33" fg:w="12"/><text x="11.1411%" y="383.50">&lt;all..</text></g><g><title>alloc::collections::btree::map::DrainFilterInner&lt;K,V&gt;::next (12 samples, 3.96%)</title><rect x="10.8911%" y="357" width="3.9604%" height="15" fill="rgb(239,76,54)" fg:x="33" fg:w="12"/><text x="11.1411%" y="367.50">allo..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::kv_mut (4 samples, 1.32%)</title><rect x="13.5314%" y="341" width="1.3201%" height="15" fill="rgb(231,124,27)" fg:x="41" fg:w="4"/><text x="13.7814%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (2 samples, 0.66%)</title><rect x="14.1914%" y="325" width="0.6601%" height="15" fill="rgb(249,195,6)" fg:x="43" fg:w="2"/><text x="14.4414%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.33%)</title><rect x="14.5215%" y="309" width="0.3300%" height="15" fill="rgb(237,174,47)" fg:x="44" fg:w="1"/><text x="14.7715%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.33%)</title><rect x="14.5215%" y="293" width="0.3300%" height="15" fill="rgb(206,201,31)" fg:x="44" fg:w="1"/><text x="14.7715%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.33%)</title><rect x="14.5215%" y="277" width="0.3300%" height="15" fill="rgb(231,57,52)" fg:x="44" fg:w="1"/><text x="14.7715%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.33%)</title><rect x="14.8515%" y="325" width="0.3300%" height="15" fill="rgb(248,177,22)" fg:x="45" fg:w="1"/><text x="15.1015%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.33%)</title><rect x="14.8515%" y="309" width="0.3300%" height="15" fill="rgb(215,211,37)" fg:x="45" fg:w="1"/><text x="15.1015%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::by_ref_sized::ByRefSized&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.33%)</title><rect x="15.1815%" y="293" width="0.3300%" height="15" fill="rgb(241,128,51)" fg:x="46" fg:w="1"/><text x="15.4315%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.33%)</title><rect x="15.1815%" y="277" width="0.3300%" height="15" fill="rgb(227,165,31)" fg:x="46" fg:w="1"/><text x="15.4315%" y="287.50"></text></g><g><title>&lt;core::const_closure::ConstFnMutClosure&lt;&amp;mut A,Function&gt; as core::ops::function::FnMut&lt;ClosureArguments&gt;&gt;::call_mut (1 samples, 0.33%)</title><rect x="15.1815%" y="261" width="0.3300%" height="15" fill="rgb(228,167,24)" fg:x="46" fg:w="1"/><text x="15.4315%" y="271.50"></text></g><g><title>core::ops::function::Fn::call (1 samples, 0.33%)</title><rect x="15.1815%" y="245" width="0.3300%" height="15" fill="rgb(228,143,12)" fg:x="46" fg:w="1"/><text x="15.4315%" y="255.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2_imp (1 samples, 0.33%)</title><rect x="15.1815%" y="229" width="0.3300%" height="15" fill="rgb(249,149,8)" fg:x="46" fg:w="1"/><text x="15.4315%" y="239.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold::{{closure}} (1 samples, 0.33%)</title><rect x="15.1815%" y="213" width="0.3300%" height="15" fill="rgb(243,35,44)" fg:x="46" fg:w="1"/><text x="15.4315%" y="223.50"></text></g><g><title>&lt;tftp::packet::AckPacket as tftp::packet::ByteConverter&gt;::to_bytes (3 samples, 0.99%)</title><rect x="14.8515%" y="437" width="0.9901%" height="15" fill="rgb(246,89,9)" fg:x="45" fg:w="3"/><text x="15.1015%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.99%)</title><rect x="14.8515%" y="421" width="0.9901%" height="15" fill="rgb(233,213,13)" fg:x="45" fg:w="3"/><text x="15.1015%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.99%)</title><rect x="14.8515%" y="405" width="0.9901%" height="15" fill="rgb(233,141,41)" fg:x="45" fg:w="3"/><text x="15.1015%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.99%)</title><rect x="14.8515%" y="389" width="0.9901%" height="15" fill="rgb(239,167,4)" fg:x="45" fg:w="3"/><text x="15.1015%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3 samples, 0.99%)</title><rect x="14.8515%" y="373" width="0.9901%" height="15" fill="rgb(209,217,16)" fg:x="45" fg:w="3"/><text x="15.1015%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.99%)</title><rect x="14.8515%" y="357" width="0.9901%" height="15" fill="rgb(219,88,35)" fg:x="45" fg:w="3"/><text x="15.1015%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (3 samples, 0.99%)</title><rect x="14.8515%" y="341" width="0.9901%" height="15" fill="rgb(220,193,23)" fg:x="45" fg:w="3"/><text x="15.1015%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.66%)</title><rect x="15.1815%" y="325" width="0.6601%" height="15" fill="rgb(230,90,52)" fg:x="46" fg:w="2"/><text x="15.4315%" y="335.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.66%)</title><rect x="15.1815%" y="309" width="0.6601%" height="15" fill="rgb(252,106,19)" fg:x="46" fg:w="2"/><text x="15.4315%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::traits::iterator::Iterator::for_each::call&lt;u8,alloc::vec::Vec&lt;u8&gt;::extend_trusted&lt;core::array::iter::IntoIter&lt;u8,2_usize&gt;&gt;::{{closure}}&gt;::{{closure}}&gt; (1 samples, 0.33%)</title><rect x="15.5116%" y="293" width="0.3300%" height="15" fill="rgb(206,74,20)" fg:x="47" fg:w="1"/><text x="15.7616%" y="303.50"></text></g><g><title>core::array::iter::&lt;impl core::iter::traits::collect::IntoIterator for [T: N]&gt;::into_iter (1 samples, 0.33%)</title><rect x="15.8416%" y="437" width="0.3300%" height="15" fill="rgb(230,138,44)" fg:x="48" fg:w="1"/><text x="16.0916%" y="447.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.33%)</title><rect x="16.1716%" y="293" width="0.3300%" height="15" fill="rgb(235,182,43)" fg:x="49" fg:w="1"/><text x="16.4216%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.66%)</title><rect x="16.1716%" y="373" width="0.6601%" height="15" fill="rgb(242,16,51)" fg:x="49" fg:w="2"/><text x="16.4216%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2 samples, 0.66%)</title><rect x="16.1716%" y="357" width="0.6601%" height="15" fill="rgb(248,9,4)" fg:x="49" fg:w="2"/><text x="16.4216%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.66%)</title><rect x="16.1716%" y="341" width="0.6601%" height="15" fill="rgb(210,31,22)" fg:x="49" fg:w="2"/><text x="16.4216%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.66%)</title><rect x="16.1716%" y="325" width="0.6601%" height="15" fill="rgb(239,54,39)" fg:x="49" fg:w="2"/><text x="16.4216%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.66%)</title><rect x="16.1716%" y="309" width="0.6601%" height="15" fill="rgb(230,99,41)" fg:x="49" fg:w="2"/><text x="16.4216%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;u8&gt;&gt; (1 samples, 0.33%)</title><rect x="16.5017%" y="293" width="0.3300%" height="15" fill="rgb(253,106,12)" fg:x="50" fg:w="1"/><text x="16.7517%" y="303.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.33%)</title><rect x="16.5017%" y="277" width="0.3300%" height="15" fill="rgb(213,46,41)" fg:x="50" fg:w="1"/><text x="16.7517%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u8,alloc::alloc::Global&gt;&gt; (1 samples, 0.33%)</title><rect x="16.5017%" y="261" width="0.3300%" height="15" fill="rgb(215,133,35)" fg:x="50" fg:w="1"/><text x="16.7517%" y="271.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.33%)</title><rect x="16.5017%" y="245" width="0.3300%" height="15" fill="rgb(213,28,5)" fg:x="50" fg:w="1"/><text x="16.7517%" y="255.50"></text></g><g><title>tftp::main (21 samples, 6.93%)</title><rect x="10.8911%" y="517" width="6.9307%" height="15" fill="rgb(215,77,49)" fg:x="33" fg:w="21"/><text x="11.1411%" y="527.50">tftp::main</text></g><g><title>tftp::server::server::server (21 samples, 6.93%)</title><rect x="10.8911%" y="501" width="6.9307%" height="15" fill="rgb(248,100,22)" fg:x="33" fg:w="21"/><text x="11.1411%" y="511.50">tftp::ser..</text></g><g><title>tftp::server::server::write_block (9 samples, 2.97%)</title><rect x="14.8515%" y="485" width="2.9703%" height="15" fill="rgb(208,67,9)" fg:x="45" fg:w="9"/><text x="15.1015%" y="495.50">tft..</text></g><g><title>tftp::server::connection::Connection&lt;R,W,S&gt;::send_packet (9 samples, 2.97%)</title><rect x="14.8515%" y="469" width="2.9703%" height="15" fill="rgb(219,133,21)" fg:x="45" fg:w="9"/><text x="15.1015%" y="479.50">tft..</text></g><g><title>&lt;tftp::packet::Packet as tftp::packet::ByteConverter&gt;::to_bytes (9 samples, 2.97%)</title><rect x="14.8515%" y="453" width="2.9703%" height="15" fill="rgb(246,46,29)" fg:x="45" fg:w="9"/><text x="15.1015%" y="463.50">&lt;tf..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (5 samples, 1.65%)</title><rect x="16.1716%" y="437" width="1.6502%" height="15" fill="rgb(246,185,52)" fg:x="49" fg:w="5"/><text x="16.4216%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (5 samples, 1.65%)</title><rect x="16.1716%" y="421" width="1.6502%" height="15" fill="rgb(252,136,11)" fg:x="49" fg:w="5"/><text x="16.4216%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 1.65%)</title><rect x="16.1716%" y="405" width="1.6502%" height="15" fill="rgb(219,138,53)" fg:x="49" fg:w="5"/><text x="16.4216%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (5 samples, 1.65%)</title><rect x="16.1716%" y="389" width="1.6502%" height="15" fill="rgb(211,51,23)" fg:x="49" fg:w="5"/><text x="16.4216%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (3 samples, 0.99%)</title><rect x="16.8317%" y="373" width="0.9901%" height="15" fill="rgb(247,221,28)" fg:x="51" fg:w="3"/><text x="17.0817%" y="383.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.33%)</title><rect x="17.4917%" y="357" width="0.3300%" height="15" fill="rgb(251,222,45)" fg:x="53" fg:w="1"/><text x="17.7417%" y="367.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.66%)</title><rect x="17.8218%" y="325" width="0.6601%" height="15" fill="rgb(217,162,53)" fg:x="54" fg:w="2"/><text x="18.0718%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::by_ref_sized::ByRefSized&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.66%)</title><rect x="17.8218%" y="309" width="0.6601%" height="15" fill="rgb(229,93,14)" fg:x="54" fg:w="2"/><text x="18.0718%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.66%)</title><rect x="17.8218%" y="293" width="0.6601%" height="15" fill="rgb(209,67,49)" fg:x="54" fg:w="2"/><text x="18.0718%" y="303.50"></text></g><g><title>&lt;core::const_closure::ConstFnMutClosure&lt;&amp;mut A,Function&gt; as core::ops::function::FnMut&lt;ClosureArguments&gt;&gt;::call_mut (2 samples, 0.66%)</title><rect x="17.8218%" y="277" width="0.6601%" height="15" fill="rgb(213,87,29)" fg:x="54" fg:w="2"/><text x="18.0718%" y="287.50"></text></g><g><title>core::ops::function::Fn::call (2 samples, 0.66%)</title><rect x="17.8218%" y="261" width="0.6601%" height="15" fill="rgb(205,151,52)" fg:x="54" fg:w="2"/><text x="18.0718%" y="271.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2_imp (2 samples, 0.66%)</title><rect x="17.8218%" y="245" width="0.6601%" height="15" fill="rgb(253,215,39)" fg:x="54" fg:w="2"/><text x="18.0718%" y="255.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold::{{closure}} (2 samples, 0.66%)</title><rect x="17.8218%" y="229" width="0.6601%" height="15" fill="rgb(221,220,41)" fg:x="54" fg:w="2"/><text x="18.0718%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.33%)</title><rect x="18.1518%" y="213" width="0.3300%" height="15" fill="rgb(218,133,21)" fg:x="55" fg:w="1"/><text x="18.4018%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.33%)</title><rect x="18.1518%" y="197" width="0.3300%" height="15" fill="rgb(221,193,43)" fg:x="55" fg:w="1"/><text x="18.4018%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.33%)</title><rect x="18.1518%" y="181" width="0.3300%" height="15" fill="rgb(240,128,52)" fg:x="55" fg:w="1"/><text x="18.4018%" y="191.50"></text></g><g><title>[unknown] (50 samples, 16.50%)</title><rect x="2.6403%" y="533" width="16.5017%" height="15" fill="rgb(253,114,12)" fg:x="8" fg:w="50"/><text x="2.8903%" y="543.50">[unknown]</text></g><g><title>tftp::server::server::server (4 samples, 1.32%)</title><rect x="17.8218%" y="517" width="1.3201%" height="15" fill="rgb(215,223,47)" fg:x="54" fg:w="4"/><text x="18.0718%" y="527.50"></text></g><g><title>tftp::server::server::write_block (4 samples, 1.32%)</title><rect x="17.8218%" y="501" width="1.3201%" height="15" fill="rgb(248,225,23)" fg:x="54" fg:w="4"/><text x="18.0718%" y="511.50"></text></g><g><title>tftp::server::connection::Connection&lt;R,W,S&gt;::send_packet (4 samples, 1.32%)</title><rect x="17.8218%" y="485" width="1.3201%" height="15" fill="rgb(250,108,0)" fg:x="54" fg:w="4"/><text x="18.0718%" y="495.50"></text></g><g><title>&lt;tftp::packet::Packet as tftp::packet::ByteConverter&gt;::to_bytes (4 samples, 1.32%)</title><rect x="17.8218%" y="469" width="1.3201%" height="15" fill="rgb(228,208,7)" fg:x="54" fg:w="4"/><text x="18.0718%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (4 samples, 1.32%)</title><rect x="17.8218%" y="453" width="1.3201%" height="15" fill="rgb(244,45,10)" fg:x="54" fg:w="4"/><text x="18.0718%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (4 samples, 1.32%)</title><rect x="17.8218%" y="437" width="1.3201%" height="15" fill="rgb(207,125,25)" fg:x="54" fg:w="4"/><text x="18.0718%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 1.32%)</title><rect x="17.8218%" y="421" width="1.3201%" height="15" fill="rgb(210,195,18)" fg:x="54" fg:w="4"/><text x="18.0718%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (4 samples, 1.32%)</title><rect x="17.8218%" y="405" width="1.3201%" height="15" fill="rgb(249,80,12)" fg:x="54" fg:w="4"/><text x="18.0718%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4 samples, 1.32%)</title><rect x="17.8218%" y="389" width="1.3201%" height="15" fill="rgb(221,65,9)" fg:x="54" fg:w="4"/><text x="18.0718%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (4 samples, 1.32%)</title><rect x="17.8218%" y="373" width="1.3201%" height="15" fill="rgb(235,49,36)" fg:x="54" fg:w="4"/><text x="18.0718%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4 samples, 1.32%)</title><rect x="17.8218%" y="357" width="1.3201%" height="15" fill="rgb(225,32,20)" fg:x="54" fg:w="4"/><text x="18.0718%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 1.32%)</title><rect x="17.8218%" y="341" width="1.3201%" height="15" fill="rgb(215,141,46)" fg:x="54" fg:w="4"/><text x="18.0718%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.66%)</title><rect x="18.4818%" y="325" width="0.6601%" height="15" fill="rgb(250,160,47)" fg:x="56" fg:w="2"/><text x="18.7318%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;u8&gt;&gt; (2 samples, 0.66%)</title><rect x="18.4818%" y="309" width="0.6601%" height="15" fill="rgb(216,222,40)" fg:x="56" fg:w="2"/><text x="18.7318%" y="319.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.66%)</title><rect x="18.4818%" y="293" width="0.6601%" height="15" fill="rgb(234,217,39)" fg:x="56" fg:w="2"/><text x="18.7318%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u8,alloc::alloc::Global&gt;&gt; (2 samples, 0.66%)</title><rect x="18.4818%" y="277" width="0.6601%" height="15" fill="rgb(207,178,40)" fg:x="56" fg:w="2"/><text x="18.7318%" y="287.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.66%)</title><rect x="18.4818%" y="261" width="0.6601%" height="15" fill="rgb(221,136,13)" fg:x="56" fg:w="2"/><text x="18.7318%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.66%)</title><rect x="18.4818%" y="245" width="0.6601%" height="15" fill="rgb(249,199,10)" fg:x="56" fg:w="2"/><text x="18.7318%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.66%)</title><rect x="18.4818%" y="229" width="0.6601%" height="15" fill="rgb(249,222,13)" fg:x="56" fg:w="2"/><text x="18.7318%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.66%)</title><rect x="18.4818%" y="213" width="0.6601%" height="15" fill="rgb(244,185,38)" fg:x="56" fg:w="2"/><text x="18.7318%" y="223.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_unchecked (1 samples, 0.33%)</title><rect x="18.8119%" y="197" width="0.3300%" height="15" fill="rgb(236,202,9)" fg:x="57" fg:w="1"/><text x="19.0619%" y="207.50"></text></g><g><title>clap::derive::Parser::parse (1 samples, 0.33%)</title><rect x="19.1419%" y="245" width="0.3300%" height="15" fill="rgb(250,229,37)" fg:x="58" fg:w="1"/><text x="19.3919%" y="255.50"></text></g><g><title>&lt;tftp::cli::Args as clap::derive::FromArgMatches&gt;::from_arg_matches_mut (1 samples, 0.33%)</title><rect x="19.1419%" y="229" width="0.3300%" height="15" fill="rgb(206,174,23)" fg:x="58" fg:w="1"/><text x="19.3919%" y="239.50"></text></g><g><title>clap::parser::matches::arg_matches::ArgMatches::remove_one (1 samples, 0.33%)</title><rect x="19.1419%" y="213" width="0.3300%" height="15" fill="rgb(211,33,43)" fg:x="58" fg:w="1"/><text x="19.3919%" y="223.50"></text></g><g><title>clap::parser::matches::arg_matches::ArgMatches::try_remove_one (1 samples, 0.33%)</title><rect x="19.1419%" y="197" width="0.3300%" height="15" fill="rgb(245,58,50)" fg:x="58" fg:w="1"/><text x="19.3919%" y="207.50"></text></g><g><title>clap::parser::matches::arg_matches::ArgMatches::try_remove_arg_t (1 samples, 0.33%)</title><rect x="19.1419%" y="181" width="0.3300%" height="15" fill="rgb(244,68,36)" fg:x="58" fg:w="1"/><text x="19.3919%" y="191.50"></text></g><g><title>clap::parser::matches::matched_arg::MatchedArg::infer_type_id (1 samples, 0.33%)</title><rect x="19.1419%" y="165" width="0.3300%" height="15" fill="rgb(232,229,15)" fg:x="58" fg:w="1"/><text x="19.3919%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 1.32%)</title><rect x="23.4323%" y="229" width="1.3201%" height="15" fill="rgb(254,30,23)" fg:x="71" fg:w="4"/><text x="23.6823%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts (2 samples, 0.66%)</title><rect x="24.0924%" y="213" width="0.6601%" height="15" fill="rgb(235,160,14)" fg:x="73" fg:w="2"/><text x="24.3424%" y="223.50"></text></g><g><title>core::ptr::slice_from_raw_parts (2 samples, 0.66%)</title><rect x="24.0924%" y="197" width="0.6601%" height="15" fill="rgb(212,155,44)" fg:x="73" fg:w="2"/><text x="24.3424%" y="207.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (2 samples, 0.66%)</title><rect x="24.0924%" y="181" width="0.6601%" height="15" fill="rgb(226,2,50)" fg:x="73" fg:w="2"/><text x="24.3424%" y="191.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::le (4 samples, 1.32%)</title><rect x="24.7525%" y="229" width="1.3201%" height="15" fill="rgb(234,177,6)" fg:x="75" fg:w="4"/><text x="25.0025%" y="239.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.66%)</title><rect x="26.0726%" y="213" width="0.6601%" height="15" fill="rgb(217,24,9)" fg:x="79" fg:w="2"/><text x="26.3226%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.33%)</title><rect x="27.0627%" y="197" width="0.3300%" height="15" fill="rgb(220,13,46)" fg:x="82" fg:w="1"/><text x="27.3127%" y="207.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.33%)</title><rect x="27.0627%" y="181" width="0.3300%" height="15" fill="rgb(239,221,27)" fg:x="82" fg:w="1"/><text x="27.3127%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.33%)</title><rect x="27.0627%" y="165" width="0.3300%" height="15" fill="rgb(222,198,25)" fg:x="82" fg:w="1"/><text x="27.3127%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.33%)</title><rect x="27.0627%" y="149" width="0.3300%" height="15" fill="rgb(211,99,13)" fg:x="82" fg:w="1"/><text x="27.3127%" y="159.50"></text></g><g><title>core::ptr::slice_from_raw_parts (1 samples, 0.33%)</title><rect x="27.0627%" y="133" width="0.3300%" height="15" fill="rgb(232,111,31)" fg:x="82" fg:w="1"/><text x="27.3127%" y="143.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (1 samples, 0.33%)</title><rect x="27.0627%" y="117" width="0.3300%" height="15" fill="rgb(245,82,37)" fg:x="82" fg:w="1"/><text x="27.3127%" y="127.50"></text></g><g><title>&lt;tftp::packet::DataPacket as tftp::packet::ByteConverter&gt;::from_bytes (6 samples, 1.98%)</title><rect x="26.7327%" y="213" width="1.9802%" height="15" fill="rgb(227,149,46)" fg:x="81" fg:w="6"/><text x="26.9827%" y="223.50">&lt;..</text></g><g><title>tftp::packet::try_from (4 samples, 1.32%)</title><rect x="27.3927%" y="197" width="1.3201%" height="15" fill="rgb(218,36,50)" fg:x="83" fg:w="4"/><text x="27.6427%" y="207.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.33%)</title><rect x="28.3828%" y="181" width="0.3300%" height="15" fill="rgb(226,80,48)" fg:x="86" fg:w="1"/><text x="28.6328%" y="191.50"></text></g><g><title>[libc.so.6] (1 samples, 0.33%)</title><rect x="28.7129%" y="213" width="0.3300%" height="15" fill="rgb(238,224,15)" fg:x="87" fg:w="1"/><text x="28.9629%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.33%)</title><rect x="29.0429%" y="213" width="0.3300%" height="15" fill="rgb(241,136,10)" fg:x="88" fg:w="1"/><text x="29.2929%" y="223.50"></text></g><g><title>memcpy (1 samples, 0.33%)</title><rect x="29.3729%" y="213" width="0.3300%" height="15" fill="rgb(208,32,45)" fg:x="89" fg:w="1"/><text x="29.6229%" y="223.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.33%)</title><rect x="29.7030%" y="181" width="0.3300%" height="15" fill="rgb(207,135,9)" fg:x="90" fg:w="1"/><text x="29.9530%" y="191.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (1 samples, 0.33%)</title><rect x="29.7030%" y="165" width="0.3300%" height="15" fill="rgb(206,86,44)" fg:x="90" fg:w="1"/><text x="29.9530%" y="175.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.33%)</title><rect x="29.7030%" y="149" width="0.3300%" height="15" fill="rgb(245,177,15)" fg:x="90" fg:w="1"/><text x="29.9530%" y="159.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (1 samples, 0.33%)</title><rect x="29.7030%" y="133" width="0.3300%" height="15" fill="rgb(206,64,50)" fg:x="90" fg:w="1"/><text x="29.9530%" y="143.50"></text></g><g><title>&lt;tftp::packet::Packet as tftp::packet::ByteConverter&gt;::from_bytes (13 samples, 4.29%)</title><rect x="26.0726%" y="229" width="4.2904%" height="15" fill="rgb(234,36,40)" fg:x="79" fg:w="13"/><text x="26.3226%" y="239.50">&lt;tftp..</text></g><g><title>tftp::packet::PacketType::from_bytes (2 samples, 0.66%)</title><rect x="29.7030%" y="213" width="0.6601%" height="15" fill="rgb(213,64,8)" fg:x="90" fg:w="2"/><text x="29.9530%" y="223.50"></text></g><g><title>tftp::packet::try_from (2 samples, 0.66%)</title><rect x="29.7030%" y="197" width="0.6601%" height="15" fill="rgb(210,75,36)" fg:x="90" fg:w="2"/><text x="29.9530%" y="207.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.33%)</title><rect x="30.0330%" y="181" width="0.3300%" height="15" fill="rgb(229,88,21)" fg:x="91" fg:w="1"/><text x="30.2830%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.66%)</title><rect x="31.0231%" y="197" width="0.6601%" height="15" fill="rgb(252,204,47)" fg:x="94" fg:w="2"/><text x="31.2731%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.33%)</title><rect x="31.3531%" y="181" width="0.3300%" height="15" fill="rgb(208,77,27)" fg:x="95" fg:w="1"/><text x="31.6031%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.33%)</title><rect x="31.3531%" y="165" width="0.3300%" height="15" fill="rgb(221,76,26)" fg:x="95" fg:w="1"/><text x="31.6031%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null::runtime_impl (1 samples, 0.33%)</title><rect x="31.3531%" y="149" width="0.3300%" height="15" fill="rgb(225,139,18)" fg:x="95" fg:w="1"/><text x="31.6031%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;polling::Event&gt;&gt; (7 samples, 2.31%)</title><rect x="31.0231%" y="213" width="2.3102%" height="15" fill="rgb(230,137,11)" fg:x="94" fg:w="7"/><text x="31.2731%" y="223.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;polling::Event&gt;&gt; (5 samples, 1.65%)</title><rect x="31.6832%" y="197" width="1.6502%" height="15" fill="rgb(212,28,1)" fg:x="96" fg:w="5"/><text x="31.9332%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 1.65%)</title><rect x="31.6832%" y="181" width="1.6502%" height="15" fill="rgb(248,164,17)" fg:x="96" fg:w="5"/><text x="31.9332%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 1.32%)</title><rect x="32.0132%" y="165" width="1.3201%" height="15" fill="rgb(222,171,42)" fg:x="97" fg:w="4"/><text x="32.2632%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.66%)</title><rect x="32.6733%" y="149" width="0.6601%" height="15" fill="rgb(243,84,45)" fg:x="99" fg:w="2"/><text x="32.9233%" y="159.50"></text></g><g><title>cfree (2 samples, 0.66%)</title><rect x="32.6733%" y="133" width="0.6601%" height="15" fill="rgb(252,49,23)" fg:x="99" fg:w="2"/><text x="32.9233%" y="143.50"></text></g><g><title>[libc.so.6] (2 samples, 0.66%)</title><rect x="32.6733%" y="117" width="0.6601%" height="15" fill="rgb(215,19,7)" fg:x="99" fg:w="2"/><text x="32.9233%" y="127.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.33%)</title><rect x="33.3333%" y="213" width="0.3300%" height="15" fill="rgb(238,81,41)" fg:x="101" fg:w="1"/><text x="33.5833%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::Error&gt; (2 samples, 0.66%)</title><rect x="34.6535%" y="165" width="0.6601%" height="15" fill="rgb(210,199,37)" fg:x="105" fg:w="2"/><text x="34.9035%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::repr_bitpacked::Repr&gt; (1 samples, 0.33%)</title><rect x="34.9835%" y="149" width="0.3300%" height="15" fill="rgb(244,192,49)" fg:x="106" fg:w="1"/><text x="35.2335%" y="159.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (10 samples, 3.30%)</title><rect x="33.6634%" y="213" width="3.3003%" height="15" fill="rgb(226,211,11)" fg:x="102" fg:w="10"/><text x="33.9134%" y="223.50">cor..</text></g><g><title>core::ops::function::FnOnce::call_once (8 samples, 2.64%)</title><rect x="34.3234%" y="197" width="2.6403%" height="15" fill="rgb(236,162,54)" fg:x="104" fg:w="8"/><text x="34.5734%" y="207.50">co..</text></g><g><title>tftp::io::from_io_err (7 samples, 2.31%)</title><rect x="34.6535%" y="181" width="2.3102%" height="15" fill="rgb(220,229,9)" fg:x="105" fg:w="7"/><text x="34.9035%" y="191.50">t..</text></g><g><title>std::io::error::Error::kind (5 samples, 1.65%)</title><rect x="35.3135%" y="165" width="1.6502%" height="15" fill="rgb(250,87,22)" fg:x="107" fg:w="5"/><text x="35.5635%" y="175.50"></text></g><g><title>std::io::error::repr_bitpacked::Repr::data (2 samples, 0.66%)</title><rect x="36.3036%" y="149" width="0.6601%" height="15" fill="rgb(239,43,17)" fg:x="110" fg:w="2"/><text x="36.5536%" y="159.50"></text></g><g><title>std::io::error::repr_bitpacked::decode_repr (2 samples, 0.66%)</title><rect x="36.3036%" y="133" width="0.6601%" height="15" fill="rgb(231,177,25)" fg:x="110" fg:w="2"/><text x="36.5536%" y="143.50"></text></g><g><title>polling::Event::readable (1 samples, 0.33%)</title><rect x="36.9637%" y="213" width="0.3300%" height="15" fill="rgb(219,179,1)" fg:x="112" fg:w="1"/><text x="37.2137%" y="223.50"></text></g><g><title>&lt;&amp;T as polling::Source&gt;::raw (2 samples, 0.66%)</title><rect x="37.2937%" y="197" width="0.6601%" height="15" fill="rgb(238,219,53)" fg:x="113" fg:w="2"/><text x="37.5437%" y="207.50"></text></g><g><title>std::os::fd::net::&lt;impl std::os::fd::raw::AsRawFd for std::net::udp::UdpSocket&gt;::as_raw_fd (1 samples, 0.33%)</title><rect x="37.6238%" y="181" width="0.3300%" height="15" fill="rgb(232,167,36)" fg:x="114" fg:w="1"/><text x="37.8738%" y="191.50"></text></g><g><title>log::max_level (3 samples, 0.99%)</title><rect x="37.9538%" y="181" width="0.9901%" height="15" fill="rgb(244,19,51)" fg:x="115" fg:w="3"/><text x="38.2038%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (3 samples, 0.99%)</title><rect x="37.9538%" y="165" width="0.9901%" height="15" fill="rgb(224,6,22)" fg:x="115" fg:w="3"/><text x="38.2038%" y="175.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.66%)</title><rect x="38.2838%" y="149" width="0.6601%" height="15" fill="rgb(224,145,5)" fg:x="116" fg:w="2"/><text x="38.5338%" y="159.50"></text></g><g><title>polling::Poller::modify (9 samples, 2.97%)</title><rect x="37.2937%" y="213" width="2.9703%" height="15" fill="rgb(234,130,49)" fg:x="113" fg:w="9"/><text x="37.5437%" y="223.50">pol..</text></g><g><title>polling::epoll::Poller::modify (7 samples, 2.31%)</title><rect x="37.9538%" y="197" width="2.3102%" height="15" fill="rgb(254,6,2)" fg:x="115" fg:w="7"/><text x="38.2038%" y="207.50">p..</text></g><g><title>polling::epoll::Poller::ctl (4 samples, 1.32%)</title><rect x="38.9439%" y="181" width="1.3201%" height="15" fill="rgb(208,96,46)" fg:x="118" fg:w="4"/><text x="39.1939%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (4 samples, 1.32%)</title><rect x="38.9439%" y="165" width="1.3201%" height="15" fill="rgb(239,3,39)" fg:x="118" fg:w="4"/><text x="39.1939%" y="175.50"></text></g><g><title>polling::epoll::Poller::ctl::{{closure}} (1 samples, 0.33%)</title><rect x="39.9340%" y="149" width="0.3300%" height="15" fill="rgb(233,210,1)" fg:x="121" fg:w="1"/><text x="40.1840%" y="159.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.33%)</title><rect x="40.9241%" y="181" width="0.3300%" height="15" fill="rgb(244,137,37)" fg:x="124" fg:w="1"/><text x="41.1741%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.33%)</title><rect x="41.9142%" y="85" width="0.3300%" height="15" fill="rgb(240,136,2)" fg:x="127" fg:w="1"/><text x="42.1642%" y="95.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 0.33%)</title><rect x="41.9142%" y="69" width="0.3300%" height="15" fill="rgb(239,18,37)" fg:x="127" fg:w="1"/><text x="42.1642%" y="79.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.33%)</title><rect x="41.9142%" y="53" width="0.3300%" height="15" fill="rgb(218,185,22)" fg:x="127" fg:w="1"/><text x="42.1642%" y="63.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.33%)</title><rect x="41.9142%" y="37" width="0.3300%" height="15" fill="rgb(225,218,4)" fg:x="127" fg:w="1"/><text x="42.1642%" y="47.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.66%)</title><rect x="41.9142%" y="117" width="0.6601%" height="15" fill="rgb(230,182,32)" fg:x="127" fg:w="2"/><text x="42.1642%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.66%)</title><rect x="41.9142%" y="101" width="0.6601%" height="15" fill="rgb(242,56,43)" fg:x="127" fg:w="2"/><text x="42.1642%" y="111.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (1 samples, 0.33%)</title><rect x="42.2442%" y="85" width="0.3300%" height="15" fill="rgb(233,99,24)" fg:x="128" fg:w="1"/><text x="42.4942%" y="95.50"></text></g><g><title>polling::epoll::Events::iter::{{closure}} (1 samples, 0.33%)</title><rect x="42.2442%" y="69" width="0.3300%" height="15" fill="rgb(234,209,42)" fg:x="128" fg:w="1"/><text x="42.4942%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 1.98%)</title><rect x="41.5842%" y="149" width="1.9802%" height="15" fill="rgb(227,7,12)" fg:x="126" fg:w="6"/><text x="41.8342%" y="159.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::find (6 samples, 1.98%)</title><rect x="41.5842%" y="133" width="1.9802%" height="15" fill="rgb(245,203,43)" fg:x="126" fg:w="6"/><text x="41.8342%" y="143.50">c..</text></g><g><title>core::ops::control_flow::ControlFlow&lt;B,C&gt;::break_value (3 samples, 0.99%)</title><rect x="42.5743%" y="117" width="0.9901%" height="15" fill="rgb(238,205,33)" fg:x="129" fg:w="3"/><text x="42.8243%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.33%)</title><rect x="43.8944%" y="117" width="0.3300%" height="15" fill="rgb(231,56,7)" fg:x="133" fg:w="1"/><text x="44.1444%" y="127.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.33%)</title><rect x="44.2244%" y="85" width="0.3300%" height="15" fill="rgb(244,186,29)" fg:x="134" fg:w="1"/><text x="44.4744%" y="95.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.33%)</title><rect x="44.2244%" y="69" width="0.3300%" height="15" fill="rgb(234,111,31)" fg:x="134" fg:w="1"/><text x="44.4744%" y="79.50"></text></g><g><title>core::alloc::layout::Layout::max_size_for_align (1 samples, 0.33%)</title><rect x="44.2244%" y="53" width="0.3300%" height="15" fill="rgb(241,149,10)" fg:x="134" fg:w="1"/><text x="44.4744%" y="63.50"></text></g><g><title>core::cmp::max (3 samples, 0.99%)</title><rect x="44.5545%" y="85" width="0.9901%" height="15" fill="rgb(249,206,44)" fg:x="135" fg:w="3"/><text x="44.8045%" y="95.50"></text></g><g><title>core::cmp::Ord::max (3 samples, 0.99%)</title><rect x="44.5545%" y="69" width="0.9901%" height="15" fill="rgb(251,153,30)" fg:x="135" fg:w="3"/><text x="44.8045%" y="79.50"></text></g><g><title>core::cmp::max_by (2 samples, 0.66%)</title><rect x="44.8845%" y="53" width="0.6601%" height="15" fill="rgb(239,152,38)" fg:x="136" fg:w="2"/><text x="45.1345%" y="63.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (15 samples, 4.95%)</title><rect x="40.9241%" y="197" width="4.9505%" height="15" fill="rgb(249,139,47)" fg:x="124" fg:w="15"/><text x="41.1741%" y="207.50">&lt;alloc..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (14 samples, 4.62%)</title><rect x="41.2541%" y="181" width="4.6205%" height="15" fill="rgb(244,64,35)" fg:x="125" fg:w="14"/><text x="41.5041%" y="191.50">&lt;allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (14 samples, 4.62%)</title><rect x="41.2541%" y="165" width="4.6205%" height="15" fill="rgb(216,46,15)" fg:x="125" fg:w="14"/><text x="41.5041%" y="175.50">alloc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (7 samples, 2.31%)</title><rect x="43.5644%" y="149" width="2.3102%" height="15" fill="rgb(250,74,19)" fg:x="132" fg:w="7"/><text x="43.8144%" y="159.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 2.31%)</title><rect x="43.5644%" y="133" width="2.3102%" height="15" fill="rgb(249,42,33)" fg:x="132" fg:w="7"/><text x="43.8144%" y="143.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 1.65%)</title><rect x="44.2244%" y="117" width="1.6502%" height="15" fill="rgb(242,149,17)" fg:x="134" fg:w="5"/><text x="44.4744%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 1.65%)</title><rect x="44.2244%" y="101" width="1.6502%" height="15" fill="rgb(244,29,21)" fg:x="134" fg:w="5"/><text x="44.4744%" y="111.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (1 samples, 0.33%)</title><rect x="45.5446%" y="85" width="0.3300%" height="15" fill="rgb(220,130,37)" fg:x="138" fg:w="1"/><text x="45.7946%" y="95.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.33%)</title><rect x="45.8746%" y="197" width="0.3300%" height="15" fill="rgb(211,67,2)" fg:x="139" fg:w="1"/><text x="46.1246%" y="207.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.33%)</title><rect x="46.2046%" y="197" width="0.3300%" height="15" fill="rgb(235,68,52)" fg:x="140" fg:w="1"/><text x="46.4546%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (2 samples, 0.66%)</title><rect x="46.5347%" y="197" width="0.6601%" height="15" fill="rgb(246,142,3)" fg:x="141" fg:w="2"/><text x="46.7847%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_swap (1 samples, 0.33%)</title><rect x="46.8647%" y="181" width="0.3300%" height="15" fill="rgb(241,25,7)" fg:x="142" fg:w="1"/><text x="47.1147%" y="191.50"></text></g><g><title>log::max_level (1 samples, 0.33%)</title><rect x="47.1947%" y="197" width="0.3300%" height="15" fill="rgb(242,119,39)" fg:x="143" fg:w="1"/><text x="47.4447%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.33%)</title><rect x="47.1947%" y="181" width="0.3300%" height="15" fill="rgb(241,98,45)" fg:x="143" fg:w="1"/><text x="47.4447%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.33%)</title><rect x="47.1947%" y="165" width="0.3300%" height="15" fill="rgb(254,28,30)" fg:x="143" fg:w="1"/><text x="47.4447%" y="175.50"></text></g><g><title>core::array::&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (2 samples, 0.66%)</title><rect x="47.5248%" y="181" width="0.6601%" height="15" fill="rgb(241,142,54)" fg:x="144" fg:w="2"/><text x="47.7748%" y="191.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.66%)</title><rect x="47.5248%" y="165" width="0.6601%" height="15" fill="rgb(222,85,15)" fg:x="144" fg:w="2"/><text x="47.7748%" y="175.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.33%)</title><rect x="47.8548%" y="149" width="0.3300%" height="15" fill="rgb(210,85,47)" fg:x="145" fg:w="1"/><text x="48.1048%" y="159.50"></text></g><g><title>polling::epoll::Events::iter (4 samples, 1.32%)</title><rect x="47.5248%" y="197" width="1.3201%" height="15" fill="rgb(224,206,25)" fg:x="144" fg:w="4"/><text x="47.7748%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (2 samples, 0.66%)</title><rect x="48.1848%" y="181" width="0.6601%" height="15" fill="rgb(243,201,19)" fg:x="146" fg:w="2"/><text x="48.4348%" y="191.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (2 samples, 0.66%)</title><rect x="48.1848%" y="165" width="0.6601%" height="15" fill="rgb(236,59,4)" fg:x="146" fg:w="2"/><text x="48.4348%" y="175.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (1 samples, 0.33%)</title><rect x="48.5149%" y="149" width="0.3300%" height="15" fill="rgb(254,179,45)" fg:x="147" fg:w="1"/><text x="48.7649%" y="159.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null::runtime_impl (1 samples, 0.33%)</title><rect x="48.5149%" y="133" width="0.3300%" height="15" fill="rgb(226,14,10)" fg:x="147" fg:w="1"/><text x="48.7649%" y="143.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::addr (1 samples, 0.33%)</title><rect x="48.5149%" y="117" width="0.3300%" height="15" fill="rgb(244,27,41)" fg:x="147" fg:w="1"/><text x="48.7649%" y="127.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.33%)</title><rect x="50.4950%" y="181" width="0.3300%" height="15" fill="rgb(235,35,32)" fg:x="153" fg:w="1"/><text x="50.7450%" y="191.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.99%)</title><rect x="50.8251%" y="181" width="0.9901%" height="15" fill="rgb(218,68,31)" fg:x="154" fg:w="3"/><text x="51.0751%" y="191.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::le (2 samples, 0.66%)</title><rect x="51.8152%" y="181" width="0.6601%" height="15" fill="rgb(207,120,37)" fg:x="157" fg:w="2"/><text x="52.0652%" y="191.50"></text></g><g><title>[libc.so.6] (4 samples, 1.32%)</title><rect x="52.4752%" y="181" width="1.3201%" height="15" fill="rgb(227,98,0)" fg:x="159" fg:w="4"/><text x="52.7252%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;isize,std::io::error::Error&gt;&gt; (5 samples, 1.65%)</title><rect x="53.7954%" y="181" width="1.6502%" height="15" fill="rgb(207,7,3)" fg:x="163" fg:w="5"/><text x="54.0454%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::Error&gt; (5 samples, 1.65%)</title><rect x="53.7954%" y="165" width="1.6502%" height="15" fill="rgb(206,98,19)" fg:x="163" fg:w="5"/><text x="54.0454%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::repr_bitpacked::Repr&gt; (2 samples, 0.66%)</title><rect x="54.7855%" y="149" width="0.6601%" height="15" fill="rgb(217,5,26)" fg:x="166" fg:w="2"/><text x="55.0355%" y="159.50"></text></g><g><title>&lt;std::io::error::repr_bitpacked::Repr as core::ops::drop::Drop&gt;::drop (2 samples, 0.66%)</title><rect x="54.7855%" y="133" width="0.6601%" height="15" fill="rgb(235,190,38)" fg:x="166" fg:w="2"/><text x="55.0355%" y="143.50"></text></g><g><title>std::io::error::repr_bitpacked::decode_repr (2 samples, 0.66%)</title><rect x="54.7855%" y="117" width="0.6601%" height="15" fill="rgb(247,86,24)" fg:x="166" fg:w="2"/><text x="55.0355%" y="127.50"></text></g><g><title>core::time::Duration::as_secs (1 samples, 0.33%)</title><rect x="55.4455%" y="181" width="0.3300%" height="15" fill="rgb(205,101,16)" fg:x="168" fg:w="1"/><text x="55.6955%" y="191.50"></text></g><g><title>core::time::Duration::from_secs (1 samples, 0.33%)</title><rect x="55.7756%" y="181" width="0.3300%" height="15" fill="rgb(246,168,33)" fg:x="169" fg:w="1"/><text x="56.0256%" y="191.50"></text></g><g><title>core::time::Duration::new (1 samples, 0.33%)</title><rect x="55.7756%" y="165" width="0.3300%" height="15" fill="rgb(231,114,1)" fg:x="169" fg:w="1"/><text x="56.0256%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::checked_add (1 samples, 0.33%)</title><rect x="55.7756%" y="149" width="0.3300%" height="15" fill="rgb(207,184,53)" fg:x="169" fg:w="1"/><text x="56.0256%" y="159.50"></text></g><g><title>core::time::Duration::subsec_nanos (1 samples, 0.33%)</title><rect x="56.1056%" y="181" width="0.3300%" height="15" fill="rgb(224,95,51)" fg:x="170" fg:w="1"/><text x="56.3556%" y="191.50"></text></g><g><title>epoll_wait (13 samples, 4.29%)</title><rect x="56.4356%" y="181" width="4.2904%" height="15" fill="rgb(212,188,45)" fg:x="171" fg:w="13"/><text x="56.6856%" y="191.50">epoll..</text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.66%)</title><rect x="61.3861%" y="149" width="0.6601%" height="15" fill="rgb(223,154,38)" fg:x="186" fg:w="2"/><text x="61.6361%" y="159.50"></text></g><g><title>polling::epoll::Poller::ctl::{{closure}} (1 samples, 0.33%)</title><rect x="61.7162%" y="133" width="0.3300%" height="15" fill="rgb(251,22,52)" fg:x="187" fg:w="1"/><text x="61.9662%" y="143.50"></text></g><g><title>polling::epoll::Poller::modify (5 samples, 1.65%)</title><rect x="60.7261%" y="181" width="1.6502%" height="15" fill="rgb(229,209,22)" fg:x="184" fg:w="5"/><text x="60.9761%" y="191.50"></text></g><g><title>polling::epoll::Poller::ctl (3 samples, 0.99%)</title><rect x="61.3861%" y="165" width="0.9901%" height="15" fill="rgb(234,138,34)" fg:x="186" fg:w="3"/><text x="61.6361%" y="175.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (1 samples, 0.33%)</title><rect x="62.0462%" y="149" width="0.3300%" height="15" fill="rgb(212,95,11)" fg:x="188" fg:w="1"/><text x="62.2962%" y="159.50"></text></g><g><title>read (2 samples, 0.66%)</title><rect x="62.3762%" y="181" width="0.6601%" height="15" fill="rgb(240,179,47)" fg:x="189" fg:w="2"/><text x="62.6262%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.33%)</title><rect x="62.7063%" y="165" width="0.3300%" height="15" fill="rgb(240,163,11)" fg:x="190" fg:w="1"/><text x="62.9563%" y="175.50"></text></g><g><title>polling::epoll::Poller::wait (44 samples, 14.52%)</title><rect x="48.8449%" y="197" width="14.5215%" height="15" fill="rgb(236,37,12)" fg:x="148" fg:w="44"/><text x="49.0949%" y="207.50">polling::epoll::Poller..</text></g><g><title>timerfd_settime (1 samples, 0.33%)</title><rect x="63.0363%" y="181" width="0.3300%" height="15" fill="rgb(232,164,16)" fg:x="191" fg:w="1"/><text x="63.2863%" y="191.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (4 samples, 1.32%)</title><rect x="63.6964%" y="181" width="1.3201%" height="15" fill="rgb(244,205,15)" fg:x="193" fg:w="4"/><text x="63.9464%" y="191.50"></text></g><g><title>std::sync::poison::Flag::guard (3 samples, 0.99%)</title><rect x="64.0264%" y="165" width="0.9901%" height="15" fill="rgb(223,117,47)" fg:x="194" fg:w="3"/><text x="64.2764%" y="175.50"></text></g><g><title>std::sync::poison::Flag::get (2 samples, 0.66%)</title><rect x="64.3564%" y="149" width="0.6601%" height="15" fill="rgb(244,107,35)" fg:x="195" fg:w="2"/><text x="64.6064%" y="159.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (2 samples, 0.66%)</title><rect x="64.3564%" y="133" width="0.6601%" height="15" fill="rgb(205,140,8)" fg:x="195" fg:w="2"/><text x="64.6064%" y="143.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.33%)</title><rect x="64.6865%" y="117" width="0.3300%" height="15" fill="rgb(228,84,46)" fg:x="196" fg:w="1"/><text x="64.9365%" y="127.50"></text></g><g><title>polling::Poller::wait (76 samples, 25.08%)</title><rect x="40.2640%" y="213" width="25.0825%" height="15" fill="rgb(254,188,9)" fg:x="122" fg:w="76"/><text x="40.5140%" y="223.50">polling::Poller::wait</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (6 samples, 1.98%)</title><rect x="63.3663%" y="197" width="1.9802%" height="15" fill="rgb(206,112,54)" fg:x="192" fg:w="6"/><text x="63.6163%" y="207.50">s..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::try_lock (1 samples, 0.33%)</title><rect x="65.0165%" y="181" width="0.3300%" height="15" fill="rgb(216,84,49)" fg:x="197" fg:w="1"/><text x="65.2665%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.33%)</title><rect x="65.0165%" y="165" width="0.3300%" height="15" fill="rgb(214,194,35)" fg:x="197" fg:w="1"/><text x="65.2665%" y="175.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.33%)</title><rect x="65.0165%" y="149" width="0.3300%" height="15" fill="rgb(249,28,3)" fg:x="197" fg:w="1"/><text x="65.2665%" y="159.50"></text></g><g><title>recvfrom (2 samples, 0.66%)</title><rect x="65.6766%" y="149" width="0.6601%" height="15" fill="rgb(222,56,52)" fg:x="199" fg:w="2"/><text x="65.9266%" y="159.50"></text></g><g><title>&lt;isize as std::sys::unix::IsMinusOne&gt;::is_minus_one (1 samples, 0.33%)</title><rect x="66.3366%" y="133" width="0.3300%" height="15" fill="rgb(245,217,50)" fg:x="201" fg:w="1"/><text x="66.5866%" y="143.50"></text></g><g><title>&lt;tftp::socket::StdSocket as tftp::socket::Socket&gt;::recv_from (111 samples, 36.63%)</title><rect x="30.3630%" y="229" width="36.6337%" height="15" fill="rgb(213,201,24)" fg:x="92" fg:w="111"/><text x="30.6130%" y="239.50">&lt;tftp::socket::StdSocket as tftp::socket::Socket&gt;::recv_from</text></g><g><title>std::net::udp::UdpSocket::recv_from (5 samples, 1.65%)</title><rect x="65.3465%" y="213" width="1.6502%" height="15" fill="rgb(248,116,28)" fg:x="198" fg:w="5"/><text x="65.5965%" y="223.50"></text></g><g><title>std::sys_common::net::UdpSocket::recv_from (5 samples, 1.65%)</title><rect x="65.3465%" y="197" width="1.6502%" height="15" fill="rgb(219,72,43)" fg:x="198" fg:w="5"/><text x="65.5965%" y="207.50"></text></g><g><title>std::sys::unix::net::Socket::recv_from (5 samples, 1.65%)</title><rect x="65.3465%" y="181" width="1.6502%" height="15" fill="rgb(209,138,14)" fg:x="198" fg:w="5"/><text x="65.5965%" y="191.50"></text></g><g><title>std::sys::unix::net::Socket::recv_from_with_flags (5 samples, 1.65%)</title><rect x="65.3465%" y="165" width="1.6502%" height="15" fill="rgb(222,18,33)" fg:x="198" fg:w="5"/><text x="65.5965%" y="175.50"></text></g><g><title>std::sys::unix::cvt (2 samples, 0.66%)</title><rect x="66.3366%" y="149" width="0.6601%" height="15" fill="rgb(213,199,7)" fg:x="201" fg:w="2"/><text x="66.5866%" y="159.50"></text></g><g><title>std::io::error::Error::last_os_error (1 samples, 0.33%)</title><rect x="66.6667%" y="133" width="0.3300%" height="15" fill="rgb(250,110,10)" fg:x="202" fg:w="1"/><text x="66.9167%" y="143.50"></text></g><g><title>std::sys::unix::os::errno (1 samples, 0.33%)</title><rect x="66.6667%" y="117" width="0.3300%" height="15" fill="rgb(248,123,6)" fg:x="202" fg:w="1"/><text x="66.9167%" y="127.50"></text></g><g><title>__errno_location (1 samples, 0.33%)</title><rect x="66.6667%" y="101" width="0.3300%" height="15" fill="rgb(206,91,31)" fg:x="202" fg:w="1"/><text x="66.9167%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.99%)</title><rect x="69.3069%" y="165" width="0.9901%" height="15" fill="rgb(211,154,13)" fg:x="210" fg:w="3"/><text x="69.5569%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.33%)</title><rect x="69.9670%" y="149" width="0.3300%" height="15" fill="rgb(225,148,7)" fg:x="212" fg:w="1"/><text x="70.2170%" y="159.50"></text></g><g><title>core::array::&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (1 samples, 0.33%)</title><rect x="72.6073%" y="117" width="0.3300%" height="15" fill="rgb(220,160,43)" fg:x="220" fg:w="1"/><text x="72.8573%" y="127.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.33%)</title><rect x="72.6073%" y="101" width="0.3300%" height="15" fill="rgb(213,52,39)" fg:x="220" fg:w="1"/><text x="72.8573%" y="111.50"></text></g><g><title>&lt;core::ops::range::RangeFull as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.33%)</title><rect x="72.6073%" y="85" width="0.3300%" height="15" fill="rgb(243,137,7)" fg:x="220" fg:w="1"/><text x="72.8573%" y="95.50"></text></g><g><title>&lt;tftp::std_compat::net::SocketAddr as core::cmp::Ord&gt;::cmp (11 samples, 3.63%)</title><rect x="70.2970%" y="165" width="3.6304%" height="15" fill="rgb(230,79,13)" fg:x="213" fg:w="11"/><text x="70.5470%" y="175.50">&lt;tft..</text></g><g><title>&lt;tftp::std_compat::net::IpVersion as core::cmp::Ord&gt;::cmp (9 samples, 2.97%)</title><rect x="70.9571%" y="149" width="2.9703%" height="15" fill="rgb(247,105,23)" fg:x="215" fg:w="9"/><text x="71.2071%" y="159.50">&lt;tf..</text></g><g><title>core::array::&lt;impl core::cmp::Ord for [T: N]&gt;::cmp (6 samples, 1.98%)</title><rect x="71.9472%" y="133" width="1.9802%" height="15" fill="rgb(223,179,41)" fg:x="218" fg:w="6"/><text x="72.1972%" y="143.50">c..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for &amp;A&gt;::cmp (3 samples, 0.99%)</title><rect x="72.9373%" y="117" width="0.9901%" height="15" fill="rgb(218,9,34)" fg:x="221" fg:w="3"/><text x="73.1873%" y="127.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (3 samples, 0.99%)</title><rect x="72.9373%" y="101" width="0.9901%" height="15" fill="rgb(222,106,8)" fg:x="221" fg:w="3"/><text x="73.1873%" y="111.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (2 samples, 0.66%)</title><rect x="73.2673%" y="85" width="0.6601%" height="15" fill="rgb(211,220,0)" fg:x="222" fg:w="2"/><text x="73.5173%" y="95.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for isize&gt;::cmp (1 samples, 0.33%)</title><rect x="73.5974%" y="69" width="0.3300%" height="15" fill="rgb(229,52,16)" fg:x="223" fg:w="1"/><text x="73.8474%" y="79.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (1 samples, 0.33%)</title><rect x="73.9274%" y="165" width="0.3300%" height="15" fill="rgb(212,155,18)" fg:x="224" fg:w="1"/><text x="74.1774%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.33%)</title><rect x="73.9274%" y="149" width="0.3300%" height="15" fill="rgb(242,21,14)" fg:x="224" fg:w="1"/><text x="74.1774%" y="159.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.33%)</title><rect x="73.9274%" y="133" width="0.3300%" height="15" fill="rgb(222,19,48)" fg:x="224" fg:w="1"/><text x="74.1774%" y="143.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (23 samples, 7.59%)</title><rect x="66.9967%" y="229" width="7.5908%" height="15" fill="rgb(232,45,27)" fg:x="203" fg:w="23"/><text x="67.2467%" y="239.50">alloc::col..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (20 samples, 6.60%)</title><rect x="67.9868%" y="213" width="6.6007%" height="15" fill="rgb(249,103,42)" fg:x="206" fg:w="20"/><text x="68.2368%" y="223.50">alloc::co..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (19 samples, 6.27%)</title><rect x="68.3168%" y="197" width="6.2706%" height="15" fill="rgb(246,81,33)" fg:x="207" fg:w="19"/><text x="68.5668%" y="207.50">alloc::c..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (18 samples, 5.94%)</title><rect x="68.6469%" y="181" width="5.9406%" height="15" fill="rgb(252,33,42)" fg:x="208" fg:w="18"/><text x="68.8969%" y="191.50">alloc::c..</text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (1 samples, 0.33%)</title><rect x="74.2574%" y="165" width="0.3300%" height="15" fill="rgb(209,212,41)" fg:x="225" fg:w="1"/><text x="74.5074%" y="175.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (1 samples, 0.33%)</title><rect x="74.2574%" y="149" width="0.3300%" height="15" fill="rgb(207,154,6)" fg:x="225" fg:w="1"/><text x="74.5074%" y="159.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::is_empty (1 samples, 0.33%)</title><rect x="74.5875%" y="229" width="0.3300%" height="15" fill="rgb(223,64,47)" fg:x="226" fg:w="1"/><text x="74.8375%" y="239.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::len (1 samples, 0.33%)</title><rect x="74.9175%" y="229" width="0.3300%" height="15" fill="rgb(211,161,38)" fg:x="227" fg:w="1"/><text x="75.1675%" y="239.50"></text></g><g><title>alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V,A&gt;::get_mut (1 samples, 0.33%)</title><rect x="75.2475%" y="229" width="0.3300%" height="15" fill="rgb(219,138,40)" fg:x="228" fg:w="1"/><text x="75.4975%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (2 samples, 0.66%)</title><rect x="75.5776%" y="229" width="0.6601%" height="15" fill="rgb(241,228,46)" fg:x="229" fg:w="2"/><text x="75.8276%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1 samples, 0.33%)</title><rect x="75.9076%" y="213" width="0.3300%" height="15" fill="rgb(223,209,38)" fg:x="230" fg:w="1"/><text x="76.1576%" y="223.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.33%)</title><rect x="75.9076%" y="197" width="0.3300%" height="15" fill="rgb(236,164,45)" fg:x="230" fg:w="1"/><text x="76.1576%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.33%)</title><rect x="75.9076%" y="181" width="0.3300%" height="15" fill="rgb(231,15,5)" fg:x="230" fg:w="1"/><text x="76.1576%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (1 samples, 0.33%)</title><rect x="76.2376%" y="229" width="0.3300%" height="15" fill="rgb(252,35,15)" fg:x="231" fg:w="1"/><text x="76.4876%" y="239.50"></text></g><g><title>core::cmp::PartialOrd::gt (1 samples, 0.33%)</title><rect x="76.5677%" y="229" width="0.3300%" height="15" fill="rgb(248,181,18)" fg:x="232" fg:w="1"/><text x="76.8177%" y="239.50"></text></g><g><title>&lt;core::time::Duration as core::cmp::PartialOrd&gt;::partial_cmp (1 samples, 0.33%)</title><rect x="76.5677%" y="213" width="0.3300%" height="15" fill="rgb(233,39,42)" fg:x="232" fg:w="1"/><text x="76.8177%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;(),tftp::packet::ErrorPacket&gt;&gt; (1 samples, 0.33%)</title><rect x="76.8977%" y="229" width="0.3300%" height="15" fill="rgb(238,110,33)" fg:x="233" fg:w="1"/><text x="77.1477%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::len (1 samples, 0.33%)</title><rect x="77.2277%" y="229" width="0.3300%" height="15" fill="rgb(233,195,10)" fg:x="234" fg:w="1"/><text x="77.4777%" y="239.50"></text></g><g><title>core::time::Duration::from_millis (3 samples, 0.99%)</title><rect x="77.5578%" y="229" width="0.9901%" height="15" fill="rgb(254,105,3)" fg:x="235" fg:w="3"/><text x="77.8078%" y="239.50"></text></g><g><title>core::time::Duration::new (2 samples, 0.66%)</title><rect x="77.8878%" y="213" width="0.6601%" height="15" fill="rgb(221,225,9)" fg:x="236" fg:w="2"/><text x="78.1378%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::checked_add (2 samples, 0.66%)</title><rect x="77.8878%" y="197" width="0.6601%" height="15" fill="rgb(224,227,45)" fg:x="236" fg:w="2"/><text x="78.1378%" y="207.50"></text></g><g><title>core::time::Duration::from_secs (1 samples, 0.33%)</title><rect x="78.5479%" y="229" width="0.3300%" height="15" fill="rgb(229,198,43)" fg:x="238" fg:w="1"/><text x="78.7979%" y="239.50"></text></g><g><title>core::time::Duration::new (1 samples, 0.33%)</title><rect x="78.5479%" y="213" width="0.3300%" height="15" fill="rgb(206,209,35)" fg:x="238" fg:w="1"/><text x="78.7979%" y="223.50"></text></g><g><title>log::max_level (2 samples, 0.66%)</title><rect x="78.8779%" y="229" width="0.6601%" height="15" fill="rgb(245,195,53)" fg:x="239" fg:w="2"/><text x="79.1279%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.66%)</title><rect x="78.8779%" y="213" width="0.6601%" height="15" fill="rgb(240,92,26)" fg:x="239" fg:w="2"/><text x="79.1279%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.66%)</title><rect x="78.8779%" y="197" width="0.6601%" height="15" fill="rgb(207,40,23)" fg:x="239" fg:w="2"/><text x="79.1279%" y="207.50"></text></g><g><title>core::ops::function::FnOnce::call_once (9 samples, 2.97%)</title><rect x="79.8680%" y="197" width="2.9703%" height="15" fill="rgb(223,111,35)" fg:x="242" fg:w="9"/><text x="80.1180%" y="207.50">cor..</text></g><g><title>tftp::instant_callback::{{closure}} (6 samples, 1.98%)</title><rect x="80.8581%" y="181" width="1.9802%" height="15" fill="rgb(229,147,28)" fg:x="245" fg:w="6"/><text x="81.1081%" y="191.50">t..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (3 samples, 0.99%)</title><rect x="81.8482%" y="165" width="0.9901%" height="15" fill="rgb(211,29,28)" fg:x="248" fg:w="3"/><text x="82.0982%" y="175.50"></text></g><g><title>clock_gettime (3 samples, 0.99%)</title><rect x="81.8482%" y="149" width="0.9901%" height="15" fill="rgb(228,72,33)" fg:x="248" fg:w="3"/><text x="82.0982%" y="159.50"></text></g><g><title>__vdso_clock_gettime (3 samples, 0.99%)</title><rect x="81.8482%" y="133" width="0.9901%" height="15" fill="rgb(205,214,31)" fg:x="248" fg:w="3"/><text x="82.0982%" y="143.50"></text></g><g><title>tftp::instant_callback (12 samples, 3.96%)</title><rect x="79.5380%" y="229" width="3.9604%" height="15" fill="rgb(224,111,15)" fg:x="241" fg:w="12"/><text x="79.7880%" y="239.50">tftp..</text></g><g><title>tftp::std_compat::time::Instant::from_time (12 samples, 3.96%)</title><rect x="79.5380%" y="213" width="3.9604%" height="15" fill="rgb(253,21,26)" fg:x="241" fg:w="12"/><text x="79.7880%" y="223.50">tftp..</text></g><g><title>core::time::Duration::from_micros (2 samples, 0.66%)</title><rect x="82.8383%" y="197" width="0.6601%" height="15" fill="rgb(245,139,43)" fg:x="251" fg:w="2"/><text x="83.0883%" y="207.50"></text></g><g><title>core::time::Duration::new (2 samples, 0.66%)</title><rect x="82.8383%" y="181" width="0.6601%" height="15" fill="rgb(252,170,7)" fg:x="251" fg:w="2"/><text x="83.0883%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::checked_add (1 samples, 0.33%)</title><rect x="83.1683%" y="165" width="0.3300%" height="15" fill="rgb(231,118,14)" fg:x="252" fg:w="1"/><text x="83.4183%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (1 samples, 0.33%)</title><rect x="83.1683%" y="149" width="0.3300%" height="15" fill="rgb(238,83,0)" fg:x="252" fg:w="1"/><text x="83.4183%" y="159.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (4 samples, 1.32%)</title><rect x="84.1584%" y="197" width="1.3201%" height="15" fill="rgb(221,39,39)" fg:x="255" fg:w="4"/><text x="84.4084%" y="207.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (4 samples, 1.32%)</title><rect x="84.1584%" y="181" width="1.3201%" height="15" fill="rgb(222,119,46)" fg:x="255" fg:w="4"/><text x="84.4084%" y="191.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (3 samples, 0.99%)</title><rect x="84.4884%" y="165" width="0.9901%" height="15" fill="rgb(222,165,49)" fg:x="256" fg:w="3"/><text x="84.7384%" y="175.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (1 samples, 0.33%)</title><rect x="85.1485%" y="149" width="0.3300%" height="15" fill="rgb(219,113,52)" fg:x="258" fg:w="1"/><text x="85.3985%" y="159.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (2 samples, 0.66%)</title><rect x="85.4785%" y="197" width="0.6601%" height="15" fill="rgb(214,7,15)" fg:x="259" fg:w="2"/><text x="85.7285%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;tftp::error::PacketError&gt; (2 samples, 0.66%)</title><rect x="85.4785%" y="181" width="0.6601%" height="15" fill="rgb(235,32,4)" fg:x="259" fg:w="2"/><text x="85.7285%" y="191.50"></text></g><g><title>tftp::packet::PacketType::from_bytes (10 samples, 3.30%)</title><rect x="83.4983%" y="229" width="3.3003%" height="15" fill="rgb(238,90,54)" fg:x="253" fg:w="10"/><text x="83.7483%" y="239.50">tft..</text></g><g><title>tftp::packet::try_from (9 samples, 2.97%)</title><rect x="83.8284%" y="213" width="2.9703%" height="15" fill="rgb(213,208,19)" fg:x="254" fg:w="9"/><text x="84.0784%" y="223.50">tft..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (2 samples, 0.66%)</title><rect x="86.1386%" y="197" width="0.6601%" height="15" fill="rgb(233,156,4)" fg:x="261" fg:w="2"/><text x="86.3886%" y="207.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (2 samples, 0.66%)</title><rect x="86.1386%" y="181" width="0.6601%" height="15" fill="rgb(207,194,5)" fg:x="261" fg:w="2"/><text x="86.3886%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (2 samples, 0.66%)</title><rect x="86.1386%" y="165" width="0.6601%" height="15" fill="rgb(206,111,30)" fg:x="261" fg:w="2"/><text x="86.3886%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.33%)</title><rect x="86.4686%" y="149" width="0.3300%" height="15" fill="rgb(243,70,54)" fg:x="262" fg:w="1"/><text x="86.7186%" y="159.50"></text></g><g><title>[libc.so.6] (1 samples, 0.33%)</title><rect x="87.1287%" y="181" width="0.3300%" height="15" fill="rgb(242,28,8)" fg:x="264" fg:w="1"/><text x="87.3787%" y="191.50"></text></g><g><title>alloc::collections::btree::borrow::DormantMutRef&lt;T&gt;::new (1 samples, 0.33%)</title><rect x="87.4587%" y="165" width="0.3300%" height="15" fill="rgb(219,106,18)" fg:x="265" fg:w="1"/><text x="87.7087%" y="175.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::first_edge (1 samples, 0.33%)</title><rect x="87.7888%" y="149" width="0.3300%" height="15" fill="rgb(244,222,10)" fg:x="266" fg:w="1"/><text x="88.0388%" y="159.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::first_leaf_edge (2 samples, 0.66%)</title><rect x="87.7888%" y="165" width="0.6601%" height="15" fill="rgb(236,179,52)" fg:x="266" fg:w="2"/><text x="88.0388%" y="175.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (1 samples, 0.33%)</title><rect x="88.1188%" y="149" width="0.3300%" height="15" fill="rgb(213,23,39)" fg:x="267" fg:w="1"/><text x="88.3688%" y="159.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::drain_filter_inner (4 samples, 1.32%)</title><rect x="87.4587%" y="181" width="1.3201%" height="15" fill="rgb(238,48,10)" fg:x="265" fg:w="4"/><text x="87.7087%" y="191.50"></text></g><g><title>memcpy (1 samples, 0.33%)</title><rect x="88.4488%" y="165" width="0.3300%" height="15" fill="rgb(251,196,23)" fg:x="268" fg:w="1"/><text x="88.6988%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::drain_filter (7 samples, 2.31%)</title><rect x="86.7987%" y="197" width="2.3102%" height="15" fill="rgb(250,152,24)" fg:x="263" fg:w="7"/><text x="87.0487%" y="207.50">a..</text></g><g><title>memcpy (1 samples, 0.33%)</title><rect x="88.7789%" y="181" width="0.3300%" height="15" fill="rgb(209,150,17)" fg:x="269" fg:w="1"/><text x="89.0289%" y="191.50"></text></g><g><title>tftp::server::server::send_data_blocks (12 samples, 3.96%)</title><rect x="86.7987%" y="229" width="3.9604%" height="15" fill="rgb(234,202,34)" fg:x="263" fg:w="12"/><text x="87.0487%" y="239.50">tftp..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::retain (12 samples, 3.96%)</title><rect x="86.7987%" y="213" width="3.9604%" height="15" fill="rgb(253,148,53)" fg:x="263" fg:w="12"/><text x="87.0487%" y="223.50">allo..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::DrainFilter&lt;tftp::std_compat::net::SocketAddr,tftp::server::connection::Connection&lt;tftp::io::StdCompatFile,tftp::io::StdCompatFile,tftp::socket::StdSocket&gt;,alloc::collections::btree::map::BTreeMap&lt;tftp::std_compat::net::SocketAddr,tftp::server::connection::Connection&lt;tftp::io::StdCompatFile,tftp::io::StdCompatFile,tftp::socket::StdSocket&gt;&gt;::retain&lt;tftp::server::server::send_data_blocks&lt;tftp::io::StdCompatFile,tftp::io::StdCompatFile,tftp::socket::StdSocket&gt;::{{closure}}&gt;::{{closure}}&gt;&gt; (5 samples, 1.65%)</title><rect x="89.1089%" y="197" width="1.6502%" height="15" fill="rgb(218,129,16)" fg:x="270" fg:w="5"/><text x="89.3589%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::DrainFilter&lt;K,V,F,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 1.65%)</title><rect x="89.1089%" y="181" width="1.6502%" height="15" fill="rgb(216,85,19)" fg:x="270" fg:w="5"/><text x="89.3589%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (5 samples, 1.65%)</title><rect x="89.1089%" y="165" width="1.6502%" height="15" fill="rgb(235,228,7)" fg:x="270" fg:w="5"/><text x="89.3589%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.66%)</title><rect x="90.0990%" y="149" width="0.6601%" height="15" fill="rgb(245,175,0)" fg:x="273" fg:w="2"/><text x="90.3490%" y="159.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.33%)</title><rect x="90.4290%" y="133" width="0.3300%" height="15" fill="rgb(208,168,36)" fg:x="274" fg:w="1"/><text x="90.6790%" y="143.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::le (1 samples, 0.33%)</title><rect x="91.7492%" y="213" width="0.3300%" height="15" fill="rgb(246,171,24)" fg:x="278" fg:w="1"/><text x="91.9992%" y="223.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.33%)</title><rect x="94.0594%" y="181" width="0.3300%" height="15" fill="rgb(215,142,24)" fg:x="285" fg:w="1"/><text x="94.3094%" y="191.50"></text></g><g><title>&lt;tftp::io::StdCompatFile as tftp::std_compat::io::Write&gt;::write (4 samples, 1.32%)</title><rect x="93.3993%" y="197" width="1.3201%" height="15" fill="rgb(250,187,7)" fg:x="283" fg:w="4"/><text x="93.6493%" y="207.50"></text></g><g><title>std::os::unix::net::datagram::UnixDatagram::send (1 samples, 0.33%)</title><rect x="94.3894%" y="181" width="0.3300%" height="15" fill="rgb(228,66,33)" fg:x="286" fg:w="1"/><text x="94.6394%" y="191.50"></text></g><g><title>std::sys::unix::net::Socket::write (1 samples, 0.33%)</title><rect x="94.3894%" y="165" width="0.3300%" height="15" fill="rgb(234,215,21)" fg:x="286" fg:w="1"/><text x="94.6394%" y="175.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.33%)</title><rect x="94.3894%" y="149" width="0.3300%" height="15" fill="rgb(222,191,20)" fg:x="286" fg:w="1"/><text x="94.6394%" y="159.50"></text></g><g><title>write (1 samples, 0.33%)</title><rect x="94.3894%" y="133" width="0.3300%" height="15" fill="rgb(245,79,54)" fg:x="286" fg:w="1"/><text x="94.6394%" y="143.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove_entry (3 samples, 0.99%)</title><rect x="94.7195%" y="181" width="0.9901%" height="15" fill="rgb(240,10,37)" fg:x="287" fg:w="3"/><text x="94.9695%" y="191.50"></text></g><g><title>alloc::collections::btree::borrow::DormantMutRef&lt;T&gt;::new (3 samples, 0.99%)</title><rect x="94.7195%" y="165" width="0.9901%" height="15" fill="rgb(214,192,32)" fg:x="287" fg:w="3"/><text x="94.9695%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (4 samples, 1.32%)</title><rect x="94.7195%" y="197" width="1.3201%" height="15" fill="rgb(209,36,54)" fg:x="287" fg:w="4"/><text x="94.9695%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.33%)</title><rect x="95.7096%" y="181" width="0.3300%" height="15" fill="rgb(220,10,11)" fg:x="290" fg:w="1"/><text x="95.9596%" y="191.50"></text></g><g><title>&lt;tftp::storage::FileWriter&lt;T&gt; as tftp::storage::BlockWriter&gt;::write_block (14 samples, 4.62%)</title><rect x="92.0792%" y="213" width="4.6205%" height="15" fill="rgb(221,106,17)" fg:x="279" fg:w="14"/><text x="92.3292%" y="223.50">&lt;tftp..</text></g><g><title>tftp::storage::BlockMapper::index (2 samples, 0.66%)</title><rect x="96.0396%" y="197" width="0.6601%" height="15" fill="rgb(251,142,44)" fg:x="291" fg:w="2"/><text x="96.2896%" y="207.50"></text></g><g><title>tftp::server::server::write_block (20 samples, 6.60%)</title><rect x="90.7591%" y="229" width="6.6007%" height="15" fill="rgb(238,13,15)" fg:x="275" fg:w="20"/><text x="91.0091%" y="239.50">tftp::ser..</text></g><g><title>tftp::server::connection::Connection&lt;R,W,S&gt;::send_packet (2 samples, 0.66%)</title><rect x="96.6997%" y="213" width="0.6601%" height="15" fill="rgb(208,107,27)" fg:x="293" fg:w="2"/><text x="96.9497%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.66%)</title><rect x="96.6997%" y="197" width="0.6601%" height="15" fill="rgb(205,136,37)" fg:x="293" fg:w="2"/><text x="96.9497%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.33%)</title><rect x="97.0297%" y="181" width="0.3300%" height="15" fill="rgb(250,205,27)" fg:x="294" fg:w="1"/><text x="97.2797%" y="191.50"></text></g><g><title>core::ops::function::FnOnce::call_once (5 samples, 1.65%)</title><rect x="97.6898%" y="213" width="1.6502%" height="15" fill="rgb(210,80,43)" fg:x="296" fg:w="5"/><text x="97.9398%" y="223.50"></text></g><g><title>tftp::instant_callback::{{closure}} (4 samples, 1.32%)</title><rect x="98.0198%" y="197" width="1.3201%" height="15" fill="rgb(247,160,36)" fg:x="297" fg:w="4"/><text x="98.2698%" y="207.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.66%)</title><rect x="98.6799%" y="181" width="0.6601%" height="15" fill="rgb(234,13,49)" fg:x="299" fg:w="2"/><text x="98.9299%" y="191.50"></text></g><g><title>clock_gettime (2 samples, 0.66%)</title><rect x="98.6799%" y="165" width="0.6601%" height="15" fill="rgb(234,122,0)" fg:x="299" fg:w="2"/><text x="98.9299%" y="175.50"></text></g><g><title>__vdso_clock_gettime (2 samples, 0.66%)</title><rect x="98.6799%" y="149" width="0.6601%" height="15" fill="rgb(207,146,38)" fg:x="299" fg:w="2"/><text x="98.9299%" y="159.50"></text></g><g><title>all (303 samples, 100%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(207,177,25)" fg:x="0" fg:w="303"/><text x="0.2500%" y="575.50"></text></g><g><title>tftp (303 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(211,178,42)" fg:x="0" fg:w="303"/><text x="0.2500%" y="559.50">tftp</text></g><g><title>_start (245 samples, 80.86%)</title><rect x="19.1419%" y="533" width="80.8581%" height="15" fill="rgb(230,69,54)" fg:x="58" fg:w="245"/><text x="19.3919%" y="543.50">_start</text></g><g><title>__libc_start_main (245 samples, 80.86%)</title><rect x="19.1419%" y="517" width="80.8581%" height="15" fill="rgb(214,135,41)" fg:x="58" fg:w="245"/><text x="19.3919%" y="527.50">__libc_start_main</text></g><g><title>[libc.so.6] (245 samples, 80.86%)</title><rect x="19.1419%" y="501" width="80.8581%" height="15" fill="rgb(237,67,25)" fg:x="58" fg:w="245"/><text x="19.3919%" y="511.50">[libc.so.6]</text></g><g><title>main (245 samples, 80.86%)</title><rect x="19.1419%" y="485" width="80.8581%" height="15" fill="rgb(222,189,50)" fg:x="58" fg:w="245"/><text x="19.3919%" y="495.50">main</text></g><g><title>std::rt::lang_start (245 samples, 80.86%)</title><rect x="19.1419%" y="469" width="80.8581%" height="15" fill="rgb(245,148,34)" fg:x="58" fg:w="245"/><text x="19.3919%" y="479.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (245 samples, 80.86%)</title><rect x="19.1419%" y="453" width="80.8581%" height="15" fill="rgb(222,29,6)" fg:x="58" fg:w="245"/><text x="19.3919%" y="463.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (245 samples, 80.86%)</title><rect x="19.1419%" y="437" width="80.8581%" height="15" fill="rgb(221,189,43)" fg:x="58" fg:w="245"/><text x="19.3919%" y="447.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (245 samples, 80.86%)</title><rect x="19.1419%" y="421" width="80.8581%" height="15" fill="rgb(207,36,27)" fg:x="58" fg:w="245"/><text x="19.3919%" y="431.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (245 samples, 80.86%)</title><rect x="19.1419%" y="405" width="80.8581%" height="15" fill="rgb(217,90,24)" fg:x="58" fg:w="245"/><text x="19.3919%" y="415.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (245 samples, 80.86%)</title><rect x="19.1419%" y="389" width="80.8581%" height="15" fill="rgb(224,66,35)" fg:x="58" fg:w="245"/><text x="19.3919%" y="399.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (245 samples, 80.86%)</title><rect x="19.1419%" y="373" width="80.8581%" height="15" fill="rgb(221,13,50)" fg:x="58" fg:w="245"/><text x="19.3919%" y="383.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (245 samples, 80.86%)</title><rect x="19.1419%" y="357" width="80.8581%" height="15" fill="rgb(236,68,49)" fg:x="58" fg:w="245"/><text x="19.3919%" y="367.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (245 samples, 80.86%)</title><rect x="19.1419%" y="341" width="80.8581%" height="15" fill="rgb(229,146,28)" fg:x="58" fg:w="245"/><text x="19.3919%" y="351.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (245 samples, 80.86%)</title><rect x="19.1419%" y="325" width="80.8581%" height="15" fill="rgb(225,31,38)" fg:x="58" fg:w="245"/><text x="19.3919%" y="335.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (245 samples, 80.86%)</title><rect x="19.1419%" y="309" width="80.8581%" height="15" fill="rgb(250,208,3)" fg:x="58" fg:w="245"/><text x="19.3919%" y="319.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (245 samples, 80.86%)</title><rect x="19.1419%" y="293" width="80.8581%" height="15" fill="rgb(246,54,23)" fg:x="58" fg:w="245"/><text x="19.3919%" y="303.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (245 samples, 80.86%)</title><rect x="19.1419%" y="277" width="80.8581%" height="15" fill="rgb(243,76,11)" fg:x="58" fg:w="245"/><text x="19.3919%" y="287.50">core::ops::function::FnOnce::call_once</text></g><g><title>tftp::main (245 samples, 80.86%)</title><rect x="19.1419%" y="261" width="80.8581%" height="15" fill="rgb(245,21,50)" fg:x="58" fg:w="245"/><text x="19.3919%" y="271.50">tftp::main</text></g><g><title>tftp::server::server::server (244 samples, 80.53%)</title><rect x="19.4719%" y="245" width="80.5281%" height="15" fill="rgb(228,9,43)" fg:x="59" fg:w="244"/><text x="19.7219%" y="255.50">tftp::server::server::server</text></g><g><title>tftp::std_compat::time::Instant::elapsed (8 samples, 2.64%)</title><rect x="97.3597%" y="229" width="2.6403%" height="15" fill="rgb(208,100,47)" fg:x="295" fg:w="8"/><text x="97.6097%" y="239.50">tf..</text></g><g><title>core::time::Duration::from_micros (2 samples, 0.66%)</title><rect x="99.3399%" y="213" width="0.6601%" height="15" fill="rgb(232,26,8)" fg:x="301" fg:w="2"/><text x="99.5899%" y="223.50"></text></g><g><title>core::time::Duration::new (2 samples, 0.66%)</title><rect x="99.3399%" y="197" width="0.6601%" height="15" fill="rgb(216,166,38)" fg:x="301" fg:w="2"/><text x="99.5899%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::checked_add (2 samples, 0.66%)</title><rect x="99.3399%" y="181" width="0.6601%" height="15" fill="rgb(251,202,51)" fg:x="301" fg:w="2"/><text x="99.5899%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (1 samples, 0.33%)</title><rect x="99.6700%" y="165" width="0.3300%" height="15" fill="rgb(254,216,34)" fg:x="302" fg:w="1"/><text x="99.9200%" y="175.50"></text></g></svg></svg>