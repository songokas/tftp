<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="790" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="773.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="773.00"> </text><svg id="frames" x="10" width="1180" total_samples="116"><g><title>__x86_indirect_thunk_r12 (1 samples, 0.86%)</title><rect x="0.0000%" y="709" width="0.8621%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="719.50"></text></g><g><title>perf_event_comm (1 samples, 0.86%)</title><rect x="0.8621%" y="597" width="0.8621%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="1.1121%" y="607.50"></text></g><g><title>strnlen (1 samples, 0.86%)</title><rect x="0.8621%" y="581" width="0.8621%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="1.1121%" y="591.50"></text></g><g><title>debug_smp_processor_id (1 samples, 0.86%)</title><rect x="1.7241%" y="533" width="0.8621%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="1.9741%" y="543.50"></text></g><g><title>perf-exec (4 samples, 3.45%)</title><rect x="0.0000%" y="725" width="3.4483%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="4"/><text x="0.2500%" y="735.50">per..</text></g><g><title>entry_SYSCALL_64_after_hwframe (3 samples, 2.59%)</title><rect x="0.8621%" y="709" width="2.5862%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="3"/><text x="1.1121%" y="719.50">en..</text></g><g><title>do_syscall_64 (3 samples, 2.59%)</title><rect x="0.8621%" y="693" width="2.5862%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="3"/><text x="1.1121%" y="703.50">do..</text></g><g><title>__x64_sys_execve (3 samples, 2.59%)</title><rect x="0.8621%" y="677" width="2.5862%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="3"/><text x="1.1121%" y="687.50">__..</text></g><g><title>do_execveat_common.isra.0 (3 samples, 2.59%)</title><rect x="0.8621%" y="661" width="2.5862%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="3"/><text x="1.1121%" y="671.50">do..</text></g><g><title>bprm_execve (3 samples, 2.59%)</title><rect x="0.8621%" y="645" width="2.5862%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="3"/><text x="1.1121%" y="655.50">bp..</text></g><g><title>load_elf_binary (3 samples, 2.59%)</title><rect x="0.8621%" y="629" width="2.5862%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="3"/><text x="1.1121%" y="639.50">lo..</text></g><g><title>begin_new_exec (3 samples, 2.59%)</title><rect x="0.8621%" y="613" width="2.5862%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="3"/><text x="1.1121%" y="623.50">be..</text></g><g><title>perf_event_exec (2 samples, 1.72%)</title><rect x="1.7241%" y="597" width="1.7241%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="2"/><text x="1.9741%" y="607.50"></text></g><g><title>ctx_resched (2 samples, 1.72%)</title><rect x="1.7241%" y="581" width="1.7241%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="2"/><text x="1.9741%" y="591.50"></text></g><g><title>perf_ctx_enable (2 samples, 1.72%)</title><rect x="1.7241%" y="565" width="1.7241%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="2"/><text x="1.9741%" y="575.50"></text></g><g><title>amd_pmu_enable_all (2 samples, 1.72%)</title><rect x="1.7241%" y="549" width="1.7241%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="2"/><text x="1.9741%" y="559.50"></text></g><g><title>x86_pmu_enable_event (1 samples, 0.86%)</title><rect x="2.5862%" y="533" width="0.8621%" height="15" fill="rgb(225,20,46)" fg:x="3" fg:w="1"/><text x="2.8362%" y="543.50"></text></g><g><title>native_write_msr (1 samples, 0.86%)</title><rect x="2.5862%" y="517" width="0.8621%" height="15" fill="rgb(210,31,41)" fg:x="3" fg:w="1"/><text x="2.8362%" y="527.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1 samples, 0.86%)</title><rect x="3.4483%" y="693" width="0.8621%" height="15" fill="rgb(221,200,47)" fg:x="4" fg:w="1"/><text x="3.6983%" y="703.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (1 samples, 0.86%)</title><rect x="3.4483%" y="677" width="0.8621%" height="15" fill="rgb(226,26,5)" fg:x="4" fg:w="1"/><text x="3.6983%" y="687.50"></text></g><g><title>[[heap]] (2 samples, 1.72%)</title><rect x="3.4483%" y="709" width="1.7241%" height="15" fill="rgb(249,33,26)" fg:x="4" fg:w="2"/><text x="3.6983%" y="719.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.86%)</title><rect x="4.3103%" y="693" width="0.8621%" height="15" fill="rgb(235,183,28)" fg:x="5" fg:w="1"/><text x="4.5603%" y="703.50"></text></g><g><title>[[vdso]] (1 samples, 0.86%)</title><rect x="5.1724%" y="693" width="0.8621%" height="15" fill="rgb(221,5,38)" fg:x="6" fg:w="1"/><text x="5.4224%" y="703.50"></text></g><g><title>__entry_text_start (1 samples, 0.86%)</title><rect x="5.1724%" y="677" width="0.8621%" height="15" fill="rgb(247,18,42)" fg:x="6" fg:w="1"/><text x="5.4224%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1 samples, 0.86%)</title><rect x="6.0345%" y="693" width="0.8621%" height="15" fill="rgb(241,131,45)" fg:x="7" fg:w="1"/><text x="6.2845%" y="703.50"></text></g><g><title>core::ops::range::RangeBounds::contains (1 samples, 0.86%)</title><rect x="6.8966%" y="693" width="0.8621%" height="15" fill="rgb(249,31,29)" fg:x="8" fg:w="1"/><text x="7.1466%" y="703.50"></text></g><g><title>rustix::backend::conv::raw_fd (1 samples, 0.86%)</title><rect x="7.7586%" y="693" width="0.8621%" height="15" fill="rgb(225,111,53)" fg:x="9" fg:w="1"/><text x="8.0086%" y="703.50"></text></g><g><title>rustix::io::read_write::read (1 samples, 0.86%)</title><rect x="8.6207%" y="693" width="0.8621%" height="15" fill="rgb(238,160,17)" fg:x="10" fg:w="1"/><text x="8.8707%" y="703.50"></text></g><g><title>[[stack]] (6 samples, 5.17%)</title><rect x="5.1724%" y="709" width="5.1724%" height="15" fill="rgb(214,148,48)" fg:x="6" fg:w="6"/><text x="5.4224%" y="719.50">[[stac..</text></g><g><title>std::sys::unix::time::Timespec::now (1 samples, 0.86%)</title><rect x="9.4828%" y="693" width="0.8621%" height="15" fill="rgb(232,36,49)" fg:x="11" fg:w="1"/><text x="9.7328%" y="703.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.86%)</title><rect x="10.3448%" y="693" width="0.8621%" height="15" fill="rgb(209,103,24)" fg:x="12" fg:w="1"/><text x="10.5948%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (1 samples, 0.86%)</title><rect x="11.2069%" y="693" width="0.8621%" height="15" fill="rgb(229,88,8)" fg:x="13" fg:w="1"/><text x="11.4569%" y="703.50"></text></g><g><title>&lt;std::os::fd::owned::OwnedFd as std::os::fd::owned::AsFd&gt;::as_fd (1 samples, 0.86%)</title><rect x="12.0690%" y="693" width="0.8621%" height="15" fill="rgb(213,181,19)" fg:x="14" fg:w="1"/><text x="12.3190%" y="703.50"></text></g><g><title>__libc_start_call_main (1 samples, 0.86%)</title><rect x="12.9310%" y="693" width="0.8621%" height="15" fill="rgb(254,191,54)" fg:x="15" fg:w="1"/><text x="13.1810%" y="703.50"></text></g><g><title>main (1 samples, 0.86%)</title><rect x="12.9310%" y="677" width="0.8621%" height="15" fill="rgb(241,83,37)" fg:x="15" fg:w="1"/><text x="13.1810%" y="687.50"></text></g><g><title>std::rt::lang_start (1 samples, 0.86%)</title><rect x="12.9310%" y="661" width="0.8621%" height="15" fill="rgb(233,36,39)" fg:x="15" fg:w="1"/><text x="13.1810%" y="671.50"></text></g><g><title>std::rt::lang_start_internal (1 samples, 0.86%)</title><rect x="12.9310%" y="645" width="0.8621%" height="15" fill="rgb(226,3,54)" fg:x="15" fg:w="1"/><text x="13.1810%" y="655.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.86%)</title><rect x="12.9310%" y="629" width="0.8621%" height="15" fill="rgb(245,192,40)" fg:x="15" fg:w="1"/><text x="13.1810%" y="639.50"></text></g><g><title>std::panicking::try (1 samples, 0.86%)</title><rect x="12.9310%" y="613" width="0.8621%" height="15" fill="rgb(238,167,29)" fg:x="15" fg:w="1"/><text x="13.1810%" y="623.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.86%)</title><rect x="12.9310%" y="597" width="0.8621%" height="15" fill="rgb(232,182,51)" fg:x="15" fg:w="1"/><text x="13.1810%" y="607.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (1 samples, 0.86%)</title><rect x="12.9310%" y="581" width="0.8621%" height="15" fill="rgb(231,60,39)" fg:x="15" fg:w="1"/><text x="13.1810%" y="591.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.86%)</title><rect x="12.9310%" y="565" width="0.8621%" height="15" fill="rgb(208,69,12)" fg:x="15" fg:w="1"/><text x="13.1810%" y="575.50"></text></g><g><title>std::panicking::try (1 samples, 0.86%)</title><rect x="12.9310%" y="549" width="0.8621%" height="15" fill="rgb(235,93,37)" fg:x="15" fg:w="1"/><text x="13.1810%" y="559.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.86%)</title><rect x="12.9310%" y="533" width="0.8621%" height="15" fill="rgb(213,116,39)" fg:x="15" fg:w="1"/><text x="13.1810%" y="543.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1 samples, 0.86%)</title><rect x="12.9310%" y="517" width="0.8621%" height="15" fill="rgb(222,207,29)" fg:x="15" fg:w="1"/><text x="13.1810%" y="527.50"></text></g><g><title>std::rt::lang_start::{{closure}} (1 samples, 0.86%)</title><rect x="12.9310%" y="501" width="0.8621%" height="15" fill="rgb(206,96,30)" fg:x="15" fg:w="1"/><text x="13.1810%" y="511.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.86%)</title><rect x="12.9310%" y="485" width="0.8621%" height="15" fill="rgb(218,138,4)" fg:x="15" fg:w="1"/><text x="13.1810%" y="495.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.86%)</title><rect x="12.9310%" y="469" width="0.8621%" height="15" fill="rgb(250,191,14)" fg:x="15" fg:w="1"/><text x="13.1810%" y="479.50"></text></g><g><title>tftp::main (1 samples, 0.86%)</title><rect x="12.9310%" y="453" width="0.8621%" height="15" fill="rgb(239,60,40)" fg:x="15" fg:w="1"/><text x="13.1810%" y="463.50"></text></g><g><title>tftp::server::single_thread::server (1 samples, 0.86%)</title><rect x="12.9310%" y="437" width="0.8621%" height="15" fill="rgb(206,27,48)" fg:x="15" fg:w="1"/><text x="13.1810%" y="447.50"></text></g><g><title>&lt;tftp::socket::UdpUnboundSocket as tftp::socket::Socket&gt;::recv_from (1 samples, 0.86%)</title><rect x="12.9310%" y="421" width="0.8621%" height="15" fill="rgb(225,35,8)" fg:x="15" fg:w="1"/><text x="13.1810%" y="431.50"></text></g><g><title>polling::Poller::wait (1 samples, 0.86%)</title><rect x="12.9310%" y="405" width="0.8621%" height="15" fill="rgb(250,213,24)" fg:x="15" fg:w="1"/><text x="13.1810%" y="415.50"></text></g><g><title>polling::epoll::Poller::wait (1 samples, 0.86%)</title><rect x="12.9310%" y="389" width="0.8621%" height="15" fill="rgb(247,123,22)" fg:x="15" fg:w="1"/><text x="13.1810%" y="399.50"></text></g><g><title>polling::epoll::Poller::modify (1 samples, 0.86%)</title><rect x="12.9310%" y="373" width="0.8621%" height="15" fill="rgb(231,138,38)" fg:x="15" fg:w="1"/><text x="13.1810%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.86%)</title><rect x="12.9310%" y="357" width="0.8621%" height="15" fill="rgb(231,145,46)" fg:x="15" fg:w="1"/><text x="13.1810%" y="367.50"></text></g><g><title>_init (1 samples, 0.86%)</title><rect x="13.7931%" y="693" width="0.8621%" height="15" fill="rgb(251,118,11)" fg:x="16" fg:w="1"/><text x="14.0431%" y="703.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.86%)</title><rect x="14.6552%" y="693" width="0.8621%" height="15" fill="rgb(217,147,25)" fg:x="17" fg:w="1"/><text x="14.9052%" y="703.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (1 samples, 0.86%)</title><rect x="14.6552%" y="677" width="0.8621%" height="15" fill="rgb(247,81,37)" fg:x="17" fg:w="1"/><text x="14.9052%" y="687.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.86%)</title><rect x="15.5172%" y="693" width="0.8621%" height="15" fill="rgb(209,12,38)" fg:x="18" fg:w="1"/><text x="15.7672%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.86%)</title><rect x="16.3793%" y="693" width="0.8621%" height="15" fill="rgb(227,1,9)" fg:x="19" fg:w="1"/><text x="16.6293%" y="703.50"></text></g><g><title>core::time::Duration::from_micros (1 samples, 0.86%)</title><rect x="17.2414%" y="693" width="0.8621%" height="15" fill="rgb(248,47,43)" fg:x="20" fg:w="1"/><text x="17.4914%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (1 samples, 0.86%)</title><rect x="18.1034%" y="693" width="0.8621%" height="15" fill="rgb(221,10,30)" fg:x="21" fg:w="1"/><text x="18.3534%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (1 samples, 0.86%)</title><rect x="18.1034%" y="677" width="0.8621%" height="15" fill="rgb(210,229,1)" fg:x="21" fg:w="1"/><text x="18.3534%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.86%)</title><rect x="18.1034%" y="661" width="0.8621%" height="15" fill="rgb(222,148,37)" fg:x="21" fg:w="1"/><text x="18.3534%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.86%)</title><rect x="18.1034%" y="645" width="0.8621%" height="15" fill="rgb(234,67,33)" fg:x="21" fg:w="1"/><text x="18.3534%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.86%)</title><rect x="18.1034%" y="629" width="0.8621%" height="15" fill="rgb(247,98,35)" fg:x="21" fg:w="1"/><text x="18.3534%" y="639.50"></text></g><g><title>polling::epoll::Poller::modify (1 samples, 0.86%)</title><rect x="18.9655%" y="693" width="0.8621%" height="15" fill="rgb(247,138,52)" fg:x="22" fg:w="1"/><text x="19.2155%" y="703.50"></text></g><g><title>tracing_core::metadata::LevelFilter::current (1 samples, 0.86%)</title><rect x="18.9655%" y="677" width="0.8621%" height="15" fill="rgb(213,79,30)" fg:x="22" fg:w="1"/><text x="19.2155%" y="687.50"></text></g><g><title>rustix::backend::event::epoll::_::InternalBitFlags::union (1 samples, 0.86%)</title><rect x="19.8276%" y="693" width="0.8621%" height="15" fill="rgb(246,177,23)" fg:x="23" fg:w="1"/><text x="20.0776%" y="703.50"></text></g><g><title>std::io::error::repr_bitpacked::decode_repr (1 samples, 0.86%)</title><rect x="20.6897%" y="693" width="0.8621%" height="15" fill="rgb(230,62,27)" fg:x="24" fg:w="1"/><text x="20.9397%" y="703.50"></text></g><g><title>polling::epoll::Notifier::clear (1 samples, 0.86%)</title><rect x="21.5517%" y="421" width="0.8621%" height="15" fill="rgb(216,154,8)" fg:x="25" fg:w="1"/><text x="21.8017%" y="431.50"></text></g><g><title>rustix::io::read_write::read (1 samples, 0.86%)</title><rect x="21.5517%" y="405" width="0.8621%" height="15" fill="rgb(244,35,45)" fg:x="25" fg:w="1"/><text x="21.8017%" y="415.50"></text></g><g><title>rustix::backend::io::syscalls::read (1 samples, 0.86%)</title><rect x="21.5517%" y="389" width="0.8621%" height="15" fill="rgb(251,115,12)" fg:x="25" fg:w="1"/><text x="21.8017%" y="399.50"></text></g><g><title>rustix::backend::arch::asm::syscall3 (1 samples, 0.86%)</title><rect x="21.5517%" y="373" width="0.8621%" height="15" fill="rgb(240,54,50)" fg:x="25" fg:w="1"/><text x="21.8017%" y="383.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.86%)</title><rect x="21.5517%" y="357" width="0.8621%" height="15" fill="rgb(233,84,52)" fg:x="25" fg:w="1"/><text x="21.8017%" y="367.50"></text></g><g><title>do_syscall_64 (1 samples, 0.86%)</title><rect x="21.5517%" y="341" width="0.8621%" height="15" fill="rgb(207,117,47)" fg:x="25" fg:w="1"/><text x="21.8017%" y="351.50"></text></g><g><title>ksys_read (1 samples, 0.86%)</title><rect x="21.5517%" y="325" width="0.8621%" height="15" fill="rgb(249,43,39)" fg:x="25" fg:w="1"/><text x="21.8017%" y="335.50"></text></g><g><title>vfs_read (1 samples, 0.86%)</title><rect x="21.5517%" y="309" width="0.8621%" height="15" fill="rgb(209,38,44)" fg:x="25" fg:w="1"/><text x="21.8017%" y="319.50"></text></g><g><title>security_file_permission (1 samples, 0.86%)</title><rect x="21.5517%" y="293" width="0.8621%" height="15" fill="rgb(236,212,23)" fg:x="25" fg:w="1"/><text x="21.8017%" y="303.50"></text></g><g><title>apparmor_file_permission (1 samples, 0.86%)</title><rect x="21.5517%" y="277" width="0.8621%" height="15" fill="rgb(242,79,21)" fg:x="25" fg:w="1"/><text x="21.8017%" y="287.50"></text></g><g><title>aa_file_perm (1 samples, 0.86%)</title><rect x="21.5517%" y="261" width="0.8621%" height="15" fill="rgb(211,96,35)" fg:x="25" fg:w="1"/><text x="21.8017%" y="271.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.86%)</title><rect x="21.5517%" y="245" width="0.8621%" height="15" fill="rgb(253,215,40)" fg:x="25" fg:w="1"/><text x="21.8017%" y="255.50"></text></g><g><title>rustix::backend::arch::asm::syscall4_readonly (1 samples, 0.86%)</title><rect x="22.4138%" y="373" width="0.8621%" height="15" fill="rgb(211,81,21)" fg:x="26" fg:w="1"/><text x="22.6638%" y="383.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.86%)</title><rect x="22.4138%" y="357" width="0.8621%" height="15" fill="rgb(208,190,38)" fg:x="26" fg:w="1"/><text x="22.6638%" y="367.50"></text></g><g><title>__x86_return_thunk (1 samples, 0.86%)</title><rect x="22.4138%" y="341" width="0.8621%" height="15" fill="rgb(235,213,38)" fg:x="26" fg:w="1"/><text x="22.6638%" y="351.50"></text></g><g><title>rustix::backend::conv::by_ref (2 samples, 1.72%)</title><rect x="23.2759%" y="373" width="1.7241%" height="15" fill="rgb(237,122,38)" fg:x="27" fg:w="2"/><text x="23.5259%" y="383.50"></text></g><g><title>rustix::backend::reg::raw_arg (1 samples, 0.86%)</title><rect x="24.1379%" y="357" width="0.8621%" height="15" fill="rgb(244,218,35)" fg:x="28" fg:w="1"/><text x="24.3879%" y="367.50"></text></g><g><title>std::rt::lang_start_internal (5 samples, 4.31%)</title><rect x="21.5517%" y="693" width="4.3103%" height="15" fill="rgb(240,68,47)" fg:x="25" fg:w="5"/><text x="21.8017%" y="703.50">std::..</text></g><g><title>std::panic::catch_unwind (5 samples, 4.31%)</title><rect x="21.5517%" y="677" width="4.3103%" height="15" fill="rgb(210,16,53)" fg:x="25" fg:w="5"/><text x="21.8017%" y="687.50">std::..</text></g><g><title>std::panicking::try (5 samples, 4.31%)</title><rect x="21.5517%" y="661" width="4.3103%" height="15" fill="rgb(235,124,12)" fg:x="25" fg:w="5"/><text x="21.8017%" y="671.50">std::..</text></g><g><title>std::panicking::try::do_call (5 samples, 4.31%)</title><rect x="21.5517%" y="645" width="4.3103%" height="15" fill="rgb(224,169,11)" fg:x="25" fg:w="5"/><text x="21.8017%" y="655.50">std::..</text></g><g><title>std::rt::lang_start_internal::{{closure}} (5 samples, 4.31%)</title><rect x="21.5517%" y="629" width="4.3103%" height="15" fill="rgb(250,166,2)" fg:x="25" fg:w="5"/><text x="21.8017%" y="639.50">std::..</text></g><g><title>std::panic::catch_unwind (5 samples, 4.31%)</title><rect x="21.5517%" y="613" width="4.3103%" height="15" fill="rgb(242,216,29)" fg:x="25" fg:w="5"/><text x="21.8017%" y="623.50">std::..</text></g><g><title>std::panicking::try (5 samples, 4.31%)</title><rect x="21.5517%" y="597" width="4.3103%" height="15" fill="rgb(230,116,27)" fg:x="25" fg:w="5"/><text x="21.8017%" y="607.50">std::..</text></g><g><title>std::panicking::try::do_call (5 samples, 4.31%)</title><rect x="21.5517%" y="581" width="4.3103%" height="15" fill="rgb(228,99,48)" fg:x="25" fg:w="5"/><text x="21.8017%" y="591.50">std::..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (5 samples, 4.31%)</title><rect x="21.5517%" y="565" width="4.3103%" height="15" fill="rgb(253,11,6)" fg:x="25" fg:w="5"/><text x="21.8017%" y="575.50">core:..</text></g><g><title>std::rt::lang_start::{{closure}} (5 samples, 4.31%)</title><rect x="21.5517%" y="549" width="4.3103%" height="15" fill="rgb(247,143,39)" fg:x="25" fg:w="5"/><text x="21.8017%" y="559.50">std::..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (5 samples, 4.31%)</title><rect x="21.5517%" y="533" width="4.3103%" height="15" fill="rgb(236,97,10)" fg:x="25" fg:w="5"/><text x="21.8017%" y="543.50">std::..</text></g><g><title>core::ops::function::FnOnce::call_once (5 samples, 4.31%)</title><rect x="21.5517%" y="517" width="4.3103%" height="15" fill="rgb(233,208,19)" fg:x="25" fg:w="5"/><text x="21.8017%" y="527.50">core:..</text></g><g><title>tftp::main (5 samples, 4.31%)</title><rect x="21.5517%" y="501" width="4.3103%" height="15" fill="rgb(216,164,2)" fg:x="25" fg:w="5"/><text x="21.8017%" y="511.50">tftp:..</text></g><g><title>tftp::server::single_thread::server (5 samples, 4.31%)</title><rect x="21.5517%" y="485" width="4.3103%" height="15" fill="rgb(220,129,5)" fg:x="25" fg:w="5"/><text x="21.8017%" y="495.50">tftp:..</text></g><g><title>&lt;tftp::socket::UdpUnboundSocket as tftp::socket::Socket&gt;::recv_from (5 samples, 4.31%)</title><rect x="21.5517%" y="469" width="4.3103%" height="15" fill="rgb(242,17,10)" fg:x="25" fg:w="5"/><text x="21.8017%" y="479.50">&lt;tftp..</text></g><g><title>polling::Poller::wait (5 samples, 4.31%)</title><rect x="21.5517%" y="453" width="4.3103%" height="15" fill="rgb(242,107,0)" fg:x="25" fg:w="5"/><text x="21.8017%" y="463.50">polli..</text></g><g><title>polling::epoll::Poller::wait (5 samples, 4.31%)</title><rect x="21.5517%" y="437" width="4.3103%" height="15" fill="rgb(251,28,31)" fg:x="25" fg:w="5"/><text x="21.8017%" y="447.50">polli..</text></g><g><title>polling::epoll::Poller::modify (4 samples, 3.45%)</title><rect x="22.4138%" y="421" width="3.4483%" height="15" fill="rgb(233,223,10)" fg:x="26" fg:w="4"/><text x="22.6638%" y="431.50">pol..</text></g><g><title>rustix::backend::event::epoll::modify (4 samples, 3.45%)</title><rect x="22.4138%" y="405" width="3.4483%" height="15" fill="rgb(215,21,27)" fg:x="26" fg:w="4"/><text x="22.6638%" y="415.50">rus..</text></g><g><title>rustix::backend::event::syscalls::epoll_mod (4 samples, 3.45%)</title><rect x="22.4138%" y="389" width="3.4483%" height="15" fill="rgb(232,23,21)" fg:x="26" fg:w="4"/><text x="22.6638%" y="399.50">rus..</text></g><g><title>rustix::backend::conv::c_uint (1 samples, 0.86%)</title><rect x="25.0000%" y="373" width="0.8621%" height="15" fill="rgb(244,5,23)" fg:x="29" fg:w="1"/><text x="25.2500%" y="383.50"></text></g><g><title>rustix::backend::conv::pass_usize (1 samples, 0.86%)</title><rect x="25.0000%" y="357" width="0.8621%" height="15" fill="rgb(226,81,46)" fg:x="29" fg:w="1"/><text x="25.2500%" y="367.50"></text></g><g><title>rustix::backend::reg::raw_arg (1 samples, 0.86%)</title><rect x="25.0000%" y="341" width="0.8621%" height="15" fill="rgb(247,70,30)" fg:x="29" fg:w="1"/><text x="25.2500%" y="351.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (1 samples, 0.86%)</title><rect x="25.8621%" y="693" width="0.8621%" height="15" fill="rgb(212,68,19)" fg:x="30" fg:w="1"/><text x="26.1121%" y="703.50"></text></g><g><title>tftp::server::helpers::write::handle_write (1 samples, 0.86%)</title><rect x="26.7241%" y="693" width="0.8621%" height="15" fill="rgb(240,187,13)" fg:x="31" fg:w="1"/><text x="26.9741%" y="703.50"></text></g><g><title>[unknown] (21 samples, 18.10%)</title><rect x="10.3448%" y="709" width="18.1034%" height="15" fill="rgb(223,113,26)" fg:x="12" fg:w="21"/><text x="10.5948%" y="719.50">[unknown]</text></g><g><title>tftp::server::single_thread::server (1 samples, 0.86%)</title><rect x="27.5862%" y="693" width="0.8621%" height="15" fill="rgb(206,192,2)" fg:x="32" fg:w="1"/><text x="27.8362%" y="703.50"></text></g><g><title>log::max_level (1 samples, 0.86%)</title><rect x="27.5862%" y="677" width="0.8621%" height="15" fill="rgb(241,108,4)" fg:x="32" fg:w="1"/><text x="27.8362%" y="687.50"></text></g><g><title>__bss_start (1 samples, 0.86%)</title><rect x="28.4483%" y="709" width="0.8621%" height="15" fill="rgb(247,173,49)" fg:x="33" fg:w="1"/><text x="28.6983%" y="719.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 0.86%)</title><rect x="28.4483%" y="693" width="0.8621%" height="15" fill="rgb(224,114,35)" fg:x="33" fg:w="1"/><text x="28.6983%" y="703.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (1 samples, 0.86%)</title><rect x="28.4483%" y="677" width="0.8621%" height="15" fill="rgb(245,159,27)" fg:x="33" fg:w="1"/><text x="28.6983%" y="687.50"></text></g><g><title>core::core_arch::simd::i8x16::new (1 samples, 0.86%)</title><rect x="28.4483%" y="661" width="0.8621%" height="15" fill="rgb(245,172,44)" fg:x="33" fg:w="1"/><text x="28.6983%" y="671.50"></text></g><g><title>__vdso_clock_gettime (2 samples, 1.72%)</title><rect x="29.3103%" y="709" width="1.7241%" height="15" fill="rgb(236,23,11)" fg:x="34" fg:w="2"/><text x="29.5603%" y="719.50"></text></g><g><title>[[vdso]] (1 samples, 0.86%)</title><rect x="30.1724%" y="693" width="0.8621%" height="15" fill="rgb(205,117,38)" fg:x="35" fg:w="1"/><text x="30.4224%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.86%)</title><rect x="31.0345%" y="117" width="0.8621%" height="15" fill="rgb(237,72,25)" fg:x="36" fg:w="1"/><text x="31.2845%" y="127.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2 samples, 1.72%)</title><rect x="31.0345%" y="389" width="1.7241%" height="15" fill="rgb(244,70,9)" fg:x="36" fg:w="2"/><text x="31.2845%" y="399.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2 samples, 1.72%)</title><rect x="31.0345%" y="373" width="1.7241%" height="15" fill="rgb(217,125,39)" fg:x="36" fg:w="2"/><text x="31.2845%" y="383.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (2 samples, 1.72%)</title><rect x="31.0345%" y="357" width="1.7241%" height="15" fill="rgb(235,36,10)" fg:x="36" fg:w="2"/><text x="31.2845%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 1.72%)</title><rect x="31.0345%" y="341" width="1.7241%" height="15" fill="rgb(251,123,47)" fg:x="36" fg:w="2"/><text x="31.2845%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 1.72%)</title><rect x="31.0345%" y="325" width="1.7241%" height="15" fill="rgb(221,13,13)" fg:x="36" fg:w="2"/><text x="31.2845%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 1.72%)</title><rect x="31.0345%" y="309" width="1.7241%" height="15" fill="rgb(238,131,9)" fg:x="36" fg:w="2"/><text x="31.2845%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 1.72%)</title><rect x="31.0345%" y="293" width="1.7241%" height="15" fill="rgb(211,50,8)" fg:x="36" fg:w="2"/><text x="31.2845%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 1.72%)</title><rect x="31.0345%" y="277" width="1.7241%" height="15" fill="rgb(245,182,24)" fg:x="36" fg:w="2"/><text x="31.2845%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 1.72%)</title><rect x="31.0345%" y="261" width="1.7241%" height="15" fill="rgb(242,14,37)" fg:x="36" fg:w="2"/><text x="31.2845%" y="271.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (2 samples, 1.72%)</title><rect x="31.0345%" y="245" width="1.7241%" height="15" fill="rgb(246,228,12)" fg:x="36" fg:w="2"/><text x="31.2845%" y="255.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::{{closure}} (2 samples, 1.72%)</title><rect x="31.0345%" y="229" width="1.7241%" height="15" fill="rgb(213,55,15)" fg:x="36" fg:w="2"/><text x="31.2845%" y="239.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (2 samples, 1.72%)</title><rect x="31.0345%" y="213" width="1.7241%" height="15" fill="rgb(209,9,3)" fg:x="36" fg:w="2"/><text x="31.2845%" y="223.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (2 samples, 1.72%)</title><rect x="31.0345%" y="197" width="1.7241%" height="15" fill="rgb(230,59,30)" fg:x="36" fg:w="2"/><text x="31.2845%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (2 samples, 1.72%)</title><rect x="31.0345%" y="181" width="1.7241%" height="15" fill="rgb(209,121,21)" fg:x="36" fg:w="2"/><text x="31.2845%" y="191.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (2 samples, 1.72%)</title><rect x="31.0345%" y="165" width="1.7241%" height="15" fill="rgb(220,109,13)" fg:x="36" fg:w="2"/><text x="31.2845%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 1.72%)</title><rect x="31.0345%" y="149" width="1.7241%" height="15" fill="rgb(232,18,1)" fg:x="36" fg:w="2"/><text x="31.2845%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (2 samples, 1.72%)</title><rect x="31.0345%" y="133" width="1.7241%" height="15" fill="rgb(215,41,42)" fg:x="36" fg:w="2"/><text x="31.2845%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (1 samples, 0.86%)</title><rect x="31.8966%" y="117" width="0.8621%" height="15" fill="rgb(224,123,36)" fg:x="37" fg:w="1"/><text x="32.1466%" y="127.50"></text></g><g><title>&lt;tftp::socket::UdpUnboundSocket as tftp::socket::Socket&gt;::modify_interest (1 samples, 0.86%)</title><rect x="32.7586%" y="389" width="0.8621%" height="15" fill="rgb(240,125,3)" fg:x="38" fg:w="1"/><text x="33.0086%" y="399.50"></text></g><g><title>polling::Poller::modify (1 samples, 0.86%)</title><rect x="32.7586%" y="373" width="0.8621%" height="15" fill="rgb(205,98,50)" fg:x="38" fg:w="1"/><text x="33.0086%" y="383.50"></text></g><g><title>polling::Poller::modify_with_mode (1 samples, 0.86%)</title><rect x="32.7586%" y="357" width="0.8621%" height="15" fill="rgb(205,185,37)" fg:x="38" fg:w="1"/><text x="33.0086%" y="367.50"></text></g><g><title>polling::epoll::Poller::modify (1 samples, 0.86%)</title><rect x="32.7586%" y="341" width="0.8621%" height="15" fill="rgb(238,207,15)" fg:x="38" fg:w="1"/><text x="33.0086%" y="351.50"></text></g><g><title>rustix::backend::event::epoll::modify (1 samples, 0.86%)</title><rect x="32.7586%" y="325" width="0.8621%" height="15" fill="rgb(213,199,42)" fg:x="38" fg:w="1"/><text x="33.0086%" y="335.50"></text></g><g><title>rustix::backend::event::syscalls::epoll_mod (1 samples, 0.86%)</title><rect x="32.7586%" y="309" width="0.8621%" height="15" fill="rgb(235,201,11)" fg:x="38" fg:w="1"/><text x="33.0086%" y="319.50"></text></g><g><title>rustix::backend::conv::by_ref (1 samples, 0.86%)</title><rect x="32.7586%" y="293" width="0.8621%" height="15" fill="rgb(207,46,11)" fg:x="38" fg:w="1"/><text x="33.0086%" y="303.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.86%)</title><rect x="32.7586%" y="277" width="0.8621%" height="15" fill="rgb(241,35,35)" fg:x="38" fg:w="1"/><text x="33.0086%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.86%)</title><rect x="33.6207%" y="373" width="0.8621%" height="15" fill="rgb(243,32,47)" fg:x="39" fg:w="1"/><text x="33.8707%" y="383.50"></text></g><g><title>polling::Poller::wait::{{closure}} (1 samples, 0.86%)</title><rect x="33.6207%" y="357" width="0.8621%" height="15" fill="rgb(247,202,23)" fg:x="39" fg:w="1"/><text x="33.8707%" y="367.50"></text></g><g><title>std::sys::unix::time::Timespec::now (1 samples, 0.86%)</title><rect x="33.6207%" y="341" width="0.8621%" height="15" fill="rgb(219,102,11)" fg:x="39" fg:w="1"/><text x="33.8707%" y="351.50"></text></g><g><title>__GI___clock_gettime (1 samples, 0.86%)</title><rect x="33.6207%" y="325" width="0.8621%" height="15" fill="rgb(243,110,44)" fg:x="39" fg:w="1"/><text x="33.8707%" y="335.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.86%)</title><rect x="33.6207%" y="309" width="0.8621%" height="15" fill="rgb(222,74,54)" fg:x="39" fg:w="1"/><text x="33.8707%" y="319.50"></text></g><g><title>rustix::backend::event::syscalls::epoll_mod (1 samples, 0.86%)</title><rect x="33.6207%" y="293" width="0.8621%" height="15" fill="rgb(216,99,12)" fg:x="39" fg:w="1"/><text x="33.8707%" y="303.50"></text></g><g><title>polling::Events::len (1 samples, 0.86%)</title><rect x="34.4828%" y="373" width="0.8621%" height="15" fill="rgb(226,22,26)" fg:x="40" fg:w="1"/><text x="34.7328%" y="383.50"></text></g><g><title>polling::Events::iter (1 samples, 0.86%)</title><rect x="34.4828%" y="357" width="0.8621%" height="15" fill="rgb(217,163,10)" fg:x="40" fg:w="1"/><text x="34.7328%" y="367.50"></text></g><g><title>polling::epoll::Events::iter (1 samples, 0.86%)</title><rect x="34.4828%" y="341" width="0.8621%" height="15" fill="rgb(213,25,53)" fg:x="40" fg:w="1"/><text x="34.7328%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::map (1 samples, 0.86%)</title><rect x="34.4828%" y="325" width="0.8621%" height="15" fill="rgb(252,105,26)" fg:x="40" fg:w="1"/><text x="34.7328%" y="335.50"></text></g><g><title>&lt;rustix::backend::reg::RetReg&lt;Num&gt; as rustix::backend::reg::FromAsm&gt;::from_asm (1 samples, 0.86%)</title><rect x="36.2069%" y="309" width="0.8621%" height="15" fill="rgb(220,39,43)" fg:x="42" fg:w="1"/><text x="36.4569%" y="319.50"></text></g><g><title>_raw_write_unlock_irq (1 samples, 0.86%)</title><rect x="37.9310%" y="245" width="0.8621%" height="15" fill="rgb(229,68,48)" fg:x="44" fg:w="1"/><text x="38.1810%" y="255.50"></text></g><g><title>ep_item_poll.isra.0 (1 samples, 0.86%)</title><rect x="38.7931%" y="245" width="0.8621%" height="15" fill="rgb(252,8,32)" fg:x="45" fg:w="1"/><text x="39.0431%" y="255.50"></text></g><g><title>sock_poll (1 samples, 0.86%)</title><rect x="38.7931%" y="229" width="0.8621%" height="15" fill="rgb(223,20,43)" fg:x="45" fg:w="1"/><text x="39.0431%" y="239.50"></text></g><g><title>mutex_unlock (1 samples, 0.86%)</title><rect x="39.6552%" y="245" width="0.8621%" height="15" fill="rgb(229,81,49)" fg:x="46" fg:w="1"/><text x="39.9052%" y="255.50"></text></g><g><title>rustix::backend::event::epoll::wait (7 samples, 6.03%)</title><rect x="36.2069%" y="357" width="6.0345%" height="15" fill="rgb(236,28,36)" fg:x="42" fg:w="7"/><text x="36.4569%" y="367.50">rustix::..</text></g><g><title>rustix::backend::event::syscalls::epoll_wait (7 samples, 6.03%)</title><rect x="36.2069%" y="341" width="6.0345%" height="15" fill="rgb(249,185,26)" fg:x="42" fg:w="7"/><text x="36.4569%" y="351.50">rustix::..</text></g><g><title>rustix::backend::arch::asm::syscall4 (7 samples, 6.03%)</title><rect x="36.2069%" y="325" width="6.0345%" height="15" fill="rgb(249,174,33)" fg:x="42" fg:w="7"/><text x="36.4569%" y="335.50">rustix::..</text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 5.17%)</title><rect x="37.0690%" y="309" width="5.1724%" height="15" fill="rgb(233,201,37)" fg:x="43" fg:w="6"/><text x="37.3190%" y="319.50">entry_..</text></g><g><title>do_syscall_64 (6 samples, 5.17%)</title><rect x="37.0690%" y="293" width="5.1724%" height="15" fill="rgb(221,78,26)" fg:x="43" fg:w="6"/><text x="37.3190%" y="303.50">do_sys..</text></g><g><title>__x64_sys_epoll_wait (6 samples, 5.17%)</title><rect x="37.0690%" y="277" width="5.1724%" height="15" fill="rgb(250,127,30)" fg:x="43" fg:w="6"/><text x="37.3190%" y="287.50">__x64_..</text></g><g><title>do_epoll_wait (6 samples, 5.17%)</title><rect x="37.0690%" y="261" width="5.1724%" height="15" fill="rgb(230,49,44)" fg:x="43" fg:w="6"/><text x="37.3190%" y="271.50">do_epo..</text></g><g><title>schedule_hrtimeout_range_clock (2 samples, 1.72%)</title><rect x="40.5172%" y="245" width="1.7241%" height="15" fill="rgb(229,67,23)" fg:x="47" fg:w="2"/><text x="40.7672%" y="255.50"></text></g><g><title>schedule (2 samples, 1.72%)</title><rect x="40.5172%" y="229" width="1.7241%" height="15" fill="rgb(249,83,47)" fg:x="47" fg:w="2"/><text x="40.7672%" y="239.50"></text></g><g><title>__schedule (2 samples, 1.72%)</title><rect x="40.5172%" y="213" width="1.7241%" height="15" fill="rgb(215,43,3)" fg:x="47" fg:w="2"/><text x="40.7672%" y="223.50"></text></g><g><title>finish_task_switch.isra.0 (2 samples, 1.72%)</title><rect x="40.5172%" y="197" width="1.7241%" height="15" fill="rgb(238,154,13)" fg:x="47" fg:w="2"/><text x="40.7672%" y="207.50"></text></g><g><title>__perf_event_task_sched_in (1 samples, 0.86%)</title><rect x="41.3793%" y="181" width="0.8621%" height="15" fill="rgb(219,56,2)" fg:x="48" fg:w="1"/><text x="41.6293%" y="191.50"></text></g><g><title>ctx_flexible_sched_in (1 samples, 0.86%)</title><rect x="41.3793%" y="165" width="0.8621%" height="15" fill="rgb(233,0,4)" fg:x="48" fg:w="1"/><text x="41.6293%" y="175.50"></text></g><g><title>visit_groups_merge.constprop.0.isra.0 (1 samples, 0.86%)</title><rect x="41.3793%" y="149" width="0.8621%" height="15" fill="rgb(235,30,7)" fg:x="48" fg:w="1"/><text x="41.6293%" y="159.50"></text></g><g><title>merge_sched_in (1 samples, 0.86%)</title><rect x="41.3793%" y="133" width="0.8621%" height="15" fill="rgb(250,79,13)" fg:x="48" fg:w="1"/><text x="41.6293%" y="143.50"></text></g><g><title>event_sched_in (1 samples, 0.86%)</title><rect x="41.3793%" y="117" width="0.8621%" height="15" fill="rgb(211,146,34)" fg:x="48" fg:w="1"/><text x="41.6293%" y="127.50"></text></g><g><title>perf_ibs_add (1 samples, 0.86%)</title><rect x="41.3793%" y="101" width="0.8621%" height="15" fill="rgb(228,22,38)" fg:x="48" fg:w="1"/><text x="41.6293%" y="111.50"></text></g><g><title>perf_event_update_userpage (1 samples, 0.86%)</title><rect x="41.3793%" y="85" width="0.8621%" height="15" fill="rgb(235,168,5)" fg:x="48" fg:w="1"/><text x="41.6293%" y="95.50"></text></g><g><title>arch_perf_update_userpage (1 samples, 0.86%)</title><rect x="41.3793%" y="69" width="0.8621%" height="15" fill="rgb(221,155,16)" fg:x="48" fg:w="1"/><text x="41.6293%" y="79.50"></text></g><g><title>cyc2ns_read_begin (1 samples, 0.86%)</title><rect x="41.3793%" y="53" width="0.8621%" height="15" fill="rgb(215,215,53)" fg:x="48" fg:w="1"/><text x="41.6293%" y="63.50"></text></g><g><title>__hrtimer_init (1 samples, 0.86%)</title><rect x="43.1034%" y="245" width="0.8621%" height="15" fill="rgb(223,4,10)" fg:x="50" fg:w="1"/><text x="43.3534%" y="255.50"></text></g><g><title>do_timerfd_settime (3 samples, 2.59%)</title><rect x="42.2414%" y="261" width="2.5862%" height="15" fill="rgb(234,103,6)" fg:x="49" fg:w="3"/><text x="42.4914%" y="271.50">do..</text></g><g><title>ktime_get (1 samples, 0.86%)</title><rect x="43.9655%" y="245" width="0.8621%" height="15" fill="rgb(227,97,0)" fg:x="51" fg:w="1"/><text x="44.2155%" y="255.50"></text></g><g><title>read_tsc (1 samples, 0.86%)</title><rect x="43.9655%" y="229" width="0.8621%" height="15" fill="rgb(234,150,53)" fg:x="51" fg:w="1"/><text x="44.2155%" y="239.50"></text></g><g><title>get_timespec64 (1 samples, 0.86%)</title><rect x="44.8276%" y="261" width="0.8621%" height="15" fill="rgb(228,201,54)" fg:x="52" fg:w="1"/><text x="45.0776%" y="271.50"></text></g><g><title>_copy_from_user (1 samples, 0.86%)</title><rect x="44.8276%" y="245" width="0.8621%" height="15" fill="rgb(222,22,37)" fg:x="52" fg:w="1"/><text x="45.0776%" y="255.50"></text></g><g><title>copy_user_generic_string (1 samples, 0.86%)</title><rect x="44.8276%" y="229" width="0.8621%" height="15" fill="rgb(237,53,32)" fg:x="52" fg:w="1"/><text x="45.0776%" y="239.50"></text></g><g><title>__x64_sys_timerfd_settime (5 samples, 4.31%)</title><rect x="42.2414%" y="277" width="4.3103%" height="15" fill="rgb(233,25,53)" fg:x="49" fg:w="5"/><text x="42.4914%" y="287.50">__x64..</text></g><g><title>put_itimerspec64 (1 samples, 0.86%)</title><rect x="45.6897%" y="261" width="0.8621%" height="15" fill="rgb(210,40,34)" fg:x="53" fg:w="1"/><text x="45.9397%" y="271.50"></text></g><g><title>_copy_to_user (1 samples, 0.86%)</title><rect x="45.6897%" y="245" width="0.8621%" height="15" fill="rgb(241,220,44)" fg:x="53" fg:w="1"/><text x="45.9397%" y="255.50"></text></g><g><title>copy_user_generic_string (1 samples, 0.86%)</title><rect x="45.6897%" y="229" width="0.8621%" height="15" fill="rgb(235,28,35)" fg:x="53" fg:w="1"/><text x="45.9397%" y="239.50"></text></g><g><title>&lt;tftp::socket::UdpUnboundSocket as tftp::socket::Socket&gt;::recv_from (19 samples, 16.38%)</title><rect x="31.0345%" y="405" width="16.3793%" height="15" fill="rgb(210,56,17)" fg:x="36" fg:w="19"/><text x="31.2845%" y="415.50">&lt;tftp::socket::UdpUnbound..</text></g><g><title>polling::Poller::wait (16 samples, 13.79%)</title><rect x="33.6207%" y="389" width="13.7931%" height="15" fill="rgb(224,130,29)" fg:x="39" fg:w="16"/><text x="33.8707%" y="399.50">polling::Poller::wait</text></g><g><title>polling::epoll::Poller::wait (14 samples, 12.07%)</title><rect x="35.3448%" y="373" width="12.0690%" height="15" fill="rgb(235,212,8)" fg:x="41" fg:w="14"/><text x="35.5948%" y="383.50">polling::epoll::Po..</text></g><g><title>rustix::time::timerfd::timerfd_settime (6 samples, 5.17%)</title><rect x="42.2414%" y="357" width="5.1724%" height="15" fill="rgb(223,33,50)" fg:x="49" fg:w="6"/><text x="42.4914%" y="367.50">rustix..</text></g><g><title>rustix::backend::time::syscalls::timerfd_settime (6 samples, 5.17%)</title><rect x="42.2414%" y="341" width="5.1724%" height="15" fill="rgb(219,149,13)" fg:x="49" fg:w="6"/><text x="42.4914%" y="351.50">rustix..</text></g><g><title>rustix::backend::arch::asm::syscall4 (6 samples, 5.17%)</title><rect x="42.2414%" y="325" width="5.1724%" height="15" fill="rgb(250,156,29)" fg:x="49" fg:w="6"/><text x="42.4914%" y="335.50">rustix..</text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 5.17%)</title><rect x="42.2414%" y="309" width="5.1724%" height="15" fill="rgb(216,193,19)" fg:x="49" fg:w="6"/><text x="42.4914%" y="319.50">entry_..</text></g><g><title>do_syscall_64 (6 samples, 5.17%)</title><rect x="42.2414%" y="293" width="5.1724%" height="15" fill="rgb(216,135,14)" fg:x="49" fg:w="6"/><text x="42.4914%" y="303.50">do_sys..</text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.86%)</title><rect x="46.5517%" y="277" width="0.8621%" height="15" fill="rgb(241,47,5)" fg:x="54" fg:w="1"/><text x="46.8017%" y="287.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.86%)</title><rect x="46.5517%" y="261" width="0.8621%" height="15" fill="rgb(233,42,35)" fg:x="54" fg:w="1"/><text x="46.8017%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.86%)</title><rect x="47.4138%" y="357" width="0.8621%" height="15" fill="rgb(231,13,6)" fg:x="55" fg:w="1"/><text x="47.6638%" y="367.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::ValMut,K,V&gt;::next_unchecked (1 samples, 0.86%)</title><rect x="47.4138%" y="341" width="0.8621%" height="15" fill="rgb(207,181,40)" fg:x="55" fg:w="1"/><text x="47.6638%" y="351.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::ValMut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (1 samples, 0.86%)</title><rect x="47.4138%" y="325" width="0.8621%" height="15" fill="rgb(254,173,49)" fg:x="55" fg:w="1"/><text x="47.6638%" y="335.50"></text></g><g><title>alloc::collections::btree::mem::replace (1 samples, 0.86%)</title><rect x="47.4138%" y="309" width="0.8621%" height="15" fill="rgb(221,1,38)" fg:x="55" fg:w="1"/><text x="47.6638%" y="319.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::ValMut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::{{closure}} (1 samples, 0.86%)</title><rect x="47.4138%" y="293" width="0.8621%" height="15" fill="rgb(206,124,46)" fg:x="55" fg:w="1"/><text x="47.6638%" y="303.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_leaf_edge (1 samples, 0.86%)</title><rect x="47.4138%" y="277" width="0.8621%" height="15" fill="rgb(249,21,11)" fg:x="55" fg:w="1"/><text x="47.6638%" y="287.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,Type&gt;::force (1 samples, 0.86%)</title><rect x="47.4138%" y="261" width="0.8621%" height="15" fill="rgb(222,201,40)" fg:x="55" fg:w="1"/><text x="47.6638%" y="271.50"></text></g><g><title>&lt;tftp::socket::UdpUnboundSocket as tftp::socket::Socket&gt;::modify_interest (2 samples, 1.72%)</title><rect x="48.2759%" y="325" width="1.7241%" height="15" fill="rgb(235,61,29)" fg:x="56" fg:w="2"/><text x="48.5259%" y="335.50"></text></g><g><title>polling::Poller::modify (2 samples, 1.72%)</title><rect x="48.2759%" y="309" width="1.7241%" height="15" fill="rgb(219,207,3)" fg:x="56" fg:w="2"/><text x="48.5259%" y="319.50"></text></g><g><title>polling::Poller::modify_with_mode (2 samples, 1.72%)</title><rect x="48.2759%" y="293" width="1.7241%" height="15" fill="rgb(222,56,46)" fg:x="56" fg:w="2"/><text x="48.5259%" y="303.50"></text></g><g><title>polling::epoll::Poller::modify (2 samples, 1.72%)</title><rect x="48.2759%" y="277" width="1.7241%" height="15" fill="rgb(239,76,54)" fg:x="56" fg:w="2"/><text x="48.5259%" y="287.50"></text></g><g><title>rustix::backend::event::epoll::modify (2 samples, 1.72%)</title><rect x="48.2759%" y="261" width="1.7241%" height="15" fill="rgb(231,124,27)" fg:x="56" fg:w="2"/><text x="48.5259%" y="271.50"></text></g><g><title>rustix::backend::event::syscalls::epoll_mod (2 samples, 1.72%)</title><rect x="48.2759%" y="245" width="1.7241%" height="15" fill="rgb(249,195,6)" fg:x="56" fg:w="2"/><text x="48.5259%" y="255.50"></text></g><g><title>rustix::backend::conv::raw_fd (1 samples, 0.86%)</title><rect x="49.1379%" y="229" width="0.8621%" height="15" fill="rgb(237,174,47)" fg:x="57" fg:w="1"/><text x="49.3879%" y="239.50"></text></g><g><title>&lt;tftp::socket::UdpUnboundSocket as tftp::socket::Socket&gt;::notified (1 samples, 0.86%)</title><rect x="50.8621%" y="229" width="0.8621%" height="15" fill="rgb(206,201,31)" fg:x="59" fg:w="1"/><text x="51.1121%" y="239.50"></text></g><g><title>__consume_stateless_skb (1 samples, 0.86%)</title><rect x="51.7241%" y="101" width="0.8621%" height="15" fill="rgb(231,57,52)" fg:x="60" fg:w="1"/><text x="51.9741%" y="111.50"></text></g><g><title>skb_release_data (1 samples, 0.86%)</title><rect x="51.7241%" y="85" width="0.8621%" height="15" fill="rgb(248,177,22)" fg:x="60" fg:w="1"/><text x="51.9741%" y="95.50"></text></g><g><title>__slab_free (1 samples, 0.86%)</title><rect x="51.7241%" y="69" width="0.8621%" height="15" fill="rgb(215,211,37)" fg:x="60" fg:w="1"/><text x="51.9741%" y="79.50"></text></g><g><title>cmpxchg_double_slab.constprop.0.isra.0 (1 samples, 0.86%)</title><rect x="51.7241%" y="53" width="0.8621%" height="15" fill="rgb(241,128,51)" fg:x="60" fg:w="1"/><text x="51.9741%" y="63.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (7 samples, 6.03%)</title><rect x="47.4138%" y="405" width="6.0345%" height="15" fill="rgb(227,165,31)" fg:x="55" fg:w="7"/><text x="47.6638%" y="415.50">core::it..</text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (7 samples, 6.03%)</title><rect x="47.4138%" y="389" width="6.0345%" height="15" fill="rgb(228,167,24)" fg:x="55" fg:w="7"/><text x="47.6638%" y="399.50">&lt;core::i..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (7 samples, 6.03%)</title><rect x="47.4138%" y="373" width="6.0345%" height="15" fill="rgb(228,143,12)" fg:x="55" fg:w="7"/><text x="47.6638%" y="383.50">core::it..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (6 samples, 5.17%)</title><rect x="48.2759%" y="357" width="5.1724%" height="15" fill="rgb(249,149,8)" fg:x="56" fg:w="6"/><text x="48.5259%" y="367.50">core::..</text></g><g><title>tftp::server::single_thread::server::{{closure}} (6 samples, 5.17%)</title><rect x="48.2759%" y="341" width="5.1724%" height="15" fill="rgb(243,35,44)" fg:x="56" fg:w="6"/><text x="48.5259%" y="351.50">tftp::..</text></g><g><title>tftp::server::connection::Connection&lt;B,Rng&gt;::recv (4 samples, 3.45%)</title><rect x="50.0000%" y="325" width="3.4483%" height="15" fill="rgb(246,89,9)" fg:x="58" fg:w="4"/><text x="50.2500%" y="335.50">tft..</text></g><g><title>&lt;tftp::socket::UdpBoundSocket as tftp::socket::BoundSocket&gt;::recv (4 samples, 3.45%)</title><rect x="50.0000%" y="309" width="3.4483%" height="15" fill="rgb(233,213,13)" fg:x="58" fg:w="4"/><text x="50.2500%" y="319.50">&lt;tf..</text></g><g><title>std::net::udp::UdpSocket::recv (3 samples, 2.59%)</title><rect x="50.8621%" y="293" width="2.5862%" height="15" fill="rgb(233,141,41)" fg:x="59" fg:w="3"/><text x="51.1121%" y="303.50">st..</text></g><g><title>std::sys_common::net::UdpSocket::recv (3 samples, 2.59%)</title><rect x="50.8621%" y="277" width="2.5862%" height="15" fill="rgb(239,167,4)" fg:x="59" fg:w="3"/><text x="51.1121%" y="287.50">st..</text></g><g><title>std::sys::unix::net::Socket::read (3 samples, 2.59%)</title><rect x="50.8621%" y="261" width="2.5862%" height="15" fill="rgb(209,217,16)" fg:x="59" fg:w="3"/><text x="51.1121%" y="271.50">st..</text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (3 samples, 2.59%)</title><rect x="50.8621%" y="245" width="2.5862%" height="15" fill="rgb(219,88,35)" fg:x="59" fg:w="3"/><text x="51.1121%" y="255.50">st..</text></g><g><title>__libc_recv (2 samples, 1.72%)</title><rect x="51.7241%" y="229" width="1.7241%" height="15" fill="rgb(220,193,23)" fg:x="60" fg:w="2"/><text x="51.9741%" y="239.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 1.72%)</title><rect x="51.7241%" y="213" width="1.7241%" height="15" fill="rgb(230,90,52)" fg:x="60" fg:w="2"/><text x="51.9741%" y="223.50"></text></g><g><title>do_syscall_64 (2 samples, 1.72%)</title><rect x="51.7241%" y="197" width="1.7241%" height="15" fill="rgb(252,106,19)" fg:x="60" fg:w="2"/><text x="51.9741%" y="207.50"></text></g><g><title>__x64_sys_recvfrom (2 samples, 1.72%)</title><rect x="51.7241%" y="181" width="1.7241%" height="15" fill="rgb(206,74,20)" fg:x="60" fg:w="2"/><text x="51.9741%" y="191.50"></text></g><g><title>__sys_recvfrom (2 samples, 1.72%)</title><rect x="51.7241%" y="165" width="1.7241%" height="15" fill="rgb(230,138,44)" fg:x="60" fg:w="2"/><text x="51.9741%" y="175.50"></text></g><g><title>sock_recvmsg (2 samples, 1.72%)</title><rect x="51.7241%" y="149" width="1.7241%" height="15" fill="rgb(235,182,43)" fg:x="60" fg:w="2"/><text x="51.9741%" y="159.50"></text></g><g><title>inet_recvmsg (2 samples, 1.72%)</title><rect x="51.7241%" y="133" width="1.7241%" height="15" fill="rgb(242,16,51)" fg:x="60" fg:w="2"/><text x="51.9741%" y="143.50"></text></g><g><title>udp_recvmsg (2 samples, 1.72%)</title><rect x="51.7241%" y="117" width="1.7241%" height="15" fill="rgb(248,9,4)" fg:x="60" fg:w="2"/><text x="51.9741%" y="127.50"></text></g><g><title>_copy_to_iter (1 samples, 0.86%)</title><rect x="52.5862%" y="101" width="0.8621%" height="15" fill="rgb(210,31,22)" fg:x="61" fg:w="1"/><text x="52.8362%" y="111.50"></text></g><g><title>copy_user_generic_string (1 samples, 0.86%)</title><rect x="52.5862%" y="85" width="0.8621%" height="15" fill="rgb(239,54,39)" fg:x="61" fg:w="1"/><text x="52.8362%" y="95.50"></text></g><g><title>std::sys::unix::time::Timespec::now (1 samples, 0.86%)</title><rect x="53.4483%" y="341" width="0.8621%" height="15" fill="rgb(230,99,41)" fg:x="62" fg:w="1"/><text x="53.6983%" y="351.50"></text></g><g><title>__GI___clock_gettime (1 samples, 0.86%)</title><rect x="53.4483%" y="325" width="0.8621%" height="15" fill="rgb(253,106,12)" fg:x="62" fg:w="1"/><text x="53.6983%" y="335.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.86%)</title><rect x="53.4483%" y="309" width="0.8621%" height="15" fill="rgb(213,46,41)" fg:x="62" fg:w="1"/><text x="53.6983%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (1 samples, 0.86%)</title><rect x="53.4483%" y="293" width="0.8621%" height="15" fill="rgb(215,133,35)" fg:x="62" fg:w="1"/><text x="53.6983%" y="303.50"></text></g><g><title>tftp::io::instant_callback (2 samples, 1.72%)</title><rect x="53.4483%" y="405" width="1.7241%" height="15" fill="rgb(213,28,5)" fg:x="62" fg:w="2"/><text x="53.6983%" y="415.50"></text></g><g><title>tftp::std_compat::time::Instant::from_time (2 samples, 1.72%)</title><rect x="53.4483%" y="389" width="1.7241%" height="15" fill="rgb(215,77,49)" fg:x="62" fg:w="2"/><text x="53.6983%" y="399.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 1.72%)</title><rect x="53.4483%" y="373" width="1.7241%" height="15" fill="rgb(248,100,22)" fg:x="62" fg:w="2"/><text x="53.6983%" y="383.50"></text></g><g><title>tftp::io::instant_callback::{{closure}} (2 samples, 1.72%)</title><rect x="53.4483%" y="357" width="1.7241%" height="15" fill="rgb(208,67,9)" fg:x="62" fg:w="2"/><text x="53.6983%" y="367.50"></text></g><g><title>std::time::SystemTime::duration_since (1 samples, 0.86%)</title><rect x="54.3103%" y="341" width="0.8621%" height="15" fill="rgb(219,133,21)" fg:x="63" fg:w="1"/><text x="54.5603%" y="351.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (1 samples, 0.86%)</title><rect x="54.3103%" y="325" width="0.8621%" height="15" fill="rgb(246,46,29)" fg:x="63" fg:w="1"/><text x="54.5603%" y="335.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1 samples, 0.86%)</title><rect x="54.3103%" y="309" width="0.8621%" height="15" fill="rgb(246,185,52)" fg:x="63" fg:w="1"/><text x="54.5603%" y="319.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for u8&gt;::clone (1 samples, 0.86%)</title><rect x="56.8966%" y="325" width="0.8621%" height="15" fill="rgb(252,136,11)" fg:x="66" fg:w="1"/><text x="57.1466%" y="335.50"></text></g><g><title>tftp::buffer::resize_buffer (6 samples, 5.17%)</title><rect x="55.1724%" y="373" width="5.1724%" height="15" fill="rgb(219,138,53)" fg:x="64" fg:w="6"/><text x="55.4224%" y="383.50">tftp::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (6 samples, 5.17%)</title><rect x="55.1724%" y="357" width="5.1724%" height="15" fill="rgb(211,51,23)" fg:x="64" fg:w="6"/><text x="55.4224%" y="367.50">alloc:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (6 samples, 5.17%)</title><rect x="55.1724%" y="341" width="5.1724%" height="15" fill="rgb(247,221,28)" fg:x="64" fg:w="6"/><text x="55.4224%" y="351.50">alloc:..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3 samples, 2.59%)</title><rect x="57.7586%" y="325" width="2.5862%" height="15" fill="rgb(251,222,45)" fg:x="67" fg:w="3"/><text x="58.0086%" y="335.50">co..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3 samples, 2.59%)</title><rect x="57.7586%" y="309" width="2.5862%" height="15" fill="rgb(217,162,53)" fg:x="67" fg:w="3"/><text x="58.0086%" y="319.50">&lt;c..</text></g><g><title>tftp::server::connection::Connection&lt;B,Rng&gt;::send_packet (8 samples, 6.90%)</title><rect x="55.1724%" y="389" width="6.8966%" height="15" fill="rgb(229,93,14)" fg:x="64" fg:w="8"/><text x="55.4224%" y="399.50">tftp::ser..</text></g><g><title>tftp::server::connection::Connection&lt;B,Rng&gt;::send_bytes (2 samples, 1.72%)</title><rect x="60.3448%" y="373" width="1.7241%" height="15" fill="rgb(209,67,49)" fg:x="70" fg:w="2"/><text x="60.5948%" y="383.50"></text></g><g><title>&lt;tftp::socket::UdpBoundSocket as tftp::socket::BoundSocket&gt;::send (2 samples, 1.72%)</title><rect x="60.3448%" y="357" width="1.7241%" height="15" fill="rgb(213,87,29)" fg:x="70" fg:w="2"/><text x="60.5948%" y="367.50"></text></g><g><title>std::net::udp::UdpSocket::send (2 samples, 1.72%)</title><rect x="60.3448%" y="341" width="1.7241%" height="15" fill="rgb(205,151,52)" fg:x="70" fg:w="2"/><text x="60.5948%" y="351.50"></text></g><g><title>std::sys_common::net::UdpSocket::send (2 samples, 1.72%)</title><rect x="60.3448%" y="325" width="1.7241%" height="15" fill="rgb(253,215,39)" fg:x="70" fg:w="2"/><text x="60.5948%" y="335.50"></text></g><g><title>__libc_send (2 samples, 1.72%)</title><rect x="60.3448%" y="309" width="1.7241%" height="15" fill="rgb(221,220,41)" fg:x="70" fg:w="2"/><text x="60.5948%" y="319.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 1.72%)</title><rect x="60.3448%" y="293" width="1.7241%" height="15" fill="rgb(218,133,21)" fg:x="70" fg:w="2"/><text x="60.5948%" y="303.50"></text></g><g><title>do_syscall_64 (1 samples, 0.86%)</title><rect x="61.2069%" y="277" width="0.8621%" height="15" fill="rgb(221,193,43)" fg:x="71" fg:w="1"/><text x="61.4569%" y="287.50"></text></g><g><title>__x64_sys_sendto (1 samples, 0.86%)</title><rect x="61.2069%" y="261" width="0.8621%" height="15" fill="rgb(240,128,52)" fg:x="71" fg:w="1"/><text x="61.4569%" y="271.50"></text></g><g><title>__sys_sendto (1 samples, 0.86%)</title><rect x="61.2069%" y="245" width="0.8621%" height="15" fill="rgb(253,114,12)" fg:x="71" fg:w="1"/><text x="61.4569%" y="255.50"></text></g><g><title>sock_sendmsg (1 samples, 0.86%)</title><rect x="61.2069%" y="229" width="0.8621%" height="15" fill="rgb(215,223,47)" fg:x="71" fg:w="1"/><text x="61.4569%" y="239.50"></text></g><g><title>udp_sendmsg (1 samples, 0.86%)</title><rect x="61.2069%" y="213" width="0.8621%" height="15" fill="rgb(248,225,23)" fg:x="71" fg:w="1"/><text x="61.4569%" y="223.50"></text></g><g><title>ip_make_skb (1 samples, 0.86%)</title><rect x="61.2069%" y="197" width="0.8621%" height="15" fill="rgb(250,108,0)" fg:x="71" fg:w="1"/><text x="61.4569%" y="207.50"></text></g><g><title>__ip_append_data (1 samples, 0.86%)</title><rect x="61.2069%" y="181" width="0.8621%" height="15" fill="rgb(228,208,7)" fg:x="71" fg:w="1"/><text x="61.4569%" y="191.50"></text></g><g><title>sock_alloc_send_pskb (1 samples, 0.86%)</title><rect x="61.2069%" y="165" width="0.8621%" height="15" fill="rgb(244,45,10)" fg:x="71" fg:w="1"/><text x="61.4569%" y="175.50"></text></g><g><title>alloc_skb_with_frags (1 samples, 0.86%)</title><rect x="61.2069%" y="149" width="0.8621%" height="15" fill="rgb(207,125,25)" fg:x="71" fg:w="1"/><text x="61.4569%" y="159.50"></text></g><g><title>__alloc_skb (1 samples, 0.86%)</title><rect x="61.2069%" y="133" width="0.8621%" height="15" fill="rgb(210,195,18)" fg:x="71" fg:w="1"/><text x="61.4569%" y="143.50"></text></g><g><title>kmalloc_reserve (1 samples, 0.86%)</title><rect x="61.2069%" y="117" width="0.8621%" height="15" fill="rgb(249,80,12)" fg:x="71" fg:w="1"/><text x="61.4569%" y="127.50"></text></g><g><title>kmem_cache_alloc_node (1 samples, 0.86%)</title><rect x="61.2069%" y="101" width="0.8621%" height="15" fill="rgb(221,65,9)" fg:x="71" fg:w="1"/><text x="61.4569%" y="111.50"></text></g><g><title>__memset (1 samples, 0.86%)</title><rect x="61.2069%" y="85" width="0.8621%" height="15" fill="rgb(235,49,36)" fg:x="71" fg:w="1"/><text x="61.4569%" y="95.50"></text></g><g><title>_raw_spin_unlock (1 samples, 0.86%)</title><rect x="62.0690%" y="165" width="0.8621%" height="15" fill="rgb(225,32,20)" fg:x="72" fg:w="1"/><text x="62.3190%" y="175.50"></text></g><g><title>dget_parent (1 samples, 0.86%)</title><rect x="62.9310%" y="165" width="0.8621%" height="15" fill="rgb(215,141,46)" fg:x="73" fg:w="1"/><text x="63.1810%" y="175.50"></text></g><g><title>lockref_get_not_zero (1 samples, 0.86%)</title><rect x="62.9310%" y="149" width="0.8621%" height="15" fill="rgb(250,160,47)" fg:x="73" fg:w="1"/><text x="63.1810%" y="159.50"></text></g><g><title>dput (1 samples, 0.86%)</title><rect x="63.7931%" y="165" width="0.8621%" height="15" fill="rgb(216,222,40)" fg:x="74" fg:w="1"/><text x="64.0431%" y="175.50"></text></g><g><title>lockref_put_return (1 samples, 0.86%)</title><rect x="63.7931%" y="149" width="0.8621%" height="15" fill="rgb(234,217,39)" fg:x="74" fg:w="1"/><text x="64.0431%" y="159.50"></text></g><g><title>__wake_up_common_lock (1 samples, 0.86%)</title><rect x="65.5172%" y="117" width="0.8621%" height="15" fill="rgb(207,178,40)" fg:x="76" fg:w="1"/><text x="65.7672%" y="127.50"></text></g><g><title>__wake_up_common (1 samples, 0.86%)</title><rect x="65.5172%" y="101" width="0.8621%" height="15" fill="rgb(221,136,13)" fg:x="76" fg:w="1"/><text x="65.7672%" y="111.50"></text></g><g><title>pollwake (1 samples, 0.86%)</title><rect x="65.5172%" y="85" width="0.8621%" height="15" fill="rgb(249,199,10)" fg:x="76" fg:w="1"/><text x="65.7672%" y="95.50"></text></g><g><title>try_to_wake_up (1 samples, 0.86%)</title><rect x="65.5172%" y="69" width="0.8621%" height="15" fill="rgb(249,222,13)" fg:x="76" fg:w="1"/><text x="65.7672%" y="79.50"></text></g><g><title>ttwu_queue_wakelist (1 samples, 0.86%)</title><rect x="65.5172%" y="53" width="0.8621%" height="15" fill="rgb(244,185,38)" fg:x="76" fg:w="1"/><text x="65.7672%" y="63.50"></text></g><g><title>default_send_IPI_single_phys (1 samples, 0.86%)</title><rect x="65.5172%" y="37" width="0.8621%" height="15" fill="rgb(236,202,9)" fg:x="76" fg:w="1"/><text x="65.7672%" y="47.50"></text></g><g><title>__fsnotify_parent (6 samples, 5.17%)</title><rect x="62.0690%" y="181" width="5.1724%" height="15" fill="rgb(250,229,37)" fg:x="72" fg:w="6"/><text x="62.3190%" y="191.50">__fsno..</text></g><g><title>fsnotify (3 samples, 2.59%)</title><rect x="64.6552%" y="165" width="2.5862%" height="15" fill="rgb(206,174,23)" fg:x="75" fg:w="3"/><text x="64.9052%" y="175.50">fs..</text></g><g><title>inotify_handle_inode_event (2 samples, 1.72%)</title><rect x="65.5172%" y="149" width="1.7241%" height="15" fill="rgb(211,33,43)" fg:x="76" fg:w="2"/><text x="65.7672%" y="159.50"></text></g><g><title>fsnotify_insert_event (2 samples, 1.72%)</title><rect x="65.5172%" y="133" width="1.7241%" height="15" fill="rgb(245,58,50)" fg:x="76" fg:w="2"/><text x="65.7672%" y="143.50"></text></g><g><title>inotify_merge (1 samples, 0.86%)</title><rect x="66.3793%" y="117" width="0.8621%" height="15" fill="rgb(244,68,36)" fg:x="77" fg:w="1"/><text x="66.6293%" y="127.50"></text></g><g><title>strcmp (1 samples, 0.86%)</title><rect x="66.3793%" y="101" width="0.8621%" height="15" fill="rgb(232,229,15)" fg:x="77" fg:w="1"/><text x="66.6293%" y="111.50"></text></g><g><title>balance_dirty_pages_ratelimited_flags (1 samples, 0.86%)</title><rect x="68.1034%" y="149" width="0.8621%" height="15" fill="rgb(254,30,23)" fg:x="79" fg:w="1"/><text x="68.3534%" y="159.50"></text></g><g><title>copy_user_generic_string (1 samples, 0.86%)</title><rect x="68.9655%" y="133" width="0.8621%" height="15" fill="rgb(235,160,14)" fg:x="80" fg:w="1"/><text x="69.2155%" y="143.50"></text></g><g><title>copy_page_from_iter_atomic (2 samples, 1.72%)</title><rect x="68.9655%" y="149" width="1.7241%" height="15" fill="rgb(212,155,44)" fg:x="80" fg:w="2"/><text x="69.2155%" y="159.50"></text></g><g><title>preempt_count_add (1 samples, 0.86%)</title><rect x="69.8276%" y="133" width="0.8621%" height="15" fill="rgb(226,2,50)" fg:x="81" fg:w="1"/><text x="70.0776%" y="143.50"></text></g><g><title>in_lock_functions (1 samples, 0.86%)</title><rect x="69.8276%" y="117" width="0.8621%" height="15" fill="rgb(234,177,6)" fg:x="81" fg:w="1"/><text x="70.0776%" y="127.50"></text></g><g><title>ext4_da_write_begin (3 samples, 2.59%)</title><rect x="70.6897%" y="149" width="2.5862%" height="15" fill="rgb(217,24,9)" fg:x="82" fg:w="3"/><text x="70.9397%" y="159.50">ex..</text></g><g><title>pagecache_get_page (3 samples, 2.59%)</title><rect x="70.6897%" y="133" width="2.5862%" height="15" fill="rgb(220,13,46)" fg:x="82" fg:w="3"/><text x="70.9397%" y="143.50">pa..</text></g><g><title>__filemap_get_folio (3 samples, 2.59%)</title><rect x="70.6897%" y="117" width="2.5862%" height="15" fill="rgb(239,221,27)" fg:x="82" fg:w="3"/><text x="70.9397%" y="127.50">__..</text></g><g><title>folio_alloc (3 samples, 2.59%)</title><rect x="70.6897%" y="101" width="2.5862%" height="15" fill="rgb(222,198,25)" fg:x="82" fg:w="3"/><text x="70.9397%" y="111.50">fo..</text></g><g><title>__alloc_pages (3 samples, 2.59%)</title><rect x="70.6897%" y="85" width="2.5862%" height="15" fill="rgb(211,99,13)" fg:x="82" fg:w="3"/><text x="70.9397%" y="95.50">__..</text></g><g><title>get_page_from_freelist (3 samples, 2.59%)</title><rect x="70.6897%" y="69" width="2.5862%" height="15" fill="rgb(232,111,31)" fg:x="82" fg:w="3"/><text x="70.9397%" y="79.50">ge..</text></g><g><title>clear_page_rep (1 samples, 0.86%)</title><rect x="72.4138%" y="53" width="0.8621%" height="15" fill="rgb(245,82,37)" fg:x="84" fg:w="1"/><text x="72.6638%" y="63.50"></text></g><g><title>__ext4_journal_stop (1 samples, 0.86%)</title><rect x="73.2759%" y="117" width="0.8621%" height="15" fill="rgb(227,149,46)" fg:x="85" fg:w="1"/><text x="73.5259%" y="127.50"></text></g><g><title>jbd2_journal_stop (1 samples, 0.86%)</title><rect x="73.2759%" y="101" width="0.8621%" height="15" fill="rgb(218,36,50)" fg:x="85" fg:w="1"/><text x="73.5259%" y="111.50"></text></g><g><title>kmem_cache_free (1 samples, 0.86%)</title><rect x="73.2759%" y="85" width="0.8621%" height="15" fill="rgb(226,80,48)" fg:x="85" fg:w="1"/><text x="73.5259%" y="95.50"></text></g><g><title>ext4_fc_track_inode (1 samples, 0.86%)</title><rect x="74.1379%" y="69" width="0.8621%" height="15" fill="rgb(238,224,15)" fg:x="86" fg:w="1"/><text x="74.3879%" y="79.50"></text></g><g><title>__GI___libc_write (17 samples, 14.66%)</title><rect x="62.0690%" y="261" width="14.6552%" height="15" fill="rgb(241,136,10)" fg:x="72" fg:w="17"/><text x="62.3190%" y="271.50">__GI___libc_write</text></g><g><title>entry_SYSCALL_64_after_hwframe (17 samples, 14.66%)</title><rect x="62.0690%" y="245" width="14.6552%" height="15" fill="rgb(208,32,45)" fg:x="72" fg:w="17"/><text x="62.3190%" y="255.50">entry_SYSCALL_64_after..</text></g><g><title>do_syscall_64 (17 samples, 14.66%)</title><rect x="62.0690%" y="229" width="14.6552%" height="15" fill="rgb(207,135,9)" fg:x="72" fg:w="17"/><text x="62.3190%" y="239.50">do_syscall_64</text></g><g><title>ksys_write (17 samples, 14.66%)</title><rect x="62.0690%" y="213" width="14.6552%" height="15" fill="rgb(206,86,44)" fg:x="72" fg:w="17"/><text x="62.3190%" y="223.50">ksys_write</text></g><g><title>vfs_write (17 samples, 14.66%)</title><rect x="62.0690%" y="197" width="14.6552%" height="15" fill="rgb(245,177,15)" fg:x="72" fg:w="17"/><text x="62.3190%" y="207.50">vfs_write</text></g><g><title>ext4_buffered_write_iter (11 samples, 9.48%)</title><rect x="67.2414%" y="181" width="9.4828%" height="15" fill="rgb(206,64,50)" fg:x="78" fg:w="11"/><text x="67.4914%" y="191.50">ext4_buffered_..</text></g><g><title>generic_perform_write (10 samples, 8.62%)</title><rect x="68.1034%" y="165" width="8.6207%" height="15" fill="rgb(234,36,40)" fg:x="79" fg:w="10"/><text x="68.3534%" y="175.50">generic_perf..</text></g><g><title>generic_write_end (4 samples, 3.45%)</title><rect x="73.2759%" y="149" width="3.4483%" height="15" fill="rgb(213,64,8)" fg:x="85" fg:w="4"/><text x="73.5259%" y="159.50">gen..</text></g><g><title>__mark_inode_dirty (4 samples, 3.45%)</title><rect x="73.2759%" y="133" width="3.4483%" height="15" fill="rgb(210,75,36)" fg:x="85" fg:w="4"/><text x="73.5259%" y="143.50">__m..</text></g><g><title>ext4_dirty_inode (3 samples, 2.59%)</title><rect x="74.1379%" y="117" width="2.5862%" height="15" fill="rgb(229,88,21)" fg:x="86" fg:w="3"/><text x="74.3879%" y="127.50">ex..</text></g><g><title>__ext4_mark_inode_dirty (3 samples, 2.59%)</title><rect x="74.1379%" y="101" width="2.5862%" height="15" fill="rgb(252,204,47)" fg:x="86" fg:w="3"/><text x="74.3879%" y="111.50">__..</text></g><g><title>ext4_mark_iloc_dirty (3 samples, 2.59%)</title><rect x="74.1379%" y="85" width="2.5862%" height="15" fill="rgb(208,77,27)" fg:x="86" fg:w="3"/><text x="74.3879%" y="95.50">ex..</text></g><g><title>ext4_fill_raw_inode (2 samples, 1.72%)</title><rect x="75.0000%" y="69" width="1.7241%" height="15" fill="rgb(221,76,26)" fg:x="87" fg:w="2"/><text x="75.2500%" y="79.50"></text></g><g><title>ext4_inode_csum_set (1 samples, 0.86%)</title><rect x="75.8621%" y="53" width="0.8621%" height="15" fill="rgb(225,139,18)" fg:x="88" fg:w="1"/><text x="76.1121%" y="63.50"></text></g><g><title>tftp::server::helpers::write::handle_write (26 samples, 22.41%)</title><rect x="55.1724%" y="405" width="22.4138%" height="15" fill="rgb(230,137,11)" fg:x="64" fg:w="26"/><text x="55.4224%" y="415.50">tftp::server::helpers::write::handl..</text></g><g><title>tftp::server::helpers::write::write_block (18 samples, 15.52%)</title><rect x="62.0690%" y="389" width="15.5172%" height="15" fill="rgb(212,28,1)" fg:x="72" fg:w="18"/><text x="62.3190%" y="399.50">tftp::server::helpers::w..</text></g><g><title>tftp::writers::&lt;impl tftp::writers::block_writer::BlockWriter for alloc::boxed::Box&lt;T&gt;&gt;::write_block (18 samples, 15.52%)</title><rect x="62.0690%" y="373" width="15.5172%" height="15" fill="rgb(248,164,17)" fg:x="72" fg:w="18"/><text x="62.3190%" y="383.50">tftp::writers::&lt;impl tft..</text></g><g><title>&lt;tftp::writers::single_block_writer::SingleBlockWriter&lt;W&gt; as tftp::writers::block_writer::BlockWriter&gt;::write_block (18 samples, 15.52%)</title><rect x="62.0690%" y="357" width="15.5172%" height="15" fill="rgb(222,171,42)" fg:x="72" fg:w="18"/><text x="62.3190%" y="367.50">&lt;tftp::writers::single_b..</text></g><g><title>&lt;tftp::std_compat::fs::File as tftp::std_compat::io::Write&gt;::write (18 samples, 15.52%)</title><rect x="62.0690%" y="341" width="15.5172%" height="15" fill="rgb(243,84,45)" fg:x="72" fg:w="18"/><text x="62.3190%" y="351.50">&lt;tftp::std_compat::fs::F..</text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (18 samples, 15.52%)</title><rect x="62.0690%" y="325" width="15.5172%" height="15" fill="rgb(252,49,23)" fg:x="72" fg:w="18"/><text x="62.3190%" y="335.50">&lt;std::fs::File as std::i..</text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (18 samples, 15.52%)</title><rect x="62.0690%" y="309" width="15.5172%" height="15" fill="rgb(215,19,7)" fg:x="72" fg:w="18"/><text x="62.3190%" y="319.50">&lt;&amp;std::fs::File as std::..</text></g><g><title>std::sys::unix::fs::File::write (18 samples, 15.52%)</title><rect x="62.0690%" y="293" width="15.5172%" height="15" fill="rgb(238,81,41)" fg:x="72" fg:w="18"/><text x="62.3190%" y="303.50">std::sys::unix::fs::File..</text></g><g><title>std::sys::unix::fd::FileDesc::write (18 samples, 15.52%)</title><rect x="62.0690%" y="277" width="15.5172%" height="15" fill="rgb(210,199,37)" fg:x="72" fg:w="18"/><text x="62.3190%" y="287.50">std::sys::unix::fd::File..</text></g><g><title>std::sys::unix::cvt (1 samples, 0.86%)</title><rect x="76.7241%" y="261" width="0.8621%" height="15" fill="rgb(244,192,49)" fg:x="89" fg:w="1"/><text x="76.9741%" y="271.50"></text></g><g><title>&lt;isize as std::sys::unix::IsMinusOne&gt;::is_minus_one (1 samples, 0.86%)</title><rect x="76.7241%" y="245" width="0.8621%" height="15" fill="rgb(226,211,11)" fg:x="89" fg:w="1"/><text x="76.9741%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (1 samples, 0.86%)</title><rect x="77.5862%" y="389" width="0.8621%" height="15" fill="rgb(236,162,54)" fg:x="90" fg:w="1"/><text x="77.8362%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.86%)</title><rect x="77.5862%" y="373" width="0.8621%" height="15" fill="rgb(220,229,9)" fg:x="90" fg:w="1"/><text x="77.8362%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.86%)</title><rect x="77.5862%" y="357" width="0.8621%" height="15" fill="rgb(250,87,22)" fg:x="90" fg:w="1"/><text x="77.8362%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.86%)</title><rect x="77.5862%" y="341" width="0.8621%" height="15" fill="rgb(239,43,17)" fg:x="90" fg:w="1"/><text x="77.8362%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.86%)</title><rect x="77.5862%" y="325" width="0.8621%" height="15" fill="rgb(231,177,25)" fg:x="90" fg:w="1"/><text x="77.8362%" y="335.50"></text></g><g><title>tftp::server::single_thread::send_data_blocks (2 samples, 1.72%)</title><rect x="77.5862%" y="405" width="1.7241%" height="15" fill="rgb(219,179,1)" fg:x="90" fg:w="2"/><text x="77.8362%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::take (1 samples, 0.86%)</title><rect x="78.4483%" y="389" width="0.8621%" height="15" fill="rgb(238,219,53)" fg:x="91" fg:w="1"/><text x="78.6983%" y="399.50"></text></g><g><title>core::iter::adapters::take::Take&lt;I&gt;::new (1 samples, 0.86%)</title><rect x="78.4483%" y="373" width="0.8621%" height="15" fill="rgb(232,167,36)" fg:x="91" fg:w="1"/><text x="78.6983%" y="383.50"></text></g><g><title>_init (1 samples, 0.86%)</title><rect x="78.4483%" y="357" width="0.8621%" height="15" fill="rgb(244,19,51)" fg:x="91" fg:w="1"/><text x="78.6983%" y="367.50"></text></g><g><title>__libc_start_main_impl (57 samples, 49.14%)</title><rect x="31.0345%" y="693" width="49.1379%" height="15" fill="rgb(224,6,22)" fg:x="36" fg:w="57"/><text x="31.2845%" y="703.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (57 samples, 49.14%)</title><rect x="31.0345%" y="677" width="49.1379%" height="15" fill="rgb(224,145,5)" fg:x="36" fg:w="57"/><text x="31.2845%" y="687.50">__libc_start_call_main</text></g><g><title>main (57 samples, 49.14%)</title><rect x="31.0345%" y="661" width="49.1379%" height="15" fill="rgb(234,130,49)" fg:x="36" fg:w="57"/><text x="31.2845%" y="671.50">main</text></g><g><title>std::rt::lang_start (57 samples, 49.14%)</title><rect x="31.0345%" y="645" width="49.1379%" height="15" fill="rgb(254,6,2)" fg:x="36" fg:w="57"/><text x="31.2845%" y="655.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (57 samples, 49.14%)</title><rect x="31.0345%" y="629" width="49.1379%" height="15" fill="rgb(208,96,46)" fg:x="36" fg:w="57"/><text x="31.2845%" y="639.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (57 samples, 49.14%)</title><rect x="31.0345%" y="613" width="49.1379%" height="15" fill="rgb(239,3,39)" fg:x="36" fg:w="57"/><text x="31.2845%" y="623.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (57 samples, 49.14%)</title><rect x="31.0345%" y="597" width="49.1379%" height="15" fill="rgb(233,210,1)" fg:x="36" fg:w="57"/><text x="31.2845%" y="607.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (57 samples, 49.14%)</title><rect x="31.0345%" y="581" width="49.1379%" height="15" fill="rgb(244,137,37)" fg:x="36" fg:w="57"/><text x="31.2845%" y="591.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (57 samples, 49.14%)</title><rect x="31.0345%" y="565" width="49.1379%" height="15" fill="rgb(240,136,2)" fg:x="36" fg:w="57"/><text x="31.2845%" y="575.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (57 samples, 49.14%)</title><rect x="31.0345%" y="549" width="49.1379%" height="15" fill="rgb(239,18,37)" fg:x="36" fg:w="57"/><text x="31.2845%" y="559.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (57 samples, 49.14%)</title><rect x="31.0345%" y="533" width="49.1379%" height="15" fill="rgb(218,185,22)" fg:x="36" fg:w="57"/><text x="31.2845%" y="543.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (57 samples, 49.14%)</title><rect x="31.0345%" y="517" width="49.1379%" height="15" fill="rgb(225,218,4)" fg:x="36" fg:w="57"/><text x="31.2845%" y="527.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (57 samples, 49.14%)</title><rect x="31.0345%" y="501" width="49.1379%" height="15" fill="rgb(230,182,32)" fg:x="36" fg:w="57"/><text x="31.2845%" y="511.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_on..</text></g><g><title>std::rt::lang_start::{{closure}} (57 samples, 49.14%)</title><rect x="31.0345%" y="485" width="49.1379%" height="15" fill="rgb(242,56,43)" fg:x="36" fg:w="57"/><text x="31.2845%" y="495.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (57 samples, 49.14%)</title><rect x="31.0345%" y="469" width="49.1379%" height="15" fill="rgb(233,99,24)" fg:x="36" fg:w="57"/><text x="31.2845%" y="479.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (57 samples, 49.14%)</title><rect x="31.0345%" y="453" width="49.1379%" height="15" fill="rgb(234,209,42)" fg:x="36" fg:w="57"/><text x="31.2845%" y="463.50">core::ops::function::FnOnce::call_once</text></g><g><title>tftp::main (57 samples, 49.14%)</title><rect x="31.0345%" y="437" width="49.1379%" height="15" fill="rgb(227,7,12)" fg:x="36" fg:w="57"/><text x="31.2845%" y="447.50">tftp::main</text></g><g><title>tftp::server::single_thread::server (57 samples, 49.14%)</title><rect x="31.0345%" y="421" width="49.1379%" height="15" fill="rgb(245,203,43)" fg:x="36" fg:w="57"/><text x="31.2845%" y="431.50">tftp::server::single_thread::server</text></g><g><title>tftp::std_compat::time::Instant::elapsed (1 samples, 0.86%)</title><rect x="79.3103%" y="405" width="0.8621%" height="15" fill="rgb(238,205,33)" fg:x="92" fg:w="1"/><text x="79.5603%" y="415.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.86%)</title><rect x="79.3103%" y="389" width="0.8621%" height="15" fill="rgb(231,56,7)" fg:x="92" fg:w="1"/><text x="79.5603%" y="399.50"></text></g><g><title>tftp::io::instant_callback::{{closure}} (1 samples, 0.86%)</title><rect x="79.3103%" y="373" width="0.8621%" height="15" fill="rgb(244,186,29)" fg:x="92" fg:w="1"/><text x="79.5603%" y="383.50"></text></g><g><title>std::sys::unix::time::Timespec::now (1 samples, 0.86%)</title><rect x="79.3103%" y="357" width="0.8621%" height="15" fill="rgb(234,111,31)" fg:x="92" fg:w="1"/><text x="79.5603%" y="367.50"></text></g><g><title>__GI___clock_gettime (1 samples, 0.86%)</title><rect x="79.3103%" y="341" width="0.8621%" height="15" fill="rgb(241,149,10)" fg:x="92" fg:w="1"/><text x="79.5603%" y="351.50"></text></g><g><title>_start (58 samples, 50.00%)</title><rect x="31.0345%" y="709" width="50.0000%" height="15" fill="rgb(249,206,44)" fg:x="36" fg:w="58"/><text x="31.2845%" y="719.50">_start</text></g><g><title>_dl_start (1 samples, 0.86%)</title><rect x="80.1724%" y="693" width="0.8621%" height="15" fill="rgb(251,153,30)" fg:x="93" fg:w="1"/><text x="80.4224%" y="703.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.86%)</title><rect x="80.1724%" y="677" width="0.8621%" height="15" fill="rgb(239,152,38)" fg:x="93" fg:w="1"/><text x="80.4224%" y="687.50"></text></g><g><title>exc_page_fault (1 samples, 0.86%)</title><rect x="80.1724%" y="661" width="0.8621%" height="15" fill="rgb(249,139,47)" fg:x="93" fg:w="1"/><text x="80.4224%" y="671.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.86%)</title><rect x="80.1724%" y="645" width="0.8621%" height="15" fill="rgb(244,64,35)" fg:x="93" fg:w="1"/><text x="80.4224%" y="655.50"></text></g><g><title>handle_mm_fault (1 samples, 0.86%)</title><rect x="80.1724%" y="629" width="0.8621%" height="15" fill="rgb(216,46,15)" fg:x="93" fg:w="1"/><text x="80.4224%" y="639.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.86%)</title><rect x="80.1724%" y="613" width="0.8621%" height="15" fill="rgb(250,74,19)" fg:x="93" fg:w="1"/><text x="80.4224%" y="623.50"></text></g><g><title>do_fault (1 samples, 0.86%)</title><rect x="80.1724%" y="597" width="0.8621%" height="15" fill="rgb(249,42,33)" fg:x="93" fg:w="1"/><text x="80.4224%" y="607.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.86%)</title><rect x="80.1724%" y="581" width="0.8621%" height="15" fill="rgb(242,149,17)" fg:x="93" fg:w="1"/><text x="80.4224%" y="591.50"></text></g><g><title>charge_memcg (1 samples, 0.86%)</title><rect x="80.1724%" y="565" width="0.8621%" height="15" fill="rgb(244,29,21)" fg:x="93" fg:w="1"/><text x="80.4224%" y="575.50"></text></g><g><title>mem_cgroup_charge_statistics (1 samples, 0.86%)</title><rect x="80.1724%" y="549" width="0.8621%" height="15" fill="rgb(220,130,37)" fg:x="93" fg:w="1"/><text x="80.4224%" y="559.50"></text></g><g><title>check_preemption_disabled (1 samples, 0.86%)</title><rect x="80.1724%" y="533" width="0.8621%" height="15" fill="rgb(211,67,2)" fg:x="93" fg:w="1"/><text x="80.4224%" y="543.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,Type&gt;::val_area_mut (1 samples, 0.86%)</title><rect x="81.0345%" y="709" width="0.8621%" height="15" fill="rgb(235,68,52)" fg:x="94" fg:w="1"/><text x="81.2845%" y="719.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (1 samples, 0.86%)</title><rect x="81.0345%" y="693" width="0.8621%" height="15" fill="rgb(246,142,3)" fg:x="94" fg:w="1"/><text x="81.2845%" y="703.50"></text></g><g><title>__x64_sys_epoll_ctl (2 samples, 1.72%)</title><rect x="82.7586%" y="677" width="1.7241%" height="15" fill="rgb(241,25,7)" fg:x="96" fg:w="2"/><text x="83.0086%" y="687.50"></text></g><g><title>do_epoll_ctl (2 samples, 1.72%)</title><rect x="82.7586%" y="661" width="1.7241%" height="15" fill="rgb(242,119,39)" fg:x="96" fg:w="2"/><text x="83.0086%" y="671.50"></text></g><g><title>ep_item_poll.isra.0 (1 samples, 0.86%)</title><rect x="83.6207%" y="645" width="0.8621%" height="15" fill="rgb(241,98,45)" fg:x="97" fg:w="1"/><text x="83.8707%" y="655.50"></text></g><g><title>sock_poll (1 samples, 0.86%)</title><rect x="83.6207%" y="629" width="0.8621%" height="15" fill="rgb(254,28,30)" fg:x="97" fg:w="1"/><text x="83.8707%" y="639.50"></text></g><g><title>_raw_write_lock_irq (1 samples, 0.86%)</title><rect x="85.3448%" y="645" width="0.8621%" height="15" fill="rgb(241,142,54)" fg:x="99" fg:w="1"/><text x="85.5948%" y="655.50"></text></g><g><title>ep_item_poll.isra.0 (1 samples, 0.86%)</title><rect x="86.2069%" y="645" width="0.8621%" height="15" fill="rgb(222,85,15)" fg:x="100" fg:w="1"/><text x="86.4569%" y="655.50"></text></g><g><title>sock_poll (1 samples, 0.86%)</title><rect x="86.2069%" y="629" width="0.8621%" height="15" fill="rgb(210,85,47)" fg:x="100" fg:w="1"/><text x="86.4569%" y="639.50"></text></g><g><title>__x64_sys_epoll_wait (4 samples, 3.45%)</title><rect x="84.4828%" y="677" width="3.4483%" height="15" fill="rgb(224,206,25)" fg:x="98" fg:w="4"/><text x="84.7328%" y="687.50">__x..</text></g><g><title>do_epoll_wait (4 samples, 3.45%)</title><rect x="84.4828%" y="661" width="3.4483%" height="15" fill="rgb(243,201,19)" fg:x="98" fg:w="4"/><text x="84.7328%" y="671.50">do_..</text></g><g><title>schedule_hrtimeout_range_clock (1 samples, 0.86%)</title><rect x="87.0690%" y="645" width="0.8621%" height="15" fill="rgb(236,59,4)" fg:x="101" fg:w="1"/><text x="87.3190%" y="655.50"></text></g><g><title>schedule (1 samples, 0.86%)</title><rect x="87.0690%" y="629" width="0.8621%" height="15" fill="rgb(254,179,45)" fg:x="101" fg:w="1"/><text x="87.3190%" y="639.50"></text></g><g><title>__schedule (1 samples, 0.86%)</title><rect x="87.0690%" y="613" width="0.8621%" height="15" fill="rgb(226,14,10)" fg:x="101" fg:w="1"/><text x="87.3190%" y="623.50"></text></g><g><title>dequeue_task_fair (1 samples, 0.86%)</title><rect x="87.0690%" y="597" width="0.8621%" height="15" fill="rgb(244,27,41)" fg:x="101" fg:w="1"/><text x="87.3190%" y="607.50"></text></g><g><title>dequeue_entity (1 samples, 0.86%)</title><rect x="87.0690%" y="581" width="0.8621%" height="15" fill="rgb(235,35,32)" fg:x="101" fg:w="1"/><text x="87.3190%" y="591.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.86%)</title><rect x="87.9310%" y="677" width="0.8621%" height="15" fill="rgb(218,68,31)" fg:x="102" fg:w="1"/><text x="88.1810%" y="687.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 0.86%)</title><rect x="87.9310%" y="661" width="0.8621%" height="15" fill="rgb(207,120,37)" fg:x="102" fg:w="1"/><text x="88.1810%" y="671.50"></text></g><g><title>bprm_execve (1 samples, 0.86%)</title><rect x="87.9310%" y="645" width="0.8621%" height="15" fill="rgb(227,98,0)" fg:x="102" fg:w="1"/><text x="88.1810%" y="655.50"></text></g><g><title>load_elf_binary (1 samples, 0.86%)</title><rect x="87.9310%" y="629" width="0.8621%" height="15" fill="rgb(207,7,3)" fg:x="102" fg:w="1"/><text x="88.1810%" y="639.50"></text></g><g><title>setup_arg_pages (1 samples, 0.86%)</title><rect x="87.9310%" y="613" width="0.8621%" height="15" fill="rgb(206,98,19)" fg:x="102" fg:w="1"/><text x="88.1810%" y="623.50"></text></g><g><title>arch_align_stack (1 samples, 0.86%)</title><rect x="87.9310%" y="597" width="0.8621%" height="15" fill="rgb(217,5,26)" fg:x="102" fg:w="1"/><text x="88.1810%" y="607.50"></text></g><g><title>get_random_u16 (1 samples, 0.86%)</title><rect x="87.9310%" y="581" width="0.8621%" height="15" fill="rgb(235,190,38)" fg:x="102" fg:w="1"/><text x="88.1810%" y="591.50"></text></g><g><title>_get_random_bytes (1 samples, 0.86%)</title><rect x="87.9310%" y="565" width="0.8621%" height="15" fill="rgb(247,86,24)" fg:x="102" fg:w="1"/><text x="88.1810%" y="575.50"></text></g><g><title>crng_make_state (1 samples, 0.86%)</title><rect x="87.9310%" y="549" width="0.8621%" height="15" fill="rgb(205,101,16)" fg:x="102" fg:w="1"/><text x="88.1810%" y="559.50"></text></g><g><title>crng_fast_key_erasure (1 samples, 0.86%)</title><rect x="87.9310%" y="533" width="0.8621%" height="15" fill="rgb(246,168,33)" fg:x="102" fg:w="1"/><text x="88.1810%" y="543.50"></text></g><g><title>chacha_block_generic (1 samples, 0.86%)</title><rect x="87.9310%" y="517" width="0.8621%" height="15" fill="rgb(231,114,1)" fg:x="102" fg:w="1"/><text x="88.1810%" y="527.50"></text></g><g><title>chacha_permute (1 samples, 0.86%)</title><rect x="87.9310%" y="501" width="0.8621%" height="15" fill="rgb(207,184,53)" fg:x="102" fg:w="1"/><text x="88.1810%" y="511.50"></text></g><g><title>__check_object_size (3 samples, 2.59%)</title><rect x="89.6552%" y="597" width="2.5862%" height="15" fill="rgb(224,95,51)" fg:x="104" fg:w="3"/><text x="89.9052%" y="607.50">__..</text></g><g><title>__check_heap_object (1 samples, 0.86%)</title><rect x="91.3793%" y="581" width="0.8621%" height="15" fill="rgb(212,188,45)" fg:x="106" fg:w="1"/><text x="91.6293%" y="591.50"></text></g><g><title>_raw_spin_lock_bh (1 samples, 0.86%)</title><rect x="92.2414%" y="581" width="0.8621%" height="15" fill="rgb(223,154,38)" fg:x="107" fg:w="1"/><text x="92.4914%" y="591.50"></text></g><g><title>__skb_recv_udp (2 samples, 1.72%)</title><rect x="92.2414%" y="597" width="1.7241%" height="15" fill="rgb(251,22,52)" fg:x="107" fg:w="2"/><text x="92.4914%" y="607.50"></text></g><g><title>udp_rmem_release (1 samples, 0.86%)</title><rect x="93.1034%" y="581" width="0.8621%" height="15" fill="rgb(229,209,22)" fg:x="108" fg:w="1"/><text x="93.3534%" y="591.50"></text></g><g><title>__x64_sys_recvfrom (7 samples, 6.03%)</title><rect x="88.7931%" y="677" width="6.0345%" height="15" fill="rgb(234,138,34)" fg:x="103" fg:w="7"/><text x="89.0431%" y="687.50">__x64_sy..</text></g><g><title>__sys_recvfrom (7 samples, 6.03%)</title><rect x="88.7931%" y="661" width="6.0345%" height="15" fill="rgb(212,95,11)" fg:x="103" fg:w="7"/><text x="89.0431%" y="671.50">__sys_re..</text></g><g><title>sock_recvmsg (7 samples, 6.03%)</title><rect x="88.7931%" y="645" width="6.0345%" height="15" fill="rgb(240,179,47)" fg:x="103" fg:w="7"/><text x="89.0431%" y="655.50">sock_rec..</text></g><g><title>inet_recvmsg (7 samples, 6.03%)</title><rect x="88.7931%" y="629" width="6.0345%" height="15" fill="rgb(240,163,11)" fg:x="103" fg:w="7"/><text x="89.0431%" y="639.50">inet_rec..</text></g><g><title>udp_recvmsg (7 samples, 6.03%)</title><rect x="88.7931%" y="613" width="6.0345%" height="15" fill="rgb(236,37,12)" fg:x="103" fg:w="7"/><text x="89.0431%" y="623.50">udp_recv..</text></g><g><title>_copy_to_iter (1 samples, 0.86%)</title><rect x="93.9655%" y="597" width="0.8621%" height="15" fill="rgb(232,164,16)" fg:x="109" fg:w="1"/><text x="94.2155%" y="607.50"></text></g><g><title>copy_user_generic_string (1 samples, 0.86%)</title><rect x="93.9655%" y="581" width="0.8621%" height="15" fill="rgb(244,205,15)" fg:x="109" fg:w="1"/><text x="94.2155%" y="591.50"></text></g><g><title>__x64_sys_timerfd_settime (1 samples, 0.86%)</title><rect x="94.8276%" y="677" width="0.8621%" height="15" fill="rgb(223,117,47)" fg:x="110" fg:w="1"/><text x="95.0776%" y="687.50"></text></g><g><title>put_itimerspec64 (1 samples, 0.86%)</title><rect x="94.8276%" y="661" width="0.8621%" height="15" fill="rgb(244,107,35)" fg:x="110" fg:w="1"/><text x="95.0776%" y="671.50"></text></g><g><title>_copy_to_user (1 samples, 0.86%)</title><rect x="94.8276%" y="645" width="0.8621%" height="15" fill="rgb(205,140,8)" fg:x="110" fg:w="1"/><text x="95.0776%" y="655.50"></text></g><g><title>copy_user_generic_string (1 samples, 0.86%)</title><rect x="94.8276%" y="629" width="0.8621%" height="15" fill="rgb(228,84,46)" fg:x="110" fg:w="1"/><text x="95.0776%" y="639.50"></text></g><g><title>ext4_da_write_begin (1 samples, 0.86%)</title><rect x="96.5517%" y="613" width="0.8621%" height="15" fill="rgb(254,188,9)" fg:x="112" fg:w="1"/><text x="96.8017%" y="623.50"></text></g><g><title>pagecache_get_page (1 samples, 0.86%)</title><rect x="96.5517%" y="597" width="0.8621%" height="15" fill="rgb(206,112,54)" fg:x="112" fg:w="1"/><text x="96.8017%" y="607.50"></text></g><g><title>__x86_return_thunk (1 samples, 0.86%)</title><rect x="96.5517%" y="581" width="0.8621%" height="15" fill="rgb(216,84,49)" fg:x="112" fg:w="1"/><text x="96.8017%" y="591.50"></text></g><g><title>ksys_write (3 samples, 2.59%)</title><rect x="95.6897%" y="677" width="2.5862%" height="15" fill="rgb(214,194,35)" fg:x="111" fg:w="3"/><text x="95.9397%" y="687.50">ks..</text></g><g><title>vfs_write (3 samples, 2.59%)</title><rect x="95.6897%" y="661" width="2.5862%" height="15" fill="rgb(249,28,3)" fg:x="111" fg:w="3"/><text x="95.9397%" y="671.50">vf..</text></g><g><title>ext4_buffered_write_iter (2 samples, 1.72%)</title><rect x="96.5517%" y="645" width="1.7241%" height="15" fill="rgb(222,56,52)" fg:x="112" fg:w="2"/><text x="96.8017%" y="655.50"></text></g><g><title>generic_perform_write (2 samples, 1.72%)</title><rect x="96.5517%" y="629" width="1.7241%" height="15" fill="rgb(245,217,50)" fg:x="112" fg:w="2"/><text x="96.8017%" y="639.50"></text></g><g><title>generic_write_end (1 samples, 0.86%)</title><rect x="97.4138%" y="613" width="0.8621%" height="15" fill="rgb(213,201,24)" fg:x="113" fg:w="1"/><text x="97.6638%" y="623.50"></text></g><g><title>__mark_inode_dirty (1 samples, 0.86%)</title><rect x="97.4138%" y="597" width="0.8621%" height="15" fill="rgb(248,116,28)" fg:x="113" fg:w="1"/><text x="97.6638%" y="607.50"></text></g><g><title>ext4_dirty_inode (1 samples, 0.86%)</title><rect x="97.4138%" y="581" width="0.8621%" height="15" fill="rgb(219,72,43)" fg:x="113" fg:w="1"/><text x="97.6638%" y="591.50"></text></g><g><title>__ext4_mark_inode_dirty (1 samples, 0.86%)</title><rect x="97.4138%" y="565" width="0.8621%" height="15" fill="rgb(209,138,14)" fg:x="113" fg:w="1"/><text x="97.6638%" y="575.50"></text></g><g><title>ext4_mark_iloc_dirty (1 samples, 0.86%)</title><rect x="97.4138%" y="549" width="0.8621%" height="15" fill="rgb(222,18,33)" fg:x="113" fg:w="1"/><text x="97.6638%" y="559.50"></text></g><g><title>ext4_fill_raw_inode (1 samples, 0.86%)</title><rect x="97.4138%" y="533" width="0.8621%" height="15" fill="rgb(213,199,7)" fg:x="113" fg:w="1"/><text x="97.6638%" y="543.50"></text></g><g><title>syscall_enter_from_user_mode (1 samples, 0.86%)</title><rect x="98.2759%" y="677" width="0.8621%" height="15" fill="rgb(250,110,10)" fg:x="114" fg:w="1"/><text x="98.5259%" y="687.50"></text></g><g><title>all (116 samples, 100%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(248,123,6)" fg:x="0" fg:w="116"/><text x="0.2500%" y="751.50"></text></g><g><title>tftp (112 samples, 96.55%)</title><rect x="3.4483%" y="725" width="96.5517%" height="15" fill="rgb(206,91,31)" fg:x="4" fg:w="112"/><text x="3.6983%" y="735.50">tftp</text></g><g><title>entry_SYSCALL_64_after_hwframe (21 samples, 18.10%)</title><rect x="81.8966%" y="709" width="18.1034%" height="15" fill="rgb(211,154,13)" fg:x="95" fg:w="21"/><text x="82.1466%" y="719.50">entry_SYSCALL_64_after_hwfra..</text></g><g><title>do_syscall_64 (20 samples, 17.24%)</title><rect x="82.7586%" y="693" width="17.2414%" height="15" fill="rgb(225,148,7)" fg:x="96" fg:w="20"/><text x="83.0086%" y="703.50">do_syscall_64</text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.86%)</title><rect x="99.1379%" y="677" width="0.8621%" height="15" fill="rgb(220,160,43)" fg:x="115" fg:w="1"/><text x="99.3879%" y="687.50"></text></g></svg></svg>