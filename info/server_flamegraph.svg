<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="533.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="533.00"> </text><svg id="frames" x="10" width="1180" total_samples="2307"><g><title>[ld-linux-x86-64.so.2] (8 samples, 0.35%)</title><rect x="0.0000%" y="469" width="0.3468%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="8"/><text x="0.2500%" y="479.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.13%)</title><rect x="0.2167%" y="453" width="0.1300%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="3"/><text x="0.4667%" y="463.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.09%)</title><rect x="0.2601%" y="437" width="0.0867%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="2"/><text x="0.5101%" y="447.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.09%)</title><rect x="0.2601%" y="421" width="0.0867%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="2"/><text x="0.5101%" y="431.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.09%)</title><rect x="0.2601%" y="405" width="0.0867%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="2"/><text x="0.5101%" y="415.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="0.3034%" y="389" width="0.0433%" height="15" fill="rgb(232,128,0)" fg:x="7" fg:w="1"/><text x="0.5534%" y="399.50"></text></g><g><title>&lt;tftp::cli::Commands as clap::derive::Subcommand&gt;::augment_subcommands (1 samples, 0.04%)</title><rect x="0.3468%" y="453" width="0.0433%" height="15" fill="rgb(207,160,47)" fg:x="8" fg:w="1"/><text x="0.5968%" y="463.50"></text></g><g><title>clap::builder::command::Command::arg (1 samples, 0.04%)</title><rect x="0.3468%" y="437" width="0.0433%" height="15" fill="rgb(228,23,34)" fg:x="8" fg:w="1"/><text x="0.5968%" y="447.50"></text></g><g><title>clap::parser::parser::Parser::get_matches_with (1 samples, 0.04%)</title><rect x="0.3901%" y="453" width="0.0433%" height="15" fill="rgb(218,30,26)" fg:x="9" fg:w="1"/><text x="0.6401%" y="463.50"></text></g><g><title>clap::parser::parser::Parser::parse_subcommand (1 samples, 0.04%)</title><rect x="0.3901%" y="437" width="0.0433%" height="15" fill="rgb(220,122,19)" fg:x="9" fg:w="1"/><text x="0.6401%" y="447.50"></text></g><g><title>clap::builder::command::Command::_build_subcommand (1 samples, 0.04%)</title><rect x="0.3901%" y="421" width="0.0433%" height="15" fill="rgb(250,228,42)" fg:x="9" fg:w="1"/><text x="0.6401%" y="431.50"></text></g><g><title>clap::builder::command::Command::_build_self (1 samples, 0.04%)</title><rect x="0.3901%" y="405" width="0.0433%" height="15" fill="rgb(240,193,28)" fg:x="9" fg:w="1"/><text x="0.6401%" y="415.50"></text></g><g><title>clap::builder::debug_asserts::assert_app (1 samples, 0.04%)</title><rect x="0.3901%" y="389" width="0.0433%" height="15" fill="rgb(216,20,37)" fg:x="9" fg:w="1"/><text x="0.6401%" y="399.50"></text></g><g><title>clap::builder::command::Command::two_args_of (1 samples, 0.04%)</title><rect x="0.3901%" y="373" width="0.0433%" height="15" fill="rgb(206,188,39)" fg:x="9" fg:w="1"/><text x="0.6401%" y="383.50"></text></g><g><title>clap::builder::command::two_elements_of (1 samples, 0.04%)</title><rect x="0.3901%" y="357" width="0.0433%" height="15" fill="rgb(217,207,13)" fg:x="9" fg:w="1"/><text x="0.6401%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="0.3901%" y="341" width="0.0433%" height="15" fill="rgb(231,73,38)" fg:x="9" fg:w="1"/><text x="0.6401%" y="351.50"></text></g><g><title>polling::epoll::Poller::ctl (1 samples, 0.04%)</title><rect x="0.4335%" y="453" width="0.0433%" height="15" fill="rgb(225,20,46)" fg:x="10" fg:w="1"/><text x="0.6835%" y="463.50"></text></g><g><title>epoll_ctl (1 samples, 0.04%)</title><rect x="0.4335%" y="437" width="0.0433%" height="15" fill="rgb(210,31,41)" fg:x="10" fg:w="1"/><text x="0.6835%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.4335%" y="421" width="0.0433%" height="15" fill="rgb(221,200,47)" fg:x="10" fg:w="1"/><text x="0.6835%" y="431.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::le (2 samples, 0.09%)</title><rect x="0.6502%" y="421" width="0.0867%" height="15" fill="rgb(226,26,5)" fg:x="15" fg:w="2"/><text x="0.9002%" y="431.50"></text></g><g><title>&lt;tftp::packet::DataPacket as tftp::packet::ByteConverter&gt;::from_bytes (2 samples, 0.09%)</title><rect x="0.7802%" y="405" width="0.0867%" height="15" fill="rgb(249,33,26)" fg:x="18" fg:w="2"/><text x="1.0302%" y="415.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.04%)</title><rect x="0.8236%" y="389" width="0.0433%" height="15" fill="rgb(235,183,28)" fg:x="19" fg:w="1"/><text x="1.0736%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.04%)</title><rect x="0.8669%" y="405" width="0.0433%" height="15" fill="rgb(221,5,38)" fg:x="20" fg:w="1"/><text x="1.1169%" y="415.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.04%)</title><rect x="0.8669%" y="389" width="0.0433%" height="15" fill="rgb(247,18,42)" fg:x="20" fg:w="1"/><text x="1.1169%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.04%)</title><rect x="0.8669%" y="373" width="0.0433%" height="15" fill="rgb(241,131,45)" fg:x="20" fg:w="1"/><text x="1.1169%" y="383.50"></text></g><g><title>&lt;tftp::packet::Packet as tftp::packet::ByteConverter&gt;::from_bytes (5 samples, 0.22%)</title><rect x="0.7369%" y="421" width="0.2167%" height="15" fill="rgb(249,31,29)" fg:x="17" fg:w="5"/><text x="0.9869%" y="431.50"></text></g><g><title>tftp::packet::PacketType::from_bytes (1 samples, 0.04%)</title><rect x="0.9103%" y="405" width="0.0433%" height="15" fill="rgb(225,111,53)" fg:x="21" fg:w="1"/><text x="1.1603%" y="415.50"></text></g><g><title>tftp::packet::try_from (1 samples, 0.04%)</title><rect x="0.9103%" y="389" width="0.0433%" height="15" fill="rgb(238,160,17)" fg:x="21" fg:w="1"/><text x="1.1603%" y="399.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.04%)</title><rect x="0.9103%" y="373" width="0.0433%" height="15" fill="rgb(214,148,48)" fg:x="21" fg:w="1"/><text x="1.1603%" y="383.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (1 samples, 0.04%)</title><rect x="0.9103%" y="357" width="0.0433%" height="15" fill="rgb(232,36,49)" fg:x="21" fg:w="1"/><text x="1.1603%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.04%)</title><rect x="0.9103%" y="341" width="0.0433%" height="15" fill="rgb(209,103,24)" fg:x="21" fg:w="1"/><text x="1.1603%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="0.9970%" y="389" width="0.0433%" height="15" fill="rgb(229,88,8)" fg:x="23" fg:w="1"/><text x="1.2470%" y="399.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (1 samples, 0.04%)</title><rect x="0.9970%" y="373" width="0.0433%" height="15" fill="rgb(213,181,19)" fg:x="23" fg:w="1"/><text x="1.2470%" y="383.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (1 samples, 0.04%)</title><rect x="0.9970%" y="357" width="0.0433%" height="15" fill="rgb(254,191,54)" fg:x="23" fg:w="1"/><text x="1.2470%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;polling::Event&gt;&gt; (2 samples, 0.09%)</title><rect x="0.9970%" y="405" width="0.0867%" height="15" fill="rgb(241,83,37)" fg:x="23" fg:w="2"/><text x="1.2470%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;polling::Event&gt;&gt; (1 samples, 0.04%)</title><rect x="1.0403%" y="389" width="0.0433%" height="15" fill="rgb(233,36,39)" fg:x="24" fg:w="1"/><text x="1.2903%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="1.0403%" y="373" width="0.0433%" height="15" fill="rgb(226,3,54)" fg:x="24" fg:w="1"/><text x="1.2903%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.04%)</title><rect x="1.0403%" y="357" width="0.0433%" height="15" fill="rgb(245,192,40)" fg:x="24" fg:w="1"/><text x="1.2903%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_unchecked (1 samples, 0.04%)</title><rect x="1.0403%" y="341" width="0.0433%" height="15" fill="rgb(238,167,29)" fg:x="24" fg:w="1"/><text x="1.2903%" y="351.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::le (2 samples, 0.09%)</title><rect x="1.0837%" y="373" width="0.0867%" height="15" fill="rgb(232,182,51)" fg:x="25" fg:w="2"/><text x="1.3337%" y="383.50"></text></g><g><title>log::max_level (1 samples, 0.04%)</title><rect x="1.1704%" y="373" width="0.0433%" height="15" fill="rgb(231,60,39)" fg:x="27" fg:w="1"/><text x="1.4204%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.04%)</title><rect x="1.1704%" y="357" width="0.0433%" height="15" fill="rgb(208,69,12)" fg:x="27" fg:w="1"/><text x="1.4204%" y="367.50"></text></g><g><title>polling::Poller::modify (5 samples, 0.22%)</title><rect x="1.0837%" y="405" width="0.2167%" height="15" fill="rgb(235,93,37)" fg:x="25" fg:w="5"/><text x="1.3337%" y="415.50"></text></g><g><title>polling::epoll::Poller::modify (5 samples, 0.22%)</title><rect x="1.0837%" y="389" width="0.2167%" height="15" fill="rgb(213,116,39)" fg:x="25" fg:w="5"/><text x="1.3337%" y="399.50"></text></g><g><title>polling::epoll::Poller::ctl (2 samples, 0.09%)</title><rect x="1.2137%" y="373" width="0.0867%" height="15" fill="rgb(222,207,29)" fg:x="28" fg:w="2"/><text x="1.4637%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.09%)</title><rect x="1.2137%" y="357" width="0.0867%" height="15" fill="rgb(206,96,30)" fg:x="28" fg:w="2"/><text x="1.4637%" y="367.50"></text></g><g><title>polling::epoll::Poller::ctl::{{closure}} (1 samples, 0.04%)</title><rect x="1.2570%" y="341" width="0.0433%" height="15" fill="rgb(218,138,4)" fg:x="29" fg:w="1"/><text x="1.5070%" y="351.50"></text></g><g><title>polling::epoll::read_flags (1 samples, 0.04%)</title><rect x="1.2570%" y="325" width="0.0433%" height="15" fill="rgb(250,191,14)" fg:x="29" fg:w="1"/><text x="1.5070%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="1.3004%" y="341" width="0.0433%" height="15" fill="rgb(239,60,40)" fg:x="30" fg:w="1"/><text x="1.5504%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (1 samples, 0.04%)</title><rect x="1.3004%" y="325" width="0.0433%" height="15" fill="rgb(206,27,48)" fg:x="30" fg:w="1"/><text x="1.5504%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.04%)</title><rect x="1.3004%" y="309" width="0.0433%" height="15" fill="rgb(225,35,8)" fg:x="30" fg:w="1"/><text x="1.5504%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.04%)</title><rect x="1.3004%" y="293" width="0.0433%" height="15" fill="rgb(250,213,24)" fg:x="30" fg:w="1"/><text x="1.5504%" y="303.50"></text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::FromResidual&gt;::from_residual (1 samples, 0.04%)</title><rect x="1.3004%" y="277" width="0.0433%" height="15" fill="rgb(247,123,22)" fg:x="30" fg:w="1"/><text x="1.5504%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2 samples, 0.09%)</title><rect x="1.3004%" y="389" width="0.0867%" height="15" fill="rgb(231,138,38)" fg:x="30" fg:w="2"/><text x="1.5504%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.09%)</title><rect x="1.3004%" y="373" width="0.0867%" height="15" fill="rgb(231,145,46)" fg:x="30" fg:w="2"/><text x="1.5504%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (2 samples, 0.09%)</title><rect x="1.3004%" y="357" width="0.0867%" height="15" fill="rgb(251,118,11)" fg:x="30" fg:w="2"/><text x="1.5504%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.04%)</title><rect x="1.3437%" y="341" width="0.0433%" height="15" fill="rgb(217,147,25)" fg:x="31" fg:w="1"/><text x="1.5937%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.04%)</title><rect x="1.3437%" y="325" width="0.0433%" height="15" fill="rgb(247,81,37)" fg:x="31" fg:w="1"/><text x="1.5937%" y="335.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (1 samples, 0.04%)</title><rect x="1.3437%" y="309" width="0.0433%" height="15" fill="rgb(209,12,38)" fg:x="31" fg:w="1"/><text x="1.5937%" y="319.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::le (1 samples, 0.04%)</title><rect x="1.3871%" y="389" width="0.0433%" height="15" fill="rgb(227,1,9)" fg:x="32" fg:w="1"/><text x="1.6371%" y="399.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.04%)</title><rect x="1.4304%" y="389" width="0.0433%" height="15" fill="rgb(248,47,43)" fg:x="33" fg:w="1"/><text x="1.6804%" y="399.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="1.6038%" y="373" width="0.0433%" height="15" fill="rgb(221,10,30)" fg:x="37" fg:w="1"/><text x="1.8538%" y="383.50"></text></g><g><title>core::time::Duration::from_secs (2 samples, 0.09%)</title><rect x="1.6472%" y="373" width="0.0867%" height="15" fill="rgb(210,229,1)" fg:x="38" fg:w="2"/><text x="1.8972%" y="383.50"></text></g><g><title>core::time::Duration::new (2 samples, 0.09%)</title><rect x="1.6472%" y="357" width="0.0867%" height="15" fill="rgb(222,148,37)" fg:x="38" fg:w="2"/><text x="1.8972%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::checked_add (1 samples, 0.04%)</title><rect x="1.6905%" y="341" width="0.0433%" height="15" fill="rgb(234,67,33)" fg:x="39" fg:w="1"/><text x="1.9405%" y="351.50"></text></g><g><title>epoll_wait (13 samples, 0.56%)</title><rect x="1.7339%" y="373" width="0.5635%" height="15" fill="rgb(247,98,35)" fg:x="40" fg:w="13"/><text x="1.9839%" y="383.50"></text></g><g><title>log::max_level (1 samples, 0.04%)</title><rect x="2.2974%" y="373" width="0.0433%" height="15" fill="rgb(247,138,52)" fg:x="53" fg:w="1"/><text x="2.5474%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.04%)</title><rect x="2.2974%" y="357" width="0.0433%" height="15" fill="rgb(213,79,30)" fg:x="53" fg:w="1"/><text x="2.5474%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.04%)</title><rect x="2.2974%" y="341" width="0.0433%" height="15" fill="rgb(246,177,23)" fg:x="53" fg:w="1"/><text x="2.5474%" y="351.50"></text></g><g><title>polling::epoll::Poller::modify (1 samples, 0.04%)</title><rect x="2.3407%" y="373" width="0.0433%" height="15" fill="rgb(230,62,27)" fg:x="54" fg:w="1"/><text x="2.5907%" y="383.50"></text></g><g><title>polling::epoll::Poller::ctl (1 samples, 0.04%)</title><rect x="2.3407%" y="357" width="0.0433%" height="15" fill="rgb(216,154,8)" fg:x="54" fg:w="1"/><text x="2.5907%" y="367.50"></text></g><g><title>read (1 samples, 0.04%)</title><rect x="2.3840%" y="373" width="0.0433%" height="15" fill="rgb(244,35,45)" fg:x="55" fg:w="1"/><text x="2.6340%" y="383.50"></text></g><g><title>polling::epoll::Poller::wait (25 samples, 1.08%)</title><rect x="1.4738%" y="389" width="1.0837%" height="15" fill="rgb(251,115,12)" fg:x="34" fg:w="25"/><text x="1.7238%" y="399.50"></text></g><g><title>std::io::error::Error::last_os_error (3 samples, 0.13%)</title><rect x="2.4274%" y="373" width="0.1300%" height="15" fill="rgb(240,54,50)" fg:x="56" fg:w="3"/><text x="2.6774%" y="383.50"></text></g><g><title>std::sys::unix::os::errno (2 samples, 0.09%)</title><rect x="2.4707%" y="357" width="0.0867%" height="15" fill="rgb(233,84,52)" fg:x="57" fg:w="2"/><text x="2.7207%" y="367.50"></text></g><g><title>polling::Poller::wait (30 samples, 1.30%)</title><rect x="1.3004%" y="405" width="1.3004%" height="15" fill="rgb(207,117,47)" fg:x="30" fg:w="30"/><text x="1.5504%" y="415.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (1 samples, 0.04%)</title><rect x="2.5574%" y="389" width="0.0433%" height="15" fill="rgb(249,43,39)" fg:x="59" fg:w="1"/><text x="2.8074%" y="399.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (1 samples, 0.04%)</title><rect x="2.5574%" y="373" width="0.0433%" height="15" fill="rgb(209,38,44)" fg:x="59" fg:w="1"/><text x="2.8074%" y="383.50"></text></g><g><title>std::sync::poison::Flag::guard (1 samples, 0.04%)</title><rect x="2.5574%" y="357" width="0.0433%" height="15" fill="rgb(236,212,23)" fg:x="59" fg:w="1"/><text x="2.8074%" y="367.50"></text></g><g><title>recvfrom (1 samples, 0.04%)</title><rect x="2.6875%" y="341" width="0.0433%" height="15" fill="rgb(242,79,21)" fg:x="62" fg:w="1"/><text x="2.9375%" y="351.50"></text></g><g><title>&lt;isize as std::sys::unix::IsMinusOne&gt;::is_minus_one (1 samples, 0.04%)</title><rect x="2.7308%" y="325" width="0.0433%" height="15" fill="rgb(211,96,35)" fg:x="63" fg:w="1"/><text x="2.9808%" y="335.50"></text></g><g><title>&lt;tftp::socket::StdSocket as tftp::socket::Socket&gt;::recv_from (43 samples, 1.86%)</title><rect x="0.9536%" y="421" width="1.8639%" height="15" fill="rgb(253,215,40)" fg:x="22" fg:w="43"/><text x="1.2036%" y="431.50">&lt;..</text></g><g><title>std::net::udp::UdpSocket::recv_from (5 samples, 0.22%)</title><rect x="2.6008%" y="405" width="0.2167%" height="15" fill="rgb(211,81,21)" fg:x="60" fg:w="5"/><text x="2.8508%" y="415.50"></text></g><g><title>std::sys_common::net::UdpSocket::recv_from (4 samples, 0.17%)</title><rect x="2.6441%" y="389" width="0.1734%" height="15" fill="rgb(208,190,38)" fg:x="61" fg:w="4"/><text x="2.8941%" y="399.50"></text></g><g><title>std::sys::unix::net::Socket::recv_from (4 samples, 0.17%)</title><rect x="2.6441%" y="373" width="0.1734%" height="15" fill="rgb(235,213,38)" fg:x="61" fg:w="4"/><text x="2.8941%" y="383.50"></text></g><g><title>std::sys::unix::net::Socket::recv_from_with_flags (3 samples, 0.13%)</title><rect x="2.6875%" y="357" width="0.1300%" height="15" fill="rgb(237,122,38)" fg:x="62" fg:w="3"/><text x="2.9375%" y="367.50"></text></g><g><title>std::sys::unix::cvt (2 samples, 0.09%)</title><rect x="2.7308%" y="341" width="0.0867%" height="15" fill="rgb(244,218,35)" fg:x="63" fg:w="2"/><text x="2.9808%" y="351.50"></text></g><g><title>std::io::error::Error::last_os_error (1 samples, 0.04%)</title><rect x="2.7742%" y="325" width="0.0433%" height="15" fill="rgb(240,68,47)" fg:x="64" fg:w="1"/><text x="3.0242%" y="335.50"></text></g><g><title>std::io::error::Error::from_raw_os_error (1 samples, 0.04%)</title><rect x="2.7742%" y="309" width="0.0433%" height="15" fill="rgb(210,16,53)" fg:x="64" fg:w="1"/><text x="3.0242%" y="319.50"></text></g><g><title>std::io::error::repr_bitpacked::Repr::new_os (1 samples, 0.04%)</title><rect x="2.7742%" y="293" width="0.0433%" height="15" fill="rgb(235,124,12)" fg:x="64" fg:w="1"/><text x="3.0242%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="2.8609%" y="357" width="0.0433%" height="15" fill="rgb(224,169,11)" fg:x="66" fg:w="1"/><text x="3.1109%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="2.8609%" y="341" width="0.0433%" height="15" fill="rgb(250,166,2)" fg:x="66" fg:w="1"/><text x="3.1109%" y="351.50"></text></g><g><title>&lt;std::net::socket_addr::SocketAddr as core::cmp::Ord&gt;::cmp (2 samples, 0.09%)</title><rect x="2.9042%" y="357" width="0.0867%" height="15" fill="rgb(242,216,29)" fg:x="67" fg:w="2"/><text x="3.1542%" y="367.50"></text></g><g><title>&lt;std::net::socket_addr::SocketAddrV4 as core::cmp::Ord&gt;::cmp (1 samples, 0.04%)</title><rect x="2.9476%" y="341" width="0.0433%" height="15" fill="rgb(230,116,27)" fg:x="68" fg:w="1"/><text x="3.1976%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u16&gt;::cmp (1 samples, 0.04%)</title><rect x="2.9476%" y="325" width="0.0433%" height="15" fill="rgb(228,99,48)" fg:x="68" fg:w="1"/><text x="3.1976%" y="335.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::into_leaf (1 samples, 0.04%)</title><rect x="2.9909%" y="341" width="0.0433%" height="15" fill="rgb(253,11,6)" fg:x="69" fg:w="1"/><text x="3.2409%" y="351.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (2 samples, 0.09%)</title><rect x="2.9909%" y="357" width="0.0867%" height="15" fill="rgb(247,143,39)" fg:x="69" fg:w="2"/><text x="3.2409%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.04%)</title><rect x="3.0342%" y="341" width="0.0433%" height="15" fill="rgb(236,97,10)" fg:x="70" fg:w="1"/><text x="3.2842%" y="351.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.04%)</title><rect x="3.0342%" y="325" width="0.0433%" height="15" fill="rgb(233,208,19)" fg:x="70" fg:w="1"/><text x="3.2842%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.04%)</title><rect x="3.0342%" y="309" width="0.0433%" height="15" fill="rgb(216,164,2)" fg:x="70" fg:w="1"/><text x="3.2842%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (7 samples, 0.30%)</title><rect x="2.8175%" y="421" width="0.3034%" height="15" fill="rgb(220,129,5)" fg:x="65" fg:w="7"/><text x="3.0675%" y="431.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (6 samples, 0.26%)</title><rect x="2.8609%" y="405" width="0.2601%" height="15" fill="rgb(242,17,10)" fg:x="66" fg:w="6"/><text x="3.1109%" y="415.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (6 samples, 0.26%)</title><rect x="2.8609%" y="389" width="0.2601%" height="15" fill="rgb(242,107,0)" fg:x="66" fg:w="6"/><text x="3.1109%" y="399.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (6 samples, 0.26%)</title><rect x="2.8609%" y="373" width="0.2601%" height="15" fill="rgb(251,28,31)" fg:x="66" fg:w="6"/><text x="3.1109%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.04%)</title><rect x="3.0776%" y="357" width="0.0433%" height="15" fill="rgb(233,223,10)" fg:x="71" fg:w="1"/><text x="3.3276%" y="367.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.04%)</title><rect x="3.0776%" y="341" width="0.0433%" height="15" fill="rgb(215,21,27)" fg:x="71" fg:w="1"/><text x="3.3276%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.04%)</title><rect x="3.0776%" y="325" width="0.0433%" height="15" fill="rgb(232,23,21)" fg:x="71" fg:w="1"/><text x="3.3276%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.04%)</title><rect x="3.0776%" y="309" width="0.0433%" height="15" fill="rgb(244,5,23)" fg:x="71" fg:w="1"/><text x="3.3276%" y="319.50"></text></g><g><title>&lt;alloc::vec::ExtendElement&lt;T&gt; as alloc::vec::ExtendWith&lt;T&gt;&gt;::next (1 samples, 0.04%)</title><rect x="3.2510%" y="389" width="0.0433%" height="15" fill="rgb(226,81,46)" fg:x="75" fg:w="1"/><text x="3.5010%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.04%)</title><rect x="3.2943%" y="389" width="0.0433%" height="15" fill="rgb(247,70,30)" fg:x="76" fg:w="1"/><text x="3.5443%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.04%)</title><rect x="3.2943%" y="373" width="0.0433%" height="15" fill="rgb(212,68,19)" fg:x="76" fg:w="1"/><text x="3.5443%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.04%)</title><rect x="3.2943%" y="357" width="0.0433%" height="15" fill="rgb(240,187,13)" fg:x="76" fg:w="1"/><text x="3.5443%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (6 samples, 0.26%)</title><rect x="3.1643%" y="405" width="0.2601%" height="15" fill="rgb(223,113,26)" fg:x="73" fg:w="6"/><text x="3.4143%" y="415.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.09%)</title><rect x="3.3377%" y="389" width="0.0867%" height="15" fill="rgb(206,192,2)" fg:x="77" fg:w="2"/><text x="3.5877%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.09%)</title><rect x="3.3377%" y="373" width="0.0867%" height="15" fill="rgb(241,108,4)" fg:x="77" fg:w="2"/><text x="3.5877%" y="383.50"></text></g><g><title>core::mem::replace (1 samples, 0.04%)</title><rect x="3.3810%" y="357" width="0.0433%" height="15" fill="rgb(247,173,49)" fg:x="78" fg:w="1"/><text x="3.6310%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (8 samples, 0.35%)</title><rect x="3.1209%" y="421" width="0.3468%" height="15" fill="rgb(224,114,35)" fg:x="72" fg:w="8"/><text x="3.3709%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (1 samples, 0.04%)</title><rect x="3.4244%" y="405" width="0.0433%" height="15" fill="rgb(245,159,27)" fg:x="79" fg:w="1"/><text x="3.6744%" y="415.50"></text></g><g><title>core::cmp::PartialOrd::gt (1 samples, 0.04%)</title><rect x="3.4677%" y="421" width="0.0433%" height="15" fill="rgb(245,172,44)" fg:x="80" fg:w="1"/><text x="3.7177%" y="431.50"></text></g><g><title>&lt;core::time::Duration as core::cmp::PartialOrd&gt;::partial_cmp (1 samples, 0.04%)</title><rect x="3.4677%" y="405" width="0.0433%" height="15" fill="rgb(236,23,11)" fg:x="80" fg:w="1"/><text x="3.7177%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u64&gt;::partial_cmp (1 samples, 0.04%)</title><rect x="3.4677%" y="389" width="0.0433%" height="15" fill="rgb(205,117,38)" fg:x="80" fg:w="1"/><text x="3.7177%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;(usize,std::net::socket_addr::SocketAddr),std::io::error::Error&gt;&gt; (1 samples, 0.04%)</title><rect x="3.5111%" y="421" width="0.0433%" height="15" fill="rgb(237,72,25)" fg:x="81" fg:w="1"/><text x="3.7611%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::Error&gt; (1 samples, 0.04%)</title><rect x="3.5111%" y="405" width="0.0433%" height="15" fill="rgb(244,70,9)" fg:x="81" fg:w="1"/><text x="3.7611%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::repr_bitpacked::Repr&gt; (1 samples, 0.04%)</title><rect x="3.5111%" y="389" width="0.0433%" height="15" fill="rgb(217,125,39)" fg:x="81" fg:w="1"/><text x="3.7611%" y="399.50"></text></g><g><title>&lt;std::io::error::repr_bitpacked::Repr as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="3.5111%" y="373" width="0.0433%" height="15" fill="rgb(235,36,10)" fg:x="81" fg:w="1"/><text x="3.7611%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::ErrorData&lt;alloc::boxed::Box&lt;std::io::error::Custom&gt;&gt;&gt; (1 samples, 0.04%)</title><rect x="3.5111%" y="357" width="0.0433%" height="15" fill="rgb(251,123,47)" fg:x="81" fg:w="1"/><text x="3.7611%" y="367.50"></text></g><g><title>core::time::Duration::from_millis (1 samples, 0.04%)</title><rect x="3.5544%" y="421" width="0.0433%" height="15" fill="rgb(221,13,13)" fg:x="82" fg:w="1"/><text x="3.8044%" y="431.50"></text></g><g><title>log::max_level (3 samples, 0.13%)</title><rect x="3.5977%" y="421" width="0.1300%" height="15" fill="rgb(238,131,9)" fg:x="83" fg:w="3"/><text x="3.8477%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.09%)</title><rect x="3.6411%" y="405" width="0.0867%" height="15" fill="rgb(211,50,8)" fg:x="84" fg:w="2"/><text x="3.8911%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.04%)</title><rect x="3.6844%" y="389" width="0.0433%" height="15" fill="rgb(245,182,24)" fg:x="85" fg:w="1"/><text x="3.9344%" y="399.50"></text></g><g><title>std::time::Instant::elapsed (1 samples, 0.04%)</title><rect x="3.7278%" y="421" width="0.0433%" height="15" fill="rgb(242,14,37)" fg:x="86" fg:w="1"/><text x="3.9778%" y="431.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.04%)</title><rect x="3.7278%" y="405" width="0.0433%" height="15" fill="rgb(246,228,12)" fg:x="86" fg:w="1"/><text x="3.9778%" y="415.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.04%)</title><rect x="3.7278%" y="389" width="0.0433%" height="15" fill="rgb(213,55,15)" fg:x="86" fg:w="1"/><text x="3.9778%" y="399.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.04%)</title><rect x="3.7278%" y="373" width="0.0433%" height="15" fill="rgb(209,9,3)" fg:x="86" fg:w="1"/><text x="3.9778%" y="383.50"></text></g><g><title>clock_gettime (1 samples, 0.04%)</title><rect x="3.7278%" y="357" width="0.0433%" height="15" fill="rgb(230,59,30)" fg:x="86" fg:w="1"/><text x="3.9778%" y="367.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.04%)</title><rect x="3.7278%" y="341" width="0.0433%" height="15" fill="rgb(209,121,21)" fg:x="86" fg:w="1"/><text x="3.9778%" y="351.50"></text></g><g><title>[[vdso]] (1 samples, 0.04%)</title><rect x="3.7278%" y="325" width="0.0433%" height="15" fill="rgb(220,109,13)" fg:x="86" fg:w="1"/><text x="3.9778%" y="335.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.09%)</title><rect x="3.7711%" y="405" width="0.0867%" height="15" fill="rgb(232,18,1)" fg:x="87" fg:w="2"/><text x="4.0211%" y="415.50"></text></g><g><title>clock_gettime (2 samples, 0.09%)</title><rect x="3.7711%" y="389" width="0.0867%" height="15" fill="rgb(215,41,42)" fg:x="87" fg:w="2"/><text x="4.0211%" y="399.50"></text></g><g><title>__vdso_clock_gettime (2 samples, 0.09%)</title><rect x="3.7711%" y="373" width="0.0867%" height="15" fill="rgb(224,123,36)" fg:x="87" fg:w="2"/><text x="4.0211%" y="383.50"></text></g><g><title>[[vdso]] (1 samples, 0.04%)</title><rect x="3.8145%" y="357" width="0.0433%" height="15" fill="rgb(240,125,3)" fg:x="88" fg:w="1"/><text x="4.0645%" y="367.50"></text></g><g><title>tftp::instant_callback (3 samples, 0.13%)</title><rect x="3.7711%" y="421" width="0.1300%" height="15" fill="rgb(205,98,50)" fg:x="87" fg:w="3"/><text x="4.0211%" y="431.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.04%)</title><rect x="3.8578%" y="405" width="0.0433%" height="15" fill="rgb(205,185,37)" fg:x="89" fg:w="1"/><text x="4.1078%" y="415.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.04%)</title><rect x="3.8578%" y="389" width="0.0433%" height="15" fill="rgb(238,207,15)" fg:x="89" fg:w="1"/><text x="4.1078%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;(core::result::Result&lt;tftp::packet::PacketType,tftp::error::PacketError&gt;,tftp::encryption::EncryptionLevel,&amp;core::option::Option&lt;tftp::encryption::Encryptor&gt;)&gt; (1 samples, 0.04%)</title><rect x="3.9012%" y="405" width="0.0433%" height="15" fill="rgb(213,199,42)" fg:x="90" fg:w="1"/><text x="4.1512%" y="415.50"></text></g><g><title>&lt;chacha20::xchacha::XChaChaCore&lt;R&gt; as crypto_common::KeyIvInit&gt;::new (2 samples, 0.09%)</title><rect x="3.9879%" y="341" width="0.0867%" height="15" fill="rgb(235,201,11)" fg:x="92" fg:w="2"/><text x="4.2379%" y="351.50"></text></g><g><title>chacha20::xchacha::hchacha (2 samples, 0.09%)</title><rect x="3.9879%" y="325" width="0.0867%" height="15" fill="rgb(207,46,11)" fg:x="92" fg:w="2"/><text x="4.2379%" y="335.50"></text></g><g><title>&lt;chacha20poly1305::ChaChaPoly1305&lt;C,N&gt; as aead::AeadInPlace&gt;::decrypt_in_place_detached (4 samples, 0.17%)</title><rect x="3.9445%" y="373" width="0.1734%" height="15" fill="rgb(241,35,35)" fg:x="91" fg:w="4"/><text x="4.1945%" y="383.50"></text></g><g><title>&lt;cipher::stream_wrapper::StreamCipherCoreWrapper&lt;T&gt; as crypto_common::KeyIvInit&gt;::new (4 samples, 0.17%)</title><rect x="3.9445%" y="357" width="0.1734%" height="15" fill="rgb(243,32,47)" fg:x="91" fg:w="4"/><text x="4.1945%" y="367.50"></text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default (1 samples, 0.04%)</title><rect x="4.0746%" y="341" width="0.0433%" height="15" fill="rgb(247,202,23)" fg:x="94" fg:w="1"/><text x="4.3246%" y="351.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (1 samples, 0.04%)</title><rect x="4.0746%" y="325" width="0.0433%" height="15" fill="rgb(219,102,11)" fg:x="94" fg:w="1"/><text x="4.3246%" y="335.50"></text></g><g><title>aead::Buffer::len (1 samples, 0.04%)</title><rect x="4.1179%" y="373" width="0.0433%" height="15" fill="rgb(243,110,44)" fg:x="95" fg:w="1"/><text x="4.3679%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::convert::AsRef&lt;[T]&gt;&gt;::as_ref (1 samples, 0.04%)</title><rect x="4.1179%" y="357" width="0.0433%" height="15" fill="rgb(222,74,54)" fg:x="95" fg:w="1"/><text x="4.3679%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut (1 samples, 0.04%)</title><rect x="4.1612%" y="373" width="0.0433%" height="15" fill="rgb(216,99,12)" fg:x="96" fg:w="1"/><text x="4.4112%" y="383.50"></text></g><g><title>tftp::encryption::Encryptor::decrypt (7 samples, 0.30%)</title><rect x="3.9445%" y="405" width="0.3034%" height="15" fill="rgb(226,22,26)" fg:x="91" fg:w="7"/><text x="4.1945%" y="415.50"></text></g><g><title>aead::AeadInPlace::decrypt_in_place (7 samples, 0.30%)</title><rect x="3.9445%" y="389" width="0.3034%" height="15" fill="rgb(217,163,10)" fg:x="91" fg:w="7"/><text x="4.1945%" y="399.50"></text></g><g><title>generic_array::GenericArray&lt;T,N&gt;::from_slice (1 samples, 0.04%)</title><rect x="4.2046%" y="373" width="0.0433%" height="15" fill="rgb(213,25,53)" fg:x="97" fg:w="1"/><text x="4.4546%" y="383.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.04%)</title><rect x="4.2046%" y="357" width="0.0433%" height="15" fill="rgb(252,105,26)" fg:x="97" fg:w="1"/><text x="4.4546%" y="367.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.04%)</title><rect x="4.2913%" y="373" width="0.0433%" height="15" fill="rgb(220,39,43)" fg:x="99" fg:w="1"/><text x="4.5413%" y="383.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (1 samples, 0.04%)</title><rect x="4.2913%" y="357" width="0.0433%" height="15" fill="rgb(229,68,48)" fg:x="99" fg:w="1"/><text x="4.5413%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.04%)</title><rect x="4.2913%" y="341" width="0.0433%" height="15" fill="rgb(252,8,32)" fg:x="99" fg:w="1"/><text x="4.5413%" y="351.50"></text></g><g><title>tftp::server::connection::Connection&lt;R,W,S&gt;::receive_packet (11 samples, 0.48%)</title><rect x="3.9012%" y="421" width="0.4768%" height="15" fill="rgb(223,20,43)" fg:x="90" fg:w="11"/><text x="4.1512%" y="431.50"></text></g><g><title>tftp::packet::PacketType::from_bytes (3 samples, 0.13%)</title><rect x="4.2479%" y="405" width="0.1300%" height="15" fill="rgb(229,81,49)" fg:x="98" fg:w="3"/><text x="4.4979%" y="415.50"></text></g><g><title>tftp::packet::try_from (2 samples, 0.09%)</title><rect x="4.2913%" y="389" width="0.0867%" height="15" fill="rgb(236,28,36)" fg:x="99" fg:w="2"/><text x="4.5413%" y="399.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.04%)</title><rect x="4.3346%" y="373" width="0.0433%" height="15" fill="rgb(249,185,26)" fg:x="100" fg:w="1"/><text x="4.5846%" y="383.50"></text></g><g><title>[libc.so.6] (2 samples, 0.09%)</title><rect x="4.4213%" y="373" width="0.0867%" height="15" fill="rgb(249,174,33)" fg:x="102" fg:w="2"/><text x="4.6713%" y="383.50"></text></g><g><title>tftp::server::server::send_data_blocks (4 samples, 0.17%)</title><rect x="4.3780%" y="421" width="0.1734%" height="15" fill="rgb(233,201,37)" fg:x="101" fg:w="4"/><text x="4.6280%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::retain (3 samples, 0.13%)</title><rect x="4.4213%" y="405" width="0.1300%" height="15" fill="rgb(221,78,26)" fg:x="102" fg:w="3"/><text x="4.6713%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::drain_filter (3 samples, 0.13%)</title><rect x="4.4213%" y="389" width="0.1300%" height="15" fill="rgb(250,127,30)" fg:x="102" fg:w="3"/><text x="4.6713%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::drain_filter_inner (1 samples, 0.04%)</title><rect x="4.5080%" y="373" width="0.0433%" height="15" fill="rgb(230,49,44)" fg:x="104" fg:w="1"/><text x="4.7580%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="4.5080%" y="357" width="0.0433%" height="15" fill="rgb(229,67,23)" fg:x="104" fg:w="1"/><text x="4.7580%" y="367.50"></text></g><g><title>tftp::main (96 samples, 4.16%)</title><rect x="0.4768%" y="453" width="4.1612%" height="15" fill="rgb(249,83,47)" fg:x="11" fg:w="96"/><text x="0.7268%" y="463.50">tftp:..</text></g><g><title>tftp::server::server::server (96 samples, 4.16%)</title><rect x="0.4768%" y="437" width="4.1612%" height="15" fill="rgb(215,43,3)" fg:x="11" fg:w="96"/><text x="0.7268%" y="447.50">tftp:..</text></g><g><title>tftp::server::server::write_block (2 samples, 0.09%)</title><rect x="4.5514%" y="421" width="0.0867%" height="15" fill="rgb(238,154,13)" fg:x="105" fg:w="2"/><text x="4.8014%" y="431.50"></text></g><g><title>log::max_level (1 samples, 0.04%)</title><rect x="4.5947%" y="405" width="0.0433%" height="15" fill="rgb(219,56,2)" fg:x="106" fg:w="1"/><text x="4.8447%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.04%)</title><rect x="4.5947%" y="389" width="0.0433%" height="15" fill="rgb(233,0,4)" fg:x="106" fg:w="1"/><text x="4.8447%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.04%)</title><rect x="4.5947%" y="373" width="0.0433%" height="15" fill="rgb(235,30,7)" fg:x="106" fg:w="1"/><text x="4.8447%" y="383.50"></text></g><g><title>&lt;tftp::packet::Packet as tftp::packet::ByteConverter&gt;::from_bytes (1 samples, 0.04%)</title><rect x="4.6381%" y="437" width="0.0433%" height="15" fill="rgb(250,79,13)" fg:x="107" fg:w="1"/><text x="4.8881%" y="447.50"></text></g><g><title>&lt;tftp::packet::DataPacket as tftp::packet::ByteConverter&gt;::from_bytes (1 samples, 0.04%)</title><rect x="4.6381%" y="421" width="0.0433%" height="15" fill="rgb(211,146,34)" fg:x="107" fg:w="1"/><text x="4.8881%" y="431.50"></text></g><g><title>tftp::packet::try_from (1 samples, 0.04%)</title><rect x="4.6381%" y="405" width="0.0433%" height="15" fill="rgb(228,22,38)" fg:x="107" fg:w="1"/><text x="4.8881%" y="415.50"></text></g><g><title>&lt;tftp::socket::StdSocket as tftp::socket::Socket&gt;::recv_from (1 samples, 0.04%)</title><rect x="4.6814%" y="437" width="0.0433%" height="15" fill="rgb(235,168,5)" fg:x="108" fg:w="1"/><text x="4.9314%" y="447.50"></text></g><g><title>polling::Poller::wait (1 samples, 0.04%)</title><rect x="4.6814%" y="421" width="0.0433%" height="15" fill="rgb(221,155,16)" fg:x="108" fg:w="1"/><text x="4.9314%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.04%)</title><rect x="4.6814%" y="405" width="0.0433%" height="15" fill="rgb(215,215,53)" fg:x="108" fg:w="1"/><text x="4.9314%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.04%)</title><rect x="4.6814%" y="389" width="0.0433%" height="15" fill="rgb(223,4,10)" fg:x="108" fg:w="1"/><text x="4.9314%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.04%)</title><rect x="4.6814%" y="373" width="0.0433%" height="15" fill="rgb(234,103,6)" fg:x="108" fg:w="1"/><text x="4.9314%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.04%)</title><rect x="4.6814%" y="357" width="0.0433%" height="15" fill="rgb(227,97,0)" fg:x="108" fg:w="1"/><text x="4.9314%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.04%)</title><rect x="4.6814%" y="341" width="0.0433%" height="15" fill="rgb(234,150,53)" fg:x="108" fg:w="1"/><text x="4.9314%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.04%)</title><rect x="4.6814%" y="325" width="0.0433%" height="15" fill="rgb(228,201,54)" fg:x="108" fg:w="1"/><text x="4.9314%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.04%)</title><rect x="4.6814%" y="309" width="0.0433%" height="15" fill="rgb(222,22,37)" fg:x="108" fg:w="1"/><text x="4.9314%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.04%)</title><rect x="4.6814%" y="293" width="0.0433%" height="15" fill="rgb(237,53,32)" fg:x="108" fg:w="1"/><text x="4.9314%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="4.6814%" y="277" width="0.0433%" height="15" fill="rgb(233,25,53)" fg:x="108" fg:w="1"/><text x="4.9314%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="4.6814%" y="261" width="0.0433%" height="15" fill="rgb(210,40,34)" fg:x="108" fg:w="1"/><text x="4.9314%" y="271.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (1 samples, 0.04%)</title><rect x="4.6814%" y="245" width="0.0433%" height="15" fill="rgb(241,220,44)" fg:x="108" fg:w="1"/><text x="4.9314%" y="255.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for &amp;[T: N]&gt;::try_from (1 samples, 0.04%)</title><rect x="4.8114%" y="293" width="0.0433%" height="15" fill="rgb(235,28,35)" fg:x="111" fg:w="1"/><text x="5.0614%" y="303.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (3 samples, 0.13%)</title><rect x="4.8114%" y="325" width="0.1300%" height="15" fill="rgb(210,56,17)" fg:x="111" fg:w="3"/><text x="5.0614%" y="335.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (3 samples, 0.13%)</title><rect x="4.8114%" y="309" width="0.1300%" height="15" fill="rgb(224,130,29)" fg:x="111" fg:w="3"/><text x="5.0614%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (2 samples, 0.09%)</title><rect x="4.8548%" y="293" width="0.0867%" height="15" fill="rgb(235,212,8)" fg:x="112" fg:w="2"/><text x="5.1048%" y="303.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (1 samples, 0.04%)</title><rect x="4.8981%" y="277" width="0.0433%" height="15" fill="rgb(223,33,50)" fg:x="113" fg:w="1"/><text x="5.1481%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="4.9415%" y="325" width="0.0433%" height="15" fill="rgb(219,149,13)" fg:x="114" fg:w="1"/><text x="5.1915%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (1 samples, 0.04%)</title><rect x="4.9415%" y="309" width="0.0433%" height="15" fill="rgb(250,156,29)" fg:x="114" fg:w="1"/><text x="5.1915%" y="319.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (1 samples, 0.04%)</title><rect x="4.9415%" y="293" width="0.0433%" height="15" fill="rgb(216,193,19)" fg:x="114" fg:w="1"/><text x="5.1915%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.04%)</title><rect x="4.9415%" y="277" width="0.0433%" height="15" fill="rgb(216,135,14)" fg:x="114" fg:w="1"/><text x="5.1915%" y="287.50"></text></g><g><title>&lt;chacha20::ChaChaCore&lt;R&gt; as crypto_common::KeyIvInit&gt;::new (7 samples, 0.30%)</title><rect x="4.7248%" y="341" width="0.3034%" height="15" fill="rgb(241,47,5)" fg:x="109" fg:w="7"/><text x="4.9748%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.04%)</title><rect x="4.9848%" y="325" width="0.0433%" height="15" fill="rgb(233,42,35)" fg:x="115" fg:w="1"/><text x="5.2348%" y="335.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (2 samples, 0.09%)</title><rect x="5.2883%" y="325" width="0.0867%" height="15" fill="rgb(231,13,6)" fg:x="122" fg:w="2"/><text x="5.5383%" y="335.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (2 samples, 0.09%)</title><rect x="5.2883%" y="309" width="0.0867%" height="15" fill="rgb(207,181,40)" fg:x="122" fg:w="2"/><text x="5.5383%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (2 samples, 0.09%)</title><rect x="5.2883%" y="293" width="0.0867%" height="15" fill="rgb(254,173,49)" fg:x="122" fg:w="2"/><text x="5.5383%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="5.3749%" y="325" width="0.0433%" height="15" fill="rgb(221,1,38)" fg:x="124" fg:w="1"/><text x="5.6249%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (1 samples, 0.04%)</title><rect x="5.3749%" y="309" width="0.0433%" height="15" fill="rgb(206,124,46)" fg:x="124" fg:w="1"/><text x="5.6249%" y="319.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.04%)</title><rect x="5.4183%" y="325" width="0.0433%" height="15" fill="rgb(249,21,11)" fg:x="125" fg:w="1"/><text x="5.6683%" y="335.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.04%)</title><rect x="5.4183%" y="309" width="0.0433%" height="15" fill="rgb(222,201,40)" fg:x="125" fg:w="1"/><text x="5.6683%" y="319.50"></text></g><g><title>chacha20::xchacha::quarter_round (32 samples, 1.39%)</title><rect x="5.4616%" y="325" width="1.3871%" height="15" fill="rgb(235,61,29)" fg:x="126" fg:w="32"/><text x="5.7116%" y="335.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (1 samples, 0.04%)</title><rect x="6.8054%" y="309" width="0.0433%" height="15" fill="rgb(219,207,3)" fg:x="157" fg:w="1"/><text x="7.0554%" y="319.50"></text></g><g><title>core::array::&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (4 samples, 0.17%)</title><rect x="6.8487%" y="325" width="0.1734%" height="15" fill="rgb(222,56,46)" fg:x="158" fg:w="4"/><text x="7.0987%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.13%)</title><rect x="6.8921%" y="309" width="0.1300%" height="15" fill="rgb(239,76,54)" fg:x="159" fg:w="3"/><text x="7.1421%" y="319.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.09%)</title><rect x="6.9354%" y="293" width="0.0867%" height="15" fill="rgb(231,124,27)" fg:x="160" fg:w="2"/><text x="7.1854%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.04%)</title><rect x="6.9788%" y="277" width="0.0433%" height="15" fill="rgb(249,195,6)" fg:x="161" fg:w="1"/><text x="7.2288%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.04%)</title><rect x="6.9788%" y="261" width="0.0433%" height="15" fill="rgb(237,174,47)" fg:x="161" fg:w="1"/><text x="7.2288%" y="271.50"></text></g><g><title>core::ptr::slice_from_raw_parts (1 samples, 0.04%)</title><rect x="6.9788%" y="245" width="0.0433%" height="15" fill="rgb(206,201,31)" fg:x="161" fg:w="1"/><text x="7.2288%" y="255.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (1 samples, 0.04%)</title><rect x="6.9788%" y="229" width="0.0433%" height="15" fill="rgb(231,57,52)" fg:x="161" fg:w="1"/><text x="7.2288%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="7.0221%" y="293" width="0.0433%" height="15" fill="rgb(248,177,22)" fg:x="162" fg:w="1"/><text x="7.2721%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.04%)</title><rect x="7.0221%" y="277" width="0.0433%" height="15" fill="rgb(215,211,37)" fg:x="162" fg:w="1"/><text x="7.2721%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.04%)</title><rect x="7.0221%" y="261" width="0.0433%" height="15" fill="rgb(241,128,51)" fg:x="162" fg:w="1"/><text x="7.2721%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.04%)</title><rect x="7.0221%" y="245" width="0.0433%" height="15" fill="rgb(227,165,31)" fg:x="162" fg:w="1"/><text x="7.2721%" y="255.50"></text></g><g><title>core::array::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T: N]&gt;::index_mut (2 samples, 0.09%)</title><rect x="7.0221%" y="325" width="0.0867%" height="15" fill="rgb(228,167,24)" fg:x="162" fg:w="2"/><text x="7.2721%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.09%)</title><rect x="7.0221%" y="309" width="0.0867%" height="15" fill="rgb(228,143,12)" fg:x="162" fg:w="2"/><text x="7.2721%" y="319.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="7.0655%" y="293" width="0.0433%" height="15" fill="rgb(249,149,8)" fg:x="163" fg:w="1"/><text x="7.3155%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="7.0655%" y="277" width="0.0433%" height="15" fill="rgb(243,35,44)" fg:x="163" fg:w="1"/><text x="7.3155%" y="287.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.04%)</title><rect x="7.1088%" y="325" width="0.0433%" height="15" fill="rgb(246,89,9)" fg:x="164" fg:w="1"/><text x="7.3588%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.04%)</title><rect x="7.1088%" y="309" width="0.0433%" height="15" fill="rgb(233,213,13)" fg:x="164" fg:w="1"/><text x="7.3588%" y="319.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1 samples, 0.04%)</title><rect x="7.1088%" y="293" width="0.0433%" height="15" fill="rgb(233,141,41)" fg:x="164" fg:w="1"/><text x="7.3588%" y="303.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="7.1955%" y="277" width="0.0433%" height="15" fill="rgb(239,167,4)" fg:x="166" fg:w="1"/><text x="7.4455%" y="287.50"></text></g><g><title>core::cmp::min (1 samples, 0.04%)</title><rect x="7.2388%" y="277" width="0.0433%" height="15" fill="rgb(209,217,16)" fg:x="167" fg:w="1"/><text x="7.4888%" y="287.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.04%)</title><rect x="7.2388%" y="261" width="0.0433%" height="15" fill="rgb(219,88,35)" fg:x="167" fg:w="1"/><text x="7.4888%" y="271.50"></text></g><g><title>core::cmp::min_by (1 samples, 0.04%)</title><rect x="7.2388%" y="245" width="0.0433%" height="15" fill="rgb(220,193,23)" fg:x="167" fg:w="1"/><text x="7.4888%" y="255.50"></text></g><g><title>core::iter::adapters::zip::TrustedRandomAccessNoCoerce::size (2 samples, 0.09%)</title><rect x="7.2822%" y="277" width="0.0867%" height="15" fill="rgb(230,90,52)" fg:x="168" fg:w="2"/><text x="7.5322%" y="287.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.04%)</title><rect x="7.3255%" y="261" width="0.0433%" height="15" fill="rgb(252,106,19)" fg:x="169" fg:w="1"/><text x="7.5755%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (6 samples, 0.26%)</title><rect x="7.1521%" y="293" width="0.2601%" height="15" fill="rgb(206,74,20)" fg:x="165" fg:w="6"/><text x="7.4021%" y="303.50"></text></g><g><title>memcpy (1 samples, 0.04%)</title><rect x="7.3689%" y="277" width="0.0433%" height="15" fill="rgb(230,138,44)" fg:x="170" fg:w="1"/><text x="7.6189%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (7 samples, 0.30%)</title><rect x="7.1521%" y="325" width="0.3034%" height="15" fill="rgb(235,182,43)" fg:x="165" fg:w="7"/><text x="7.4021%" y="335.50"></text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (7 samples, 0.30%)</title><rect x="7.1521%" y="309" width="0.3034%" height="15" fill="rgb(242,16,51)" fg:x="165" fg:w="7"/><text x="7.4021%" y="319.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="7.4122%" y="293" width="0.0433%" height="15" fill="rgb(248,9,4)" fg:x="171" fg:w="1"/><text x="7.6622%" y="303.50"></text></g><g><title>core::num::&lt;impl u32&gt;::to_le_bytes (1 samples, 0.04%)</title><rect x="7.4556%" y="325" width="0.0433%" height="15" fill="rgb(210,31,22)" fg:x="172" fg:w="1"/><text x="7.7056%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::chunks_exact (1 samples, 0.04%)</title><rect x="7.4989%" y="325" width="0.0433%" height="15" fill="rgb(239,54,39)" fg:x="173" fg:w="1"/><text x="7.7489%" y="335.50"></text></g><g><title>core::slice::iter::ChunksExact&lt;T&gt;::new (1 samples, 0.04%)</title><rect x="7.4989%" y="309" width="0.0433%" height="15" fill="rgb(230,99,41)" fg:x="173" fg:w="1"/><text x="7.7489%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.04%)</title><rect x="7.4989%" y="293" width="0.0433%" height="15" fill="rgb(253,106,12)" fg:x="173" fg:w="1"/><text x="7.7489%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::chunks_exact_mut (2 samples, 0.09%)</title><rect x="7.5423%" y="325" width="0.0867%" height="15" fill="rgb(213,46,41)" fg:x="174" fg:w="2"/><text x="7.7923%" y="335.50"></text></g><g><title>core::slice::iter::ChunksExactMut&lt;T&gt;::new (1 samples, 0.04%)</title><rect x="7.5856%" y="309" width="0.0433%" height="15" fill="rgb(215,133,35)" fg:x="175" fg:w="1"/><text x="7.8356%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.09%)</title><rect x="7.6290%" y="325" width="0.0867%" height="15" fill="rgb(213,28,5)" fg:x="176" fg:w="2"/><text x="7.8790%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="7.6723%" y="309" width="0.0433%" height="15" fill="rgb(215,77,49)" fg:x="177" fg:w="1"/><text x="7.9223%" y="319.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="7.6723%" y="293" width="0.0433%" height="15" fill="rgb(248,100,22)" fg:x="177" fg:w="1"/><text x="7.9223%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::enumerate (1 samples, 0.04%)</title><rect x="7.7156%" y="293" width="0.0433%" height="15" fill="rgb(208,67,9)" fg:x="178" fg:w="1"/><text x="7.9656%" y="303.50"></text></g><g><title>core::iter::adapters::enumerate::Enumerate&lt;I&gt;::new (1 samples, 0.04%)</title><rect x="7.7156%" y="277" width="0.0433%" height="15" fill="rgb(219,133,21)" fg:x="178" fg:w="1"/><text x="7.9656%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (7 samples, 0.30%)</title><rect x="7.8890%" y="245" width="0.3034%" height="15" fill="rgb(246,46,29)" fg:x="182" fg:w="7"/><text x="8.1390%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (3 samples, 0.13%)</title><rect x="8.0624%" y="229" width="0.1300%" height="15" fill="rgb(246,185,52)" fg:x="186" fg:w="3"/><text x="8.3124%" y="239.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate::{{closure}} (3 samples, 0.13%)</title><rect x="8.0624%" y="213" width="0.1300%" height="15" fill="rgb(252,136,11)" fg:x="186" fg:w="3"/><text x="8.3124%" y="223.50"></text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default::{{closure}} (1 samples, 0.04%)</title><rect x="8.1491%" y="197" width="0.0433%" height="15" fill="rgb(219,138,53)" fg:x="188" fg:w="1"/><text x="8.3991%" y="207.50"></text></g><g><title>chacha20::xchacha::hchacha (77 samples, 3.34%)</title><rect x="5.0282%" y="341" width="3.3377%" height="15" fill="rgb(211,51,23)" fg:x="116" fg:w="77"/><text x="5.2782%" y="351.50">cha..</text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default (15 samples, 0.65%)</title><rect x="7.7156%" y="325" width="0.6502%" height="15" fill="rgb(247,221,28)" fg:x="178" fg:w="15"/><text x="7.9656%" y="335.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (15 samples, 0.65%)</title><rect x="7.7156%" y="309" width="0.6502%" height="15" fill="rgb(251,222,45)" fg:x="178" fg:w="15"/><text x="7.9656%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (14 samples, 0.61%)</title><rect x="7.7590%" y="293" width="0.6068%" height="15" fill="rgb(217,162,53)" fg:x="179" fg:w="14"/><text x="8.0090%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 0.56%)</title><rect x="7.8023%" y="277" width="0.5635%" height="15" fill="rgb(229,93,14)" fg:x="180" fg:w="13"/><text x="8.0523%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (13 samples, 0.56%)</title><rect x="7.8023%" y="261" width="0.5635%" height="15" fill="rgb(209,67,49)" fg:x="180" fg:w="13"/><text x="8.0523%" y="271.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.17%)</title><rect x="8.1925%" y="245" width="0.1734%" height="15" fill="rgb(213,87,29)" fg:x="189" fg:w="4"/><text x="8.4425%" y="255.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (2 samples, 0.09%)</title><rect x="8.2792%" y="229" width="0.0867%" height="15" fill="rgb(205,151,52)" fg:x="191" fg:w="2"/><text x="8.5292%" y="239.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.04%)</title><rect x="8.3658%" y="325" width="0.0433%" height="15" fill="rgb(253,215,39)" fg:x="193" fg:w="1"/><text x="8.6158%" y="335.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.04%)</title><rect x="8.3658%" y="309" width="0.0433%" height="15" fill="rgb(221,220,41)" fg:x="193" fg:w="1"/><text x="8.6158%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.04%)</title><rect x="8.3658%" y="293" width="0.0433%" height="15" fill="rgb(218,133,21)" fg:x="193" fg:w="1"/><text x="8.6158%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.09%)</title><rect x="8.3658%" y="341" width="0.0867%" height="15" fill="rgb(221,193,43)" fg:x="193" fg:w="2"/><text x="8.6158%" y="351.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.04%)</title><rect x="8.4092%" y="325" width="0.0433%" height="15" fill="rgb(240,128,52)" fg:x="194" fg:w="1"/><text x="8.6592%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.04%)</title><rect x="8.4092%" y="309" width="0.0433%" height="15" fill="rgb(253,114,12)" fg:x="194" fg:w="1"/><text x="8.6592%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6 samples, 0.26%)</title><rect x="8.4959%" y="309" width="0.2601%" height="15" fill="rgb(215,223,47)" fg:x="196" fg:w="6"/><text x="8.7459%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.26%)</title><rect x="8.4959%" y="293" width="0.2601%" height="15" fill="rgb(248,225,23)" fg:x="196" fg:w="6"/><text x="8.7459%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (6 samples, 0.26%)</title><rect x="8.4959%" y="277" width="0.2601%" height="15" fill="rgb(250,108,0)" fg:x="196" fg:w="6"/><text x="8.7459%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (5 samples, 0.22%)</title><rect x="8.5392%" y="261" width="0.2167%" height="15" fill="rgb(228,208,7)" fg:x="197" fg:w="5"/><text x="8.7892%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (4 samples, 0.17%)</title><rect x="8.5826%" y="245" width="0.1734%" height="15" fill="rgb(244,45,10)" fg:x="198" fg:w="4"/><text x="8.8326%" y="255.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate::{{closure}} (4 samples, 0.17%)</title><rect x="8.5826%" y="229" width="0.1734%" height="15" fill="rgb(207,125,25)" fg:x="198" fg:w="4"/><text x="8.8326%" y="239.50"></text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default::{{closure}} (1 samples, 0.04%)</title><rect x="8.7126%" y="213" width="0.0433%" height="15" fill="rgb(210,195,18)" fg:x="201" fg:w="1"/><text x="8.9626%" y="223.50"></text></g><g><title>&lt;u8 as core::default::Default&gt;::default (1 samples, 0.04%)</title><rect x="8.7126%" y="197" width="0.0433%" height="15" fill="rgb(249,80,12)" fg:x="201" fg:w="1"/><text x="8.9626%" y="207.50"></text></g><g><title>&lt;chacha20::xchacha::XChaChaCore&lt;R&gt; as crypto_common::KeyIvInit&gt;::new (94 samples, 4.07%)</title><rect x="4.7248%" y="357" width="4.0746%" height="15" fill="rgb(221,65,9)" fg:x="109" fg:w="94"/><text x="4.9748%" y="367.50">&lt;cha..</text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default (8 samples, 0.35%)</title><rect x="8.4525%" y="341" width="0.3468%" height="15" fill="rgb(235,49,36)" fg:x="195" fg:w="8"/><text x="8.7025%" y="351.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (8 samples, 0.35%)</title><rect x="8.4525%" y="325" width="0.3468%" height="15" fill="rgb(225,32,20)" fg:x="195" fg:w="8"/><text x="8.7025%" y="335.50"></text></g><g><title>generic_array::ArrayBuilder&lt;T,N&gt;::into_inner (1 samples, 0.04%)</title><rect x="8.7560%" y="309" width="0.0433%" height="15" fill="rgb(215,141,46)" fg:x="202" fg:w="1"/><text x="9.0060%" y="319.50"></text></g><g><title>core::ptr::read (1 samples, 0.04%)</title><rect x="8.7560%" y="293" width="0.0433%" height="15" fill="rgb(250,160,47)" fg:x="202" fg:w="1"/><text x="9.0060%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (13 samples, 0.56%)</title><rect x="9.1027%" y="277" width="0.5635%" height="15" fill="rgb(216,222,40)" fg:x="210" fg:w="13"/><text x="9.3527%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (8 samples, 0.35%)</title><rect x="9.3195%" y="261" width="0.3468%" height="15" fill="rgb(234,217,39)" fg:x="215" fg:w="8"/><text x="9.5695%" y="271.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate::{{closure}} (7 samples, 0.30%)</title><rect x="9.3628%" y="245" width="0.3034%" height="15" fill="rgb(207,178,40)" fg:x="216" fg:w="7"/><text x="9.6128%" y="255.50"></text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default::{{closure}} (2 samples, 0.09%)</title><rect x="9.5795%" y="229" width="0.0867%" height="15" fill="rgb(221,136,13)" fg:x="221" fg:w="2"/><text x="9.8295%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.04%)</title><rect x="9.7529%" y="261" width="0.0433%" height="15" fill="rgb(249,199,10)" fg:x="225" fg:w="1"/><text x="10.0029%" y="271.50"></text></g><g><title>&lt;cipher::stream_wrapper::StreamCipherCoreWrapper&lt;T&gt; as crypto_common::KeyIvInit&gt;::new (119 samples, 5.16%)</title><rect x="4.7248%" y="373" width="5.1582%" height="15" fill="rgb(249,222,13)" fg:x="109" fg:w="119"/><text x="4.9748%" y="383.50">&lt;ciphe..</text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default (25 samples, 1.08%)</title><rect x="8.7993%" y="357" width="1.0837%" height="15" fill="rgb(244,185,38)" fg:x="203" fg:w="25"/><text x="9.0493%" y="367.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (25 samples, 1.08%)</title><rect x="8.7993%" y="341" width="1.0837%" height="15" fill="rgb(236,202,9)" fg:x="203" fg:w="25"/><text x="9.0493%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (25 samples, 1.08%)</title><rect x="8.7993%" y="325" width="1.0837%" height="15" fill="rgb(250,229,37)" fg:x="203" fg:w="25"/><text x="9.0493%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (25 samples, 1.08%)</title><rect x="8.7993%" y="309" width="1.0837%" height="15" fill="rgb(206,174,23)" fg:x="203" fg:w="25"/><text x="9.0493%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (25 samples, 1.08%)</title><rect x="8.7993%" y="293" width="1.0837%" height="15" fill="rgb(211,33,43)" fg:x="203" fg:w="25"/><text x="9.0493%" y="303.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.22%)</title><rect x="9.6662%" y="277" width="0.2167%" height="15" fill="rgb(245,58,50)" fg:x="223" fg:w="5"/><text x="9.9162%" y="287.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (2 samples, 0.09%)</title><rect x="9.7963%" y="261" width="0.0867%" height="15" fill="rgb(244,68,36)" fg:x="226" fg:w="2"/><text x="10.0463%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.04%)</title><rect x="9.8396%" y="245" width="0.0433%" height="15" fill="rgb(232,229,15)" fg:x="227" fg:w="1"/><text x="10.0896%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.04%)</title><rect x="9.8396%" y="229" width="0.0433%" height="15" fill="rgb(254,30,23)" fg:x="227" fg:w="1"/><text x="10.0896%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::to_le_bytes (1 samples, 0.04%)</title><rect x="9.8830%" y="341" width="0.0433%" height="15" fill="rgb(235,160,14)" fg:x="228" fg:w="1"/><text x="10.1330%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::to_le (1 samples, 0.04%)</title><rect x="9.8830%" y="325" width="0.0433%" height="15" fill="rgb(212,155,44)" fg:x="228" fg:w="1"/><text x="10.1330%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.09%)</title><rect x="9.9263%" y="341" width="0.0867%" height="15" fill="rgb(226,2,50)" fg:x="229" fg:w="2"/><text x="10.1763%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.04%)</title><rect x="10.0130%" y="341" width="0.0433%" height="15" fill="rgb(234,177,6)" fg:x="231" fg:w="1"/><text x="10.2630%" y="351.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="10.0130%" y="325" width="0.0433%" height="15" fill="rgb(217,24,9)" fg:x="231" fg:w="1"/><text x="10.2630%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="10.0130%" y="309" width="0.0433%" height="15" fill="rgb(220,13,46)" fg:x="231" fg:w="1"/><text x="10.2630%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.04%)</title><rect x="10.0130%" y="293" width="0.0433%" height="15" fill="rgb(239,221,27)" fg:x="231" fg:w="1"/><text x="10.2630%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.04%)</title><rect x="10.0130%" y="277" width="0.0433%" height="15" fill="rgb(222,198,25)" fg:x="231" fg:w="1"/><text x="10.2630%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (2 samples, 0.09%)</title><rect x="10.0564%" y="261" width="0.0867%" height="15" fill="rgb(211,99,13)" fg:x="232" fg:w="2"/><text x="10.3064%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (2 samples, 0.09%)</title><rect x="10.0564%" y="245" width="0.0867%" height="15" fill="rgb(232,111,31)" fg:x="232" fg:w="2"/><text x="10.3064%" y="255.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate::{{closure}} (1 samples, 0.04%)</title><rect x="10.0997%" y="229" width="0.0433%" height="15" fill="rgb(245,82,37)" fg:x="233" fg:w="1"/><text x="10.3497%" y="239.50"></text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default (3 samples, 0.13%)</title><rect x="10.0564%" y="341" width="0.1300%" height="15" fill="rgb(227,149,46)" fg:x="232" fg:w="3"/><text x="10.3064%" y="351.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (3 samples, 0.13%)</title><rect x="10.0564%" y="325" width="0.1300%" height="15" fill="rgb(218,36,50)" fg:x="232" fg:w="3"/><text x="10.3064%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.13%)</title><rect x="10.0564%" y="309" width="0.1300%" height="15" fill="rgb(226,80,48)" fg:x="232" fg:w="3"/><text x="10.3064%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.13%)</title><rect x="10.0564%" y="293" width="0.1300%" height="15" fill="rgb(238,224,15)" fg:x="232" fg:w="3"/><text x="10.3064%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (3 samples, 0.13%)</title><rect x="10.0564%" y="277" width="0.1300%" height="15" fill="rgb(241,136,10)" fg:x="232" fg:w="3"/><text x="10.3064%" y="287.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="10.1430%" y="261" width="0.0433%" height="15" fill="rgb(208,32,45)" fg:x="234" fg:w="1"/><text x="10.3930%" y="271.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (1 samples, 0.04%)</title><rect x="10.1430%" y="245" width="0.0433%" height="15" fill="rgb(207,135,9)" fg:x="234" fg:w="1"/><text x="10.3930%" y="255.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.04%)</title><rect x="10.2297%" y="245" width="0.0433%" height="15" fill="rgb(206,86,44)" fg:x="236" fg:w="1"/><text x="10.4797%" y="255.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (1 samples, 0.04%)</title><rect x="10.2297%" y="229" width="0.0433%" height="15" fill="rgb(245,177,15)" fg:x="236" fg:w="1"/><text x="10.4797%" y="239.50"></text></g><g><title>chacha20poly1305::cipher::Cipher&lt;C&gt;::authenticate_lengths (10 samples, 0.43%)</title><rect x="9.8830%" y="357" width="0.4335%" height="15" fill="rgb(206,64,50)" fg:x="228" fg:w="10"/><text x="10.1330%" y="367.50"></text></g><g><title>universal_hash::UniversalHash::update (3 samples, 0.13%)</title><rect x="10.1864%" y="341" width="0.1300%" height="15" fill="rgb(234,36,40)" fg:x="235" fg:w="3"/><text x="10.4364%" y="351.50"></text></g><g><title>&lt;poly1305::Poly1305 as universal_hash::UniversalHash&gt;::update_with_backend (3 samples, 0.13%)</title><rect x="10.1864%" y="325" width="0.1300%" height="15" fill="rgb(213,64,8)" fg:x="235" fg:w="3"/><text x="10.4364%" y="335.50"></text></g><g><title>&lt;poly1305::backend::autodetect::State as universal_hash::UniversalHash&gt;::update_with_backend (3 samples, 0.13%)</title><rect x="10.1864%" y="309" width="0.1300%" height="15" fill="rgb(210,75,36)" fg:x="235" fg:w="3"/><text x="10.4364%" y="319.50"></text></g><g><title>&lt;universal_hash::UniversalHash::update::Ctx&lt;BS&gt; as universal_hash::UhfClosure&gt;::call (3 samples, 0.13%)</title><rect x="10.1864%" y="293" width="0.1300%" height="15" fill="rgb(229,88,21)" fg:x="235" fg:w="3"/><text x="10.4364%" y="303.50"></text></g><g><title>&lt;poly1305::backend::soft::State as universal_hash::UhfBackend&gt;::proc_block (3 samples, 0.13%)</title><rect x="10.1864%" y="277" width="0.1300%" height="15" fill="rgb(252,204,47)" fg:x="235" fg:w="3"/><text x="10.4364%" y="287.50"></text></g><g><title>poly1305::backend::soft::State::compute_block (3 samples, 0.13%)</title><rect x="10.1864%" y="261" width="0.1300%" height="15" fill="rgb(208,77,27)" fg:x="235" fg:w="3"/><text x="10.4364%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.04%)</title><rect x="10.2731%" y="245" width="0.0433%" height="15" fill="rgb(221,76,26)" fg:x="237" fg:w="1"/><text x="10.5231%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.04%)</title><rect x="10.2731%" y="229" width="0.0433%" height="15" fill="rgb(225,139,18)" fg:x="237" fg:w="1"/><text x="10.5231%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.04%)</title><rect x="10.2731%" y="213" width="0.0433%" height="15" fill="rgb(230,137,11)" fg:x="237" fg:w="1"/><text x="10.5231%" y="223.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.04%)</title><rect x="10.5765%" y="213" width="0.0433%" height="15" fill="rgb(212,28,1)" fg:x="244" fg:w="1"/><text x="10.8265%" y="223.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (3 samples, 0.13%)</title><rect x="11.0967%" y="197" width="0.1300%" height="15" fill="rgb(248,164,17)" fg:x="256" fg:w="3"/><text x="11.3467%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_add_epi32 (77 samples, 3.34%)</title><rect x="19.2024%" y="165" width="3.3377%" height="15" fill="rgb(222,171,42)" fg:x="443" fg:w="77"/><text x="19.4524%" y="175.50">cor..</text></g><g><title>core::core_arch::x86::m128iExt::as_i32x4 (14 samples, 0.61%)</title><rect x="21.9332%" y="149" width="0.6068%" height="15" fill="rgb(243,84,45)" fg:x="506" fg:w="14"/><text x="22.1832%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_slli_epi32 (75 samples, 3.25%)</title><rect x="22.5401%" y="165" width="3.2510%" height="15" fill="rgb(252,49,23)" fg:x="520" fg:w="75"/><text x="22.7901%" y="175.50">cor..</text></g><g><title>core::core_arch::x86::m128iExt::as_i32x4 (20 samples, 0.87%)</title><rect x="24.9241%" y="149" width="0.8669%" height="15" fill="rgb(215,19,7)" fg:x="575" fg:w="20"/><text x="25.1741%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_srli_epi32 (12 samples, 0.52%)</title><rect x="25.7911%" y="165" width="0.5202%" height="15" fill="rgb(238,81,41)" fg:x="595" fg:w="12"/><text x="26.0411%" y="175.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i32x4 (3 samples, 0.13%)</title><rect x="26.1812%" y="149" width="0.1300%" height="15" fill="rgb(210,199,37)" fg:x="604" fg:w="3"/><text x="26.4312%" y="159.50"></text></g><g><title>chacha20::backends::sse2::add_xor_rot (388 samples, 16.82%)</title><rect x="11.3134%" y="181" width="16.8184%" height="15" fill="rgb(244,192,49)" fg:x="261" fg:w="388"/><text x="11.5634%" y="191.50">chacha20::backends::sse2::..</text></g><g><title>core::core_arch::x86::sse2::_mm_xor_si128 (42 samples, 1.82%)</title><rect x="26.3112%" y="165" width="1.8205%" height="15" fill="rgb(226,211,11)" fg:x="607" fg:w="42"/><text x="26.5612%" y="175.50">c..</text></g><g><title>chacha20::backends::sse2::cols_to_rows (22 samples, 0.95%)</title><rect x="28.1318%" y="181" width="0.9536%" height="15" fill="rgb(236,162,54)" fg:x="649" fg:w="22"/><text x="28.3818%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_shuffle_epi32 (12 samples, 0.52%)</title><rect x="28.5652%" y="165" width="0.5202%" height="15" fill="rgb(220,229,9)" fg:x="659" fg:w="12"/><text x="28.8152%" y="175.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i32x4 (4 samples, 0.17%)</title><rect x="28.9120%" y="149" width="0.1734%" height="15" fill="rgb(250,87,22)" fg:x="667" fg:w="4"/><text x="29.1620%" y="159.50"></text></g><g><title>chacha20::backends::sse2::double_quarter_round (438 samples, 18.99%)</title><rect x="11.2267%" y="197" width="18.9857%" height="15" fill="rgb(239,43,17)" fg:x="259" fg:w="438"/><text x="11.4767%" y="207.50">chacha20::backends::sse2::doub..</text></g><g><title>chacha20::backends::sse2::rows_to_cols (26 samples, 1.13%)</title><rect x="29.0854%" y="181" width="1.1270%" height="15" fill="rgb(231,177,25)" fg:x="671" fg:w="26"/><text x="29.3354%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_shuffle_epi32 (15 samples, 0.65%)</title><rect x="29.5622%" y="165" width="0.6502%" height="15" fill="rgb(219,179,1)" fg:x="682" fg:w="15"/><text x="29.8122%" y="175.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i32x4 (5 samples, 0.22%)</title><rect x="29.9957%" y="149" width="0.2167%" height="15" fill="rgb(238,219,53)" fg:x="692" fg:w="5"/><text x="30.2457%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_add_epi32 (6 samples, 0.26%)</title><rect x="30.2124%" y="197" width="0.2601%" height="15" fill="rgb(232,167,36)" fg:x="697" fg:w="6"/><text x="30.4624%" y="207.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (3 samples, 0.13%)</title><rect x="30.8192%" y="165" width="0.1300%" height="15" fill="rgb(244,19,51)" fg:x="711" fg:w="3"/><text x="31.0692%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (1 samples, 0.04%)</title><rect x="30.9059%" y="149" width="0.0433%" height="15" fill="rgb(224,6,22)" fg:x="713" fg:w="1"/><text x="31.1559%" y="159.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2 samples, 0.09%)</title><rect x="30.9493%" y="165" width="0.0867%" height="15" fill="rgb(224,145,5)" fg:x="714" fg:w="2"/><text x="31.1993%" y="175.50"></text></g><g><title>core::ptr::read (6 samples, 0.26%)</title><rect x="31.2527%" y="149" width="0.2601%" height="15" fill="rgb(234,130,49)" fg:x="721" fg:w="6"/><text x="31.5027%" y="159.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (2 samples, 0.09%)</title><rect x="31.4261%" y="133" width="0.0867%" height="15" fill="rgb(254,6,2)" fg:x="725" fg:w="2"/><text x="31.6761%" y="143.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::into_inner (2 samples, 0.09%)</title><rect x="31.4261%" y="117" width="0.0867%" height="15" fill="rgb(208,96,46)" fg:x="725" fg:w="2"/><text x="31.6761%" y="127.50"></text></g><g><title>chacha20::backends::sse2::rounds (483 samples, 20.94%)</title><rect x="10.6199%" y="213" width="20.9363%" height="15" fill="rgb(239,3,39)" fg:x="245" fg:w="483"/><text x="10.8699%" y="223.50">chacha20::backends::sse2::rounds</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (25 samples, 1.08%)</title><rect x="30.4725%" y="197" width="1.0837%" height="15" fill="rgb(233,210,1)" fg:x="703" fg:w="25"/><text x="30.7225%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (23 samples, 1.00%)</title><rect x="30.5592%" y="181" width="0.9970%" height="15" fill="rgb(244,137,37)" fg:x="705" fg:w="23"/><text x="30.8092%" y="191.50"></text></g><g><title>core::mem::replace (12 samples, 0.52%)</title><rect x="31.0360%" y="165" width="0.5202%" height="15" fill="rgb(240,136,2)" fg:x="716" fg:w="12"/><text x="31.2860%" y="175.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="31.5128%" y="149" width="0.0433%" height="15" fill="rgb(239,18,37)" fg:x="727" fg:w="1"/><text x="31.7628%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi32 (1 samples, 0.04%)</title><rect x="31.5561%" y="213" width="0.0433%" height="15" fill="rgb(218,185,22)" fg:x="728" fg:w="1"/><text x="31.8061%" y="223.50"></text></g><g><title>&lt;chacha20::backends::sse2::Backend&lt;R&gt; as cipher::stream_core::StreamBackend&gt;::gen_ks_block (491 samples, 21.28%)</title><rect x="10.5332%" y="229" width="21.2831%" height="15" fill="rgb(225,218,4)" fg:x="243" fg:w="491"/><text x="10.7832%" y="239.50">&lt;chacha20::backends::sse2::Backend..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (5 samples, 0.22%)</title><rect x="31.5995%" y="213" width="0.2167%" height="15" fill="rgb(230,182,32)" fg:x="729" fg:w="5"/><text x="31.8495%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4 samples, 0.17%)</title><rect x="31.6428%" y="197" width="0.1734%" height="15" fill="rgb(242,56,43)" fg:x="730" fg:w="4"/><text x="31.8928%" y="207.50"></text></g><g><title>core::mem::replace (1 samples, 0.04%)</title><rect x="31.7729%" y="181" width="0.0433%" height="15" fill="rgb(233,99,24)" fg:x="733" fg:w="1"/><text x="32.0229%" y="191.50"></text></g><g><title>core::ptr::read (1 samples, 0.04%)</title><rect x="31.7729%" y="165" width="0.0433%" height="15" fill="rgb(234,209,42)" fg:x="733" fg:w="1"/><text x="32.0229%" y="175.50"></text></g><g><title>&lt;inout::inout_buf::InOutBufIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="31.8162%" y="229" width="0.0433%" height="15" fill="rgb(227,7,12)" fg:x="734" fg:w="1"/><text x="32.0662%" y="239.50"></text></g><g><title>core::ptr::write (11 samples, 0.48%)</title><rect x="41.9159%" y="101" width="0.4768%" height="15" fill="rgb(245,203,43)" fg:x="967" fg:w="11"/><text x="42.1659%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (174 samples, 7.54%)</title><rect x="35.3273%" y="149" width="7.5423%" height="15" fill="rgb(238,205,33)" fg:x="815" fg:w="174"/><text x="35.5773%" y="159.50">&lt;core::ite..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (120 samples, 5.20%)</title><rect x="37.6680%" y="133" width="5.2016%" height="15" fill="rgb(231,56,7)" fg:x="869" fg:w="120"/><text x="37.9180%" y="143.50">core::..</text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate::{{closure}} (97 samples, 4.20%)</title><rect x="38.6649%" y="117" width="4.2046%" height="15" fill="rgb(244,186,29)" fg:x="892" fg:w="97"/><text x="38.9149%" y="127.50">&lt;gene..</text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default::{{closure}} (11 samples, 0.48%)</title><rect x="42.3927%" y="101" width="0.4768%" height="15" fill="rgb(234,111,31)" fg:x="978" fg:w="11"/><text x="42.6427%" y="111.50"></text></g><g><title>&lt;u8 as core::default::Default&gt;::default (2 samples, 0.09%)</title><rect x="42.7828%" y="85" width="0.0867%" height="15" fill="rgb(241,149,10)" fg:x="987" fg:w="2"/><text x="43.0328%" y="95.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (16 samples, 0.69%)</title><rect x="44.2133%" y="133" width="0.6935%" height="15" fill="rgb(249,206,44)" fg:x="1020" fg:w="16"/><text x="44.4633%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null::runtime_impl (7 samples, 0.30%)</title><rect x="44.6034%" y="117" width="0.3034%" height="15" fill="rgb(251,153,30)" fg:x="1029" fg:w="7"/><text x="44.8534%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::addr (5 samples, 0.22%)</title><rect x="44.6901%" y="101" width="0.2167%" height="15" fill="rgb(239,152,38)" fg:x="1031" fg:w="5"/><text x="44.9401%" y="111.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (16 samples, 0.69%)</title><rect x="46.2072%" y="117" width="0.6935%" height="15" fill="rgb(249,139,47)" fg:x="1066" fg:w="16"/><text x="46.4572%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (14 samples, 0.61%)</title><rect x="46.2939%" y="101" width="0.6068%" height="15" fill="rgb(244,64,35)" fg:x="1068" fg:w="14"/><text x="46.5439%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (349 samples, 15.13%)</title><rect x="31.9029%" y="197" width="15.1279%" height="15" fill="rgb(216,46,15)" fg:x="736" fg:w="349"/><text x="32.1529%" y="207.50">core::iter::traits::ite..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (345 samples, 14.95%)</title><rect x="32.0763%" y="181" width="14.9545%" height="15" fill="rgb(250,74,19)" fg:x="740" fg:w="345"/><text x="32.3263%" y="191.50">&lt;core::iter::adapters::..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (345 samples, 14.95%)</title><rect x="32.0763%" y="165" width="14.9545%" height="15" fill="rgb(249,42,33)" fg:x="740" fg:w="345"/><text x="32.3263%" y="175.50">core::iter::traits::ite..</text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (96 samples, 4.16%)</title><rect x="42.8695%" y="149" width="4.1612%" height="15" fill="rgb(242,149,17)" fg:x="989" fg:w="96"/><text x="43.1195%" y="159.50">&lt;core..</text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (49 samples, 2.12%)</title><rect x="44.9068%" y="133" width="2.1240%" height="15" fill="rgb(244,29,21)" fg:x="1036" fg:w="49"/><text x="45.1568%" y="143.50">c..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (3 samples, 0.13%)</title><rect x="46.9007%" y="117" width="0.1300%" height="15" fill="rgb(220,130,37)" fg:x="1082" fg:w="3"/><text x="47.1507%" y="127.50"></text></g><g><title>_init (1 samples, 0.04%)</title><rect x="47.1175%" y="181" width="0.0433%" height="15" fill="rgb(211,67,2)" fg:x="1087" fg:w="1"/><text x="47.3675%" y="191.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="47.1608%" y="165" width="0.0433%" height="15" fill="rgb(235,68,52)" fg:x="1088" fg:w="1"/><text x="47.4108%" y="175.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="47.2042%" y="149" width="0.0433%" height="15" fill="rgb(246,142,3)" fg:x="1089" fg:w="1"/><text x="47.4542%" y="159.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::into_inner (1 samples, 0.04%)</title><rect x="47.2475%" y="149" width="0.0433%" height="15" fill="rgb(241,25,7)" fg:x="1090" fg:w="1"/><text x="47.4975%" y="159.50"></text></g><g><title>generic_array::ArrayBuilder&lt;T,N&gt;::into_inner (7 samples, 0.30%)</title><rect x="47.0308%" y="197" width="0.3034%" height="15" fill="rgb(242,119,39)" fg:x="1085" fg:w="7"/><text x="47.2808%" y="207.50"></text></g><g><title>core::ptr::read (4 samples, 0.17%)</title><rect x="47.1608%" y="181" width="0.1734%" height="15" fill="rgb(241,98,45)" fg:x="1088" fg:w="4"/><text x="47.4108%" y="191.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (3 samples, 0.13%)</title><rect x="47.2042%" y="165" width="0.1300%" height="15" fill="rgb(254,28,30)" fg:x="1089" fg:w="3"/><text x="47.4542%" y="175.50"></text></g><g><title>memcpy (1 samples, 0.04%)</title><rect x="47.2909%" y="149" width="0.0433%" height="15" fill="rgb(241,142,54)" fg:x="1091" fg:w="1"/><text x="47.5409%" y="159.50"></text></g><g><title>generic_array::ArrayBuilder&lt;T,N&gt;::iter_position (1 samples, 0.04%)</title><rect x="47.3342%" y="197" width="0.0433%" height="15" fill="rgb(222,85,15)" fg:x="1092" fg:w="1"/><text x="47.5842%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter_mut (1 samples, 0.04%)</title><rect x="47.3342%" y="181" width="0.0433%" height="15" fill="rgb(210,85,47)" fg:x="1092" fg:w="1"/><text x="47.5842%" y="191.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::new (1 samples, 0.04%)</title><rect x="47.3342%" y="165" width="0.0433%" height="15" fill="rgb(224,206,25)" fg:x="1092" fg:w="1"/><text x="47.5842%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.04%)</title><rect x="47.3342%" y="149" width="0.0433%" height="15" fill="rgb(243,201,19)" fg:x="1092" fg:w="1"/><text x="47.5842%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null::runtime_impl (1 samples, 0.04%)</title><rect x="47.3342%" y="133" width="0.0433%" height="15" fill="rgb(236,59,4)" fg:x="1092" fg:w="1"/><text x="47.5842%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::addr (1 samples, 0.04%)</title><rect x="47.3342%" y="117" width="0.0433%" height="15" fill="rgb(254,179,45)" fg:x="1092" fg:w="1"/><text x="47.5842%" y="127.50"></text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default (359 samples, 15.56%)</title><rect x="31.8596%" y="229" width="15.5613%" height="15" fill="rgb(226,14,10)" fg:x="735" fg:w="359"/><text x="32.1096%" y="239.50">generic_array::impls::&lt;i..</text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (359 samples, 15.56%)</title><rect x="31.8596%" y="213" width="15.5613%" height="15" fill="rgb(244,27,41)" fg:x="735" fg:w="359"/><text x="32.1096%" y="223.50">&lt;generic_array::GenericA..</text></g><g><title>generic_array::ArrayBuilder&lt;T,N&gt;::new (1 samples, 0.04%)</title><rect x="47.3775%" y="197" width="0.0433%" height="15" fill="rgb(235,35,32)" fg:x="1093" fg:w="1"/><text x="47.6275%" y="207.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.04%)</title><rect x="53.1426%" y="213" width="0.0433%" height="15" fill="rgb(218,68,31)" fg:x="1226" fg:w="1"/><text x="53.3926%" y="223.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as core::ops::deref::Deref&gt;::deref (84 samples, 3.64%)</title><rect x="53.1860%" y="213" width="3.6411%" height="15" fill="rgb(207,120,37)" fg:x="1227" fg:w="84"/><text x="53.4360%" y="223.50">&lt;gen..</text></g><g><title>core::slice::raw::from_raw_parts (69 samples, 2.99%)</title><rect x="53.8362%" y="197" width="2.9909%" height="15" fill="rgb(227,98,0)" fg:x="1242" fg:w="69"/><text x="54.0862%" y="207.50">cor..</text></g><g><title>core::ptr::slice_from_raw_parts (48 samples, 2.08%)</title><rect x="54.7464%" y="181" width="2.0806%" height="15" fill="rgb(207,7,3)" fg:x="1263" fg:w="48"/><text x="54.9964%" y="191.50">c..</text></g><g><title>core::ptr::metadata::from_raw_parts (46 samples, 1.99%)</title><rect x="54.8331%" y="165" width="1.9939%" height="15" fill="rgb(206,98,19)" fg:x="1265" fg:w="46"/><text x="55.0831%" y="175.50">c..</text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as core::ops::deref::DerefMut&gt;::deref_mut (35 samples, 1.52%)</title><rect x="56.8270%" y="213" width="1.5171%" height="15" fill="rgb(217,5,26)" fg:x="1311" fg:w="35"/><text x="57.0770%" y="223.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (27 samples, 1.17%)</title><rect x="57.1738%" y="197" width="1.1704%" height="15" fill="rgb(235,190,38)" fg:x="1319" fg:w="27"/><text x="57.4238%" y="207.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (20 samples, 0.87%)</title><rect x="57.4772%" y="181" width="0.8669%" height="15" fill="rgb(247,86,24)" fg:x="1326" fg:w="20"/><text x="57.7272%" y="191.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (18 samples, 0.78%)</title><rect x="57.5639%" y="165" width="0.7802%" height="15" fill="rgb(205,101,16)" fg:x="1328" fg:w="18"/><text x="57.8139%" y="175.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (16 samples, 0.69%)</title><rect x="59.9046%" y="181" width="0.6935%" height="15" fill="rgb(246,168,33)" fg:x="1382" fg:w="16"/><text x="60.1546%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (2 samples, 0.09%)</title><rect x="60.5115%" y="165" width="0.0867%" height="15" fill="rgb(231,114,1)" fg:x="1396" fg:w="2"/><text x="60.7615%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (11 samples, 0.48%)</title><rect x="60.5982%" y="181" width="0.4768%" height="15" fill="rgb(207,184,53)" fg:x="1398" fg:w="11"/><text x="60.8482%" y="191.50"></text></g><g><title>core::ptr::read (28 samples, 1.21%)</title><rect x="61.8119%" y="165" width="1.2137%" height="15" fill="rgb(224,95,51)" fg:x="1426" fg:w="28"/><text x="62.0619%" y="175.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (5 samples, 0.22%)</title><rect x="62.8088%" y="149" width="0.2167%" height="15" fill="rgb(212,188,45)" fg:x="1449" fg:w="5"/><text x="63.0588%" y="159.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::into_inner (4 samples, 0.17%)</title><rect x="62.8522%" y="133" width="0.1734%" height="15" fill="rgb(223,154,38)" fg:x="1450" fg:w="4"/><text x="63.1022%" y="143.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (113 samples, 4.90%)</title><rect x="58.3442%" y="213" width="4.8981%" height="15" fill="rgb(251,22,52)" fg:x="1346" fg:w="113"/><text x="58.5942%" y="223.50">core::..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (103 samples, 4.46%)</title><rect x="58.7776%" y="197" width="4.4647%" height="15" fill="rgb(229,209,22)" fg:x="1356" fg:w="103"/><text x="59.0276%" y="207.50">&lt;core..</text></g><g><title>core::mem::replace (50 samples, 2.17%)</title><rect x="61.0750%" y="181" width="2.1673%" height="15" fill="rgb(234,138,34)" fg:x="1409" fg:w="50"/><text x="61.3250%" y="191.50">c..</text></g><g><title>core::ptr::write (5 samples, 0.22%)</title><rect x="63.0256%" y="165" width="0.2167%" height="15" fill="rgb(212,95,11)" fg:x="1454" fg:w="5"/><text x="63.2756%" y="175.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="63.2857%" y="197" width="0.0433%" height="15" fill="rgb(240,179,47)" fg:x="1460" fg:w="1"/><text x="63.5357%" y="207.50"></text></g><g><title>core::ptr::read (3 samples, 0.13%)</title><rect x="63.2423%" y="213" width="0.1300%" height="15" fill="rgb(240,163,11)" fg:x="1459" fg:w="3"/><text x="63.4923%" y="223.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (1 samples, 0.04%)</title><rect x="63.3290%" y="197" width="0.0433%" height="15" fill="rgb(236,37,12)" fg:x="1461" fg:w="1"/><text x="63.5790%" y="207.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="63.3290%" y="181" width="0.0433%" height="15" fill="rgb(232,164,16)" fg:x="1461" fg:w="1"/><text x="63.5790%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::enumerate (1 samples, 0.04%)</title><rect x="63.3723%" y="181" width="0.0433%" height="15" fill="rgb(244,205,15)" fg:x="1462" fg:w="1"/><text x="63.6223%" y="191.50"></text></g><g><title>core::iter::adapters::enumerate::Enumerate&lt;I&gt;::new (1 samples, 0.04%)</title><rect x="63.3723%" y="165" width="0.0433%" height="15" fill="rgb(223,117,47)" fg:x="1462" fg:w="1"/><text x="63.6223%" y="175.50"></text></g><g><title>core::ptr::write (8 samples, 0.35%)</title><rect x="72.5184%" y="85" width="0.3468%" height="15" fill="rgb(244,107,35)" fg:x="1673" fg:w="8"/><text x="72.7684%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (164 samples, 7.11%)</title><rect x="66.4933%" y="133" width="7.1088%" height="15" fill="rgb(205,140,8)" fg:x="1534" fg:w="164"/><text x="66.7433%" y="143.50">&lt;core::ite..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (105 samples, 4.55%)</title><rect x="69.0507%" y="117" width="4.5514%" height="15" fill="rgb(228,84,46)" fg:x="1593" fg:w="105"/><text x="69.3007%" y="127.50">core:..</text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate::{{closure}} (85 samples, 3.68%)</title><rect x="69.9176%" y="101" width="3.6844%" height="15" fill="rgb(254,188,9)" fg:x="1613" fg:w="85"/><text x="70.1676%" y="111.50">&lt;gen..</text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default::{{closure}} (17 samples, 0.74%)</title><rect x="72.8652%" y="85" width="0.7369%" height="15" fill="rgb(206,112,54)" fg:x="1681" fg:w="17"/><text x="73.1152%" y="95.50"></text></g><g><title>&lt;u8 as core::default::Default&gt;::default (7 samples, 0.30%)</title><rect x="73.2987%" y="69" width="0.3034%" height="15" fill="rgb(216,84,49)" fg:x="1691" fg:w="7"/><text x="73.5487%" y="79.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (16 samples, 0.69%)</title><rect x="74.6424%" y="117" width="0.6935%" height="15" fill="rgb(214,194,35)" fg:x="1722" fg:w="16"/><text x="74.8924%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null::runtime_impl (9 samples, 0.39%)</title><rect x="74.9458%" y="101" width="0.3901%" height="15" fill="rgb(249,28,3)" fg:x="1729" fg:w="9"/><text x="75.1958%" y="111.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::addr (3 samples, 0.13%)</title><rect x="75.2059%" y="85" width="0.1300%" height="15" fill="rgb(222,56,52)" fg:x="1735" fg:w="3"/><text x="75.4559%" y="95.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (14 samples, 0.61%)</title><rect x="76.1595%" y="101" width="0.6068%" height="15" fill="rgb(245,217,50)" fg:x="1757" fg:w="14"/><text x="76.4095%" y="111.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (14 samples, 0.61%)</title><rect x="76.1595%" y="85" width="0.6068%" height="15" fill="rgb(213,201,24)" fg:x="1757" fg:w="14"/><text x="76.4095%" y="95.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (2 samples, 0.09%)</title><rect x="76.7664%" y="101" width="0.0867%" height="15" fill="rgb(248,116,28)" fg:x="1771" fg:w="2"/><text x="77.0164%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (314 samples, 13.61%)</title><rect x="63.4157%" y="181" width="13.6107%" height="15" fill="rgb(219,72,43)" fg:x="1463" fg:w="314"/><text x="63.6657%" y="191.50">core::iter::traits::i..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (313 samples, 13.57%)</title><rect x="63.4590%" y="165" width="13.5674%" height="15" fill="rgb(209,138,14)" fg:x="1464" fg:w="313"/><text x="63.7090%" y="175.50">&lt;core::iter::adapter..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (311 samples, 13.48%)</title><rect x="63.5457%" y="149" width="13.4807%" height="15" fill="rgb(222,18,33)" fg:x="1466" fg:w="311"/><text x="63.7957%" y="159.50">core::iter::traits::..</text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (79 samples, 3.42%)</title><rect x="73.6021%" y="133" width="3.4244%" height="15" fill="rgb(213,199,7)" fg:x="1698" fg:w="79"/><text x="73.8521%" y="143.50">&lt;co..</text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (39 samples, 1.69%)</title><rect x="75.3359%" y="117" width="1.6905%" height="15" fill="rgb(250,110,10)" fg:x="1738" fg:w="39"/><text x="75.5859%" y="127.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (4 samples, 0.17%)</title><rect x="76.8531%" y="101" width="0.1734%" height="15" fill="rgb(248,123,6)" fg:x="1773" fg:w="4"/><text x="77.1031%" y="111.50"></text></g><g><title>generic_array::ArrayBuilder&lt;T,N&gt;::into_inner (2 samples, 0.09%)</title><rect x="77.0264%" y="181" width="0.0867%" height="15" fill="rgb(206,91,31)" fg:x="1777" fg:w="2"/><text x="77.2764%" y="191.50"></text></g><g><title>core::ptr::read (1 samples, 0.04%)</title><rect x="77.0698%" y="165" width="0.0433%" height="15" fill="rgb(211,154,13)" fg:x="1778" fg:w="1"/><text x="77.3198%" y="175.50"></text></g><g><title>_init (1 samples, 0.04%)</title><rect x="77.0698%" y="149" width="0.0433%" height="15" fill="rgb(225,148,7)" fg:x="1778" fg:w="1"/><text x="77.3198%" y="159.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.04%)</title><rect x="77.1565%" y="165" width="0.0433%" height="15" fill="rgb(220,160,43)" fg:x="1780" fg:w="1"/><text x="77.4065%" y="175.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (1 samples, 0.04%)</title><rect x="77.1565%" y="149" width="0.0433%" height="15" fill="rgb(213,52,39)" fg:x="1780" fg:w="1"/><text x="77.4065%" y="159.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (1 samples, 0.04%)</title><rect x="77.1565%" y="133" width="0.0433%" height="15" fill="rgb(243,137,7)" fg:x="1780" fg:w="1"/><text x="77.4065%" y="143.50"></text></g><g><title>generic_array::ArrayBuilder&lt;T,N&gt;::iter_position (3 samples, 0.13%)</title><rect x="77.1131%" y="181" width="0.1300%" height="15" fill="rgb(230,79,13)" fg:x="1779" fg:w="3"/><text x="77.3631%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter_mut (1 samples, 0.04%)</title><rect x="77.1998%" y="165" width="0.0433%" height="15" fill="rgb(247,105,23)" fg:x="1781" fg:w="1"/><text x="77.4498%" y="175.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::new (1 samples, 0.04%)</title><rect x="77.1998%" y="149" width="0.0433%" height="15" fill="rgb(223,179,41)" fg:x="1781" fg:w="1"/><text x="77.4498%" y="159.50"></text></g><g><title>cipher::stream_core::StreamCipherCore::apply_keystream_blocks_inout (1,544 samples, 66.93%)</title><rect x="10.3598%" y="309" width="66.9267%" height="15" fill="rgb(218,9,34)" fg:x="239" fg:w="1544"/><text x="10.6098%" y="319.50">cipher::stream_core::StreamCipherCore::apply_keystream_blocks_inout</text></g><g><title>&lt;chacha20::xchacha::XChaChaCore&lt;R&gt; as cipher::stream_core::StreamCipherCore&gt;::process_with_backend (1,544 samples, 66.93%)</title><rect x="10.3598%" y="293" width="66.9267%" height="15" fill="rgb(222,106,8)" fg:x="239" fg:w="1544"/><text x="10.6098%" y="303.50">&lt;chacha20::xchacha::XChaChaCore&lt;R&gt; as cipher::stream_core::StreamCipherCore&gt;::process_with_backend</text></g><g><title>&lt;chacha20::ChaChaCore&lt;R&gt; as cipher::stream_core::StreamCipherCore&gt;::process_with_backend (1,544 samples, 66.93%)</title><rect x="10.3598%" y="277" width="66.9267%" height="15" fill="rgb(211,220,0)" fg:x="239" fg:w="1544"/><text x="10.6098%" y="287.50">&lt;chacha20::ChaChaCore&lt;R&gt; as cipher::stream_core::StreamCipherCore&gt;::process_with_backend</text></g><g><title>chacha20::backends::sse2::inner (1,543 samples, 66.88%)</title><rect x="10.4031%" y="261" width="66.8834%" height="15" fill="rgb(229,52,16)" fg:x="240" fg:w="1543"/><text x="10.6531%" y="271.50">chacha20::backends::sse2::inner</text></g><g><title>&lt;cipher::stream_core::ApplyBlocksCtx&lt;BS&gt; as cipher::stream_core::StreamClosure&gt;::call (1,540 samples, 66.75%)</title><rect x="10.5332%" y="245" width="66.7534%" height="15" fill="rgb(212,155,18)" fg:x="243" fg:w="1540"/><text x="10.7832%" y="255.50">&lt;cipher::stream_core::ApplyBlocksCtx&lt;BS&gt; as cipher::stream_core::StreamClosure&gt;::call</text></g><g><title>inout::inout::InOut&lt;generic_array::GenericArray&lt;u8,N&gt;&gt;::xor_in2out (689 samples, 29.87%)</title><rect x="47.4209%" y="229" width="29.8656%" height="15" fill="rgb(242,21,14)" fg:x="1094" fg:w="689"/><text x="47.6709%" y="239.50">inout::inout::InOut&lt;generic_array::GenericArray&lt;..</text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default (321 samples, 13.91%)</title><rect x="63.3723%" y="213" width="13.9142%" height="15" fill="rgb(222,19,48)" fg:x="1462" fg:w="321"/><text x="63.6223%" y="223.50">generic_array::impls:..</text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (321 samples, 13.91%)</title><rect x="63.3723%" y="197" width="13.9142%" height="15" fill="rgb(232,45,27)" fg:x="1462" fg:w="321"/><text x="63.6223%" y="207.50">&lt;generic_array::Gener..</text></g><g><title>generic_array::ArrayBuilder&lt;T,N&gt;::new (1 samples, 0.04%)</title><rect x="77.2432%" y="181" width="0.0433%" height="15" fill="rgb(249,103,42)" fg:x="1782" fg:w="1"/><text x="77.4932%" y="191.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="77.2432%" y="165" width="0.0433%" height="15" fill="rgb(246,81,33)" fg:x="1782" fg:w="1"/><text x="77.4932%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_add_epi32 (1 samples, 0.04%)</title><rect x="77.7200%" y="165" width="0.0433%" height="15" fill="rgb(252,33,42)" fg:x="1793" fg:w="1"/><text x="77.9700%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_slli_epi32 (4 samples, 0.17%)</title><rect x="77.7633%" y="165" width="0.1734%" height="15" fill="rgb(209,212,41)" fg:x="1794" fg:w="4"/><text x="78.0133%" y="175.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i32x4 (1 samples, 0.04%)</title><rect x="77.8934%" y="149" width="0.0433%" height="15" fill="rgb(207,154,6)" fg:x="1797" fg:w="1"/><text x="78.1434%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_srli_epi32 (1 samples, 0.04%)</title><rect x="77.9367%" y="165" width="0.0433%" height="15" fill="rgb(223,64,47)" fg:x="1798" fg:w="1"/><text x="78.1867%" y="175.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i32x4 (1 samples, 0.04%)</title><rect x="77.9367%" y="149" width="0.0433%" height="15" fill="rgb(211,161,38)" fg:x="1798" fg:w="1"/><text x="78.1867%" y="159.50"></text></g><g><title>chacha20::backends::sse2::add_xor_rot (18 samples, 0.78%)</title><rect x="77.3299%" y="181" width="0.7802%" height="15" fill="rgb(219,138,40)" fg:x="1784" fg:w="18"/><text x="77.5799%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_xor_si128 (3 samples, 0.13%)</title><rect x="77.9801%" y="165" width="0.1300%" height="15" fill="rgb(241,228,46)" fg:x="1799" fg:w="3"/><text x="78.2301%" y="175.50"></text></g><g><title>chacha20::backends::sse2::cols_to_rows (1 samples, 0.04%)</title><rect x="78.1101%" y="181" width="0.0433%" height="15" fill="rgb(223,209,38)" fg:x="1802" fg:w="1"/><text x="78.3601%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_shuffle_epi32 (1 samples, 0.04%)</title><rect x="78.1101%" y="165" width="0.0433%" height="15" fill="rgb(236,164,45)" fg:x="1802" fg:w="1"/><text x="78.3601%" y="175.50"></text></g><g><title>chacha20::backends::sse2::double_quarter_round (20 samples, 0.87%)</title><rect x="77.3299%" y="197" width="0.8669%" height="15" fill="rgb(231,15,5)" fg:x="1784" fg:w="20"/><text x="77.5799%" y="207.50"></text></g><g><title>chacha20::backends::sse2::rows_to_cols (1 samples, 0.04%)</title><rect x="78.1534%" y="181" width="0.0433%" height="15" fill="rgb(252,35,15)" fg:x="1803" fg:w="1"/><text x="78.4034%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_shuffle_epi32 (1 samples, 0.04%)</title><rect x="78.1534%" y="165" width="0.0433%" height="15" fill="rgb(248,181,18)" fg:x="1803" fg:w="1"/><text x="78.4034%" y="175.50"></text></g><g><title>cipher::stream_core::StreamCipherCore::write_keystream_block (22 samples, 0.95%)</title><rect x="77.2865%" y="309" width="0.9536%" height="15" fill="rgb(233,39,42)" fg:x="1783" fg:w="22"/><text x="77.5365%" y="319.50"></text></g><g><title>&lt;chacha20::xchacha::XChaChaCore&lt;R&gt; as cipher::stream_core::StreamCipherCore&gt;::process_with_backend (21 samples, 0.91%)</title><rect x="77.3299%" y="293" width="0.9103%" height="15" fill="rgb(238,110,33)" fg:x="1784" fg:w="21"/><text x="77.5799%" y="303.50"></text></g><g><title>&lt;chacha20::ChaChaCore&lt;R&gt; as cipher::stream_core::StreamCipherCore&gt;::process_with_backend (21 samples, 0.91%)</title><rect x="77.3299%" y="277" width="0.9103%" height="15" fill="rgb(233,195,10)" fg:x="1784" fg:w="21"/><text x="77.5799%" y="287.50"></text></g><g><title>chacha20::backends::sse2::inner (21 samples, 0.91%)</title><rect x="77.3299%" y="261" width="0.9103%" height="15" fill="rgb(254,105,3)" fg:x="1784" fg:w="21"/><text x="77.5799%" y="271.50"></text></g><g><title>&lt;cipher::stream_core::WriteBlockCtx&lt;BS&gt; as cipher::stream_core::StreamClosure&gt;::call (21 samples, 0.91%)</title><rect x="77.3299%" y="245" width="0.9103%" height="15" fill="rgb(221,225,9)" fg:x="1784" fg:w="21"/><text x="77.5799%" y="255.50"></text></g><g><title>&lt;chacha20::backends::sse2::Backend&lt;R&gt; as cipher::stream_core::StreamBackend&gt;::gen_ks_block (21 samples, 0.91%)</title><rect x="77.3299%" y="229" width="0.9103%" height="15" fill="rgb(224,227,45)" fg:x="1784" fg:w="21"/><text x="77.5799%" y="239.50"></text></g><g><title>chacha20::backends::sse2::rounds (21 samples, 0.91%)</title><rect x="77.3299%" y="213" width="0.9103%" height="15" fill="rgb(229,198,43)" fg:x="1784" fg:w="21"/><text x="77.5799%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_add_epi32 (1 samples, 0.04%)</title><rect x="78.1968%" y="197" width="0.0433%" height="15" fill="rgb(206,209,35)" fg:x="1804" fg:w="1"/><text x="78.4468%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.04%)</title><rect x="78.2401%" y="309" width="0.0433%" height="15" fill="rgb(245,195,53)" fg:x="1805" fg:w="1"/><text x="78.4901%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.04%)</title><rect x="78.5869%" y="261" width="0.0433%" height="15" fill="rgb(240,92,26)" fg:x="1813" fg:w="1"/><text x="78.8369%" y="271.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (6 samples, 0.26%)</title><rect x="78.4569%" y="293" width="0.2601%" height="15" fill="rgb(207,40,23)" fg:x="1810" fg:w="6"/><text x="78.7069%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (5 samples, 0.22%)</title><rect x="78.5002%" y="277" width="0.2167%" height="15" fill="rgb(223,111,35)" fg:x="1811" fg:w="5"/><text x="78.7502%" y="287.50"></text></g><g><title>core::mem::replace (2 samples, 0.09%)</title><rect x="78.6303%" y="261" width="0.0867%" height="15" fill="rgb(229,147,28)" fg:x="1814" fg:w="2"/><text x="78.8803%" y="271.50"></text></g><g><title>core::ptr::read (1 samples, 0.04%)</title><rect x="78.6736%" y="245" width="0.0433%" height="15" fill="rgb(211,29,28)" fg:x="1815" fg:w="1"/><text x="78.9236%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.04%)</title><rect x="78.7169%" y="293" width="0.0433%" height="15" fill="rgb(228,72,33)" fg:x="1816" fg:w="1"/><text x="78.9669%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.04%)</title><rect x="78.7169%" y="277" width="0.0433%" height="15" fill="rgb(205,214,31)" fg:x="1816" fg:w="1"/><text x="78.9669%" y="287.50"></text></g><g><title>cipher::stream::StreamCipher::apply_keystream (1,581 samples, 68.53%)</title><rect x="10.3164%" y="357" width="68.5306%" height="15" fill="rgb(224,111,15)" fg:x="238" fg:w="1581"/><text x="10.5664%" y="367.50">cipher::stream::StreamCipher::apply_keystream</text></g><g><title>cipher::stream::StreamCipher::try_apply_keystream (1,581 samples, 68.53%)</title><rect x="10.3164%" y="341" width="68.5306%" height="15" fill="rgb(253,21,26)" fg:x="238" fg:w="1581"/><text x="10.5664%" y="351.50">cipher::stream::StreamCipher::try_apply_keystream</text></g><g><title>&lt;cipher::stream_wrapper::StreamCipherCoreWrapper&lt;T&gt; as cipher::stream::StreamCipher&gt;::try_apply_keystream_inout (1,581 samples, 68.53%)</title><rect x="10.3164%" y="325" width="68.5306%" height="15" fill="rgb(245,139,43)" fg:x="238" fg:w="1581"/><text x="10.5664%" y="335.50">&lt;cipher::stream_wrapper::StreamCipherCoreWrapper&lt;T&gt; as cipher::stream::StreamCipher&gt;::try_apply_keystream_inout</text></g><g><title>inout::inout_buf::InOutBuf&lt;u8&gt;::xor_in2out (13 samples, 0.56%)</title><rect x="78.2835%" y="309" width="0.5635%" height="15" fill="rgb(252,170,7)" fg:x="1806" fg:w="13"/><text x="78.5335%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.09%)</title><rect x="78.7603%" y="293" width="0.0867%" height="15" fill="rgb(231,118,14)" fg:x="1817" fg:w="2"/><text x="79.0103%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.09%)</title><rect x="78.7603%" y="277" width="0.0867%" height="15" fill="rgb(238,83,0)" fg:x="1817" fg:w="2"/><text x="79.0103%" y="287.50"></text></g><g><title>zeroize::atomic_fence (1 samples, 0.04%)</title><rect x="78.8470%" y="309" width="0.0433%" height="15" fill="rgb(221,39,39)" fg:x="1819" fg:w="1"/><text x="79.0970%" y="319.50"></text></g><g><title>core::sync::atomic::compiler_fence (1 samples, 0.04%)</title><rect x="78.8470%" y="293" width="0.0433%" height="15" fill="rgb(222,119,46)" fg:x="1819" fg:w="1"/><text x="79.0970%" y="303.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1 samples, 0.04%)</title><rect x="78.9770%" y="261" width="0.0433%" height="15" fill="rgb(222,165,49)" fg:x="1822" fg:w="1"/><text x="79.2270%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.04%)</title><rect x="79.0204%" y="261" width="0.0433%" height="15" fill="rgb(219,113,52)" fg:x="1823" fg:w="1"/><text x="79.2704%" y="271.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (7 samples, 0.30%)</title><rect x="78.9337%" y="293" width="0.3034%" height="15" fill="rgb(214,7,15)" fg:x="1821" fg:w="7"/><text x="79.1837%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (7 samples, 0.30%)</title><rect x="78.9337%" y="277" width="0.3034%" height="15" fill="rgb(235,32,4)" fg:x="1821" fg:w="7"/><text x="79.1837%" y="287.50"></text></g><g><title>core::mem::replace (4 samples, 0.17%)</title><rect x="79.0637%" y="261" width="0.1734%" height="15" fill="rgb(238,90,54)" fg:x="1824" fg:w="4"/><text x="79.3137%" y="271.50"></text></g><g><title>core::ptr::read (2 samples, 0.09%)</title><rect x="79.1504%" y="245" width="0.0867%" height="15" fill="rgb(213,208,19)" fg:x="1826" fg:w="2"/><text x="79.4004%" y="255.50"></text></g><g><title>&lt;cipher::stream_wrapper::StreamCipherCoreWrapper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.43%)</title><rect x="78.8470%" y="341" width="0.4335%" height="15" fill="rgb(233,156,4)" fg:x="1819" fg:w="10"/><text x="79.0970%" y="351.50"></text></g><g><title>&lt;[Z] as zeroize::Zeroize&gt;::zeroize (10 samples, 0.43%)</title><rect x="78.8470%" y="325" width="0.4335%" height="15" fill="rgb(207,194,5)" fg:x="1819" fg:w="10"/><text x="79.0970%" y="335.50"></text></g><g><title>zeroize::volatile_set (9 samples, 0.39%)</title><rect x="78.8903%" y="309" width="0.3901%" height="15" fill="rgb(206,111,30)" fg:x="1820" fg:w="9"/><text x="79.1403%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.04%)</title><rect x="79.2371%" y="293" width="0.0433%" height="15" fill="rgb(243,70,54)" fg:x="1828" fg:w="1"/><text x="79.4871%" y="303.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="79.2805%" y="261" width="0.0433%" height="15" fill="rgb(242,28,8)" fg:x="1829" fg:w="1"/><text x="79.5305%" y="271.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="79.2805%" y="245" width="0.0433%" height="15" fill="rgb(219,106,18)" fg:x="1829" fg:w="1"/><text x="79.5305%" y="255.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (1 samples, 0.04%)</title><rect x="79.2805%" y="229" width="0.0433%" height="15" fill="rgb(244,222,10)" fg:x="1829" fg:w="1"/><text x="79.5305%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;cipher::stream_wrapper::StreamCipherCoreWrapper&lt;chacha20::xchacha::XChaChaCore&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;&gt;&gt;&gt; (13 samples, 0.56%)</title><rect x="78.8470%" y="357" width="0.5635%" height="15" fill="rgb(236,179,52)" fg:x="1819" fg:w="13"/><text x="79.0970%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;chacha20::xchacha::XChaChaCore&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;&gt;&gt; (3 samples, 0.13%)</title><rect x="79.2805%" y="341" width="0.1300%" height="15" fill="rgb(213,23,39)" fg:x="1829" fg:w="3"/><text x="79.5305%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;chacha20::ChaChaCore&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UInt&lt;typenum::uint::UTerm,typenum::bit::B1&gt;,typenum::bit::B0&gt;,typenum::bit::B1&gt;,typenum::bit::B0&gt;&gt;&gt; (3 samples, 0.13%)</title><rect x="79.2805%" y="325" width="0.1300%" height="15" fill="rgb(238,48,10)" fg:x="1829" fg:w="3"/><text x="79.5305%" y="335.50"></text></g><g><title>&lt;chacha20::ChaChaCore&lt;R&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.13%)</title><rect x="79.2805%" y="309" width="0.1300%" height="15" fill="rgb(251,196,23)" fg:x="1829" fg:w="3"/><text x="79.5305%" y="319.50"></text></g><g><title>&lt;[Z: N] as zeroize::Zeroize&gt;::zeroize (3 samples, 0.13%)</title><rect x="79.2805%" y="293" width="0.1300%" height="15" fill="rgb(250,152,24)" fg:x="1829" fg:w="3"/><text x="79.5305%" y="303.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;Z&gt; as zeroize::Zeroize&gt;::zeroize (3 samples, 0.13%)</title><rect x="79.2805%" y="277" width="0.1300%" height="15" fill="rgb(209,150,17)" fg:x="1829" fg:w="3"/><text x="79.5305%" y="287.50"></text></g><g><title>&lt;Z as zeroize::Zeroize&gt;::zeroize (2 samples, 0.09%)</title><rect x="79.3238%" y="261" width="0.0867%" height="15" fill="rgb(234,202,34)" fg:x="1830" fg:w="2"/><text x="79.5738%" y="271.50"></text></g><g><title>zeroize::atomic_fence (2 samples, 0.09%)</title><rect x="79.3238%" y="245" width="0.0867%" height="15" fill="rgb(253,148,53)" fg:x="1830" fg:w="2"/><text x="79.5738%" y="255.50"></text></g><g><title>core::sync::atomic::compiler_fence (2 samples, 0.09%)</title><rect x="79.3238%" y="229" width="0.0867%" height="15" fill="rgb(218,129,16)" fg:x="1830" fg:w="2"/><text x="79.5738%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.04%)</title><rect x="79.4538%" y="341" width="0.0433%" height="15" fill="rgb(216,85,19)" fg:x="1833" fg:w="1"/><text x="79.7038%" y="351.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="79.4538%" y="325" width="0.0433%" height="15" fill="rgb(235,228,7)" fg:x="1833" fg:w="1"/><text x="79.7038%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (2 samples, 0.09%)</title><rect x="79.5839%" y="261" width="0.0867%" height="15" fill="rgb(245,175,0)" fg:x="1836" fg:w="2"/><text x="79.8339%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (2 samples, 0.09%)</title><rect x="79.5839%" y="245" width="0.0867%" height="15" fill="rgb(208,168,36)" fg:x="1836" fg:w="2"/><text x="79.8339%" y="255.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate::{{closure}} (2 samples, 0.09%)</title><rect x="79.5839%" y="229" width="0.0867%" height="15" fill="rgb(246,171,24)" fg:x="1836" fg:w="2"/><text x="79.8339%" y="239.50"></text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default (5 samples, 0.22%)</title><rect x="79.4972%" y="341" width="0.2167%" height="15" fill="rgb(215,142,24)" fg:x="1834" fg:w="5"/><text x="79.7472%" y="351.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (5 samples, 0.22%)</title><rect x="79.4972%" y="325" width="0.2167%" height="15" fill="rgb(250,187,7)" fg:x="1834" fg:w="5"/><text x="79.7472%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4 samples, 0.17%)</title><rect x="79.5405%" y="309" width="0.1734%" height="15" fill="rgb(228,66,33)" fg:x="1835" fg:w="4"/><text x="79.7905%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.17%)</title><rect x="79.5405%" y="293" width="0.1734%" height="15" fill="rgb(234,215,21)" fg:x="1835" fg:w="4"/><text x="79.7905%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (4 samples, 0.17%)</title><rect x="79.5405%" y="277" width="0.1734%" height="15" fill="rgb(222,191,20)" fg:x="1835" fg:w="4"/><text x="79.7905%" y="287.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="79.6706%" y="261" width="0.0433%" height="15" fill="rgb(245,79,54)" fg:x="1838" fg:w="1"/><text x="79.9206%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.04%)</title><rect x="79.6706%" y="245" width="0.0433%" height="15" fill="rgb(240,10,37)" fg:x="1838" fg:w="1"/><text x="79.9206%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null::runtime_impl (1 samples, 0.04%)</title><rect x="79.6706%" y="229" width="0.0433%" height="15" fill="rgb(214,192,32)" fg:x="1838" fg:w="1"/><text x="79.9206%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::addr (1 samples, 0.04%)</title><rect x="79.6706%" y="213" width="0.0433%" height="15" fill="rgb(209,36,54)" fg:x="1838" fg:w="1"/><text x="79.9206%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.09%)</title><rect x="79.8440%" y="277" width="0.0867%" height="15" fill="rgb(220,10,11)" fg:x="1842" fg:w="2"/><text x="80.0940%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (1 samples, 0.04%)</title><rect x="79.8873%" y="261" width="0.0433%" height="15" fill="rgb(221,106,17)" fg:x="1843" fg:w="1"/><text x="80.1373%" y="271.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for &amp;[T: N]&gt;::try_from (11 samples, 0.48%)</title><rect x="86.3459%" y="213" width="0.4768%" height="15" fill="rgb(251,142,44)" fg:x="1992" fg:w="11"/><text x="86.5959%" y="223.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (100 samples, 4.33%)</title><rect x="84.3520%" y="245" width="4.3346%" height="15" fill="rgb(238,13,15)" fg:x="1946" fg:w="100"/><text x="84.6020%" y="255.50">&lt;T as..</text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (82 samples, 3.55%)</title><rect x="85.1322%" y="229" width="3.5544%" height="15" fill="rgb(208,107,27)" fg:x="1964" fg:w="82"/><text x="85.3822%" y="239.50">core..</text></g><g><title>core::result::Result&lt;T,E&gt;::map (43 samples, 1.86%)</title><rect x="86.8227%" y="213" width="1.8639%" height="15" fill="rgb(205,136,37)" fg:x="2003" fg:w="43"/><text x="87.0727%" y="223.50">c..</text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (9 samples, 0.39%)</title><rect x="88.2965%" y="197" width="0.3901%" height="15" fill="rgb(250,205,27)" fg:x="2037" fg:w="9"/><text x="88.5465%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::cast (2 samples, 0.09%)</title><rect x="89.0334%" y="197" width="0.0867%" height="15" fill="rgb(210,80,43)" fg:x="2054" fg:w="2"/><text x="89.2834%" y="207.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as core::ops::deref::Deref&gt;::deref (12 samples, 0.52%)</title><rect x="88.6866%" y="245" width="0.5202%" height="15" fill="rgb(247,160,36)" fg:x="2046" fg:w="12"/><text x="88.9366%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts (8 samples, 0.35%)</title><rect x="88.8600%" y="229" width="0.3468%" height="15" fill="rgb(234,13,49)" fg:x="2050" fg:w="8"/><text x="89.1100%" y="239.50"></text></g><g><title>core::ptr::slice_from_raw_parts (4 samples, 0.17%)</title><rect x="89.0334%" y="213" width="0.1734%" height="15" fill="rgb(234,122,0)" fg:x="2054" fg:w="4"/><text x="89.2834%" y="223.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (2 samples, 0.09%)</title><rect x="89.1201%" y="197" width="0.0867%" height="15" fill="rgb(207,146,38)" fg:x="2056" fg:w="2"/><text x="89.3701%" y="207.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;u32&gt; for u64&gt;::from (5 samples, 0.22%)</title><rect x="89.2068%" y="245" width="0.2167%" height="15" fill="rgb(207,177,25)" fg:x="2058" fg:w="5"/><text x="89.4568%" y="255.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_le_bytes (30 samples, 1.30%)</title><rect x="89.4235%" y="245" width="1.3004%" height="15" fill="rgb(211,178,42)" fg:x="2063" fg:w="30"/><text x="89.6735%" y="255.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_ne_bytes (8 samples, 0.35%)</title><rect x="90.3771%" y="229" width="0.3468%" height="15" fill="rgb(230,69,54)" fg:x="2085" fg:w="8"/><text x="90.6271%" y="239.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (31 samples, 1.34%)</title><rect x="90.7239%" y="245" width="1.3437%" height="15" fill="rgb(214,135,41)" fg:x="2093" fg:w="31"/><text x="90.9739%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (5 samples, 0.22%)</title><rect x="93.3680%" y="197" width="0.2167%" height="15" fill="rgb(237,67,25)" fg:x="2154" fg:w="5"/><text x="93.6180%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (4 samples, 0.17%)</title><rect x="93.4114%" y="181" width="0.1734%" height="15" fill="rgb(222,189,50)" fg:x="2155" fg:w="4"/><text x="93.6614%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const [T]&gt;::as_ptr (1 samples, 0.04%)</title><rect x="93.5847%" y="197" width="0.0433%" height="15" fill="rgb(245,148,34)" fg:x="2159" fg:w="1"/><text x="93.8347%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::cast (5 samples, 0.22%)</title><rect x="93.7581%" y="181" width="0.2167%" height="15" fill="rgb(222,29,6)" fg:x="2163" fg:w="5"/><text x="94.0081%" y="191.50"></text></g><g><title>&lt;universal_hash::UniversalHash::update::Ctx&lt;BS&gt; as universal_hash::UhfClosure&gt;::call (337 samples, 14.61%)</title><rect x="79.7139%" y="293" width="14.6077%" height="15" fill="rgb(221,189,43)" fg:x="1839" fg:w="337"/><text x="79.9639%" y="303.50">&lt;universal_hash::Unive..</text></g><g><title>&lt;poly1305::backend::soft::State as universal_hash::UhfBackend&gt;::proc_block (332 samples, 14.39%)</title><rect x="79.9306%" y="277" width="14.3910%" height="15" fill="rgb(207,36,27)" fg:x="1844" fg:w="332"/><text x="80.1806%" y="287.50">&lt;poly1305::backend::so..</text></g><g><title>poly1305::backend::soft::State::compute_block (332 samples, 14.39%)</title><rect x="79.9306%" y="261" width="14.3910%" height="15" fill="rgb(217,90,24)" fg:x="1844" fg:w="332"/><text x="80.1806%" y="271.50">poly1305::backend::sof..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (52 samples, 2.25%)</title><rect x="92.0676%" y="245" width="2.2540%" height="15" fill="rgb(224,66,35)" fg:x="2124" fg:w="52"/><text x="92.3176%" y="255.50">c..</text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (45 samples, 1.95%)</title><rect x="92.3710%" y="229" width="1.9506%" height="15" fill="rgb(221,13,50)" fg:x="2131" fg:w="45"/><text x="92.6210%" y="239.50">&lt;..</text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (33 samples, 1.43%)</title><rect x="92.8912%" y="213" width="1.4304%" height="15" fill="rgb(236,68,49)" fg:x="2143" fg:w="33"/><text x="93.1412%" y="223.50"></text></g><g><title>core::ptr::slice_from_raw_parts (16 samples, 0.69%)</title><rect x="93.6281%" y="197" width="0.6935%" height="15" fill="rgb(229,146,28)" fg:x="2160" fg:w="16"/><text x="93.8781%" y="207.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (8 samples, 0.35%)</title><rect x="93.9749%" y="181" width="0.3468%" height="15" fill="rgb(225,31,38)" fg:x="2168" fg:w="8"/><text x="94.2249%" y="191.50"></text></g><g><title>universal_hash::UniversalHash::update (338 samples, 14.65%)</title><rect x="79.7139%" y="341" width="14.6511%" height="15" fill="rgb(250,208,3)" fg:x="1839" fg:w="338"/><text x="79.9639%" y="351.50">universal_hash::Univer..</text></g><g><title>&lt;poly1305::Poly1305 as universal_hash::UniversalHash&gt;::update_with_backend (338 samples, 14.65%)</title><rect x="79.7139%" y="325" width="14.6511%" height="15" fill="rgb(246,54,23)" fg:x="1839" fg:w="338"/><text x="79.9639%" y="335.50">&lt;poly1305::Poly1305 as..</text></g><g><title>&lt;poly1305::backend::autodetect::State as universal_hash::UniversalHash&gt;::update_with_backend (338 samples, 14.65%)</title><rect x="79.7139%" y="309" width="14.6511%" height="15" fill="rgb(243,76,11)" fg:x="1839" fg:w="338"/><text x="79.9639%" y="319.50">&lt;poly1305::backend::au..</text></g><g><title>poly1305::backend::autodetect::avx2_cpuid::InitToken::get (1 samples, 0.04%)</title><rect x="94.3216%" y="293" width="0.0433%" height="15" fill="rgb(245,21,50)" fg:x="2176" fg:w="1"/><text x="94.5716%" y="303.50"></text></g><g><title>universal_hash::UniversalHash::update_padded (346 samples, 15.00%)</title><rect x="79.4105%" y="357" width="14.9978%" height="15" fill="rgb(228,9,43)" fg:x="1832" fg:w="346"/><text x="79.6605%" y="367.50">universal_hash::Univers..</text></g><g><title>universal_hash::to_blocks (1 samples, 0.04%)</title><rect x="94.3650%" y="341" width="0.0433%" height="15" fill="rgb(208,100,47)" fg:x="2177" fg:w="1"/><text x="94.6150%" y="351.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.04%)</title><rect x="94.3650%" y="325" width="0.0433%" height="15" fill="rgb(232,26,8)" fg:x="2177" fg:w="1"/><text x="94.6150%" y="335.50"></text></g><g><title>&lt;u8 as subtle::ConstantTimeEq&gt;::ct_eq (5 samples, 0.22%)</title><rect x="94.4083%" y="325" width="0.2167%" height="15" fill="rgb(216,166,38)" fg:x="2178" fg:w="5"/><text x="94.6583%" y="335.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (5 samples, 0.22%)</title><rect x="94.4083%" y="309" width="0.2167%" height="15" fill="rgb(251,202,51)" fg:x="2178" fg:w="5"/><text x="94.6583%" y="319.50"></text></g><g><title>&lt;subtle::Choice as core::convert::From&lt;u8&gt;&gt;::from (5 samples, 0.22%)</title><rect x="94.4083%" y="293" width="0.2167%" height="15" fill="rgb(254,216,34)" fg:x="2178" fg:w="5"/><text x="94.6583%" y="303.50"></text></g><g><title>subtle::black_box (3 samples, 0.13%)</title><rect x="94.4950%" y="277" width="0.1300%" height="15" fill="rgb(251,32,27)" fg:x="2180" fg:w="3"/><text x="94.7450%" y="287.50"></text></g><g><title>core::ptr::read_volatile (2 samples, 0.09%)</title><rect x="94.5384%" y="261" width="0.0867%" height="15" fill="rgb(208,127,28)" fg:x="2181" fg:w="2"/><text x="94.7884%" y="271.50"></text></g><g><title>core::cmp::min (1 samples, 0.04%)</title><rect x="94.6251%" y="277" width="0.0433%" height="15" fill="rgb(224,137,22)" fg:x="2183" fg:w="1"/><text x="94.8751%" y="287.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.04%)</title><rect x="94.6251%" y="261" width="0.0433%" height="15" fill="rgb(254,70,32)" fg:x="2183" fg:w="1"/><text x="94.8751%" y="271.50"></text></g><g><title>core::cmp::min_by (1 samples, 0.04%)</title><rect x="94.6251%" y="245" width="0.0433%" height="15" fill="rgb(229,75,37)" fg:x="2183" fg:w="1"/><text x="94.8751%" y="255.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.04%)</title><rect x="94.6251%" y="229" width="0.0433%" height="15" fill="rgb(252,64,23)" fg:x="2183" fg:w="1"/><text x="94.8751%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (3 samples, 0.13%)</title><rect x="94.6251%" y="325" width="0.1300%" height="15" fill="rgb(232,162,48)" fg:x="2183" fg:w="3"/><text x="94.8751%" y="335.50"></text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (3 samples, 0.13%)</title><rect x="94.6251%" y="309" width="0.1300%" height="15" fill="rgb(246,160,12)" fg:x="2183" fg:w="3"/><text x="94.8751%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (3 samples, 0.13%)</title><rect x="94.6251%" y="293" width="0.1300%" height="15" fill="rgb(247,166,0)" fg:x="2183" fg:w="3"/><text x="94.8751%" y="303.50"></text></g><g><title>core::iter::adapters::zip::TrustedRandomAccessNoCoerce::size (2 samples, 0.09%)</title><rect x="94.6684%" y="277" width="0.0867%" height="15" fill="rgb(249,219,21)" fg:x="2184" fg:w="2"/><text x="94.9184%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (2 samples, 0.09%)</title><rect x="94.6684%" y="261" width="0.0867%" height="15" fill="rgb(205,209,3)" fg:x="2184" fg:w="2"/><text x="94.9184%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (1 samples, 0.04%)</title><rect x="94.7117%" y="245" width="0.0433%" height="15" fill="rgb(243,44,1)" fg:x="2185" fg:w="1"/><text x="94.9617%" y="255.50"></text></g><g><title>&lt;[T] as subtle::ConstantTimeEq&gt;::ct_eq (9 samples, 0.39%)</title><rect x="94.4083%" y="341" width="0.3901%" height="15" fill="rgb(206,159,16)" fg:x="2178" fg:w="9"/><text x="94.6583%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (1 samples, 0.04%)</title><rect x="94.7551%" y="325" width="0.0433%" height="15" fill="rgb(244,77,30)" fg:x="2186" fg:w="1"/><text x="95.0051%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (1 samples, 0.04%)</title><rect x="94.8851%" y="213" width="0.0433%" height="15" fill="rgb(218,69,12)" fg:x="2189" fg:w="1"/><text x="95.1351%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.13%)</title><rect x="94.8418%" y="261" width="0.1300%" height="15" fill="rgb(212,87,7)" fg:x="2188" fg:w="3"/><text x="95.0918%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.13%)</title><rect x="94.8418%" y="245" width="0.1300%" height="15" fill="rgb(245,114,25)" fg:x="2188" fg:w="3"/><text x="95.0918%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (3 samples, 0.13%)</title><rect x="94.8418%" y="229" width="0.1300%" height="15" fill="rgb(210,61,42)" fg:x="2188" fg:w="3"/><text x="95.0918%" y="239.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="94.9285%" y="213" width="0.0433%" height="15" fill="rgb(211,52,33)" fg:x="2190" fg:w="1"/><text x="95.1785%" y="223.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (1 samples, 0.04%)</title><rect x="94.9285%" y="197" width="0.0433%" height="15" fill="rgb(234,58,33)" fg:x="2190" fg:w="1"/><text x="95.1785%" y="207.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (1 samples, 0.04%)</title><rect x="94.9285%" y="181" width="0.0433%" height="15" fill="rgb(220,115,36)" fg:x="2190" fg:w="1"/><text x="95.1785%" y="191.50"></text></g><g><title>chacha20poly1305::cipher::Cipher&lt;C&gt;::decrypt_in_place_detached (1,964 samples, 85.13%)</title><rect x="9.8830%" y="373" width="85.1322%" height="15" fill="rgb(243,153,54)" fg:x="228" fg:w="1964"/><text x="10.1330%" y="383.50">chacha20poly1305::cipher::Cipher&lt;C&gt;::decrypt_in_place_detached</text></g><g><title>universal_hash::UniversalHash::verify (14 samples, 0.61%)</title><rect x="94.4083%" y="357" width="0.6068%" height="15" fill="rgb(251,47,18)" fg:x="2178" fg:w="14"/><text x="94.6583%" y="367.50"></text></g><g><title>&lt;poly1305::Poly1305 as universal_hash::UniversalHash&gt;::finalize (5 samples, 0.22%)</title><rect x="94.7984%" y="341" width="0.2167%" height="15" fill="rgb(242,102,42)" fg:x="2187" fg:w="5"/><text x="95.0484%" y="351.50"></text></g><g><title>&lt;poly1305::backend::autodetect::State as universal_hash::UniversalHash&gt;::finalize (5 samples, 0.22%)</title><rect x="94.7984%" y="325" width="0.2167%" height="15" fill="rgb(234,31,38)" fg:x="2187" fg:w="5"/><text x="95.0484%" y="335.50"></text></g><g><title>poly1305::backend::soft::State::finalize_mut (5 samples, 0.22%)</title><rect x="94.7984%" y="309" width="0.2167%" height="15" fill="rgb(221,117,51)" fg:x="2187" fg:w="5"/><text x="95.0484%" y="319.50"></text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default (4 samples, 0.17%)</title><rect x="94.8418%" y="293" width="0.1734%" height="15" fill="rgb(212,20,18)" fg:x="2188" fg:w="4"/><text x="95.0918%" y="303.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (4 samples, 0.17%)</title><rect x="94.8418%" y="277" width="0.1734%" height="15" fill="rgb(245,133,36)" fg:x="2188" fg:w="4"/><text x="95.0918%" y="287.50"></text></g><g><title>generic_array::ArrayBuilder&lt;T,N&gt;::iter_position (1 samples, 0.04%)</title><rect x="94.9718%" y="261" width="0.0433%" height="15" fill="rgb(212,6,19)" fg:x="2191" fg:w="1"/><text x="95.2218%" y="271.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.04%)</title><rect x="94.9718%" y="245" width="0.0433%" height="15" fill="rgb(218,1,36)" fg:x="2191" fg:w="1"/><text x="95.2218%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (1 samples, 0.04%)</title><rect x="94.9718%" y="229" width="0.0433%" height="15" fill="rgb(246,84,54)" fg:x="2191" fg:w="1"/><text x="95.2218%" y="239.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1 samples, 0.04%)</title><rect x="95.0152%" y="293" width="0.0433%" height="15" fill="rgb(242,110,6)" fg:x="2192" fg:w="1"/><text x="95.2652%" y="303.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.09%)</title><rect x="95.0152%" y="325" width="0.0867%" height="15" fill="rgb(214,47,5)" fg:x="2192" fg:w="2"/><text x="95.2652%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.09%)</title><rect x="95.0152%" y="309" width="0.0867%" height="15" fill="rgb(218,159,25)" fg:x="2192" fg:w="2"/><text x="95.2652%" y="319.50"></text></g><g><title>core::mem::replace (1 samples, 0.04%)</title><rect x="95.0585%" y="293" width="0.0433%" height="15" fill="rgb(215,211,28)" fg:x="2193" fg:w="1"/><text x="95.3085%" y="303.50"></text></g><g><title>&lt;[Z] as zeroize::Zeroize&gt;::zeroize (3 samples, 0.13%)</title><rect x="95.0152%" y="357" width="0.1300%" height="15" fill="rgb(238,59,32)" fg:x="2192" fg:w="3"/><text x="95.2652%" y="367.50"></text></g><g><title>zeroize::volatile_set (3 samples, 0.13%)</title><rect x="95.0152%" y="341" width="0.1300%" height="15" fill="rgb(226,82,3)" fg:x="2192" fg:w="3"/><text x="95.2652%" y="351.50"></text></g><g><title>core::ptr::write_volatile (1 samples, 0.04%)</title><rect x="95.1019%" y="325" width="0.0433%" height="15" fill="rgb(240,164,32)" fg:x="2194" fg:w="1"/><text x="95.3519%" y="335.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.09%)</title><rect x="95.1452%" y="357" width="0.0867%" height="15" fill="rgb(232,46,7)" fg:x="2195" fg:w="2"/><text x="95.3952%" y="367.50"></text></g><g><title>core::slice::raw::from_raw_parts (2 samples, 0.09%)</title><rect x="95.1452%" y="341" width="0.0867%" height="15" fill="rgb(229,129,53)" fg:x="2195" fg:w="2"/><text x="95.3952%" y="351.50"></text></g><g><title>core::ptr::slice_from_raw_parts (1 samples, 0.04%)</title><rect x="95.1886%" y="325" width="0.0433%" height="15" fill="rgb(234,188,29)" fg:x="2196" fg:w="1"/><text x="95.4386%" y="335.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (1 samples, 0.04%)</title><rect x="95.1886%" y="309" width="0.0433%" height="15" fill="rgb(246,141,4)" fg:x="2196" fg:w="1"/><text x="95.4386%" y="319.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (2 samples, 0.09%)</title><rect x="95.3186%" y="309" width="0.0867%" height="15" fill="rgb(229,23,39)" fg:x="2199" fg:w="2"/><text x="95.5686%" y="319.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (1 samples, 0.04%)</title><rect x="95.3619%" y="293" width="0.0433%" height="15" fill="rgb(206,12,3)" fg:x="2200" fg:w="1"/><text x="95.6119%" y="303.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.04%)</title><rect x="95.3619%" y="277" width="0.0433%" height="15" fill="rgb(252,226,20)" fg:x="2200" fg:w="1"/><text x="95.6119%" y="287.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (1 samples, 0.04%)</title><rect x="95.3619%" y="261" width="0.0433%" height="15" fill="rgb(216,123,35)" fg:x="2200" fg:w="1"/><text x="95.6119%" y="271.50"></text></g><g><title>&lt;poly1305::backend::soft::State as core::default::Default&gt;::default (1 samples, 0.04%)</title><rect x="95.4053%" y="309" width="0.0433%" height="15" fill="rgb(212,68,40)" fg:x="2201" fg:w="1"/><text x="95.6553%" y="319.50"></text></g><g><title>core::array::&lt;impl core::default::Default for [T: _]&gt;::default (1 samples, 0.04%)</title><rect x="95.4053%" y="293" width="0.0433%" height="15" fill="rgb(254,125,32)" fg:x="2201" fg:w="1"/><text x="95.6553%" y="303.50"></text></g><g><title>&lt;poly1305::Poly1305 as crypto_common::KeyInit&gt;::new (6 samples, 0.26%)</title><rect x="95.2319%" y="357" width="0.2601%" height="15" fill="rgb(253,97,22)" fg:x="2197" fg:w="6"/><text x="95.4819%" y="367.50"></text></g><g><title>poly1305::backend::autodetect::State::new (6 samples, 0.26%)</title><rect x="95.2319%" y="341" width="0.2601%" height="15" fill="rgb(241,101,14)" fg:x="2197" fg:w="6"/><text x="95.4819%" y="351.50"></text></g><g><title>poly1305::backend::soft::State::new (6 samples, 0.26%)</title><rect x="95.2319%" y="325" width="0.2601%" height="15" fill="rgb(238,103,29)" fg:x="2197" fg:w="6"/><text x="95.4819%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.04%)</title><rect x="95.4486%" y="309" width="0.0433%" height="15" fill="rgb(233,195,47)" fg:x="2202" fg:w="1"/><text x="95.6986%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.04%)</title><rect x="95.4486%" y="293" width="0.0433%" height="15" fill="rgb(246,218,30)" fg:x="2202" fg:w="1"/><text x="95.6986%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.04%)</title><rect x="95.4486%" y="277" width="0.0433%" height="15" fill="rgb(219,145,47)" fg:x="2202" fg:w="1"/><text x="95.6986%" y="287.50"></text></g><g><title>core::ptr::slice_from_raw_parts (1 samples, 0.04%)</title><rect x="95.4486%" y="261" width="0.0433%" height="15" fill="rgb(243,12,26)" fg:x="2202" fg:w="1"/><text x="95.6986%" y="271.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (1 samples, 0.04%)</title><rect x="95.4486%" y="245" width="0.0433%" height="15" fill="rgb(214,87,16)" fg:x="2202" fg:w="1"/><text x="95.6986%" y="255.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.04%)</title><rect x="95.4920%" y="325" width="0.0433%" height="15" fill="rgb(208,99,42)" fg:x="2203" fg:w="1"/><text x="95.7420%" y="335.50"></text></g><g><title>cipher::stream_core::StreamCipherCore::apply_keystream_blocks_inout (2 samples, 0.09%)</title><rect x="95.5353%" y="309" width="0.0867%" height="15" fill="rgb(253,99,2)" fg:x="2204" fg:w="2"/><text x="95.7853%" y="319.50"></text></g><g><title>&lt;chacha20::xchacha::XChaChaCore&lt;R&gt; as cipher::stream_core::StreamCipherCore&gt;::process_with_backend (1 samples, 0.04%)</title><rect x="95.5787%" y="293" width="0.0433%" height="15" fill="rgb(220,168,23)" fg:x="2205" fg:w="1"/><text x="95.8287%" y="303.50"></text></g><g><title>&lt;chacha20::ChaChaCore&lt;R&gt; as cipher::stream_core::StreamCipherCore&gt;::process_with_backend (1 samples, 0.04%)</title><rect x="95.5787%" y="277" width="0.0433%" height="15" fill="rgb(242,38,24)" fg:x="2205" fg:w="1"/><text x="95.8287%" y="287.50"></text></g><g><title>chacha20::backends::sse2::inner (1 samples, 0.04%)</title><rect x="95.5787%" y="261" width="0.0433%" height="15" fill="rgb(225,182,9)" fg:x="2205" fg:w="1"/><text x="95.8287%" y="271.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.04%)</title><rect x="95.7521%" y="197" width="0.0433%" height="15" fill="rgb(243,178,37)" fg:x="2209" fg:w="1"/><text x="96.0021%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_add_epi32 (3 samples, 0.13%)</title><rect x="96.2722%" y="165" width="0.1300%" height="15" fill="rgb(232,139,19)" fg:x="2221" fg:w="3"/><text x="96.5222%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_slli_epi32 (2 samples, 0.09%)</title><rect x="96.4023%" y="165" width="0.0867%" height="15" fill="rgb(225,201,24)" fg:x="2224" fg:w="2"/><text x="96.6523%" y="175.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i32x4 (2 samples, 0.09%)</title><rect x="96.4023%" y="149" width="0.0867%" height="15" fill="rgb(221,47,46)" fg:x="2224" fg:w="2"/><text x="96.6523%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_srli_epi32 (1 samples, 0.04%)</title><rect x="96.4889%" y="165" width="0.0433%" height="15" fill="rgb(249,23,13)" fg:x="2226" fg:w="1"/><text x="96.7389%" y="175.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i32x4 (1 samples, 0.04%)</title><rect x="96.4889%" y="149" width="0.0433%" height="15" fill="rgb(219,9,5)" fg:x="2226" fg:w="1"/><text x="96.7389%" y="159.50"></text></g><g><title>chacha20::backends::sse2::add_xor_rot (18 samples, 0.78%)</title><rect x="95.7954%" y="181" width="0.7802%" height="15" fill="rgb(254,171,16)" fg:x="2210" fg:w="18"/><text x="96.0454%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_xor_si128 (1 samples, 0.04%)</title><rect x="96.5323%" y="165" width="0.0433%" height="15" fill="rgb(230,171,20)" fg:x="2227" fg:w="1"/><text x="96.7823%" y="175.50"></text></g><g><title>chacha20::backends::sse2::cols_to_rows (1 samples, 0.04%)</title><rect x="96.5756%" y="181" width="0.0433%" height="15" fill="rgb(210,71,41)" fg:x="2228" fg:w="1"/><text x="96.8256%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_shuffle_epi32 (1 samples, 0.04%)</title><rect x="96.5756%" y="165" width="0.0433%" height="15" fill="rgb(206,173,20)" fg:x="2228" fg:w="1"/><text x="96.8256%" y="175.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i32x4 (1 samples, 0.04%)</title><rect x="96.5756%" y="149" width="0.0433%" height="15" fill="rgb(233,88,34)" fg:x="2228" fg:w="1"/><text x="96.8256%" y="159.50"></text></g><g><title>chacha20::backends::sse2::double_quarter_round (20 samples, 0.87%)</title><rect x="95.7954%" y="197" width="0.8669%" height="15" fill="rgb(223,209,46)" fg:x="2210" fg:w="20"/><text x="96.0454%" y="207.50"></text></g><g><title>chacha20::backends::sse2::rows_to_cols (1 samples, 0.04%)</title><rect x="96.6190%" y="181" width="0.0433%" height="15" fill="rgb(250,43,18)" fg:x="2229" fg:w="1"/><text x="96.8690%" y="191.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1 samples, 0.04%)</title><rect x="96.7057%" y="165" width="0.0433%" height="15" fill="rgb(208,13,10)" fg:x="2231" fg:w="1"/><text x="96.9557%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.04%)</title><rect x="96.7490%" y="165" width="0.0433%" height="15" fill="rgb(212,200,36)" fg:x="2232" fg:w="1"/><text x="96.9990%" y="175.50"></text></g><g><title>cipher::stream_core::StreamCipherCore::write_keystream_block (28 samples, 1.21%)</title><rect x="95.6220%" y="309" width="1.2137%" height="15" fill="rgb(225,90,30)" fg:x="2206" fg:w="28"/><text x="95.8720%" y="319.50"></text></g><g><title>&lt;chacha20::xchacha::XChaChaCore&lt;R&gt; as cipher::stream_core::StreamCipherCore&gt;::process_with_backend (28 samples, 1.21%)</title><rect x="95.6220%" y="293" width="1.2137%" height="15" fill="rgb(236,182,39)" fg:x="2206" fg:w="28"/><text x="95.8720%" y="303.50"></text></g><g><title>&lt;chacha20::ChaChaCore&lt;R&gt; as cipher::stream_core::StreamCipherCore&gt;::process_with_backend (28 samples, 1.21%)</title><rect x="95.6220%" y="277" width="1.2137%" height="15" fill="rgb(212,144,35)" fg:x="2206" fg:w="28"/><text x="95.8720%" y="287.50"></text></g><g><title>chacha20::backends::sse2::inner (28 samples, 1.21%)</title><rect x="95.6220%" y="261" width="1.2137%" height="15" fill="rgb(228,63,44)" fg:x="2206" fg:w="28"/><text x="95.8720%" y="271.50"></text></g><g><title>&lt;cipher::stream_core::WriteBlockCtx&lt;BS&gt; as cipher::stream_core::StreamClosure&gt;::call (28 samples, 1.21%)</title><rect x="95.6220%" y="245" width="1.2137%" height="15" fill="rgb(228,109,6)" fg:x="2206" fg:w="28"/><text x="95.8720%" y="255.50"></text></g><g><title>&lt;chacha20::backends::sse2::Backend&lt;R&gt; as cipher::stream_core::StreamBackend&gt;::gen_ks_block (27 samples, 1.17%)</title><rect x="95.6654%" y="229" width="1.1704%" height="15" fill="rgb(238,117,24)" fg:x="2207" fg:w="27"/><text x="95.9154%" y="239.50"></text></g><g><title>chacha20::backends::sse2::rounds (27 samples, 1.17%)</title><rect x="95.6654%" y="213" width="1.1704%" height="15" fill="rgb(242,26,26)" fg:x="2207" fg:w="27"/><text x="95.9154%" y="223.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4 samples, 0.17%)</title><rect x="96.6623%" y="197" width="0.1734%" height="15" fill="rgb(221,92,48)" fg:x="2230" fg:w="4"/><text x="96.9123%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3 samples, 0.13%)</title><rect x="96.7057%" y="181" width="0.1300%" height="15" fill="rgb(209,209,32)" fg:x="2231" fg:w="3"/><text x="96.9557%" y="191.50"></text></g><g><title>core::mem::replace (1 samples, 0.04%)</title><rect x="96.7924%" y="165" width="0.0433%" height="15" fill="rgb(221,70,22)" fg:x="2233" fg:w="1"/><text x="97.0424%" y="175.50"></text></g><g><title>cipher::stream_wrapper::StreamCipherCoreWrapper&lt;T&gt;::check_remaining (2 samples, 0.09%)</title><rect x="96.8357%" y="309" width="0.0867%" height="15" fill="rgb(248,145,5)" fg:x="2234" fg:w="2"/><text x="97.0857%" y="319.50"></text></g><g><title>&lt;chacha20::xchacha::XChaChaCore&lt;R&gt; as cipher::stream_core::StreamCipherCore&gt;::remaining_blocks (1 samples, 0.04%)</title><rect x="96.8791%" y="293" width="0.0433%" height="15" fill="rgb(226,116,26)" fg:x="2235" fg:w="1"/><text x="97.1291%" y="303.50"></text></g><g><title>&lt;chacha20::ChaChaCore&lt;R&gt; as cipher::stream_core::StreamCipherCore&gt;::remaining_blocks (1 samples, 0.04%)</title><rect x="96.8791%" y="277" width="0.0433%" height="15" fill="rgb(244,5,17)" fg:x="2235" fg:w="1"/><text x="97.1291%" y="287.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::ok (1 samples, 0.04%)</title><rect x="96.8791%" y="261" width="0.0433%" height="15" fill="rgb(252,159,33)" fg:x="2235" fg:w="1"/><text x="97.1291%" y="271.50"></text></g><g><title>cipher::stream::StreamCipher::apply_keystream (39 samples, 1.69%)</title><rect x="95.4920%" y="357" width="1.6905%" height="15" fill="rgb(206,71,0)" fg:x="2203" fg:w="39"/><text x="95.7420%" y="367.50"></text></g><g><title>cipher::stream::StreamCipher::try_apply_keystream (39 samples, 1.69%)</title><rect x="95.4920%" y="341" width="1.6905%" height="15" fill="rgb(233,118,54)" fg:x="2203" fg:w="39"/><text x="95.7420%" y="351.50"></text></g><g><title>&lt;cipher::stream_wrapper::StreamCipherCoreWrapper&lt;T&gt; as cipher::stream::StreamCipher&gt;::try_apply_keystream_inout (38 samples, 1.65%)</title><rect x="95.5353%" y="325" width="1.6472%" height="15" fill="rgb(234,83,48)" fg:x="2204" fg:w="38"/><text x="95.7853%" y="335.50"></text></g><g><title>inout::inout_buf::InOutBuf&lt;u8&gt;::xor_in2out (6 samples, 0.26%)</title><rect x="96.9224%" y="309" width="0.2601%" height="15" fill="rgb(228,3,54)" fg:x="2236" fg:w="6"/><text x="97.1724%" y="319.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.09%)</title><rect x="97.0958%" y="293" width="0.0867%" height="15" fill="rgb(226,155,13)" fg:x="2240" fg:w="2"/><text x="97.3458%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.09%)</title><rect x="97.0958%" y="277" width="0.0867%" height="15" fill="rgb(241,28,37)" fg:x="2240" fg:w="2"/><text x="97.3458%" y="287.50"></text></g><g><title>core::mem::replace (2 samples, 0.09%)</title><rect x="97.0958%" y="261" width="0.0867%" height="15" fill="rgb(233,93,10)" fg:x="2240" fg:w="2"/><text x="97.3458%" y="271.50"></text></g><g><title>core::ptr::read (1 samples, 0.04%)</title><rect x="97.1391%" y="245" width="0.0433%" height="15" fill="rgb(225,113,19)" fg:x="2241" fg:w="1"/><text x="97.3891%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (5 samples, 0.22%)</title><rect x="97.2692%" y="277" width="0.2167%" height="15" fill="rgb(241,2,18)" fg:x="2244" fg:w="5"/><text x="97.5192%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (5 samples, 0.22%)</title><rect x="97.2692%" y="261" width="0.2167%" height="15" fill="rgb(228,207,21)" fg:x="2244" fg:w="5"/><text x="97.5192%" y="271.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate::{{closure}} (4 samples, 0.17%)</title><rect x="97.3125%" y="245" width="0.1734%" height="15" fill="rgb(213,211,35)" fg:x="2245" fg:w="4"/><text x="97.5625%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.04%)</title><rect x="97.5726%" y="245" width="0.0433%" height="15" fill="rgb(209,83,10)" fg:x="2251" fg:w="1"/><text x="97.8226%" y="255.50"></text></g><g><title>tftp::server::connection::Connection&lt;R,W,S&gt;::receive_packet (2,144 samples, 92.93%)</title><rect x="4.7248%" y="437" width="92.9345%" height="15" fill="rgb(209,164,1)" fg:x="109" fg:w="2144"/><text x="4.9748%" y="447.50">tftp::server::connection::Connection&lt;R,W,S&gt;::receive_packet</text></g><g><title>tftp::encryption::Encryptor::decrypt (2,144 samples, 92.93%)</title><rect x="4.7248%" y="421" width="92.9345%" height="15" fill="rgb(213,184,43)" fg:x="109" fg:w="2144"/><text x="4.9748%" y="431.50">tftp::encryption::Encryptor::decrypt</text></g><g><title>aead::AeadInPlace::decrypt_in_place (2,144 samples, 92.93%)</title><rect x="4.7248%" y="405" width="92.9345%" height="15" fill="rgb(231,61,34)" fg:x="109" fg:w="2144"/><text x="4.9748%" y="415.50">aead::AeadInPlace::decrypt_in_place</text></g><g><title>&lt;chacha20poly1305::ChaChaPoly1305&lt;C,N&gt; as aead::AeadInPlace&gt;::decrypt_in_place_detached (2,144 samples, 92.93%)</title><rect x="4.7248%" y="389" width="92.9345%" height="15" fill="rgb(235,75,3)" fg:x="109" fg:w="2144"/><text x="4.9748%" y="399.50">&lt;chacha20poly1305::ChaChaPoly1305&lt;C,N&gt; as aead::AeadInPlace&gt;::decrypt_in_place_detached</text></g><g><title>chacha20poly1305::cipher::Cipher&lt;C&gt;::new (61 samples, 2.64%)</title><rect x="95.0152%" y="373" width="2.6441%" height="15" fill="rgb(220,106,47)" fg:x="2192" fg:w="61"/><text x="95.2652%" y="383.50">ch..</text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default (11 samples, 0.48%)</title><rect x="97.1825%" y="357" width="0.4768%" height="15" fill="rgb(210,196,33)" fg:x="2242" fg:w="11"/><text x="97.4325%" y="367.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (11 samples, 0.48%)</title><rect x="97.1825%" y="341" width="0.4768%" height="15" fill="rgb(229,154,42)" fg:x="2242" fg:w="11"/><text x="97.4325%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (11 samples, 0.48%)</title><rect x="97.1825%" y="325" width="0.4768%" height="15" fill="rgb(228,114,26)" fg:x="2242" fg:w="11"/><text x="97.4325%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11 samples, 0.48%)</title><rect x="97.1825%" y="309" width="0.4768%" height="15" fill="rgb(208,144,1)" fg:x="2242" fg:w="11"/><text x="97.4325%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (11 samples, 0.48%)</title><rect x="97.1825%" y="293" width="0.4768%" height="15" fill="rgb(239,112,37)" fg:x="2242" fg:w="11"/><text x="97.4325%" y="303.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.17%)</title><rect x="97.4859%" y="277" width="0.1734%" height="15" fill="rgb(210,96,50)" fg:x="2249" fg:w="4"/><text x="97.7359%" y="287.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (4 samples, 0.17%)</title><rect x="97.4859%" y="261" width="0.1734%" height="15" fill="rgb(222,178,2)" fg:x="2249" fg:w="4"/><text x="97.7359%" y="271.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (1 samples, 0.04%)</title><rect x="97.6160%" y="245" width="0.0433%" height="15" fill="rgb(226,74,18)" fg:x="2252" fg:w="1"/><text x="97.8660%" y="255.50"></text></g><g><title>tftp::encryption::InitialKeys::finalize (1 samples, 0.04%)</title><rect x="97.6593%" y="389" width="0.0433%" height="15" fill="rgb(225,67,54)" fg:x="2253" fg:w="1"/><text x="97.9093%" y="399.50"></text></g><g><title>x25519_dalek::x25519::EphemeralSecret::diffie_hellman (1 samples, 0.04%)</title><rect x="97.6593%" y="373" width="0.0433%" height="15" fill="rgb(251,92,32)" fg:x="2253" fg:w="1"/><text x="97.9093%" y="383.50"></text></g><g><title>curve25519_dalek::montgomery::&lt;impl core::ops::arith::Mul&lt;curve25519_dalek::montgomery::MontgomeryPoint&gt; for curve25519_dalek::scalar::Scalar&gt;::mul (1 samples, 0.04%)</title><rect x="97.6593%" y="357" width="0.0433%" height="15" fill="rgb(228,149,22)" fg:x="2253" fg:w="1"/><text x="97.9093%" y="367.50"></text></g><g><title>curve25519_dalek::montgomery::&lt;impl core::ops::arith::Mul&lt;&amp;curve25519_dalek::montgomery::MontgomeryPoint&gt; for &amp;curve25519_dalek::scalar::Scalar&gt;::mul (1 samples, 0.04%)</title><rect x="97.6593%" y="341" width="0.0433%" height="15" fill="rgb(243,54,13)" fg:x="2253" fg:w="1"/><text x="97.9093%" y="351.50"></text></g><g><title>&lt;&amp;curve25519_dalek::montgomery::MontgomeryPoint as core::ops::arith::Mul&lt;&amp;curve25519_dalek::scalar::Scalar&gt;&gt;::mul (1 samples, 0.04%)</title><rect x="97.6593%" y="325" width="0.0433%" height="15" fill="rgb(243,180,28)" fg:x="2253" fg:w="1"/><text x="97.9093%" y="335.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.04%)</title><rect x="97.6593%" y="309" width="0.0433%" height="15" fill="rgb(208,167,24)" fg:x="2253" fg:w="1"/><text x="97.9093%" y="319.50"></text></g><g><title>&lt;subtle::Choice as core::convert::From&lt;u8&gt;&gt;::from (1 samples, 0.04%)</title><rect x="97.6593%" y="293" width="0.0433%" height="15" fill="rgb(245,73,45)" fg:x="2253" fg:w="1"/><text x="97.9093%" y="303.50"></text></g><g><title>tftp::server::connection::ConnectionBuilder::with_request (2 samples, 0.09%)</title><rect x="97.6593%" y="437" width="0.0867%" height="15" fill="rgb(237,203,48)" fg:x="2253" fg:w="2"/><text x="97.9093%" y="447.50"></text></g><g><title>tftp::server::extensions::create_options (2 samples, 0.09%)</title><rect x="97.6593%" y="421" width="0.0867%" height="15" fill="rgb(211,197,16)" fg:x="2253" fg:w="2"/><text x="97.9093%" y="431.50"></text></g><g><title>tftp::key_management::create_finalized_keys (2 samples, 0.09%)</title><rect x="97.6593%" y="405" width="0.0867%" height="15" fill="rgb(243,99,51)" fg:x="2253" fg:w="2"/><text x="97.9093%" y="415.50"></text></g><g><title>tftp::key_management::create_initial_keys (1 samples, 0.04%)</title><rect x="97.7026%" y="389" width="0.0433%" height="15" fill="rgb(215,123,29)" fg:x="2254" fg:w="1"/><text x="97.9526%" y="399.50"></text></g><g><title>&lt;x25519_dalek::x25519::PublicKey as core::convert::From&lt;&amp;x25519_dalek::x25519::EphemeralSecret&gt;&gt;::from (1 samples, 0.04%)</title><rect x="97.7026%" y="373" width="0.0433%" height="15" fill="rgb(239,186,37)" fg:x="2254" fg:w="1"/><text x="97.9526%" y="383.50"></text></g><g><title>&lt;&amp;curve25519_dalek::edwards::EdwardsBasepointTable as core::ops::arith::Mul&lt;&amp;curve25519_dalek::scalar::Scalar&gt;&gt;::mul (1 samples, 0.04%)</title><rect x="97.7026%" y="357" width="0.0433%" height="15" fill="rgb(252,136,39)" fg:x="2254" fg:w="1"/><text x="97.9526%" y="367.50"></text></g><g><title>curve25519_dalek::edwards::EdwardsBasepointTable::basepoint_mul (1 samples, 0.04%)</title><rect x="97.7026%" y="341" width="0.0433%" height="15" fill="rgb(223,213,32)" fg:x="2254" fg:w="1"/><text x="97.9526%" y="351.50"></text></g><g><title>curve25519_dalek::backend::serial::curve_models::&lt;impl core::ops::arith::Add&lt;&amp;curve25519_dalek::backend::serial::curve_models::AffineNielsPoint&gt; for &amp;curve25519_dalek::edwards::EdwardsPoint&gt;::add (1 samples, 0.04%)</title><rect x="97.7026%" y="325" width="0.0433%" height="15" fill="rgb(233,115,5)" fg:x="2254" fg:w="1"/><text x="97.9526%" y="335.50"></text></g><g><title>&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::Add&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::add (1 samples, 0.04%)</title><rect x="97.7026%" y="309" width="0.0433%" height="15" fill="rgb(207,226,44)" fg:x="2254" fg:w="1"/><text x="97.9526%" y="319.50"></text></g><g><title>&lt;curve25519_dalek::backend::serial::u64::field::FieldElement51 as core::ops::arith::AddAssign&lt;&amp;curve25519_dalek::backend::serial::u64::field::FieldElement51&gt;&gt;::add_assign (1 samples, 0.04%)</title><rect x="97.7026%" y="293" width="0.0433%" height="15" fill="rgb(208,126,0)" fg:x="2254" fg:w="1"/><text x="97.9526%" y="303.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.04%)</title><rect x="97.7026%" y="277" width="0.0433%" height="15" fill="rgb(244,66,21)" fg:x="2254" fg:w="1"/><text x="97.9526%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.04%)</title><rect x="97.7026%" y="261" width="0.0433%" height="15" fill="rgb(222,97,12)" fg:x="2254" fg:w="1"/><text x="97.9526%" y="271.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1 samples, 0.04%)</title><rect x="97.7026%" y="245" width="0.0433%" height="15" fill="rgb(219,213,19)" fg:x="2254" fg:w="1"/><text x="97.9526%" y="255.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.04%)</title><rect x="97.7893%" y="293" width="0.0433%" height="15" fill="rgb(252,169,30)" fg:x="2256" fg:w="1"/><text x="98.0393%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::retain::{{closure}} (2 samples, 0.09%)</title><rect x="97.8327%" y="293" width="0.0867%" height="15" fill="rgb(206,32,51)" fg:x="2257" fg:w="2"/><text x="98.0827%" y="303.50"></text></g><g><title>tftp::server::server::send_data_blocks::{{closure}} (2 samples, 0.09%)</title><rect x="97.8327%" y="277" width="0.0867%" height="15" fill="rgb(250,172,42)" fg:x="2257" fg:w="2"/><text x="98.0827%" y="287.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.09%)</title><rect x="97.8327%" y="261" width="0.0867%" height="15" fill="rgb(209,34,43)" fg:x="2257" fg:w="2"/><text x="98.0827%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.09%)</title><rect x="97.8327%" y="245" width="0.0867%" height="15" fill="rgb(223,11,35)" fg:x="2257" fg:w="2"/><text x="98.0827%" y="255.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (3 samples, 0.13%)</title><rect x="97.9194%" y="277" width="0.1300%" height="15" fill="rgb(251,219,26)" fg:x="2259" fg:w="3"/><text x="98.1694%" y="287.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::new_kv (1 samples, 0.04%)</title><rect x="98.0061%" y="261" width="0.0433%" height="15" fill="rgb(231,119,3)" fg:x="2261" fg:w="1"/><text x="98.2561%" y="271.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_kv (5 samples, 0.22%)</title><rect x="97.9194%" y="293" width="0.2167%" height="15" fill="rgb(216,97,11)" fg:x="2259" fg:w="5"/><text x="98.1694%" y="303.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::forget_node_type (2 samples, 0.09%)</title><rect x="98.0494%" y="277" width="0.0867%" height="15" fill="rgb(223,59,9)" fg:x="2262" fg:w="2"/><text x="98.2994%" y="287.50"></text></g><g><title>tftp::server::server::send_data_blocks (10 samples, 0.43%)</title><rect x="97.7460%" y="437" width="0.4335%" height="15" fill="rgb(233,93,31)" fg:x="2255" fg:w="10"/><text x="97.9960%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::retain (10 samples, 0.43%)</title><rect x="97.7460%" y="421" width="0.4335%" height="15" fill="rgb(239,81,33)" fg:x="2255" fg:w="10"/><text x="97.9960%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::DrainFilter&lt;std::net::socket_addr::SocketAddr,tftp::server::connection::Connection&lt;std::fs::File,std::fs::File,tftp::socket::StdSocket&gt;,alloc::collections::btree::map::BTreeMap&lt;std::net::socket_addr::SocketAddr,tftp::server::connection::Connection&lt;std::fs::File,std::fs::File,tftp::socket::StdSocket&gt;&gt;::retain&lt;tftp::server::server::send_data_blocks&lt;std::fs::File,std::fs::File,tftp::socket::StdSocket&gt;::{{closure}}&gt;::{{closure}}&gt;&gt; (10 samples, 0.43%)</title><rect x="97.7460%" y="405" width="0.4335%" height="15" fill="rgb(213,120,34)" fg:x="2255" fg:w="10"/><text x="97.9960%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::DrainFilter&lt;K,V,F,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.43%)</title><rect x="97.7460%" y="389" width="0.4335%" height="15" fill="rgb(243,49,53)" fg:x="2255" fg:w="10"/><text x="97.9960%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (10 samples, 0.43%)</title><rect x="97.7460%" y="373" width="0.4335%" height="15" fill="rgb(247,216,33)" fg:x="2255" fg:w="10"/><text x="97.9960%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (10 samples, 0.43%)</title><rect x="97.7460%" y="357" width="0.4335%" height="15" fill="rgb(226,26,14)" fg:x="2255" fg:w="10"/><text x="97.9960%" y="367.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.43%)</title><rect x="97.7460%" y="341" width="0.4335%" height="15" fill="rgb(215,49,53)" fg:x="2255" fg:w="10"/><text x="97.9960%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::DrainFilter&lt;K,V,F,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.43%)</title><rect x="97.7460%" y="325" width="0.4335%" height="15" fill="rgb(245,162,40)" fg:x="2255" fg:w="10"/><text x="97.9960%" y="335.50"></text></g><g><title>alloc::collections::btree::map::DrainFilterInner&lt;K,V&gt;::next (10 samples, 0.43%)</title><rect x="97.7460%" y="309" width="0.4335%" height="15" fill="rgb(229,68,17)" fg:x="2255" fg:w="10"/><text x="97.9960%" y="319.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_leaf_edge (1 samples, 0.04%)</title><rect x="98.1361%" y="293" width="0.0433%" height="15" fill="rgb(213,182,10)" fg:x="2264" fg:w="1"/><text x="98.3861%" y="303.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,Type&gt;::force (1 samples, 0.04%)</title><rect x="98.1361%" y="277" width="0.0433%" height="15" fill="rgb(245,125,30)" fg:x="2264" fg:w="1"/><text x="98.3861%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (1 samples, 0.04%)</title><rect x="98.1795%" y="405" width="0.0433%" height="15" fill="rgb(232,202,2)" fg:x="2265" fg:w="1"/><text x="98.4295%" y="415.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.04%)</title><rect x="98.1795%" y="389" width="0.0433%" height="15" fill="rgb(237,140,51)" fg:x="2265" fg:w="1"/><text x="98.4295%" y="399.50"></text></g><g><title>&lt;tftp::storage::FileWriter&lt;T&gt; as tftp::storage::BlockWriter&gt;::write_block (3 samples, 0.13%)</title><rect x="98.1795%" y="421" width="0.1300%" height="15" fill="rgb(236,157,25)" fg:x="2265" fg:w="3"/><text x="98.4295%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (2 samples, 0.09%)</title><rect x="98.2228%" y="405" width="0.0867%" height="15" fill="rgb(219,209,0)" fg:x="2266" fg:w="2"/><text x="98.4728%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.09%)</title><rect x="98.2228%" y="389" width="0.0867%" height="15" fill="rgb(240,116,54)" fg:x="2266" fg:w="2"/><text x="98.4728%" y="399.50"></text></g><g><title>&lt;tftp::packet::AckPacket as tftp::packet::ByteConverter&gt;::to_bytes (2 samples, 0.09%)</title><rect x="98.3528%" y="389" width="0.0867%" height="15" fill="rgb(216,10,36)" fg:x="2269" fg:w="2"/><text x="98.6028%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.09%)</title><rect x="98.3528%" y="373" width="0.0867%" height="15" fill="rgb(222,72,44)" fg:x="2269" fg:w="2"/><text x="98.6028%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 0.09%)</title><rect x="98.3528%" y="357" width="0.0867%" height="15" fill="rgb(232,159,9)" fg:x="2269" fg:w="2"/><text x="98.6028%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.04%)</title><rect x="98.3962%" y="341" width="0.0433%" height="15" fill="rgb(210,39,32)" fg:x="2270" fg:w="1"/><text x="98.6462%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.04%)</title><rect x="98.3962%" y="325" width="0.0433%" height="15" fill="rgb(216,194,45)" fg:x="2270" fg:w="1"/><text x="98.6462%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.04%)</title><rect x="98.3962%" y="309" width="0.0433%" height="15" fill="rgb(218,18,35)" fg:x="2270" fg:w="1"/><text x="98.6462%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.04%)</title><rect x="98.3962%" y="293" width="0.0433%" height="15" fill="rgb(207,83,51)" fg:x="2270" fg:w="1"/><text x="98.6462%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.04%)</title><rect x="98.3962%" y="277" width="0.0433%" height="15" fill="rgb(225,63,43)" fg:x="2270" fg:w="1"/><text x="98.6462%" y="287.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.04%)</title><rect x="98.3962%" y="261" width="0.0433%" height="15" fill="rgb(207,57,36)" fg:x="2270" fg:w="1"/><text x="98.6462%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::by_ref_sized::ByRefSized&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.04%)</title><rect x="98.3962%" y="245" width="0.0433%" height="15" fill="rgb(216,99,33)" fg:x="2270" fg:w="1"/><text x="98.6462%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.04%)</title><rect x="98.3962%" y="229" width="0.0433%" height="15" fill="rgb(225,42,16)" fg:x="2270" fg:w="1"/><text x="98.6462%" y="239.50"></text></g><g><title>&lt;core::const_closure::ConstFnMutClosure&lt;&amp;mut A,Function&gt; as core::ops::function::FnMut&lt;ClosureArguments&gt;&gt;::call_mut (1 samples, 0.04%)</title><rect x="98.3962%" y="213" width="0.0433%" height="15" fill="rgb(220,201,45)" fg:x="2270" fg:w="1"/><text x="98.6462%" y="223.50"></text></g><g><title>core::ops::function::Fn::call (1 samples, 0.04%)</title><rect x="98.3962%" y="197" width="0.0433%" height="15" fill="rgb(225,33,4)" fg:x="2270" fg:w="1"/><text x="98.6462%" y="207.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2_imp (1 samples, 0.04%)</title><rect x="98.3962%" y="181" width="0.0433%" height="15" fill="rgb(224,33,50)" fg:x="2270" fg:w="1"/><text x="98.6462%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.04%)</title><rect x="98.4829%" y="325" width="0.0433%" height="15" fill="rgb(246,198,51)" fg:x="2272" fg:w="1"/><text x="98.7329%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.04%)</title><rect x="98.4829%" y="309" width="0.0433%" height="15" fill="rgb(205,22,4)" fg:x="2272" fg:w="1"/><text x="98.7329%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.04%)</title><rect x="98.4829%" y="293" width="0.0433%" height="15" fill="rgb(206,3,8)" fg:x="2272" fg:w="1"/><text x="98.7329%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.04%)</title><rect x="98.4829%" y="277" width="0.0433%" height="15" fill="rgb(251,23,15)" fg:x="2272" fg:w="1"/><text x="98.7329%" y="287.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.04%)</title><rect x="98.4829%" y="261" width="0.0433%" height="15" fill="rgb(252,88,28)" fg:x="2272" fg:w="1"/><text x="98.7329%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::by_ref_sized::ByRefSized&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.04%)</title><rect x="98.4829%" y="245" width="0.0433%" height="15" fill="rgb(212,127,14)" fg:x="2272" fg:w="1"/><text x="98.7329%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.04%)</title><rect x="98.4829%" y="229" width="0.0433%" height="15" fill="rgb(247,145,37)" fg:x="2272" fg:w="1"/><text x="98.7329%" y="239.50"></text></g><g><title>&lt;core::const_closure::ConstFnMutClosure&lt;&amp;mut A,Function&gt; as core::ops::function::FnMut&lt;ClosureArguments&gt;&gt;::call_mut (1 samples, 0.04%)</title><rect x="98.4829%" y="213" width="0.0433%" height="15" fill="rgb(209,117,53)" fg:x="2272" fg:w="1"/><text x="98.7329%" y="223.50"></text></g><g><title>core::ops::function::Fn::call (1 samples, 0.04%)</title><rect x="98.4829%" y="197" width="0.0433%" height="15" fill="rgb(212,90,42)" fg:x="2272" fg:w="1"/><text x="98.7329%" y="207.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2_imp (1 samples, 0.04%)</title><rect x="98.4829%" y="181" width="0.0433%" height="15" fill="rgb(218,164,37)" fg:x="2272" fg:w="1"/><text x="98.7329%" y="191.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold::{{closure}} (1 samples, 0.04%)</title><rect x="98.4829%" y="165" width="0.0433%" height="15" fill="rgb(246,65,34)" fg:x="2272" fg:w="1"/><text x="98.7329%" y="175.50"></text></g><g><title>&lt;tftp::packet::Packet as tftp::packet::ByteConverter&gt;::to_bytes (5 samples, 0.22%)</title><rect x="98.3528%" y="405" width="0.2167%" height="15" fill="rgb(231,100,33)" fg:x="2269" fg:w="5"/><text x="98.6028%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.13%)</title><rect x="98.4395%" y="389" width="0.1300%" height="15" fill="rgb(228,126,14)" fg:x="2271" fg:w="3"/><text x="98.6895%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.13%)</title><rect x="98.4395%" y="373" width="0.1300%" height="15" fill="rgb(215,173,21)" fg:x="2271" fg:w="3"/><text x="98.6895%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.13%)</title><rect x="98.4395%" y="357" width="0.1300%" height="15" fill="rgb(210,6,40)" fg:x="2271" fg:w="3"/><text x="98.6895%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3 samples, 0.13%)</title><rect x="98.4395%" y="341" width="0.1300%" height="15" fill="rgb(212,48,18)" fg:x="2271" fg:w="3"/><text x="98.6895%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.04%)</title><rect x="98.5262%" y="325" width="0.0433%" height="15" fill="rgb(230,214,11)" fg:x="2273" fg:w="1"/><text x="98.7762%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.04%)</title><rect x="98.5262%" y="309" width="0.0433%" height="15" fill="rgb(254,105,39)" fg:x="2273" fg:w="1"/><text x="98.7762%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="98.5696%" y="389" width="0.0433%" height="15" fill="rgb(245,158,5)" fg:x="2274" fg:w="1"/><text x="98.8196%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.09%)</title><rect x="98.5696%" y="405" width="0.0867%" height="15" fill="rgb(249,208,11)" fg:x="2274" fg:w="2"/><text x="98.8196%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.04%)</title><rect x="98.6129%" y="389" width="0.0433%" height="15" fill="rgb(210,39,28)" fg:x="2275" fg:w="1"/><text x="98.8629%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="98.6129%" y="373" width="0.0433%" height="15" fill="rgb(211,56,53)" fg:x="2275" fg:w="1"/><text x="98.8629%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="98.6129%" y="357" width="0.0433%" height="15" fill="rgb(226,201,30)" fg:x="2275" fg:w="1"/><text x="98.8629%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="98.6129%" y="341" width="0.0433%" height="15" fill="rgb(239,101,34)" fg:x="2275" fg:w="1"/><text x="98.8629%" y="351.50"></text></g><g><title>cfree (1 samples, 0.04%)</title><rect x="98.6129%" y="325" width="0.0433%" height="15" fill="rgb(226,209,5)" fg:x="2275" fg:w="1"/><text x="98.8629%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as aead::Buffer&gt;::extend_from_slice (1 samples, 0.04%)</title><rect x="98.6563%" y="373" width="0.0433%" height="15" fill="rgb(250,105,47)" fg:x="2276" fg:w="1"/><text x="98.9063%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.04%)</title><rect x="98.6563%" y="357" width="0.0433%" height="15" fill="rgb(230,72,3)" fg:x="2276" fg:w="1"/><text x="98.9063%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.04%)</title><rect x="98.6563%" y="341" width="0.0433%" height="15" fill="rgb(232,218,39)" fg:x="2276" fg:w="1"/><text x="98.9063%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.04%)</title><rect x="98.6563%" y="325" width="0.0433%" height="15" fill="rgb(248,166,6)" fg:x="2276" fg:w="1"/><text x="98.9063%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.04%)</title><rect x="98.6563%" y="309" width="0.0433%" height="15" fill="rgb(247,89,20)" fg:x="2276" fg:w="1"/><text x="98.9063%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.04%)</title><rect x="98.6563%" y="293" width="0.0433%" height="15" fill="rgb(248,130,54)" fg:x="2276" fg:w="1"/><text x="98.9063%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.04%)</title><rect x="98.6563%" y="277" width="0.0433%" height="15" fill="rgb(234,196,4)" fg:x="2276" fg:w="1"/><text x="98.9063%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.04%)</title><rect x="98.6563%" y="261" width="0.0433%" height="15" fill="rgb(250,143,31)" fg:x="2276" fg:w="1"/><text x="98.9063%" y="271.50"></text></g><g><title>core::cmp::max (1 samples, 0.04%)</title><rect x="98.6563%" y="245" width="0.0433%" height="15" fill="rgb(211,110,34)" fg:x="2276" fg:w="1"/><text x="98.9063%" y="255.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.04%)</title><rect x="98.6563%" y="229" width="0.0433%" height="15" fill="rgb(215,124,48)" fg:x="2276" fg:w="1"/><text x="98.9063%" y="239.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.04%)</title><rect x="98.6563%" y="213" width="0.0433%" height="15" fill="rgb(216,46,13)" fg:x="2276" fg:w="1"/><text x="98.9063%" y="223.50"></text></g><g><title>&lt;chacha20::ChaChaCore&lt;R&gt; as crypto_common::KeyIvInit&gt;::new (1 samples, 0.04%)</title><rect x="98.6996%" y="325" width="0.0433%" height="15" fill="rgb(205,184,25)" fg:x="2277" fg:w="1"/><text x="98.9496%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (1 samples, 0.04%)</title><rect x="98.6996%" y="309" width="0.0433%" height="15" fill="rgb(228,1,10)" fg:x="2277" fg:w="1"/><text x="98.9496%" y="319.50"></text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (1 samples, 0.04%)</title><rect x="98.6996%" y="293" width="0.0433%" height="15" fill="rgb(213,116,27)" fg:x="2277" fg:w="1"/><text x="98.9496%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (1 samples, 0.04%)</title><rect x="98.6996%" y="277" width="0.0433%" height="15" fill="rgb(241,95,50)" fg:x="2277" fg:w="1"/><text x="98.9496%" y="287.50"></text></g><g><title>core::iter::adapters::zip::TrustedRandomAccessNoCoerce::size (1 samples, 0.04%)</title><rect x="98.6996%" y="261" width="0.0433%" height="15" fill="rgb(238,48,32)" fg:x="2277" fg:w="1"/><text x="98.9496%" y="271.50"></text></g><g><title>&lt;core::slice::iter::ChunksExact&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.04%)</title><rect x="98.6996%" y="245" width="0.0433%" height="15" fill="rgb(235,113,49)" fg:x="2277" fg:w="1"/><text x="98.9496%" y="255.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (2 samples, 0.09%)</title><rect x="98.7430%" y="309" width="0.0867%" height="15" fill="rgb(205,127,43)" fg:x="2278" fg:w="2"/><text x="98.9930%" y="319.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (1 samples, 0.04%)</title><rect x="98.7863%" y="293" width="0.0433%" height="15" fill="rgb(250,162,2)" fg:x="2279" fg:w="1"/><text x="99.0363%" y="303.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_left (1 samples, 0.04%)</title><rect x="98.8730%" y="293" width="0.0433%" height="15" fill="rgb(220,13,41)" fg:x="2281" fg:w="1"/><text x="99.1230%" y="303.50"></text></g><g><title>chacha20::xchacha::quarter_round (3 samples, 0.13%)</title><rect x="98.8296%" y="309" width="0.1300%" height="15" fill="rgb(249,221,25)" fg:x="2280" fg:w="3"/><text x="99.0796%" y="319.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (1 samples, 0.04%)</title><rect x="98.9163%" y="293" width="0.0433%" height="15" fill="rgb(215,208,19)" fg:x="2282" fg:w="1"/><text x="99.1663%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::chunks_exact (1 samples, 0.04%)</title><rect x="98.9597%" y="309" width="0.0433%" height="15" fill="rgb(236,175,2)" fg:x="2283" fg:w="1"/><text x="99.2097%" y="319.50"></text></g><g><title>&lt;chacha20::xchacha::XChaChaCore&lt;R&gt; as crypto_common::KeyIvInit&gt;::new (8 samples, 0.35%)</title><rect x="98.6996%" y="341" width="0.3468%" height="15" fill="rgb(241,52,2)" fg:x="2277" fg:w="8"/><text x="98.9496%" y="351.50"></text></g><g><title>chacha20::xchacha::hchacha (7 samples, 0.30%)</title><rect x="98.7430%" y="325" width="0.3034%" height="15" fill="rgb(248,140,14)" fg:x="2278" fg:w="7"/><text x="98.9930%" y="335.50"></text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default (1 samples, 0.04%)</title><rect x="99.0030%" y="309" width="0.0433%" height="15" fill="rgb(253,22,42)" fg:x="2284" fg:w="1"/><text x="99.2530%" y="319.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (1 samples, 0.04%)</title><rect x="99.0030%" y="293" width="0.0433%" height="15" fill="rgb(234,61,47)" fg:x="2284" fg:w="1"/><text x="99.2530%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.04%)</title><rect x="99.0030%" y="277" width="0.0433%" height="15" fill="rgb(208,226,15)" fg:x="2284" fg:w="1"/><text x="99.2530%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.04%)</title><rect x="99.0030%" y="261" width="0.0433%" height="15" fill="rgb(217,221,4)" fg:x="2284" fg:w="1"/><text x="99.2530%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.04%)</title><rect x="99.0030%" y="245" width="0.0433%" height="15" fill="rgb(212,174,34)" fg:x="2284" fg:w="1"/><text x="99.2530%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (2 samples, 0.09%)</title><rect x="99.0464%" y="261" width="0.0867%" height="15" fill="rgb(253,83,4)" fg:x="2285" fg:w="2"/><text x="99.2964%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (2 samples, 0.09%)</title><rect x="99.0464%" y="245" width="0.0867%" height="15" fill="rgb(250,195,49)" fg:x="2285" fg:w="2"/><text x="99.2964%" y="255.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate::{{closure}} (1 samples, 0.04%)</title><rect x="99.0897%" y="229" width="0.0433%" height="15" fill="rgb(241,192,25)" fg:x="2286" fg:w="1"/><text x="99.3397%" y="239.50"></text></g><g><title>&lt;cipher::stream_wrapper::StreamCipherCoreWrapper&lt;T&gt; as crypto_common::KeyIvInit&gt;::new (11 samples, 0.48%)</title><rect x="98.6996%" y="357" width="0.4768%" height="15" fill="rgb(208,124,10)" fg:x="2277" fg:w="11"/><text x="98.9496%" y="367.50"></text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default (3 samples, 0.13%)</title><rect x="99.0464%" y="341" width="0.1300%" height="15" fill="rgb(222,33,0)" fg:x="2285" fg:w="3"/><text x="99.2964%" y="351.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (3 samples, 0.13%)</title><rect x="99.0464%" y="325" width="0.1300%" height="15" fill="rgb(234,209,28)" fg:x="2285" fg:w="3"/><text x="99.2964%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.13%)</title><rect x="99.0464%" y="309" width="0.1300%" height="15" fill="rgb(224,11,23)" fg:x="2285" fg:w="3"/><text x="99.2964%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.13%)</title><rect x="99.0464%" y="293" width="0.1300%" height="15" fill="rgb(232,99,1)" fg:x="2285" fg:w="3"/><text x="99.2964%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (3 samples, 0.13%)</title><rect x="99.0464%" y="277" width="0.1300%" height="15" fill="rgb(237,95,45)" fg:x="2285" fg:w="3"/><text x="99.2964%" y="287.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="99.1331%" y="261" width="0.0433%" height="15" fill="rgb(208,109,11)" fg:x="2287" fg:w="1"/><text x="99.3831%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.04%)</title><rect x="99.2198%" y="261" width="0.0433%" height="15" fill="rgb(216,190,48)" fg:x="2289" fg:w="1"/><text x="99.4698%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.04%)</title><rect x="99.2198%" y="245" width="0.0433%" height="15" fill="rgb(251,171,36)" fg:x="2289" fg:w="1"/><text x="99.4698%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.04%)</title><rect x="99.2198%" y="229" width="0.0433%" height="15" fill="rgb(230,62,22)" fg:x="2289" fg:w="1"/><text x="99.4698%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (1 samples, 0.04%)</title><rect x="99.2198%" y="213" width="0.0433%" height="15" fill="rgb(225,114,35)" fg:x="2289" fg:w="1"/><text x="99.4698%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.04%)</title><rect x="99.2198%" y="197" width="0.0433%" height="15" fill="rgb(215,118,42)" fg:x="2289" fg:w="1"/><text x="99.4698%" y="207.50"></text></g><g><title>&lt;poly1305::Poly1305 as universal_hash::UniversalHash&gt;::finalize (3 samples, 0.13%)</title><rect x="99.1764%" y="341" width="0.1300%" height="15" fill="rgb(243,119,21)" fg:x="2288" fg:w="3"/><text x="99.4264%" y="351.50"></text></g><g><title>&lt;poly1305::backend::autodetect::State as universal_hash::UniversalHash&gt;::finalize (3 samples, 0.13%)</title><rect x="99.1764%" y="325" width="0.1300%" height="15" fill="rgb(252,177,53)" fg:x="2288" fg:w="3"/><text x="99.4264%" y="335.50"></text></g><g><title>poly1305::backend::soft::State::finalize_mut (3 samples, 0.13%)</title><rect x="99.1764%" y="309" width="0.1300%" height="15" fill="rgb(237,209,29)" fg:x="2288" fg:w="3"/><text x="99.4264%" y="319.50"></text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default (2 samples, 0.09%)</title><rect x="99.2198%" y="293" width="0.0867%" height="15" fill="rgb(212,65,23)" fg:x="2289" fg:w="2"/><text x="99.4698%" y="303.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (2 samples, 0.09%)</title><rect x="99.2198%" y="277" width="0.0867%" height="15" fill="rgb(230,222,46)" fg:x="2289" fg:w="2"/><text x="99.4698%" y="287.50"></text></g><g><title>generic_array::ArrayBuilder&lt;T,N&gt;::into_inner (1 samples, 0.04%)</title><rect x="99.2631%" y="261" width="0.0433%" height="15" fill="rgb(215,135,32)" fg:x="2290" fg:w="1"/><text x="99.5131%" y="271.50"></text></g><g><title>core::ptr::read (1 samples, 0.04%)</title><rect x="99.2631%" y="245" width="0.0433%" height="15" fill="rgb(246,101,22)" fg:x="2290" fg:w="1"/><text x="99.5131%" y="255.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (1 samples, 0.04%)</title><rect x="99.2631%" y="229" width="0.0433%" height="15" fill="rgb(206,107,13)" fg:x="2290" fg:w="1"/><text x="99.5131%" y="239.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::into_inner (1 samples, 0.04%)</title><rect x="99.2631%" y="213" width="0.0433%" height="15" fill="rgb(250,100,44)" fg:x="2290" fg:w="1"/><text x="99.5131%" y="223.50"></text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default (1 samples, 0.04%)</title><rect x="99.3065%" y="325" width="0.0433%" height="15" fill="rgb(231,147,38)" fg:x="2291" fg:w="1"/><text x="99.5565%" y="335.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (1 samples, 0.04%)</title><rect x="99.3065%" y="309" width="0.0433%" height="15" fill="rgb(229,8,40)" fg:x="2291" fg:w="1"/><text x="99.5565%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.04%)</title><rect x="99.3065%" y="293" width="0.0433%" height="15" fill="rgb(221,135,30)" fg:x="2291" fg:w="1"/><text x="99.5565%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.04%)</title><rect x="99.3065%" y="277" width="0.0433%" height="15" fill="rgb(249,193,18)" fg:x="2291" fg:w="1"/><text x="99.5565%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.04%)</title><rect x="99.3065%" y="261" width="0.0433%" height="15" fill="rgb(209,133,39)" fg:x="2291" fg:w="1"/><text x="99.5565%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (1 samples, 0.04%)</title><rect x="99.3065%" y="245" width="0.0433%" height="15" fill="rgb(232,100,14)" fg:x="2291" fg:w="1"/><text x="99.5565%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.04%)</title><rect x="99.3065%" y="229" width="0.0433%" height="15" fill="rgb(224,185,1)" fg:x="2291" fg:w="1"/><text x="99.5565%" y="239.50"></text></g><g><title>chacha20poly1305::cipher::Cipher&lt;C&gt;::authenticate_lengths (2 samples, 0.09%)</title><rect x="99.3065%" y="341" width="0.0867%" height="15" fill="rgb(223,139,8)" fg:x="2291" fg:w="2"/><text x="99.5565%" y="351.50"></text></g><g><title>universal_hash::UniversalHash::update (1 samples, 0.04%)</title><rect x="99.3498%" y="325" width="0.0433%" height="15" fill="rgb(232,213,38)" fg:x="2292" fg:w="1"/><text x="99.5998%" y="335.50"></text></g><g><title>&lt;poly1305::Poly1305 as universal_hash::UniversalHash&gt;::update_with_backend (1 samples, 0.04%)</title><rect x="99.3498%" y="309" width="0.0433%" height="15" fill="rgb(207,94,22)" fg:x="2292" fg:w="1"/><text x="99.5998%" y="319.50"></text></g><g><title>&lt;poly1305::backend::autodetect::State as universal_hash::UniversalHash&gt;::update_with_backend (1 samples, 0.04%)</title><rect x="99.3498%" y="293" width="0.0433%" height="15" fill="rgb(219,183,54)" fg:x="2292" fg:w="1"/><text x="99.5998%" y="303.50"></text></g><g><title>&lt;universal_hash::UniversalHash::update::Ctx&lt;BS&gt; as universal_hash::UhfClosure&gt;::call (1 samples, 0.04%)</title><rect x="99.3498%" y="277" width="0.0433%" height="15" fill="rgb(216,185,54)" fg:x="2292" fg:w="1"/><text x="99.5998%" y="287.50"></text></g><g><title>&lt;poly1305::backend::soft::State as universal_hash::UhfBackend&gt;::proc_block (1 samples, 0.04%)</title><rect x="99.3498%" y="261" width="0.0433%" height="15" fill="rgb(254,217,39)" fg:x="2292" fg:w="1"/><text x="99.5998%" y="271.50"></text></g><g><title>poly1305::backend::soft::State::compute_block (1 samples, 0.04%)</title><rect x="99.3498%" y="245" width="0.0433%" height="15" fill="rgb(240,178,23)" fg:x="2292" fg:w="1"/><text x="99.5998%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_add_epi32 (1 samples, 0.04%)</title><rect x="99.3932%" y="149" width="0.0433%" height="15" fill="rgb(218,11,47)" fg:x="2293" fg:w="1"/><text x="99.6432%" y="159.50"></text></g><g><title>chacha20::backends::sse2::add_xor_rot (2 samples, 0.09%)</title><rect x="99.3932%" y="165" width="0.0867%" height="15" fill="rgb(218,51,51)" fg:x="2293" fg:w="2"/><text x="99.6432%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_slli_epi32 (1 samples, 0.04%)</title><rect x="99.4365%" y="149" width="0.0433%" height="15" fill="rgb(238,126,27)" fg:x="2294" fg:w="1"/><text x="99.6865%" y="159.50"></text></g><g><title>chacha20::backends::sse2::rounds (3 samples, 0.13%)</title><rect x="99.3932%" y="197" width="0.1300%" height="15" fill="rgb(249,202,22)" fg:x="2293" fg:w="3"/><text x="99.6432%" y="207.50"></text></g><g><title>chacha20::backends::sse2::double_quarter_round (3 samples, 0.13%)</title><rect x="99.3932%" y="181" width="0.1300%" height="15" fill="rgb(254,195,49)" fg:x="2293" fg:w="3"/><text x="99.6432%" y="191.50"></text></g><g><title>chacha20::backends::sse2::rows_to_cols (1 samples, 0.04%)</title><rect x="99.4798%" y="165" width="0.0433%" height="15" fill="rgb(208,123,14)" fg:x="2295" fg:w="1"/><text x="99.7298%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_shuffle_epi32 (1 samples, 0.04%)</title><rect x="99.4798%" y="149" width="0.0433%" height="15" fill="rgb(224,200,8)" fg:x="2295" fg:w="1"/><text x="99.7298%" y="159.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i32x4 (1 samples, 0.04%)</title><rect x="99.4798%" y="133" width="0.0433%" height="15" fill="rgb(217,61,36)" fg:x="2295" fg:w="1"/><text x="99.7298%" y="143.50"></text></g><g><title>cipher::stream::StreamCipher::apply_keystream (4 samples, 0.17%)</title><rect x="99.3932%" y="341" width="0.1734%" height="15" fill="rgb(206,35,45)" fg:x="2293" fg:w="4"/><text x="99.6432%" y="351.50"></text></g><g><title>cipher::stream::StreamCipher::try_apply_keystream (4 samples, 0.17%)</title><rect x="99.3932%" y="325" width="0.1734%" height="15" fill="rgb(217,65,33)" fg:x="2293" fg:w="4"/><text x="99.6432%" y="335.50"></text></g><g><title>&lt;cipher::stream_wrapper::StreamCipherCoreWrapper&lt;T&gt; as cipher::stream::StreamCipher&gt;::try_apply_keystream_inout (4 samples, 0.17%)</title><rect x="99.3932%" y="309" width="0.1734%" height="15" fill="rgb(222,158,48)" fg:x="2293" fg:w="4"/><text x="99.6432%" y="319.50"></text></g><g><title>cipher::stream_core::StreamCipherCore::write_keystream_block (4 samples, 0.17%)</title><rect x="99.3932%" y="293" width="0.1734%" height="15" fill="rgb(254,2,54)" fg:x="2293" fg:w="4"/><text x="99.6432%" y="303.50"></text></g><g><title>&lt;chacha20::xchacha::XChaChaCore&lt;R&gt; as cipher::stream_core::StreamCipherCore&gt;::process_with_backend (4 samples, 0.17%)</title><rect x="99.3932%" y="277" width="0.1734%" height="15" fill="rgb(250,143,38)" fg:x="2293" fg:w="4"/><text x="99.6432%" y="287.50"></text></g><g><title>&lt;chacha20::ChaChaCore&lt;R&gt; as cipher::stream_core::StreamCipherCore&gt;::process_with_backend (4 samples, 0.17%)</title><rect x="99.3932%" y="261" width="0.1734%" height="15" fill="rgb(248,25,0)" fg:x="2293" fg:w="4"/><text x="99.6432%" y="271.50"></text></g><g><title>chacha20::backends::sse2::inner (4 samples, 0.17%)</title><rect x="99.3932%" y="245" width="0.1734%" height="15" fill="rgb(206,152,27)" fg:x="2293" fg:w="4"/><text x="99.6432%" y="255.50"></text></g><g><title>&lt;cipher::stream_core::WriteBlockCtx&lt;BS&gt; as cipher::stream_core::StreamClosure&gt;::call (4 samples, 0.17%)</title><rect x="99.3932%" y="229" width="0.1734%" height="15" fill="rgb(240,77,30)" fg:x="2293" fg:w="4"/><text x="99.6432%" y="239.50"></text></g><g><title>&lt;chacha20::backends::sse2::Backend&lt;R&gt; as cipher::stream_core::StreamBackend&gt;::gen_ks_block (4 samples, 0.17%)</title><rect x="99.3932%" y="213" width="0.1734%" height="15" fill="rgb(231,5,3)" fg:x="2293" fg:w="4"/><text x="99.6432%" y="223.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.04%)</title><rect x="99.5232%" y="197" width="0.0433%" height="15" fill="rgb(207,226,32)" fg:x="2296" fg:w="1"/><text x="99.7732%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.04%)</title><rect x="99.5232%" y="181" width="0.0433%" height="15" fill="rgb(222,207,47)" fg:x="2296" fg:w="1"/><text x="99.7732%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="99.5665%" y="261" width="0.0433%" height="15" fill="rgb(229,115,45)" fg:x="2297" fg:w="1"/><text x="99.8165%" y="271.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 0.04%)</title><rect x="99.5665%" y="245" width="0.0433%" height="15" fill="rgb(224,191,6)" fg:x="2297" fg:w="1"/><text x="99.8165%" y="255.50"></text></g><g><title>chacha20poly1305::cipher::Cipher&lt;C&gt;::encrypt_in_place_detached (13 samples, 0.56%)</title><rect x="99.1764%" y="357" width="0.5635%" height="15" fill="rgb(230,227,24)" fg:x="2288" fg:w="13"/><text x="99.4264%" y="367.50"></text></g><g><title>universal_hash::UniversalHash::update_padded (4 samples, 0.17%)</title><rect x="99.5665%" y="341" width="0.1734%" height="15" fill="rgb(228,80,19)" fg:x="2297" fg:w="4"/><text x="99.8165%" y="351.50"></text></g><g><title>universal_hash::UniversalHash::update (4 samples, 0.17%)</title><rect x="99.5665%" y="325" width="0.1734%" height="15" fill="rgb(247,229,0)" fg:x="2297" fg:w="4"/><text x="99.8165%" y="335.50"></text></g><g><title>&lt;poly1305::Poly1305 as universal_hash::UniversalHash&gt;::update_with_backend (4 samples, 0.17%)</title><rect x="99.5665%" y="309" width="0.1734%" height="15" fill="rgb(237,194,15)" fg:x="2297" fg:w="4"/><text x="99.8165%" y="319.50"></text></g><g><title>&lt;poly1305::backend::autodetect::State as universal_hash::UniversalHash&gt;::update_with_backend (4 samples, 0.17%)</title><rect x="99.5665%" y="293" width="0.1734%" height="15" fill="rgb(219,203,20)" fg:x="2297" fg:w="4"/><text x="99.8165%" y="303.50"></text></g><g><title>&lt;universal_hash::UniversalHash::update::Ctx&lt;BS&gt; as universal_hash::UhfClosure&gt;::call (4 samples, 0.17%)</title><rect x="99.5665%" y="277" width="0.1734%" height="15" fill="rgb(234,128,8)" fg:x="2297" fg:w="4"/><text x="99.8165%" y="287.50"></text></g><g><title>&lt;poly1305::backend::soft::State as universal_hash::UhfBackend&gt;::proc_block (3 samples, 0.13%)</title><rect x="99.6099%" y="261" width="0.1300%" height="15" fill="rgb(248,202,8)" fg:x="2298" fg:w="3"/><text x="99.8599%" y="271.50"></text></g><g><title>poly1305::backend::soft::State::compute_block (3 samples, 0.13%)</title><rect x="99.6099%" y="245" width="0.1300%" height="15" fill="rgb(206,104,37)" fg:x="2298" fg:w="3"/><text x="99.8599%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.04%)</title><rect x="99.6966%" y="229" width="0.0433%" height="15" fill="rgb(223,8,27)" fg:x="2300" fg:w="1"/><text x="99.9466%" y="239.50"></text></g><g><title>&lt;[Z] as zeroize::Zeroize&gt;::zeroize (1 samples, 0.04%)</title><rect x="99.7399%" y="341" width="0.0433%" height="15" fill="rgb(216,217,28)" fg:x="2301" fg:w="1"/><text x="99.9899%" y="351.50"></text></g><g><title>zeroize::volatile_set (1 samples, 0.04%)</title><rect x="99.7399%" y="325" width="0.0433%" height="15" fill="rgb(249,199,1)" fg:x="2301" fg:w="1"/><text x="99.9899%" y="335.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.04%)</title><rect x="99.7399%" y="309" width="0.0433%" height="15" fill="rgb(240,85,17)" fg:x="2301" fg:w="1"/><text x="99.9899%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_add_epi32 (1 samples, 0.04%)</title><rect x="99.8266%" y="149" width="0.0433%" height="15" fill="rgb(206,108,45)" fg:x="2303" fg:w="1"/><text x="100.0766%" y="159.50"></text></g><g><title>cipher::stream_core::StreamCipherCore::write_keystream_block (3 samples, 0.13%)</title><rect x="99.7833%" y="293" width="0.1300%" height="15" fill="rgb(245,210,41)" fg:x="2302" fg:w="3"/><text x="100.0333%" y="303.50"></text></g><g><title>&lt;chacha20::xchacha::XChaChaCore&lt;R&gt; as cipher::stream_core::StreamCipherCore&gt;::process_with_backend (3 samples, 0.13%)</title><rect x="99.7833%" y="277" width="0.1300%" height="15" fill="rgb(206,13,37)" fg:x="2302" fg:w="3"/><text x="100.0333%" y="287.50"></text></g><g><title>&lt;chacha20::ChaChaCore&lt;R&gt; as cipher::stream_core::StreamCipherCore&gt;::process_with_backend (3 samples, 0.13%)</title><rect x="99.7833%" y="261" width="0.1300%" height="15" fill="rgb(250,61,18)" fg:x="2302" fg:w="3"/><text x="100.0333%" y="271.50"></text></g><g><title>chacha20::backends::sse2::inner (3 samples, 0.13%)</title><rect x="99.7833%" y="245" width="0.1300%" height="15" fill="rgb(235,172,48)" fg:x="2302" fg:w="3"/><text x="100.0333%" y="255.50"></text></g><g><title>&lt;cipher::stream_core::WriteBlockCtx&lt;BS&gt; as cipher::stream_core::StreamClosure&gt;::call (3 samples, 0.13%)</title><rect x="99.7833%" y="229" width="0.1300%" height="15" fill="rgb(249,201,17)" fg:x="2302" fg:w="3"/><text x="100.0333%" y="239.50"></text></g><g><title>&lt;chacha20::backends::sse2::Backend&lt;R&gt; as cipher::stream_core::StreamBackend&gt;::gen_ks_block (3 samples, 0.13%)</title><rect x="99.7833%" y="213" width="0.1300%" height="15" fill="rgb(219,208,6)" fg:x="2302" fg:w="3"/><text x="100.0333%" y="223.50"></text></g><g><title>chacha20::backends::sse2::rounds (3 samples, 0.13%)</title><rect x="99.7833%" y="197" width="0.1300%" height="15" fill="rgb(248,31,23)" fg:x="2302" fg:w="3"/><text x="100.0333%" y="207.50"></text></g><g><title>chacha20::backends::sse2::double_quarter_round (3 samples, 0.13%)</title><rect x="99.7833%" y="181" width="0.1300%" height="15" fill="rgb(245,15,42)" fg:x="2302" fg:w="3"/><text x="100.0333%" y="191.50"></text></g><g><title>chacha20::backends::sse2::add_xor_rot (3 samples, 0.13%)</title><rect x="99.7833%" y="165" width="0.1300%" height="15" fill="rgb(222,217,39)" fg:x="2302" fg:w="3"/><text x="100.0333%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_slli_epi32 (1 samples, 0.04%)</title><rect x="99.8700%" y="149" width="0.0433%" height="15" fill="rgb(210,219,27)" fg:x="2304" fg:w="1"/><text x="100.1200%" y="159.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i32x4 (1 samples, 0.04%)</title><rect x="99.8700%" y="133" width="0.0433%" height="15" fill="rgb(252,166,36)" fg:x="2304" fg:w="1"/><text x="100.1200%" y="143.50"></text></g><g><title>[unknown] (2,298 samples, 99.61%)</title><rect x="0.3468%" y="469" width="99.6099%" height="15" fill="rgb(245,132,34)" fg:x="8" fg:w="2298"/><text x="0.5968%" y="479.50">[unknown]</text></g><g><title>tftp::server::server::server (2,199 samples, 95.32%)</title><rect x="4.6381%" y="453" width="95.3186%" height="15" fill="rgb(236,54,3)" fg:x="107" fg:w="2199"/><text x="4.8881%" y="463.50">tftp::server::server::server</text></g><g><title>tftp::server::server::write_block (41 samples, 1.78%)</title><rect x="98.1795%" y="437" width="1.7772%" height="15" fill="rgb(241,173,43)" fg:x="2265" fg:w="41"/><text x="98.4295%" y="447.50">t..</text></g><g><title>tftp::server::connection::Connection&lt;R,W,S&gt;::send_packet (38 samples, 1.65%)</title><rect x="98.3095%" y="421" width="1.6472%" height="15" fill="rgb(215,190,9)" fg:x="2268" fg:w="38"/><text x="98.5595%" y="431.50"></text></g><g><title>tftp::encryption::Encryptor::encrypt (30 samples, 1.30%)</title><rect x="98.6563%" y="405" width="1.3004%" height="15" fill="rgb(242,101,16)" fg:x="2276" fg:w="30"/><text x="98.9063%" y="415.50"></text></g><g><title>aead::AeadInPlace::encrypt_in_place (30 samples, 1.30%)</title><rect x="98.6563%" y="389" width="1.3004%" height="15" fill="rgb(223,190,21)" fg:x="2276" fg:w="30"/><text x="98.9063%" y="399.50"></text></g><g><title>&lt;chacha20poly1305::ChaChaPoly1305&lt;C,N&gt; as aead::AeadInPlace&gt;::encrypt_in_place_detached (29 samples, 1.26%)</title><rect x="98.6996%" y="373" width="1.2570%" height="15" fill="rgb(215,228,25)" fg:x="2277" fg:w="29"/><text x="98.9496%" y="383.50"></text></g><g><title>chacha20poly1305::cipher::Cipher&lt;C&gt;::new (5 samples, 0.22%)</title><rect x="99.7399%" y="357" width="0.2167%" height="15" fill="rgb(225,36,22)" fg:x="2301" fg:w="5"/><text x="99.9899%" y="367.50"></text></g><g><title>cipher::stream::StreamCipher::apply_keystream (4 samples, 0.17%)</title><rect x="99.7833%" y="341" width="0.1734%" height="15" fill="rgb(251,106,46)" fg:x="2302" fg:w="4"/><text x="100.0333%" y="351.50"></text></g><g><title>cipher::stream::StreamCipher::try_apply_keystream (4 samples, 0.17%)</title><rect x="99.7833%" y="325" width="0.1734%" height="15" fill="rgb(208,90,1)" fg:x="2302" fg:w="4"/><text x="100.0333%" y="335.50"></text></g><g><title>&lt;cipher::stream_wrapper::StreamCipherCoreWrapper&lt;T&gt; as cipher::stream::StreamCipher&gt;::try_apply_keystream_inout (4 samples, 0.17%)</title><rect x="99.7833%" y="309" width="0.1734%" height="15" fill="rgb(243,10,4)" fg:x="2302" fg:w="4"/><text x="100.0333%" y="319.50"></text></g><g><title>cipher::stream_wrapper::StreamCipherCoreWrapper&lt;T&gt;::get_pos (1 samples, 0.04%)</title><rect x="99.9133%" y="293" width="0.0433%" height="15" fill="rgb(212,137,27)" fg:x="2305" fg:w="1"/><text x="100.1633%" y="303.50"></text></g><g><title>all (2,307 samples, 100%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(231,220,49)" fg:x="0" fg:w="2307"/><text x="0.2500%" y="511.50"></text></g><g><title>tftp (2,307 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(237,96,20)" fg:x="0" fg:w="2307"/><text x="0.2500%" y="495.50">tftp</text></g><g><title>_start (1 samples, 0.04%)</title><rect x="99.9567%" y="469" width="0.0433%" height="15" fill="rgb(239,229,30)" fg:x="2306" fg:w="1"/><text x="100.2067%" y="479.50"></text></g><g><title>__libc_start_main (1 samples, 0.04%)</title><rect x="99.9567%" y="453" width="0.0433%" height="15" fill="rgb(219,65,33)" fg:x="2306" fg:w="1"/><text x="100.2067%" y="463.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="99.9567%" y="437" width="0.0433%" height="15" fill="rgb(243,134,7)" fg:x="2306" fg:w="1"/><text x="100.2067%" y="447.50"></text></g><g><title>main (1 samples, 0.04%)</title><rect x="99.9567%" y="421" width="0.0433%" height="15" fill="rgb(216,177,54)" fg:x="2306" fg:w="1"/><text x="100.2067%" y="431.50"></text></g><g><title>std::rt::lang_start (1 samples, 0.04%)</title><rect x="99.9567%" y="405" width="0.0433%" height="15" fill="rgb(211,160,20)" fg:x="2306" fg:w="1"/><text x="100.2067%" y="415.50"></text></g><g><title>std::rt::lang_start_internal (1 samples, 0.04%)</title><rect x="99.9567%" y="389" width="0.0433%" height="15" fill="rgb(239,85,39)" fg:x="2306" fg:w="1"/><text x="100.2067%" y="399.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.04%)</title><rect x="99.9567%" y="373" width="0.0433%" height="15" fill="rgb(232,125,22)" fg:x="2306" fg:w="1"/><text x="100.2067%" y="383.50"></text></g><g><title>std::panicking::try (1 samples, 0.04%)</title><rect x="99.9567%" y="357" width="0.0433%" height="15" fill="rgb(244,57,34)" fg:x="2306" fg:w="1"/><text x="100.2067%" y="367.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.04%)</title><rect x="99.9567%" y="341" width="0.0433%" height="15" fill="rgb(214,203,32)" fg:x="2306" fg:w="1"/><text x="100.2067%" y="351.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (1 samples, 0.04%)</title><rect x="99.9567%" y="325" width="0.0433%" height="15" fill="rgb(207,58,43)" fg:x="2306" fg:w="1"/><text x="100.2067%" y="335.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.04%)</title><rect x="99.9567%" y="309" width="0.0433%" height="15" fill="rgb(215,193,15)" fg:x="2306" fg:w="1"/><text x="100.2067%" y="319.50"></text></g><g><title>std::panicking::try (1 samples, 0.04%)</title><rect x="99.9567%" y="293" width="0.0433%" height="15" fill="rgb(232,15,44)" fg:x="2306" fg:w="1"/><text x="100.2067%" y="303.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.04%)</title><rect x="99.9567%" y="277" width="0.0433%" height="15" fill="rgb(212,3,48)" fg:x="2306" fg:w="1"/><text x="100.2067%" y="287.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1 samples, 0.04%)</title><rect x="99.9567%" y="261" width="0.0433%" height="15" fill="rgb(218,128,7)" fg:x="2306" fg:w="1"/><text x="100.2067%" y="271.50"></text></g><g><title>std::rt::lang_start::{{closure}} (1 samples, 0.04%)</title><rect x="99.9567%" y="245" width="0.0433%" height="15" fill="rgb(226,216,39)" fg:x="2306" fg:w="1"/><text x="100.2067%" y="255.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.04%)</title><rect x="99.9567%" y="229" width="0.0433%" height="15" fill="rgb(243,47,51)" fg:x="2306" fg:w="1"/><text x="100.2067%" y="239.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.04%)</title><rect x="99.9567%" y="213" width="0.0433%" height="15" fill="rgb(241,183,40)" fg:x="2306" fg:w="1"/><text x="100.2067%" y="223.50"></text></g><g><title>tftp::main (1 samples, 0.04%)</title><rect x="99.9567%" y="197" width="0.0433%" height="15" fill="rgb(231,217,32)" fg:x="2306" fg:w="1"/><text x="100.2067%" y="207.50"></text></g><g><title>clap::derive::Parser::parse (1 samples, 0.04%)</title><rect x="99.9567%" y="181" width="0.0433%" height="15" fill="rgb(229,61,38)" fg:x="2306" fg:w="1"/><text x="100.2067%" y="191.50"></text></g><g><title>&lt;tftp::cli::Args as clap::derive::FromArgMatches&gt;::from_arg_matches_mut (1 samples, 0.04%)</title><rect x="99.9567%" y="165" width="0.0433%" height="15" fill="rgb(225,210,5)" fg:x="2306" fg:w="1"/><text x="100.2067%" y="175.50"></text></g><g><title>&lt;tftp::cli::Commands as clap::derive::FromArgMatches&gt;::from_arg_matches_mut (1 samples, 0.04%)</title><rect x="99.9567%" y="149" width="0.0433%" height="15" fill="rgb(231,79,45)" fg:x="2306" fg:w="1"/><text x="100.2067%" y="159.50"></text></g><g><title>&lt;tftp::cli::ServerCliConfig as clap::derive::FromArgMatches&gt;::from_arg_matches_mut (1 samples, 0.04%)</title><rect x="99.9567%" y="133" width="0.0433%" height="15" fill="rgb(224,100,7)" fg:x="2306" fg:w="1"/><text x="100.2067%" y="143.50"></text></g><g><title>clap::parser::matches::arg_matches::ArgMatches::remove_one (1 samples, 0.04%)</title><rect x="99.9567%" y="117" width="0.0433%" height="15" fill="rgb(241,198,18)" fg:x="2306" fg:w="1"/><text x="100.2067%" y="127.50"></text></g><g><title>clap::parser::matches::arg_matches::ArgMatches::try_remove_one (1 samples, 0.04%)</title><rect x="99.9567%" y="101" width="0.0433%" height="15" fill="rgb(252,97,53)" fg:x="2306" fg:w="1"/><text x="100.2067%" y="111.50"></text></g><g><title>clap::parser::matches::arg_matches::ArgMatches::try_remove_arg_t (1 samples, 0.04%)</title><rect x="99.9567%" y="85" width="0.0433%" height="15" fill="rgb(220,88,7)" fg:x="2306" fg:w="1"/><text x="100.2067%" y="95.50"></text></g><g><title>clap::util::flat_map::FlatMap&lt;K,V&gt;::remove_entry (1 samples, 0.04%)</title><rect x="99.9567%" y="69" width="0.0433%" height="15" fill="rgb(213,176,14)" fg:x="2306" fg:w="1"/><text x="100.2067%" y="79.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (1 samples, 0.04%)</title><rect x="99.9567%" y="53" width="0.0433%" height="15" fill="rgb(246,73,7)" fg:x="2306" fg:w="1"/><text x="100.2067%" y="63.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.04%)</title><rect x="99.9567%" y="37" width="0.0433%" height="15" fill="rgb(245,64,36)" fg:x="2306" fg:w="1"/><text x="100.2067%" y="47.50"></text></g></svg></svg>