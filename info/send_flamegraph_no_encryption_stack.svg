<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="1689"><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.06%)</title><rect x="0.2368%" y="309" width="0.0592%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="1"/><text x="0.4868%" y="319.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.06%)</title><rect x="0.2368%" y="293" width="0.0592%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="1"/><text x="0.4868%" y="303.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.06%)</title><rect x="0.2368%" y="277" width="0.0592%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="1"/><text x="0.4868%" y="287.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.36%)</title><rect x="0.0000%" y="325" width="0.3552%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="6"/><text x="0.2500%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.2960%" y="309" width="0.0592%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="1"/><text x="0.5460%" y="319.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.12%)</title><rect x="6.5127%" y="213" width="0.1184%" height="15" fill="rgb(232,128,0)" fg:x="110" fg:w="2"/><text x="6.7627%" y="223.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.06%)</title><rect x="6.6311%" y="213" width="0.0592%" height="15" fill="rgb(207,160,47)" fg:x="112" fg:w="1"/><text x="6.8811%" y="223.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="6.6311%" y="197" width="0.0592%" height="15" fill="rgb(228,23,34)" fg:x="112" fg:w="1"/><text x="6.8811%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.06%)</title><rect x="6.6311%" y="181" width="0.0592%" height="15" fill="rgb(218,30,26)" fg:x="112" fg:w="1"/><text x="6.8811%" y="191.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (1 samples, 0.06%)</title><rect x="6.6311%" y="165" width="0.0592%" height="15" fill="rgb(220,122,19)" fg:x="112" fg:w="1"/><text x="6.8811%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.06%)</title><rect x="6.6311%" y="149" width="0.0592%" height="15" fill="rgb(250,228,42)" fg:x="112" fg:w="1"/><text x="6.8811%" y="159.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.06%)</title><rect x="6.6311%" y="133" width="0.0592%" height="15" fill="rgb(240,193,28)" fg:x="112" fg:w="1"/><text x="6.8811%" y="143.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (2 samples, 0.12%)</title><rect x="6.6903%" y="213" width="0.1184%" height="15" fill="rgb(216,20,37)" fg:x="113" fg:w="2"/><text x="6.9403%" y="223.50"></text></g><g><title>core::iter::adapters::chain::and_then_or_clear (16 samples, 0.95%)</title><rect x="5.9207%" y="229" width="0.9473%" height="15" fill="rgb(206,188,39)" fg:x="100" fg:w="16"/><text x="6.1707%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (1 samples, 0.06%)</title><rect x="6.8088%" y="213" width="0.0592%" height="15" fill="rgb(217,207,13)" fg:x="115" fg:w="1"/><text x="7.0588%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (25 samples, 1.48%)</title><rect x="12.8478%" y="165" width="1.4802%" height="15" fill="rgb(231,73,38)" fg:x="217" fg:w="25"/><text x="13.0978%" y="175.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null::runtime_impl (8 samples, 0.47%)</title><rect x="13.8544%" y="149" width="0.4737%" height="15" fill="rgb(225,20,46)" fg:x="234" fg:w="8"/><text x="14.1044%" y="159.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::addr (6 samples, 0.36%)</title><rect x="13.9728%" y="133" width="0.3552%" height="15" fill="rgb(210,31,41)" fg:x="236" fg:w="6"/><text x="14.2228%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (12 samples, 0.71%)</title><rect x="14.3280%" y="165" width="0.7105%" height="15" fill="rgb(221,200,47)" fg:x="242" fg:w="12"/><text x="14.5780%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null::runtime_impl (7 samples, 0.41%)</title><rect x="14.6240%" y="149" width="0.4144%" height="15" fill="rgb(226,26,5)" fg:x="247" fg:w="7"/><text x="14.8740%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::addr (6 samples, 0.36%)</title><rect x="14.6832%" y="133" width="0.3552%" height="15" fill="rgb(249,33,26)" fg:x="248" fg:w="6"/><text x="14.9332%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (5 samples, 0.30%)</title><rect x="15.9858%" y="149" width="0.2960%" height="15" fill="rgb(235,183,28)" fg:x="270" fg:w="5"/><text x="16.2358%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (5 samples, 0.30%)</title><rect x="15.9858%" y="133" width="0.2960%" height="15" fill="rgb(221,5,38)" fg:x="270" fg:w="5"/><text x="16.2358%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (79 samples, 4.68%)</title><rect x="11.7821%" y="181" width="4.6773%" height="15" fill="rgb(247,18,42)" fg:x="199" fg:w="79"/><text x="12.0321%" y="191.50">&lt;core..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (24 samples, 1.42%)</title><rect x="15.0385%" y="165" width="1.4210%" height="15" fill="rgb(241,131,45)" fg:x="254" fg:w="24"/><text x="15.2885%" y="175.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (3 samples, 0.18%)</title><rect x="16.2818%" y="149" width="0.1776%" height="15" fill="rgb(249,31,29)" fg:x="275" fg:w="3"/><text x="16.5318%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (132 samples, 7.82%)</title><rect x="10.8940%" y="197" width="7.8153%" height="15" fill="rgb(225,111,53)" fg:x="184" fg:w="132"/><text x="11.1440%" y="207.50">&lt;core::iter..</text></g><g><title>core::option::Option&lt;&amp;T&gt;::copied (38 samples, 2.25%)</title><rect x="16.4594%" y="181" width="2.2499%" height="15" fill="rgb(238,160,17)" fg:x="278" fg:w="38"/><text x="16.7094%" y="191.50">c..</text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (12 samples, 0.71%)</title><rect x="18.7093%" y="197" width="0.7105%" height="15" fill="rgb(214,148,48)" fg:x="316" fg:w="12"/><text x="18.9593%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (250 samples, 14.80%)</title><rect x="4.9142%" y="245" width="14.8017%" height="15" fill="rgb(232,36,49)" fg:x="83" fg:w="250"/><text x="5.1642%" y="255.50">&lt;core::iter::adapters::..</text></g><g><title>core::option::Option&lt;T&gt;::or_else (217 samples, 12.85%)</title><rect x="6.8680%" y="229" width="12.8478%" height="15" fill="rgb(209,103,24)" fg:x="116" fg:w="217"/><text x="7.1180%" y="239.50">core::option::Optio..</text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (195 samples, 11.55%)</title><rect x="8.1705%" y="213" width="11.5453%" height="15" fill="rgb(229,88,8)" fg:x="138" fg:w="195"/><text x="8.4205%" y="223.50">&lt;core::iter::adap..</text></g><g><title>core::option::Option&lt;T&gt;::as_mut (5 samples, 0.30%)</title><rect x="19.4198%" y="197" width="0.2960%" height="15" fill="rgb(213,181,19)" fg:x="328" fg:w="5"/><text x="19.6698%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (18 samples, 1.07%)</title><rect x="19.7158%" y="245" width="1.0657%" height="15" fill="rgb(254,191,54)" fg:x="333" fg:w="18"/><text x="19.9658%" y="255.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::ok (36 samples, 2.13%)</title><rect x="20.7815%" y="245" width="2.1314%" height="15" fill="rgb(241,83,37)" fg:x="351" fg:w="36"/><text x="21.0315%" y="255.50">c..</text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::new (1 samples, 0.06%)</title><rect x="22.9130%" y="245" width="0.0592%" height="15" fill="rgb(233,36,39)" fg:x="387" fg:w="1"/><text x="23.1630%" y="255.50"></text></g><g><title>[libc.so.6] (1 samples, 0.06%)</title><rect x="22.9130%" y="229" width="0.0592%" height="15" fill="rgb(226,3,54)" fg:x="387" fg:w="1"/><text x="23.1630%" y="239.50"></text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::capacity (3 samples, 0.18%)</title><rect x="24.2155%" y="229" width="0.1776%" height="15" fill="rgb(245,192,40)" fg:x="409" fg:w="3"/><text x="24.4655%" y="239.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::new (28 samples, 1.66%)</title><rect x="27.6495%" y="213" width="1.6578%" height="15" fill="rgb(238,167,29)" fg:x="467" fg:w="28"/><text x="27.8995%" y="223.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (1 samples, 0.06%)</title><rect x="29.2481%" y="197" width="0.0592%" height="15" fill="rgb(232,182,51)" fg:x="494" fg:w="1"/><text x="29.4981%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.12%)</title><rect x="30.7282%" y="181" width="0.1184%" height="15" fill="rgb(231,60,39)" fg:x="519" fg:w="2"/><text x="30.9782%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (31 samples, 1.84%)</title><rect x="29.3073%" y="213" width="1.8354%" height="15" fill="rgb(208,69,12)" fg:x="495" fg:w="31"/><text x="29.5573%" y="223.50">c..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (18 samples, 1.07%)</title><rect x="30.0770%" y="197" width="1.0657%" height="15" fill="rgb(235,93,37)" fg:x="508" fg:w="18"/><text x="30.3270%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut [T]&gt;::as_mut_ptr (5 samples, 0.30%)</title><rect x="30.8467%" y="181" width="0.2960%" height="15" fill="rgb(213,116,39)" fg:x="521" fg:w="5"/><text x="31.0967%" y="191.50"></text></g><g><title>&lt;tftp::packet::DataPacket as tftp::packet::ByteConverter&gt;::to_bytes (532 samples, 31.50%)</title><rect x="0.3552%" y="293" width="31.4979%" height="15" fill="rgb(222,207,29)" fg:x="6" fg:w="532"/><text x="0.6052%" y="303.50">&lt;tftp::packet::DataPacket as tftp::packet::ByteConv..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (532 samples, 31.50%)</title><rect x="0.3552%" y="277" width="31.4979%" height="15" fill="rgb(206,96,30)" fg:x="6" fg:w="532"/><text x="0.6052%" y="287.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;heapless::vec::Vec&lt;T,_&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (532 samples, 31.50%)</title><rect x="0.3552%" y="261" width="31.4979%" height="15" fill="rgb(218,138,4)" fg:x="6" fg:w="532"/><text x="0.6052%" y="271.50">&lt;heapless::vec::Vec&lt;T,_&gt; as core::iter::traits::col..</text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::push (150 samples, 8.88%)</title><rect x="22.9722%" y="245" width="8.8810%" height="15" fill="rgb(250,191,14)" fg:x="388" fg:w="150"/><text x="23.2222%" y="255.50">heapless::vec..</text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::push_unchecked (126 samples, 7.46%)</title><rect x="24.3931%" y="229" width="7.4600%" height="15" fill="rgb(239,60,40)" fg:x="412" fg:w="126"/><text x="24.6431%" y="239.50">heapless::..</text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::is_full (12 samples, 0.71%)</title><rect x="31.1427%" y="213" width="0.7105%" height="15" fill="rgb(206,27,48)" fg:x="526" fg:w="12"/><text x="31.3927%" y="223.50"></text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::capacity (3 samples, 0.18%)</title><rect x="31.6755%" y="197" width="0.1776%" height="15" fill="rgb(225,35,8)" fg:x="535" fg:w="3"/><text x="31.9255%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::chain (1 samples, 0.06%)</title><rect x="31.8532%" y="293" width="0.0592%" height="15" fill="rgb(250,213,24)" fg:x="538" fg:w="1"/><text x="32.1032%" y="303.50"></text></g><g><title>core::iter::adapters::chain::Chain&lt;A,B&gt;::new (1 samples, 0.06%)</title><rect x="31.8532%" y="277" width="0.0592%" height="15" fill="rgb(247,123,22)" fg:x="538" fg:w="1"/><text x="32.1032%" y="287.50"></text></g><g><title>memcpy (1 samples, 0.06%)</title><rect x="31.8532%" y="261" width="0.0592%" height="15" fill="rgb(231,138,38)" fg:x="538" fg:w="1"/><text x="32.1032%" y="271.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (6 samples, 0.36%)</title><rect x="38.0699%" y="229" width="0.3552%" height="15" fill="rgb(231,145,46)" fg:x="643" fg:w="6"/><text x="38.3199%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (1 samples, 0.06%)</title><rect x="38.4251%" y="229" width="0.0592%" height="15" fill="rgb(251,118,11)" fg:x="649" fg:w="1"/><text x="38.6751%" y="239.50"></text></g><g><title>core::iter::adapters::chain::and_then_or_clear (26 samples, 1.54%)</title><rect x="37.0041%" y="245" width="1.5394%" height="15" fill="rgb(217,147,25)" fg:x="625" fg:w="26"/><text x="37.2541%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::array::iter::IntoIter&lt;u8,2_usize&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="38.4843%" y="229" width="0.0592%" height="15" fill="rgb(247,81,37)" fg:x="650" fg:w="1"/><text x="38.7343%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::array::iter::IntoIter&lt;u8,2_usize&gt;&gt; (1 samples, 0.06%)</title><rect x="38.4843%" y="213" width="0.0592%" height="15" fill="rgb(209,12,38)" fg:x="650" fg:w="1"/><text x="38.7343%" y="223.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="38.4843%" y="197" width="0.0592%" height="15" fill="rgb(227,1,9)" fg:x="650" fg:w="1"/><text x="38.7343%" y="207.50"></text></g><g><title>core::array::iter::IntoIter&lt;T,_&gt;::as_mut_slice (1 samples, 0.06%)</title><rect x="38.4843%" y="181" width="0.0592%" height="15" fill="rgb(248,47,43)" fg:x="650" fg:w="1"/><text x="38.7343%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (1 samples, 0.06%)</title><rect x="38.4843%" y="165" width="0.0592%" height="15" fill="rgb(221,10,30)" fg:x="650" fg:w="1"/><text x="38.7343%" y="175.50"></text></g><g><title>&lt;core::ops::index_range::IndexRange as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.06%)</title><rect x="38.4843%" y="149" width="0.0592%" height="15" fill="rgb(210,229,1)" fg:x="650" fg:w="1"/><text x="38.7343%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.06%)</title><rect x="38.4843%" y="133" width="0.0592%" height="15" fill="rgb(222,148,37)" fg:x="650" fg:w="1"/><text x="38.7343%" y="143.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (19 samples, 1.12%)</title><rect x="42.9248%" y="213" width="1.1249%" height="15" fill="rgb(234,67,33)" fg:x="725" fg:w="19"/><text x="43.1748%" y="223.50"></text></g><g><title>&lt;heapless::vec::Vec&lt;T,_&gt; as core::ops::deref::Deref&gt;::deref (52 samples, 3.08%)</title><rect x="47.1877%" y="197" width="3.0787%" height="15" fill="rgb(247,98,35)" fg:x="797" fg:w="52"/><text x="47.4377%" y="207.50">&lt;he..</text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::as_slice (47 samples, 2.78%)</title><rect x="47.4837%" y="181" width="2.7827%" height="15" fill="rgb(247,138,52)" fg:x="802" fg:w="47"/><text x="47.7337%" y="191.50">he..</text></g><g><title>core::slice::raw::from_raw_parts (40 samples, 2.37%)</title><rect x="47.8982%" y="165" width="2.3683%" height="15" fill="rgb(213,79,30)" fg:x="809" fg:w="40"/><text x="48.1482%" y="175.50">co..</text></g><g><title>core::ptr::slice_from_raw_parts (33 samples, 1.95%)</title><rect x="48.3126%" y="149" width="1.9538%" height="15" fill="rgb(246,177,23)" fg:x="816" fg:w="33"/><text x="48.5626%" y="159.50">c..</text></g><g><title>core::ptr::metadata::from_raw_parts (32 samples, 1.89%)</title><rect x="48.3718%" y="133" width="1.8946%" height="15" fill="rgb(230,62,27)" fg:x="817" fg:w="32"/><text x="48.6218%" y="143.50">c..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (29 samples, 1.72%)</title><rect x="50.2664%" y="197" width="1.7170%" height="15" fill="rgb(216,154,8)" fg:x="849" fg:w="29"/><text x="50.5164%" y="207.50"></text></g><g><title>core::ptr::read (22 samples, 1.30%)</title><rect x="50.6809%" y="181" width="1.3025%" height="15" fill="rgb(244,35,45)" fg:x="856" fg:w="22"/><text x="50.9309%" y="191.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (3 samples, 0.18%)</title><rect x="51.8058%" y="165" width="0.1776%" height="15" fill="rgb(251,115,12)" fg:x="875" fg:w="3"/><text x="52.0558%" y="175.50"></text></g><g><title>&lt;heapless::vec::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (157 samples, 9.30%)</title><rect x="44.0497%" y="213" width="9.2954%" height="15" fill="rgb(240,54,50)" fg:x="744" fg:w="157"/><text x="44.2997%" y="223.50">&lt;heapless::ve..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (23 samples, 1.36%)</title><rect x="51.9834%" y="197" width="1.3618%" height="15" fill="rgb(233,84,52)" fg:x="878" fg:w="23"/><text x="52.2334%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (17 samples, 1.01%)</title><rect x="52.3387%" y="181" width="1.0065%" height="15" fill="rgb(207,117,47)" fg:x="884" fg:w="17"/><text x="52.5887%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.18%)</title><rect x="53.1676%" y="165" width="0.1776%" height="15" fill="rgb(249,43,39)" fg:x="898" fg:w="3"/><text x="53.4176%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.12%)</title><rect x="53.2268%" y="149" width="0.1184%" height="15" fill="rgb(209,38,44)" fg:x="899" fg:w="2"/><text x="53.4768%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (309 samples, 18.29%)</title><rect x="36.0568%" y="261" width="18.2948%" height="15" fill="rgb(236,212,23)" fg:x="609" fg:w="309"/><text x="36.3068%" y="271.50">&lt;core::iter::adapters::chain:..</text></g><g><title>core::option::Option&lt;T&gt;::or_else (267 samples, 15.81%)</title><rect x="38.5435%" y="245" width="15.8082%" height="15" fill="rgb(242,79,21)" fg:x="651" fg:w="267"/><text x="38.7935%" y="255.50">core::option::Option&lt;T&gt;:..</text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (236 samples, 13.97%)</title><rect x="40.3789%" y="229" width="13.9728%" height="15" fill="rgb(211,96,35)" fg:x="682" fg:w="236"/><text x="40.6289%" y="239.50">&lt;core::iter::adapters..</text></g><g><title>core::option::Option&lt;T&gt;::as_mut (17 samples, 1.01%)</title><rect x="53.3452%" y="213" width="1.0065%" height="15" fill="rgb(253,215,40)" fg:x="901" fg:w="17"/><text x="53.5952%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (26 samples, 1.54%)</title><rect x="54.3517%" y="261" width="1.5394%" height="15" fill="rgb(211,81,21)" fg:x="918" fg:w="26"/><text x="54.6017%" y="271.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::ok (26 samples, 1.54%)</title><rect x="55.8911%" y="261" width="1.5394%" height="15" fill="rgb(208,190,38)" fg:x="944" fg:w="26"/><text x="56.1411%" y="271.50"></text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::capacity (9 samples, 0.53%)</title><rect x="59.2658%" y="245" width="0.5329%" height="15" fill="rgb(235,213,38)" fg:x="1001" fg:w="9"/><text x="59.5158%" y="255.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::new (27 samples, 1.60%)</title><rect x="63.2327%" y="229" width="1.5986%" height="15" fill="rgb(237,122,38)" fg:x="1068" fg:w="27"/><text x="63.4827%" y="239.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (2 samples, 0.12%)</title><rect x="64.7128%" y="213" width="0.1184%" height="15" fill="rgb(244,218,35)" fg:x="1093" fg:w="2"/><text x="64.9628%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (6 samples, 0.36%)</title><rect x="66.2522%" y="197" width="0.3552%" height="15" fill="rgb(240,68,47)" fg:x="1119" fg:w="6"/><text x="66.5022%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (4 samples, 0.24%)</title><rect x="66.3706%" y="181" width="0.2368%" height="15" fill="rgb(210,16,53)" fg:x="1121" fg:w="4"/><text x="66.6206%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (38 samples, 2.25%)</title><rect x="64.8313%" y="229" width="2.2499%" height="15" fill="rgb(235,124,12)" fg:x="1095" fg:w="38"/><text x="65.0813%" y="239.50">c..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (24 samples, 1.42%)</title><rect x="65.6602%" y="213" width="1.4210%" height="15" fill="rgb(224,169,11)" fg:x="1109" fg:w="24"/><text x="65.9102%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut [T]&gt;::as_mut_ptr (8 samples, 0.47%)</title><rect x="66.6075%" y="197" width="0.4737%" height="15" fill="rgb(250,166,2)" fg:x="1125" fg:w="8"/><text x="66.8575%" y="207.50"></text></g><g><title>&lt;tftp::packet::Packet as tftp::packet::ByteConverter&gt;::to_bytes (1,143 samples, 67.67%)</title><rect x="0.3552%" y="309" width="67.6732%" height="15" fill="rgb(242,216,29)" fg:x="6" fg:w="1143"/><text x="0.6052%" y="319.50">&lt;tftp::packet::Packet as tftp::packet::ByteConverter&gt;::to_bytes</text></g><g><title>core::iter::traits::iterator::Iterator::collect (610 samples, 36.12%)</title><rect x="31.9124%" y="293" width="36.1160%" height="15" fill="rgb(230,116,27)" fg:x="539" fg:w="610"/><text x="32.1624%" y="303.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;heapless::vec::Vec&lt;T,_&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (610 samples, 36.12%)</title><rect x="31.9124%" y="277" width="36.1160%" height="15" fill="rgb(228,99,48)" fg:x="539" fg:w="610"/><text x="32.1624%" y="287.50">&lt;heapless::vec::Vec&lt;T,_&gt; as core::iter::traits::collect::Fr..</text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::push (179 samples, 10.60%)</title><rect x="57.4304%" y="261" width="10.5980%" height="15" fill="rgb(253,11,6)" fg:x="970" fg:w="179"/><text x="57.6804%" y="271.50">heapless::vec::..</text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::push_unchecked (139 samples, 8.23%)</title><rect x="59.7987%" y="245" width="8.2297%" height="15" fill="rgb(247,143,39)" fg:x="1010" fg:w="139"/><text x="60.0487%" y="255.50">heapless::v..</text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::is_full (16 samples, 0.95%)</title><rect x="67.0811%" y="229" width="0.9473%" height="15" fill="rgb(236,97,10)" fg:x="1133" fg:w="16"/><text x="67.3311%" y="239.50"></text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::capacity (4 samples, 0.24%)</title><rect x="67.7916%" y="213" width="0.2368%" height="15" fill="rgb(233,208,19)" fg:x="1145" fg:w="4"/><text x="68.0416%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (8 samples, 0.47%)</title><rect x="72.2913%" y="245" width="0.4737%" height="15" fill="rgb(216,164,2)" fg:x="1221" fg:w="8"/><text x="72.5413%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null::runtime_impl (4 samples, 0.24%)</title><rect x="72.5281%" y="229" width="0.2368%" height="15" fill="rgb(220,129,5)" fg:x="1225" fg:w="4"/><text x="72.7781%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::addr (2 samples, 0.12%)</title><rect x="72.6465%" y="213" width="0.1184%" height="15" fill="rgb(242,17,10)" fg:x="1227" fg:w="2"/><text x="72.8965%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (3 samples, 0.18%)</title><rect x="72.7649%" y="245" width="0.1776%" height="15" fill="rgb(242,107,0)" fg:x="1229" fg:w="3"/><text x="73.0149%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null::runtime_impl (2 samples, 0.12%)</title><rect x="72.8242%" y="229" width="0.1184%" height="15" fill="rgb(251,28,31)" fg:x="1230" fg:w="2"/><text x="73.0742%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::addr (2 samples, 0.12%)</title><rect x="72.8242%" y="213" width="0.1184%" height="15" fill="rgb(233,223,10)" fg:x="1230" fg:w="2"/><text x="73.0742%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (19 samples, 1.12%)</title><rect x="74.4227%" y="229" width="1.1249%" height="15" fill="rgb(215,21,27)" fg:x="1257" fg:w="19"/><text x="74.6727%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (19 samples, 1.12%)</title><rect x="74.4227%" y="213" width="1.1249%" height="15" fill="rgb(232,23,21)" fg:x="1257" fg:w="19"/><text x="74.6727%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (72 samples, 4.26%)</title><rect x="71.4624%" y="261" width="4.2629%" height="15" fill="rgb(244,5,23)" fg:x="1207" fg:w="72"/><text x="71.7124%" y="271.50">&lt;core..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (47 samples, 2.78%)</title><rect x="72.9426%" y="245" width="2.7827%" height="15" fill="rgb(226,81,46)" fg:x="1232" fg:w="47"/><text x="73.1926%" y="255.50">co..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (3 samples, 0.18%)</title><rect x="75.5477%" y="229" width="0.1776%" height="15" fill="rgb(247,70,30)" fg:x="1276" fg:w="3"/><text x="75.7977%" y="239.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for u8&gt;::clone (7 samples, 0.41%)</title><rect x="75.7253%" y="261" width="0.4144%" height="15" fill="rgb(212,68,19)" fg:x="1279" fg:w="7"/><text x="75.9753%" y="271.50"></text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::new (1 samples, 0.06%)</title><rect x="76.1397%" y="261" width="0.0592%" height="15" fill="rgb(240,187,13)" fg:x="1286" fg:w="1"/><text x="76.3897%" y="271.50"></text></g><g><title>[libc.so.6] (1 samples, 0.06%)</title><rect x="76.1397%" y="245" width="0.0592%" height="15" fill="rgb(223,113,26)" fg:x="1286" fg:w="1"/><text x="76.3897%" y="255.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::new (28 samples, 1.66%)</title><rect x="79.3369%" y="245" width="1.6578%" height="15" fill="rgb(206,192,2)" fg:x="1340" fg:w="28"/><text x="79.5869%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.18%)</title><rect x="81.9420%" y="213" width="0.1776%" height="15" fill="rgb(241,108,4)" fg:x="1384" fg:w="3"/><text x="82.1920%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.18%)</title><rect x="81.9420%" y="197" width="0.1776%" height="15" fill="rgb(247,173,49)" fg:x="1384" fg:w="3"/><text x="82.1920%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (22 samples, 1.30%)</title><rect x="80.9947%" y="245" width="1.3025%" height="15" fill="rgb(224,114,35)" fg:x="1368" fg:w="22"/><text x="81.2447%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (18 samples, 1.07%)</title><rect x="81.2315%" y="229" width="1.0657%" height="15" fill="rgb(245,159,27)" fg:x="1372" fg:w="18"/><text x="81.4815%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut [T]&gt;::as_mut_ptr (3 samples, 0.18%)</title><rect x="82.1196%" y="213" width="0.1776%" height="15" fill="rgb(245,172,44)" fg:x="1387" fg:w="3"/><text x="82.3696%" y="223.50"></text></g><g><title>&lt;heapless::vec::Vec&lt;T,_&gt; as core::clone::Clone&gt;::clone (261 samples, 15.45%)</title><rect x="68.0284%" y="293" width="15.4529%" height="15" fill="rgb(236,23,11)" fg:x="1149" fg:w="261"/><text x="68.2784%" y="303.50">&lt;heapless::vec::Vec&lt;T,_&gt;..</text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::clone (261 samples, 15.45%)</title><rect x="68.0284%" y="277" width="15.4529%" height="15" fill="rgb(205,117,38)" fg:x="1149" fg:w="261"/><text x="68.2784%" y="287.50">heapless::vec::Vec&lt;T,_&gt;:..</text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::push_unchecked (123 samples, 7.28%)</title><rect x="76.1989%" y="261" width="7.2824%" height="15" fill="rgb(237,72,25)" fg:x="1287" fg:w="123"/><text x="76.4489%" y="271.50">heapless::..</text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::is_full (20 samples, 1.18%)</title><rect x="82.2972%" y="245" width="1.1841%" height="15" fill="rgb(244,70,9)" fg:x="1390" fg:w="20"/><text x="82.5472%" y="255.50"></text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::capacity (6 samples, 0.36%)</title><rect x="83.1261%" y="229" width="0.3552%" height="15" fill="rgb(217,125,39)" fg:x="1404" fg:w="6"/><text x="83.3761%" y="239.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.06%)</title><rect x="83.4813%" y="293" width="0.0592%" height="15" fill="rgb(235,36,10)" fg:x="1410" fg:w="1"/><text x="83.7313%" y="303.50"></text></g><g><title>&lt;tftp::storage::FileReader&lt;T&gt; as tftp::storage::BlockReader&gt;::next::{{closure}} (1 samples, 0.06%)</title><rect x="83.4813%" y="277" width="0.0592%" height="15" fill="rgb(251,123,47)" fg:x="1410" fg:w="1"/><text x="83.7313%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.06%)</title><rect x="83.4813%" y="261" width="0.0592%" height="15" fill="rgb(221,13,13)" fg:x="1410" fg:w="1"/><text x="83.7313%" y="271.50"></text></g><g><title>[libc.so.6] (1 samples, 0.06%)</title><rect x="83.4813%" y="245" width="0.0592%" height="15" fill="rgb(238,131,9)" fg:x="1410" fg:w="1"/><text x="83.7313%" y="255.50"></text></g><g><title>[libc.so.6] (1 samples, 0.06%)</title><rect x="83.5406%" y="277" width="0.0592%" height="15" fill="rgb(211,50,8)" fg:x="1411" fg:w="1"/><text x="83.7906%" y="287.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::try_push (1 samples, 0.06%)</title><rect x="83.5998%" y="277" width="0.0592%" height="15" fill="rgb(245,182,24)" fg:x="1412" fg:w="1"/><text x="83.8498%" y="287.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::try_push (1 samples, 0.06%)</title><rect x="83.5998%" y="261" width="0.0592%" height="15" fill="rgb(242,14,37)" fg:x="1412" fg:w="1"/><text x="83.8498%" y="271.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::push_unchecked (1 samples, 0.06%)</title><rect x="83.5998%" y="245" width="0.0592%" height="15" fill="rgb(246,228,12)" fg:x="1412" fg:w="1"/><text x="83.8498%" y="255.50"></text></g><g><title>core::ptr::write (1 samples, 0.06%)</title><rect x="83.5998%" y="229" width="0.0592%" height="15" fill="rgb(213,55,15)" fg:x="1412" fg:w="1"/><text x="83.8498%" y="239.50"></text></g><g><title>[libc.so.6] (1 samples, 0.06%)</title><rect x="83.5998%" y="213" width="0.0592%" height="15" fill="rgb(209,9,3)" fg:x="1412" fg:w="1"/><text x="83.8498%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (1 samples, 0.06%)</title><rect x="83.6590%" y="261" width="0.0592%" height="15" fill="rgb(230,59,30)" fg:x="1413" fg:w="1"/><text x="83.9090%" y="271.50"></text></g><g><title>tftp::map::Map&lt;K,V,_&gt;::insert (4 samples, 0.24%)</title><rect x="83.5406%" y="293" width="0.2368%" height="15" fill="rgb(209,121,21)" fg:x="1411" fg:w="4"/><text x="83.7906%" y="303.50"></text></g><g><title>tftp::map::Map&lt;K,V,_&gt;::remove (2 samples, 0.12%)</title><rect x="83.6590%" y="277" width="0.1184%" height="15" fill="rgb(220,109,13)" fg:x="1413" fg:w="2"/><text x="83.9090%" y="287.50"></text></g><g><title>tftp::map::Map&lt;K,V,_&gt;::iter (1 samples, 0.06%)</title><rect x="83.7182%" y="261" width="0.0592%" height="15" fill="rgb(232,18,1)" fg:x="1414" fg:w="1"/><text x="83.9682%" y="271.50"></text></g><g><title>&lt;&amp;tftp::map::Map&lt;K,V,_&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.06%)</title><rect x="83.7182%" y="245" width="0.0592%" height="15" fill="rgb(215,41,42)" fg:x="1414" fg:w="1"/><text x="83.9682%" y="255.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.06%)</title><rect x="83.7182%" y="229" width="0.0592%" height="15" fill="rgb(224,123,36)" fg:x="1414" fg:w="1"/><text x="83.9682%" y="239.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::as_slice (1 samples, 0.06%)</title><rect x="83.7182%" y="213" width="0.0592%" height="15" fill="rgb(240,125,3)" fg:x="1414" fg:w="1"/><text x="83.9682%" y="223.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::as_slice (1 samples, 0.06%)</title><rect x="83.7182%" y="197" width="0.0592%" height="15" fill="rgb(205,98,50)" fg:x="1414" fg:w="1"/><text x="83.9682%" y="207.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as arrayvec::arrayvec_impl::ArrayVecImpl&gt;::len (1 samples, 0.06%)</title><rect x="83.7182%" y="181" width="0.0592%" height="15" fill="rgb(205,185,37)" fg:x="1414" fg:w="1"/><text x="83.9682%" y="191.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="83.7774%" y="277" width="0.0592%" height="15" fill="rgb(238,207,15)" fg:x="1415" fg:w="1"/><text x="84.0274%" y="287.50"></text></g><g><title>&lt;heapless::vec::Vec&lt;T,_&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.06%)</title><rect x="83.8366%" y="277" width="0.0592%" height="15" fill="rgb(213,199,42)" fg:x="1416" fg:w="1"/><text x="84.0866%" y="287.50"></text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::as_mut_slice (1 samples, 0.06%)</title><rect x="83.8366%" y="261" width="0.0592%" height="15" fill="rgb(235,201,11)" fg:x="1416" fg:w="1"/><text x="84.0866%" y="271.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (1 samples, 0.06%)</title><rect x="83.8958%" y="261" width="0.0592%" height="15" fill="rgb(207,46,11)" fg:x="1417" fg:w="1"/><text x="84.1458%" y="271.50"></text></g><g><title>std::sys::unix::fs::File::read (1 samples, 0.06%)</title><rect x="83.8958%" y="245" width="0.0592%" height="15" fill="rgb(241,35,35)" fg:x="1417" fg:w="1"/><text x="84.1458%" y="255.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (1 samples, 0.06%)</title><rect x="83.8958%" y="229" width="0.0592%" height="15" fill="rgb(243,32,47)" fg:x="1417" fg:w="1"/><text x="84.1458%" y="239.50"></text></g><g><title>read (1 samples, 0.06%)</title><rect x="83.8958%" y="213" width="0.0592%" height="15" fill="rgb(247,202,23)" fg:x="1417" fg:w="1"/><text x="84.1458%" y="223.50"></text></g><g><title>&lt;tftp::io::StdCompatFile as tftp::std_compat::io::Read&gt;::read (2 samples, 0.12%)</title><rect x="83.8958%" y="277" width="0.1184%" height="15" fill="rgb(219,102,11)" fg:x="1417" fg:w="2"/><text x="84.1458%" y="287.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.06%)</title><rect x="83.9550%" y="261" width="0.0592%" height="15" fill="rgb(243,110,44)" fg:x="1418" fg:w="1"/><text x="84.2050%" y="271.50"></text></g><g><title>__rust_probestack (1 samples, 0.06%)</title><rect x="84.0142%" y="277" width="0.0592%" height="15" fill="rgb(222,74,54)" fg:x="1419" fg:w="1"/><text x="84.2642%" y="287.50"></text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::new (1 samples, 0.06%)</title><rect x="84.0734%" y="277" width="0.0592%" height="15" fill="rgb(216,99,12)" fg:x="1420" fg:w="1"/><text x="84.3234%" y="287.50"></text></g><g><title>[libc.so.6] (1 samples, 0.06%)</title><rect x="84.0734%" y="261" width="0.0592%" height="15" fill="rgb(226,22,26)" fg:x="1420" fg:w="1"/><text x="84.3234%" y="271.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::ok (21 samples, 1.24%)</title><rect x="84.9615%" y="261" width="1.2433%" height="15" fill="rgb(217,163,10)" fg:x="1435" fg:w="21"/><text x="85.2115%" y="271.50"></text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::capacity (4 samples, 0.24%)</title><rect x="87.2706%" y="245" width="0.2368%" height="15" fill="rgb(213,25,53)" fg:x="1474" fg:w="4"/><text x="87.5206%" y="255.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::new (38 samples, 2.25%)</title><rect x="91.2374%" y="229" width="2.2499%" height="15" fill="rgb(252,105,26)" fg:x="1541" fg:w="38"/><text x="91.4874%" y="239.50">c..</text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (3 samples, 0.18%)</title><rect x="93.3097%" y="213" width="0.1776%" height="15" fill="rgb(220,39,43)" fg:x="1576" fg:w="3"/><text x="93.5597%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.18%)</title><rect x="94.5530%" y="197" width="0.1776%" height="15" fill="rgb(229,68,48)" fg:x="1597" fg:w="3"/><text x="94.8030%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.06%)</title><rect x="94.6714%" y="181" width="0.0592%" height="15" fill="rgb(252,8,32)" fg:x="1599" fg:w="1"/><text x="94.9214%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (22 samples, 1.30%)</title><rect x="93.4873%" y="229" width="1.3025%" height="15" fill="rgb(223,20,43)" fg:x="1579" fg:w="22"/><text x="93.7373%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (15 samples, 0.89%)</title><rect x="93.9017%" y="213" width="0.8881%" height="15" fill="rgb(229,81,49)" fg:x="1586" fg:w="15"/><text x="94.1517%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut [T]&gt;::as_mut_ptr (1 samples, 0.06%)</title><rect x="94.7306%" y="197" width="0.0592%" height="15" fill="rgb(236,28,36)" fg:x="1600" fg:w="1"/><text x="94.9806%" y="207.50"></text></g><g><title>&lt;tftp::storage::FileReader&lt;T&gt; as tftp::storage::BlockReader&gt;::next (474 samples, 28.06%)</title><rect x="68.0284%" y="309" width="28.0639%" height="15" fill="rgb(249,185,26)" fg:x="1149" fg:w="474"/><text x="68.2784%" y="319.50">&lt;tftp::storage::FileReader&lt;T&gt; as tftp::storag..</text></g><g><title>tftp::storage::FileReader&lt;T&gt;::read_block (208 samples, 12.31%)</title><rect x="83.7774%" y="293" width="12.3150%" height="15" fill="rgb(249,174,33)" fg:x="1415" fg:w="208"/><text x="84.0274%" y="303.50">tftp::storage::Fil..</text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::resize (202 samples, 11.96%)</title><rect x="84.1326%" y="277" width="11.9597%" height="15" fill="rgb(233,201,37)" fg:x="1421" fg:w="202"/><text x="84.3826%" y="287.50">heapless::vec::Vec..</text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::push (167 samples, 9.89%)</title><rect x="86.2049%" y="261" width="9.8875%" height="15" fill="rgb(221,78,26)" fg:x="1456" fg:w="167"/><text x="86.4549%" y="271.50">heapless::vec:..</text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::push_unchecked (145 samples, 8.58%)</title><rect x="87.5074%" y="245" width="8.5850%" height="15" fill="rgb(250,127,30)" fg:x="1478" fg:w="145"/><text x="87.7574%" y="255.50">heapless::ve..</text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::is_full (22 samples, 1.30%)</title><rect x="94.7898%" y="229" width="1.3025%" height="15" fill="rgb(230,49,44)" fg:x="1601" fg:w="22"/><text x="95.0398%" y="239.50"></text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::capacity (7 samples, 0.41%)</title><rect x="95.6779%" y="213" width="0.4144%" height="15" fill="rgb(229,67,23)" fg:x="1616" fg:w="7"/><text x="95.9279%" y="223.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="96.2700%" y="293" width="0.0592%" height="15" fill="rgb(249,83,47)" fg:x="1626" fg:w="1"/><text x="96.5200%" y="303.50"></text></g><g><title>[libc.so.6] (1 samples, 0.06%)</title><rect x="96.2700%" y="277" width="0.0592%" height="15" fill="rgb(215,43,3)" fg:x="1626" fg:w="1"/><text x="96.5200%" y="287.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.06%)</title><rect x="96.3292%" y="245" width="0.0592%" height="15" fill="rgb(238,154,13)" fg:x="1627" fg:w="1"/><text x="96.5792%" y="255.50"></text></g><g><title>&lt;tftp::packet::Packet as tftp::packet::ByteConverter&gt;::from_bytes (2 samples, 0.12%)</title><rect x="96.3292%" y="293" width="0.1184%" height="15" fill="rgb(219,56,2)" fg:x="1627" fg:w="2"/><text x="96.5792%" y="303.50"></text></g><g><title>tftp::packet::PacketType::from_bytes (2 samples, 0.12%)</title><rect x="96.3292%" y="277" width="0.1184%" height="15" fill="rgb(233,0,4)" fg:x="1627" fg:w="2"/><text x="96.5792%" y="287.50"></text></g><g><title>tftp::packet::try_from (2 samples, 0.12%)</title><rect x="96.3292%" y="261" width="0.1184%" height="15" fill="rgb(235,30,7)" fg:x="1627" fg:w="2"/><text x="96.5792%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.06%)</title><rect x="96.3884%" y="245" width="0.0592%" height="15" fill="rgb(250,79,13)" fg:x="1628" fg:w="1"/><text x="96.6384%" y="255.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.06%)</title><rect x="96.3884%" y="229" width="0.0592%" height="15" fill="rgb(211,146,34)" fg:x="1628" fg:w="1"/><text x="96.6384%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.06%)</title><rect x="96.3884%" y="213" width="0.0592%" height="15" fill="rgb(228,22,38)" fg:x="1628" fg:w="1"/><text x="96.6384%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.06%)</title><rect x="96.3884%" y="197" width="0.0592%" height="15" fill="rgb(235,168,5)" fg:x="1628" fg:w="1"/><text x="96.6384%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.06%)</title><rect x="96.3884%" y="181" width="0.0592%" height="15" fill="rgb(221,155,16)" fg:x="1628" fg:w="1"/><text x="96.6384%" y="191.50"></text></g><g><title>&lt;tftp::packet::Packet as tftp::packet::ByteConverter&gt;::to_bytes (1 samples, 0.06%)</title><rect x="96.4476%" y="293" width="0.0592%" height="15" fill="rgb(215,215,53)" fg:x="1629" fg:w="1"/><text x="96.6976%" y="303.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.06%)</title><rect x="96.5068%" y="277" width="0.0592%" height="15" fill="rgb(223,4,10)" fg:x="1630" fg:w="1"/><text x="96.7568%" y="287.50"></text></g><g><title>&lt;tftp::socket::StdSocket as tftp::socket::Socket&gt;::recv_from::{{closure}} (1 samples, 0.06%)</title><rect x="96.5068%" y="261" width="0.0592%" height="15" fill="rgb(234,103,6)" fg:x="1630" fg:w="1"/><text x="96.7568%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2 samples, 0.12%)</title><rect x="96.5660%" y="261" width="0.1184%" height="15" fill="rgb(227,97,0)" fg:x="1631" fg:w="2"/><text x="96.8160%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.12%)</title><rect x="96.5660%" y="245" width="0.1184%" height="15" fill="rgb(234,150,53)" fg:x="1631" fg:w="2"/><text x="96.8160%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (2 samples, 0.12%)</title><rect x="96.5660%" y="229" width="0.1184%" height="15" fill="rgb(228,201,54)" fg:x="1631" fg:w="2"/><text x="96.8160%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="96.6252%" y="213" width="0.0592%" height="15" fill="rgb(222,22,37)" fg:x="1632" fg:w="1"/><text x="96.8752%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (1 samples, 0.06%)</title><rect x="96.6252%" y="197" width="0.0592%" height="15" fill="rgb(237,53,32)" fg:x="1632" fg:w="1"/><text x="96.8752%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.06%)</title><rect x="96.6252%" y="181" width="0.0592%" height="15" fill="rgb(233,25,53)" fg:x="1632" fg:w="1"/><text x="96.8752%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.06%)</title><rect x="96.6252%" y="165" width="0.0592%" height="15" fill="rgb(210,40,34)" fg:x="1632" fg:w="1"/><text x="96.8752%" y="175.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (1 samples, 0.06%)</title><rect x="96.6252%" y="149" width="0.0592%" height="15" fill="rgb(241,220,44)" fg:x="1632" fg:w="1"/><text x="96.8752%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (1 samples, 0.06%)</title><rect x="96.6252%" y="133" width="0.0592%" height="15" fill="rgb(235,28,35)" fg:x="1632" fg:w="1"/><text x="96.8752%" y="143.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.06%)</title><rect x="96.6252%" y="117" width="0.0592%" height="15" fill="rgb(210,56,17)" fg:x="1632" fg:w="1"/><text x="96.8752%" y="127.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.12%)</title><rect x="96.9213%" y="245" width="0.1184%" height="15" fill="rgb(224,130,29)" fg:x="1637" fg:w="2"/><text x="97.1713%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;isize,std::io::error::Error&gt;&gt; (2 samples, 0.12%)</title><rect x="97.0397%" y="245" width="0.1184%" height="15" fill="rgb(235,212,8)" fg:x="1639" fg:w="2"/><text x="97.2897%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::Error&gt; (1 samples, 0.06%)</title><rect x="97.0989%" y="229" width="0.0592%" height="15" fill="rgb(223,33,50)" fg:x="1640" fg:w="1"/><text x="97.3489%" y="239.50"></text></g><g><title>&lt;tftp::socket::StdSocket as tftp::socket::Socket&gt;::recv_from (33 samples, 1.95%)</title><rect x="96.5068%" y="293" width="1.9538%" height="15" fill="rgb(219,149,13)" fg:x="1630" fg:w="33"/><text x="96.7568%" y="303.50">&lt;..</text></g><g><title>polling::Poller::wait (32 samples, 1.89%)</title><rect x="96.5660%" y="277" width="1.8946%" height="15" fill="rgb(250,156,29)" fg:x="1631" fg:w="32"/><text x="96.8160%" y="287.50">p..</text></g><g><title>polling::epoll::Poller::wait (30 samples, 1.78%)</title><rect x="96.6844%" y="261" width="1.7762%" height="15" fill="rgb(216,193,19)" fg:x="1633" fg:w="30"/><text x="96.9344%" y="271.50">p..</text></g><g><title>epoll_wait (22 samples, 1.30%)</title><rect x="97.1581%" y="245" width="1.3025%" height="15" fill="rgb(216,135,14)" fg:x="1641" fg:w="22"/><text x="97.4081%" y="255.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.06%)</title><rect x="98.4606%" y="277" width="0.0592%" height="15" fill="rgb(241,47,5)" fg:x="1663" fg:w="1"/><text x="98.7106%" y="287.50"></text></g><g><title>&lt;core::option::IntoIter&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="98.5198%" y="261" width="0.0592%" height="15" fill="rgb(233,42,35)" fg:x="1664" fg:w="1"/><text x="98.7698%" y="271.50"></text></g><g><title>&lt;core::option::Item&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="98.5198%" y="245" width="0.0592%" height="15" fill="rgb(231,13,6)" fg:x="1664" fg:w="1"/><text x="98.7698%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.06%)</title><rect x="98.5198%" y="229" width="0.0592%" height="15" fill="rgb(207,181,40)" fg:x="1664" fg:w="1"/><text x="98.7698%" y="239.50"></text></g><g><title>core::mem::replace (1 samples, 0.06%)</title><rect x="98.5198%" y="213" width="0.0592%" height="15" fill="rgb(254,173,49)" fg:x="1664" fg:w="1"/><text x="98.7698%" y="223.50"></text></g><g><title>core::ptr::write (1 samples, 0.06%)</title><rect x="98.5198%" y="197" width="0.0592%" height="15" fill="rgb(221,1,38)" fg:x="1664" fg:w="1"/><text x="98.7698%" y="207.50"></text></g><g><title>sendto (4 samples, 0.24%)</title><rect x="98.5790%" y="245" width="0.2368%" height="15" fill="rgb(206,124,46)" fg:x="1665" fg:w="4"/><text x="98.8290%" y="255.50"></text></g><g><title>&lt;tftp::socket::StdSocket as tftp::socket::Socket&gt;::send_to (7 samples, 0.41%)</title><rect x="98.4606%" y="293" width="0.4144%" height="15" fill="rgb(249,21,11)" fg:x="1663" fg:w="7"/><text x="98.7106%" y="303.50"></text></g><g><title>std::net::udp::UdpSocket::send_to (6 samples, 0.36%)</title><rect x="98.5198%" y="277" width="0.3552%" height="15" fill="rgb(222,201,40)" fg:x="1664" fg:w="6"/><text x="98.7698%" y="287.50"></text></g><g><title>std::sys_common::net::UdpSocket::send_to (5 samples, 0.30%)</title><rect x="98.5790%" y="261" width="0.2960%" height="15" fill="rgb(235,61,29)" fg:x="1665" fg:w="5"/><text x="98.8290%" y="271.50"></text></g><g><title>std::sys::unix::cvt (1 samples, 0.06%)</title><rect x="98.8159%" y="245" width="0.0592%" height="15" fill="rgb(219,207,3)" fg:x="1669" fg:w="1"/><text x="99.0659%" y="255.50"></text></g><g><title>&lt;isize as std::sys::unix::IsMinusOne&gt;::is_minus_one (1 samples, 0.06%)</title><rect x="98.8159%" y="229" width="0.0592%" height="15" fill="rgb(222,56,46)" fg:x="1669" fg:w="1"/><text x="99.0659%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (1 samples, 0.06%)</title><rect x="98.8751%" y="261" width="0.0592%" height="15" fill="rgb(239,76,54)" fg:x="1670" fg:w="1"/><text x="99.1251%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (1 samples, 0.06%)</title><rect x="98.8751%" y="245" width="0.0592%" height="15" fill="rgb(231,124,27)" fg:x="1670" fg:w="1"/><text x="99.1251%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="98.9343%" y="197" width="0.0592%" height="15" fill="rgb(249,195,6)" fg:x="1671" fg:w="1"/><text x="99.1843%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.06%)</title><rect x="98.9343%" y="181" width="0.0592%" height="15" fill="rgb(237,174,47)" fg:x="1671" fg:w="1"/><text x="99.1843%" y="191.50"></text></g><g><title>&lt;arrayvec::arrayvec::Drain&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.24%)</title><rect x="98.9343%" y="213" width="0.2368%" height="15" fill="rgb(206,201,31)" fg:x="1671" fg:w="4"/><text x="99.1843%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 0.18%)</title><rect x="98.9935%" y="197" width="0.1776%" height="15" fill="rgb(231,57,52)" fg:x="1672" fg:w="3"/><text x="99.2435%" y="207.50"></text></g><g><title>&lt;arrayvec::arrayvec::Drain&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (3 samples, 0.18%)</title><rect x="98.9935%" y="181" width="0.1776%" height="15" fill="rgb(248,177,22)" fg:x="1672" fg:w="3"/><text x="99.2435%" y="191.50"></text></g><g><title>core::ptr::read (3 samples, 0.18%)</title><rect x="98.9935%" y="165" width="0.1776%" height="15" fill="rgb(215,211,37)" fg:x="1672" fg:w="3"/><text x="99.2435%" y="175.50"></text></g><g><title>[libc.so.6] (3 samples, 0.18%)</title><rect x="98.9935%" y="149" width="0.1776%" height="15" fill="rgb(241,128,51)" fg:x="1672" fg:w="3"/><text x="99.2435%" y="159.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::drain (1 samples, 0.06%)</title><rect x="99.1711%" y="213" width="0.0592%" height="15" fill="rgb(227,165,31)" fg:x="1675" fg:w="1"/><text x="99.4211%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (8 samples, 0.47%)</title><rect x="98.9343%" y="261" width="0.4737%" height="15" fill="rgb(228,167,24)" fg:x="1671" fg:w="8"/><text x="99.1843%" y="271.50"></text></g><g><title>tftp::map::Map&lt;K,V,_&gt;::remove::{{closure}} (8 samples, 0.47%)</title><rect x="98.9343%" y="245" width="0.4737%" height="15" fill="rgb(228,143,12)" fg:x="1671" fg:w="8"/><text x="99.1843%" y="255.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::pop_at (8 samples, 0.47%)</title><rect x="98.9343%" y="229" width="0.4737%" height="15" fill="rgb(249,149,8)" fg:x="1671" fg:w="8"/><text x="99.1843%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrayvec::arrayvec::Drain&lt;(u64,tftp::storage::TimedBlock),64_usize&gt;&gt; (3 samples, 0.18%)</title><rect x="99.2303%" y="213" width="0.1776%" height="15" fill="rgb(243,35,44)" fg:x="1676" fg:w="3"/><text x="99.4803%" y="223.50"></text></g><g><title>&lt;arrayvec::arrayvec::Drain&lt;T,_&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.18%)</title><rect x="99.2303%" y="197" width="0.1776%" height="15" fill="rgb(246,89,9)" fg:x="1676" fg:w="3"/><text x="99.4803%" y="207.50"></text></g><g><title>core::intrinsics::copy (3 samples, 0.18%)</title><rect x="99.2303%" y="181" width="0.1776%" height="15" fill="rgb(233,213,13)" fg:x="1676" fg:w="3"/><text x="99.4803%" y="191.50"></text></g><g><title>[libc.so.6] (3 samples, 0.18%)</title><rect x="99.2303%" y="165" width="0.1776%" height="15" fill="rgb(233,141,41)" fg:x="1676" fg:w="3"/><text x="99.4803%" y="175.50"></text></g><g><title>&lt;tftp::storage::FileReader&lt;T&gt; as tftp::storage::BlockReader&gt;::free_block (10 samples, 0.59%)</title><rect x="98.8751%" y="293" width="0.5921%" height="15" fill="rgb(239,167,4)" fg:x="1670" fg:w="10"/><text x="99.1251%" y="303.50"></text></g><g><title>tftp::map::Map&lt;K,V,_&gt;::remove (10 samples, 0.59%)</title><rect x="98.8751%" y="277" width="0.5921%" height="15" fill="rgb(209,217,16)" fg:x="1670" fg:w="10"/><text x="99.1251%" y="287.50"></text></g><g><title>tftp::map::Map&lt;K,V,_&gt;::iter (1 samples, 0.06%)</title><rect x="99.4079%" y="261" width="0.0592%" height="15" fill="rgb(219,88,35)" fg:x="1679" fg:w="1"/><text x="99.6579%" y="271.50"></text></g><g><title>&lt;&amp;tftp::map::Map&lt;K,V,_&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.06%)</title><rect x="99.4079%" y="245" width="0.0592%" height="15" fill="rgb(220,193,23)" fg:x="1679" fg:w="1"/><text x="99.6579%" y="255.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.06%)</title><rect x="99.4079%" y="229" width="0.0592%" height="15" fill="rgb(230,90,52)" fg:x="1679" fg:w="1"/><text x="99.6579%" y="239.50"></text></g><g><title>arrayvec::arrayvec::ArrayVec&lt;T,_&gt;::as_slice (1 samples, 0.06%)</title><rect x="99.4079%" y="213" width="0.0592%" height="15" fill="rgb(252,106,19)" fg:x="1679" fg:w="1"/><text x="99.6579%" y="223.50"></text></g><g><title>arrayvec::arrayvec_impl::ArrayVecImpl::as_slice (1 samples, 0.06%)</title><rect x="99.4079%" y="197" width="0.0592%" height="15" fill="rgb(206,74,20)" fg:x="1679" fg:w="1"/><text x="99.6579%" y="207.50"></text></g><g><title>&lt;arrayvec::arrayvec::ArrayVec&lt;T,_&gt; as arrayvec::arrayvec_impl::ArrayVecImpl&gt;::len (1 samples, 0.06%)</title><rect x="99.4079%" y="181" width="0.0592%" height="15" fill="rgb(230,138,44)" fg:x="1679" fg:w="1"/><text x="99.6579%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;tftp::storage::Block&gt; (1 samples, 0.06%)</title><rect x="99.4671%" y="293" width="0.0592%" height="15" fill="rgb(235,182,43)" fg:x="1680" fg:w="1"/><text x="99.7171%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;heapless::vec::Vec&lt;u8,1416_usize&gt;&gt; (1 samples, 0.06%)</title><rect x="99.4671%" y="277" width="0.0592%" height="15" fill="rgb(242,16,51)" fg:x="1680" fg:w="1"/><text x="99.7171%" y="287.50"></text></g><g><title>&lt;heapless::vec::Vec&lt;T,_&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="99.4671%" y="261" width="0.0592%" height="15" fill="rgb(248,9,4)" fg:x="1680" fg:w="1"/><text x="99.7171%" y="271.50"></text></g><g><title>heapless::vec::Vec&lt;T,_&gt;::as_mut_slice (1 samples, 0.06%)</title><rect x="99.4671%" y="245" width="0.0592%" height="15" fill="rgb(210,31,22)" fg:x="1680" fg:w="1"/><text x="99.7171%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.06%)</title><rect x="99.5263%" y="293" width="0.0592%" height="15" fill="rgb(239,54,39)" fg:x="1681" fg:w="1"/><text x="99.7763%" y="303.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.06%)</title><rect x="99.5263%" y="277" width="0.0592%" height="15" fill="rgb(230,99,41)" fg:x="1681" fg:w="1"/><text x="99.7763%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.06%)</title><rect x="99.5263%" y="261" width="0.0592%" height="15" fill="rgb(253,106,12)" fg:x="1681" fg:w="1"/><text x="99.7763%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.06%)</title><rect x="99.5263%" y="245" width="0.0592%" height="15" fill="rgb(213,46,41)" fg:x="1681" fg:w="1"/><text x="99.7763%" y="255.50"></text></g><g><title>core::time::Duration::from_millis (1 samples, 0.06%)</title><rect x="99.5856%" y="293" width="0.0592%" height="15" fill="rgb(215,133,35)" fg:x="1682" fg:w="1"/><text x="99.8356%" y="303.50"></text></g><g><title>core::time::Duration::new (1 samples, 0.06%)</title><rect x="99.5856%" y="277" width="0.0592%" height="15" fill="rgb(213,28,5)" fg:x="1682" fg:w="1"/><text x="99.8356%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::checked_add (1 samples, 0.06%)</title><rect x="99.5856%" y="261" width="0.0592%" height="15" fill="rgb(215,77,49)" fg:x="1682" fg:w="1"/><text x="99.8356%" y="271.50"></text></g><g><title>log::max_level (1 samples, 0.06%)</title><rect x="99.6448%" y="293" width="0.0592%" height="15" fill="rgb(248,100,22)" fg:x="1683" fg:w="1"/><text x="99.8948%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.06%)</title><rect x="99.6448%" y="277" width="0.0592%" height="15" fill="rgb(208,67,9)" fg:x="1683" fg:w="1"/><text x="99.8948%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.06%)</title><rect x="99.6448%" y="261" width="0.0592%" height="15" fill="rgb(219,133,21)" fg:x="1683" fg:w="1"/><text x="99.8948%" y="271.50"></text></g><g><title>tftp::flow_control::RateControl::start_rtt (1 samples, 0.06%)</title><rect x="99.7040%" y="293" width="0.0592%" height="15" fill="rgb(246,46,29)" fg:x="1684" fg:w="1"/><text x="99.9540%" y="303.50"></text></g><g><title>tftp::std_compat::time::Instant::elapsed (1 samples, 0.06%)</title><rect x="99.7040%" y="277" width="0.0592%" height="15" fill="rgb(246,185,52)" fg:x="1684" fg:w="1"/><text x="99.9540%" y="287.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.06%)</title><rect x="99.7040%" y="261" width="0.0592%" height="15" fill="rgb(252,136,11)" fg:x="1684" fg:w="1"/><text x="99.9540%" y="271.50"></text></g><g><title>tftp::instant_callback::{{closure}} (1 samples, 0.06%)</title><rect x="99.7040%" y="245" width="0.0592%" height="15" fill="rgb(219,138,53)" fg:x="1684" fg:w="1"/><text x="99.9540%" y="255.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.06%)</title><rect x="99.7040%" y="229" width="0.0592%" height="15" fill="rgb(211,51,23)" fg:x="1684" fg:w="1"/><text x="99.9540%" y="239.50"></text></g><g><title>clock_gettime (1 samples, 0.06%)</title><rect x="99.7040%" y="213" width="0.0592%" height="15" fill="rgb(247,221,28)" fg:x="1684" fg:w="1"/><text x="99.9540%" y="223.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.06%)</title><rect x="99.7040%" y="197" width="0.0592%" height="15" fill="rgb(251,222,45)" fg:x="1684" fg:w="1"/><text x="99.9540%" y="207.50"></text></g><g><title>[[vdso]] (1 samples, 0.06%)</title><rect x="99.7040%" y="181" width="0.0592%" height="15" fill="rgb(217,162,53)" fg:x="1684" fg:w="1"/><text x="99.9540%" y="191.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.06%)</title><rect x="99.7632%" y="245" width="0.0592%" height="15" fill="rgb(229,93,14)" fg:x="1685" fg:w="1"/><text x="100.0132%" y="255.50"></text></g><g><title>clock_gettime (1 samples, 0.06%)</title><rect x="99.7632%" y="229" width="0.0592%" height="15" fill="rgb(209,67,49)" fg:x="1685" fg:w="1"/><text x="100.0132%" y="239.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.06%)</title><rect x="99.7632%" y="213" width="0.0592%" height="15" fill="rgb(213,87,29)" fg:x="1685" fg:w="1"/><text x="100.0132%" y="223.50"></text></g><g><title>tftp::client::client::send_file (64 samples, 3.79%)</title><rect x="96.0924%" y="309" width="3.7892%" height="15" fill="rgb(205,151,52)" fg:x="1623" fg:w="64"/><text x="96.3424%" y="319.50">tftp..</text></g><g><title>tftp::std_compat::time::Instant::elapsed (2 samples, 0.12%)</title><rect x="99.7632%" y="293" width="0.1184%" height="15" fill="rgb(253,215,39)" fg:x="1685" fg:w="2"/><text x="100.0132%" y="303.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.12%)</title><rect x="99.7632%" y="277" width="0.1184%" height="15" fill="rgb(221,220,41)" fg:x="1685" fg:w="2"/><text x="100.0132%" y="287.50"></text></g><g><title>tftp::instant_callback::{{closure}} (2 samples, 0.12%)</title><rect x="99.7632%" y="261" width="0.1184%" height="15" fill="rgb(218,133,21)" fg:x="1685" fg:w="2"/><text x="100.0132%" y="271.50"></text></g><g><title>std::time::SystemTime::duration_since (1 samples, 0.06%)</title><rect x="99.8224%" y="245" width="0.0592%" height="15" fill="rgb(221,193,43)" fg:x="1686" fg:w="1"/><text x="100.0724%" y="255.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (1 samples, 0.06%)</title><rect x="99.8224%" y="229" width="0.0592%" height="15" fill="rgb(240,128,52)" fg:x="1686" fg:w="1"/><text x="100.0724%" y="239.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1 samples, 0.06%)</title><rect x="99.8224%" y="213" width="0.0592%" height="15" fill="rgb(253,114,12)" fg:x="1686" fg:w="1"/><text x="100.0724%" y="223.50"></text></g><g><title>core::time::Duration::new (1 samples, 0.06%)</title><rect x="99.8224%" y="197" width="0.0592%" height="15" fill="rgb(215,223,47)" fg:x="1686" fg:w="1"/><text x="100.0724%" y="207.50"></text></g><g><title>[unknown] (1,682 samples, 99.59%)</title><rect x="0.3552%" y="325" width="99.5856%" height="15" fill="rgb(248,225,23)" fg:x="6" fg:w="1682"/><text x="0.6052%" y="335.50">[unknown]</text></g><g><title>tftp::main (1 samples, 0.06%)</title><rect x="99.8816%" y="309" width="0.0592%" height="15" fill="rgb(250,108,0)" fg:x="1687" fg:w="1"/><text x="100.1316%" y="319.50"></text></g><g><title>clap::derive::Parser::parse (1 samples, 0.06%)</title><rect x="99.8816%" y="293" width="0.0592%" height="15" fill="rgb(228,208,7)" fg:x="1687" fg:w="1"/><text x="100.1316%" y="303.50"></text></g><g><title>&lt;tftp::cli::Args as clap::derive::FromArgMatches&gt;::from_arg_matches_mut (1 samples, 0.06%)</title><rect x="99.8816%" y="277" width="0.0592%" height="15" fill="rgb(244,45,10)" fg:x="1687" fg:w="1"/><text x="100.1316%" y="287.50"></text></g><g><title>clap::parser::matches::arg_matches::ArgMatches::remove_one (1 samples, 0.06%)</title><rect x="99.8816%" y="261" width="0.0592%" height="15" fill="rgb(207,125,25)" fg:x="1687" fg:w="1"/><text x="100.1316%" y="271.50"></text></g><g><title>clap::parser::matches::arg_matches::ArgMatches::try_remove_one (1 samples, 0.06%)</title><rect x="99.8816%" y="245" width="0.0592%" height="15" fill="rgb(210,195,18)" fg:x="1687" fg:w="1"/><text x="100.1316%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;clap::parser::matches::any_value::AnyValue&gt;&gt;&gt;,clap::parser::matches::arg_matches::unwrap_downcast_into&lt;heapless::string::String&lt;140_usize&gt;&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="99.8816%" y="229" width="0.0592%" height="15" fill="rgb(249,80,12)" fg:x="1687" fg:w="1"/><text x="100.1316%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;clap::parser::matches::any_value::AnyValue&gt;&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="99.8816%" y="213" width="0.0592%" height="15" fill="rgb(221,65,9)" fg:x="1687" fg:w="1"/><text x="100.1316%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::FlattenCompat&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;clap::parser::matches::any_value::AnyValue&gt;&gt;,alloc::vec::into_iter::IntoIter&lt;clap::parser::matches::any_value::AnyValue&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="99.8816%" y="197" width="0.0592%" height="15" fill="rgb(235,49,36)" fg:x="1687" fg:w="1"/><text x="100.1316%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::fuse::Fuse&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;clap::parser::matches::any_value::AnyValue&gt;&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="99.8816%" y="181" width="0.0592%" height="15" fill="rgb(225,32,20)" fg:x="1687" fg:w="1"/><text x="100.1316%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;clap::parser::matches::any_value::AnyValue&gt;&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="99.8816%" y="165" width="0.0592%" height="15" fill="rgb(215,141,46)" fg:x="1687" fg:w="1"/><text x="100.1316%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;clap::parser::matches::any_value::AnyValue&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="99.8816%" y="149" width="0.0592%" height="15" fill="rgb(250,160,47)" fg:x="1687" fg:w="1"/><text x="100.1316%" y="159.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="99.8816%" y="133" width="0.0592%" height="15" fill="rgb(216,222,40)" fg:x="1687" fg:w="1"/><text x="100.1316%" y="143.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (1 samples, 0.06%)</title><rect x="99.8816%" y="117" width="0.0592%" height="15" fill="rgb(234,217,39)" fg:x="1687" fg:w="1"/><text x="100.1316%" y="127.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (1 samples, 0.06%)</title><rect x="99.8816%" y="101" width="0.0592%" height="15" fill="rgb(207,178,40)" fg:x="1687" fg:w="1"/><text x="100.1316%" y="111.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (1 samples, 0.06%)</title><rect x="99.8816%" y="85" width="0.0592%" height="15" fill="rgb(221,136,13)" fg:x="1687" fg:w="1"/><text x="100.1316%" y="95.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.06%)</title><rect x="99.8816%" y="69" width="0.0592%" height="15" fill="rgb(249,199,10)" fg:x="1687" fg:w="1"/><text x="100.1316%" y="79.50"></text></g><g><title>&lt;T as core::option::SpecOptionPartialEq&gt;::eq (1 samples, 0.06%)</title><rect x="99.8816%" y="53" width="0.0592%" height="15" fill="rgb(249,222,13)" fg:x="1687" fg:w="1"/><text x="100.1316%" y="63.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (1 samples, 0.06%)</title><rect x="99.8816%" y="37" width="0.0592%" height="15" fill="rgb(244,185,38)" fg:x="1687" fg:w="1"/><text x="100.1316%" y="47.50"></text></g><g><title>all (1,689 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(236,202,9)" fg:x="0" fg:w="1689"/><text x="0.2500%" y="367.50"></text></g><g><title>tftp (1,689 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(250,229,37)" fg:x="0" fg:w="1689"/><text x="0.2500%" y="351.50">tftp</text></g><g><title>_start (1 samples, 0.06%)</title><rect x="99.9408%" y="325" width="0.0592%" height="15" fill="rgb(206,174,23)" fg:x="1688" fg:w="1"/><text x="100.1908%" y="335.50"></text></g><g><title>__libc_start_main (1 samples, 0.06%)</title><rect x="99.9408%" y="309" width="0.0592%" height="15" fill="rgb(211,33,43)" fg:x="1688" fg:w="1"/><text x="100.1908%" y="319.50"></text></g><g><title>[libc.so.6] (1 samples, 0.06%)</title><rect x="99.9408%" y="293" width="0.0592%" height="15" fill="rgb(245,58,50)" fg:x="1688" fg:w="1"/><text x="100.1908%" y="303.50"></text></g><g><title>main (1 samples, 0.06%)</title><rect x="99.9408%" y="277" width="0.0592%" height="15" fill="rgb(244,68,36)" fg:x="1688" fg:w="1"/><text x="100.1908%" y="287.50"></text></g><g><title>std::rt::lang_start (1 samples, 0.06%)</title><rect x="99.9408%" y="261" width="0.0592%" height="15" fill="rgb(232,229,15)" fg:x="1688" fg:w="1"/><text x="100.1908%" y="271.50"></text></g><g><title>std::rt::lang_start_internal (1 samples, 0.06%)</title><rect x="99.9408%" y="245" width="0.0592%" height="15" fill="rgb(254,30,23)" fg:x="1688" fg:w="1"/><text x="100.1908%" y="255.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.06%)</title><rect x="99.9408%" y="229" width="0.0592%" height="15" fill="rgb(235,160,14)" fg:x="1688" fg:w="1"/><text x="100.1908%" y="239.50"></text></g><g><title>std::panicking::try (1 samples, 0.06%)</title><rect x="99.9408%" y="213" width="0.0592%" height="15" fill="rgb(212,155,44)" fg:x="1688" fg:w="1"/><text x="100.1908%" y="223.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.06%)</title><rect x="99.9408%" y="197" width="0.0592%" height="15" fill="rgb(226,2,50)" fg:x="1688" fg:w="1"/><text x="100.1908%" y="207.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (1 samples, 0.06%)</title><rect x="99.9408%" y="181" width="0.0592%" height="15" fill="rgb(234,177,6)" fg:x="1688" fg:w="1"/><text x="100.1908%" y="191.50"></text></g><g><title>std::rt::init (1 samples, 0.06%)</title><rect x="99.9408%" y="165" width="0.0592%" height="15" fill="rgb(217,24,9)" fg:x="1688" fg:w="1"/><text x="100.1908%" y="175.50"></text></g><g><title>std::sys::unix::thread::guard::init (1 samples, 0.06%)</title><rect x="99.9408%" y="149" width="0.0592%" height="15" fill="rgb(220,13,46)" fg:x="1688" fg:w="1"/><text x="100.1908%" y="159.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start_aligned (1 samples, 0.06%)</title><rect x="99.9408%" y="133" width="0.0592%" height="15" fill="rgb(239,221,27)" fg:x="1688" fg:w="1"/><text x="100.1908%" y="143.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start (1 samples, 0.06%)</title><rect x="99.9408%" y="117" width="0.0592%" height="15" fill="rgb(222,198,25)" fg:x="1688" fg:w="1"/><text x="100.1908%" y="127.50"></text></g><g><title>pthread_getattr_np (1 samples, 0.06%)</title><rect x="99.9408%" y="101" width="0.0592%" height="15" fill="rgb(211,99,13)" fg:x="1688" fg:w="1"/><text x="100.1908%" y="111.50"></text></g><g><title>__isoc99_sscanf (1 samples, 0.06%)</title><rect x="99.9408%" y="85" width="0.0592%" height="15" fill="rgb(232,111,31)" fg:x="1688" fg:w="1"/><text x="100.1908%" y="95.50"></text></g><g><title>[libc.so.6] (1 samples, 0.06%)</title><rect x="99.9408%" y="69" width="0.0592%" height="15" fill="rgb(245,82,37)" fg:x="1688" fg:w="1"/><text x="100.1908%" y="79.50"></text></g><g><title>_IO_sputbackc (1 samples, 0.06%)</title><rect x="99.9408%" y="53" width="0.0592%" height="15" fill="rgb(227,149,46)" fg:x="1688" fg:w="1"/><text x="100.1908%" y="63.50"></text></g></svg></svg>